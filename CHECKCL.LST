Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 1
checkcl.ASM



      1	    0000			 model tiny
      2					 .386
      3	    0000			 .code
      4					 org 100h
      5	    0100			 start:
      6	    0100  E8 1C4F		     call parse_command_line
      7
      8
      9	    0103  0000			 current_max_entities dw 0
     10	    0105  2E 00			 root_folder db	'.', 00h
     11					 include clfunc.asm
1    12					 include pgraph.asm
2    13
2    14	    0107			 print_pseudographic_prefix:
2    15	    0107  5B			     pop bx
2    16	    0108  59			     pop cx	 ; deep	level
2    17	    0109  58			     pop ax	 ; entity count
2    18	    010A  53			     push bx
2    19
2    20	    010B  83 F9	00		     cmp cx, 0
2    21	    010E  74 0A	90 90		     je	_print_pseudographic_prefix_zero_level
2    22					     load <cx, ax>
4    23	    0112  51				 push cx
4    24	    0113  50				 push ax
2    25	    0114  B8 017Br		     mov ax, offset level_shift
**Error** pgraph.asm(11) Forward reference needs override
2    26
2    27	    0115  51			     push cx
2    28	    0116  50			     push ax
2    29	    0117  E8 0047		     call print_string_with_length
2    30					     restore <ax, cx>
4    31	    011A  58				 pop ax
4    32	    011B  59				 pop cx
2    33	    011C			 _print_pseudographic_prefix_zero_level:
**Error** pgraph.asm(17) Symbol	redefined or moved between passes: _PRINT_PSEUDOGRAPHIC_PREFIX_ZERO_LEVEL
2    34
2    35	    011C  8B 1E	0103r		     mov bx, word ptr [current_max_entities]
2    36	    0120  3A C3			     cmp al, bl
2    37	    0122  74 17			     je	_print_pseudographic_prefix_zero_level_end
2    38	    0124  3D 0001		     cmp ax, 1
2    39	    0127  75 0F	90 90		     jne _print_pseudographic_prefix_zero_level_middle
2    40	    012B  83 F9	00		     cmp cx, 0
2    41	    012E  74 05	90 90		     je	_print_pseudographic_prefix_zero_level_first
2    42	    0132  EB 04	90		     jmp _print_pseudographic_prefix_zero_level_middle
2    43	    0135			 _print_pseudographic_prefix_zero_level_first:
2    44					     print_range <first_file_char>
4    45						 print <offset first_file_char>
5    46	    0135  B4 09				 mov ah, 09h
5    47	    0137  BA 0197r			 mov dx, offset	first_file_char
5    48	    013A  CD 21				 int 21h
2    49	    013C  EB 00			     jmp _print_pseudographic_prefix_end
**Error** pgraph.asm(29) Forward reference needs override
2    50	    0138			 _print_pseudographic_prefix_zero_level_middle:
2    51					     print_range <middle_file_char>
4    52						 print <offset middle_file_char>
5    53	    0138  B4 09				 mov ah, 09h
5    54	    013A  BA 0199r			 mov dx, offset	middle_file_char
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 2
checkcl.ASM



5    55	    013D  CD 21				 int 21h
2    56	    013F  EB FD			     jmp _print_pseudographic_prefix_end
**Error** pgraph.asm(32) Forward reference needs override
2    57	    013B			 _print_pseudographic_prefix_zero_level_end:
2    58					     print_range <end_file_char>
4    59						 print <offset end_file_char>
5    60	    013B  B4 09				 mov ah, 09h
5    61	    013D  BA 019Br			 mov dx, offset	end_file_char
5    62	    0140  CD 21				 int 21h
2    63	    0142  EB FA			     jmp _print_pseudographic_prefix_end
**Error** pgraph.asm(35) Forward reference needs override
2    64	    013E			 _print_pseudographic_prefix_end:
2    65	    013E  C3			     ret
2    66
2    67	    013F			 set_level_shift:
2    68	    013F  5B			     pop bx
2    69	    0140  59			     pop cx  ; line level
2    70	    0141  53			     push bx
2    71
2    72	    0142  BB 017Br		     lea bx, level_shift
2    73	    0145  03 D9			     add bx, cx
2    74	    0147  A0 0190r		     mov al, byte ptr [space]
2    75	    014A  88 07			     mov byte ptr [bx],	al
2    76
2    77	    014C  B8 0001		     mov ax, 1
2    78
2    79	    014F  C3			     ret
2    80
2    81	    0150			 reset_level_shift:
2    82	    0150  5B			     pop bx
2    83	    0151  59			     pop cx  ; line level
2    84	    0152  53			     push bx
2    85
2    86	    0153  BB 017Br		     lea bx, level_shift
2    87	    0156  03 D9			     add bx, cx
2    88	    0158  A0 0179r		     mov al, byte ptr [old_level_shift]
2    89	    015B  88 07			     mov byte ptr [bx],	al
2    90
2    91	    015D  B8 0001		     mov ax, 1
2    92
2    93	    0160  C3			     ret
2    94
2    95	    0161			 print_string_with_length:
2    96	    0161  5B			     pop bx ; ret address
2    97	    0162  5E			     pop si ; string offset
2    98	    0163  59			     pop cx ; string length
2    99	    0164  53			     push bx; ret address
2   100	    0165  33 C0			     xor ax, ax
2   101	    0167			 _print_string_with_length_loop:
2   102	    0167  B4 02			     mov ah, 02h
2   103	    0169  8A 14			     mov dl, byte ptr [si]
2   104	    016B  CD 21			     int 21h
2   105	    016D  49			     dec cx
2   106	    016E  46			     inc si
2   107	    016F  83 F9	00		     cmp cx, 00h
2   108	    0172  74 04	90 90		     je	_print_string_with_length_end
2   109	    0176  EB EF			     jmp _print_string_with_length_loop
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 3
checkcl.ASM



2   110	    0178			 _print_string_with_length_end:
2   111	    0178  C3			     ret
2   112
2   113					 ;
2   114					 ;   pseudographic
2   115					 ;
2   116	    0179  B3 24			 old_level_shift db 179, '$'
2   117	    017B  14*(B3) 24		 level_shift db	20 dup(179), '$'
2   118	    0190  ?? 20	24		 space db, 32, '$'
2   119
2   120	    0193  C3 24			 zero_first_file db 195, '$'
2   121	    0195  C0 24			 zero_end_file db 192, '$'
2   122
2   123	    0197  C2 24			 first_file_char db 194, '$'
2   124	    0199  C3 24			 middle_file_char db 195, '$'
2   125	    019B  C0 24			 end_file_char db 192, '$'
2   126
1   127					 include parser.asm
2   128					 include macro.asm
3   129					 load macro args
3   130					     irp d,<args>
3   131						 push d
3   132					     endm
3   133					 endm
3   134
3   135					 restore macro args
3   136					     irp d,<args>
3   137						 pop d
3   138					     endm
3   139					 endm
3   140
3   141					 exit macro
3   142					     mov ah, 00h
3   143					     int 21h
3   144					 endm
3   145
3   146					 print macro buf
3   147						 mov ah, 09h
3   148						 mov dx, buf
3   149						 int 21h
3   150					 endm
3   151
3   152					 print_range macro args
3   153					     irp d,<args>
3   154						 print <offset d>
3   155					     endm
3   156					 endm
3   157
3   158					 push_fragment macro buf, length
3   159					     local l1
3   160					     lea di, buf
3   161					     mov cx, length
3   162					     xor bx, bx
3   163					 l1:
3   164					     mov bl, byte ptr [di]
3   165					     push bx
3   166					     inc di
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 4
checkcl.ASM



3   167					     dec cx
3   168					     cmp cx, 0
3   169					     jne l1
3   170					 endm
3   171
3   172					 pop_fragment macro buf, length
3   173					     local l1
3   174					     lea di, buf
3   175					     mov cx, length
3   176					     add di, cx
3   177					     dec di
3   178					     xor bx, bx
3   179					 l1:
3   180					     pop bx
3   181					     mov byte ptr [di],	bl
3   182					     dec di
3   183					     dec cx
3   184					     cmp cx, 0
3   185					     jne l1
3   186					 endm
3   187
3   188					 set_dta macro dta
3   189					     lea dx, dta
3   190					     xor ax, ax
3   191					     mov ah, 1Ah
3   192					     int 21h
3   193					 endm
3   194
3   195					 break_point macro arg
3   196					     load <arg>
3   197					     xor arg, arg
3   198					     xor arg, arg
3   199					     xor arg, arg
3   200					     xor arg, arg
3   201					     xor arg, arg
3   202					     xor arg, arg
3   203					     xor arg, arg
3   204					     xor arg, arg
3   205					     restore <arg>
3   206					 endm
3   207
3   208					 get_offset macro state
3   209					     xor dx, dx
3   210					     xor ax, ax
3   211					     mov al, state
3   212					     shl ax, 8
3   213					 endm get_offset
3   214
3   215					 to_non_space macro addr
3   216					     local l1, l2
3   217					     mov si, addr
3   218					 l1:
3   219					     mov byte ptr al, [si]
3   220					     cmp al, 20h
3   221					     je	l2
3   222					     cmp al, 0
3   223					     je	l2
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 5
checkcl.ASM



3   224					     inc si
3   225					     jmp l1
3   226					 l2:
3   227					     inc si
3   228					     mov ax, si
3   229					 endm
3   230
3   231					 set_transition	macro buf, from, to, char
3   232					     load<bx, dx>
3   233					     get_offset	from
3   234
3   235					     add ax, offset buf
3   236					     add ax, char
3   237
3   238					     mov bx, ax
3   239					     mov byte ptr [bx],	to
3   240					     restore<dx, bx>
3   241					 endm
3   242
3   243					 set_transition_length_from_start macro	buf, from, to, start, iterations
3   244					     local l1, end
3   245					     mov bx, start
3   246					     mov cx, iterations
3   247					 l1:
3   248					     cmp cx, 0
3   249					     je	end
3   250
3   251					     load <bx,cx>
3   252					     set_transition buf	from to	bx
3   253					     restore <cx,bx>
3   254
3   255					     inc bx
3   256					     dec cx
3   257					     jmp l1
3   258					 end:
3   259					 endm
3   260
3   261					 set_zero macro	state
3   262					     mov al, 0
3   263					     mov byte ptr [state], al
3   264					 endm
3   265
3   266					 set_transition_for_all	macro buf, from, to
3   267					     set_transition_length_from_start buf, from, to, 0,	255
3   268					 endm
3   269
3   270					 set_transition_for_digits macro buf, from, to
3   271					     set_transition_length_from_start buf, from, to, 30, 10
3   272					 endm
3   273
3   274					 set_transition_for_letters macro buf, from, to
3   275					     set_transition_length_from_start buf, from, to, 97, 26
3   276					     set_transition_length_from_start buf, from, to, 65, 26
3   277					 endm
3   278
3   279					 get_transition	macro buf, from, char
3   280					     load <dx>
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 6
checkcl.ASM



3   281					     get_offset	from
3   282					     restore <dx>
3   283
3   284					     add ax, offset buf
3   285					     add ax, char
3   286
3   287					     mov bx, ax
3   288					     xor ax, ax
3   289					     mov al, byte ptr [bx]
3   290					 endm
3   291
3   292					 put macro from, to, position
3   293					     xor dx, dx
3   294					     xor bx, bx
3   295
3   296					     mov dx, offset to
3   297					     mov bl, byte ptr [position]
3   298					     add dx, bx
3   299
3   300					     mov bl, byte ptr [from]
3   301					     mov byte ptr [edx], bl
3   302					     inc [position]
3   303					 endm
3   304
3   305					 clear_mes macro mes, lastidx
3   306					     local l1, end
3   307					     mov bx, offset mes
3   308					     mov cl, byte ptr [lastidx]
3   309					     inc cl
3   310					 l1:
3   311					     cmp cl, 0
3   312					     je	end
3   313					     mov byte ptr [bx],	'$'
3   314					     inc bx
3   315					     dec cl
3   316					     jmp l1
3   317					 end:
3   318					     mov bl, 0
3   319					     mov byte ptr [lastidx], bl
3   320					 endm
2   321					 include ffile.asm
3   322	    019D			 read_from_file:
3   323	    019D  58			     pop ax
3   324	    019E  5B			     pop bx ; file handler
3   325	    019F  59			     pop cx ; read count
3   326	    01A0  5A			     pop dx ; buffer for writing
3   327	    01A1  50			     push ax
3   328
3   329	    01A2  B4 3F			     mov ah, 3fh
3   330	    01A4  CD 21			     int 21h
3   331	    01A6  73 35	90 90		     jnc _read_form_file_end
3   332	    01AA  3D 0005		     cmp ax, 5
3   333	    01AD  74 0C	90 90		     je	ll5
3   334	    01B1  3D 0006		     cmp ax, 6
3   335	    01B4  74 16	90 90		     je	ll6
3   336	    01B8  EB 23	90		     jmp _read_form_file_end
3   337	    01BB			 ll5:
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 7
checkcl.ASM



3   338					     print_range <read_err_5, file_newline>
5   339						 print <offset read_err_5>
6   340	    01BB  B4 09				 mov ah, 09h
6   341	    01BD  BA 0311r			 mov dx, offset	read_err_5
6   342	    01C0  CD 21				 int 21h
5   343						 print <offset file_newline>
6   344	    01C2  B4 09				 mov ah, 09h
6   345	    01C4  BA 032Er			 mov dx, offset	file_newline
6   346	    01C7  CD 21				 int 21h
3   347	    01C9  EB 12	90		     jmp _read_form_file_end
3   348	    01CC			 ll6:
3   349					     print_range <read_err_6, file_newline>
5   350						 print <offset read_err_6>
6   351	    01CC  B4 09				 mov ah, 09h
6   352	    01CE  BA 031Fr			 mov dx, offset	read_err_6
6   353	    01D1  CD 21				 int 21h
5   354						 print <offset file_newline>
6   355	    01D3  B4 09				 mov ah, 09h
6   356	    01D5  BA 032Er			 mov dx, offset	file_newline
6   357	    01D8  CD 21				 int 21h
3   358	    01DA  EB 01	90		     jmp _read_form_file_end
3   359	    01DD			 _read_form_file_end:
3   360	    01DD  C3			     ret
3   361
3   362	    01DE			 close_file:
3   363	    01DE  58			     pop ax
3   364	    01DF  5B			     pop bx ; file handler
3   365	    01E0  50			     push ax
3   366	    01E1  B4 3E			     mov ah, 3eh
3   367	    01E3  CD 21			     int 21h
3   368	    01E5  73 10	90 90		     jnc _close_file_end
3   369					     print_range <close_err_6, file_newline>
5   370						 print <offset close_err_6>
6   371	    01E9  B4 09				 mov ah, 09h
6   372	    01EB  BA 0302r			 mov dx, offset	close_err_6
6   373	    01EE  CD 21				 int 21h
5   374						 print <offset file_newline>
6   375	    01F0  B4 09				 mov ah, 09h
6   376	    01F2  BA 032Er			 mov dx, offset	file_newline
6   377	    01F5  CD 21				 int 21h
3   378	    01F7			 _close_file_end:
3   379	    01F7  C3			     ret
3   380
3   381	    01F8			 open_read:
3   382	    01F8  5B			     pop bx
3   383	    01F9  5A			     pop dx ; filename pointer
3   384	    01FA  53			     push bx
3   385	    01FB  B4 3D			     mov ah, 3Dh
3   386	    01FD  B0 00			     mov al, 0
3   387	    01FF  CD 21			     int 21h
3   388	    0201  0F 83	0093		     jnc _open_read_end
3   389	    0205  3D 0001		     cmp ax, 1
3   390	    0208  74 28	90 90		     je	l1
3   391	    020C  3D 0002		     cmp ax, 2
3   392	    020F  74 32	90 90		     je	l2
3   393	    0213  3D 0003		     cmp ax, 3
3   394	    0216  74 3C	90 90		     je	l3
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 8
checkcl.ASM



3   395	    021A  3D 0004		     cmp ax, 4
3   396	    021D  74 46	90 90		     je	l4
3   397	    0221  3D 0005		     cmp ax, 5
3   398	    0224  74 50	90 90		     je	l5
3   399	    0228  3D 000C		     cmp ax, 12
3   400	    022B  74 5A	90 90		     je	l12
3   401	    022F  EB 67	90		     jmp _open_read_end
3   402	    0232			 l1:
3   403					     print_range <open_err_1, file_newline>
5   404						 print <offset open_err_1>
6   405	    0232  B4 09				 mov ah, 09h
6   406	    0234  BA 0299r			 mov dx, offset	open_err_1
6   407	    0237  CD 21				 int 21h
5   408						 print <offset file_newline>
6   409	    0239  B4 09				 mov ah, 09h
6   410	    023B  BA 032Er			 mov dx, offset	file_newline
6   411	    023E  CD 21				 int 21h
3   412	    0240  EB 56	90		     jmp _open_read_end
3   413	    0243			 l2:
3   414					     print_range <open_err_2, file_newline>
5   415						 print <offset open_err_2>
6   416	    0243  B4 09				 mov ah, 09h
6   417	    0245  BA 02B1r			 mov dx, offset	open_err_2
6   418	    0248  CD 21				 int 21h
5   419						 print <offset file_newline>
6   420	    024A  B4 09				 mov ah, 09h
6   421	    024C  BA 032Er			 mov dx, offset	file_newline
6   422	    024F  CD 21				 int 21h
3   423	    0251  EB 45	90		     jmp _open_read_end
3   424	    0254			 l3:
3   425					     print_range <open_err_3, file_newline>
5   426						 print <offset open_err_3>
6   427	    0254  B4 09				 mov ah, 09h
6   428	    0256  BA 02C0r			 mov dx, offset	open_err_3
6   429	    0259  CD 21				 int 21h
5   430						 print <offset file_newline>
6   431	    025B  B4 09				 mov ah, 09h
6   432	    025D  BA 032Er			 mov dx, offset	file_newline
6   433	    0260  CD 21				 int 21h
3   434	    0262  EB 34	90		     jmp _open_read_end
3   435	    0265			 l4:
3   436					     print_range <open_err_4, file_newline>
5   437						 print <offset open_err_4>
6   438	    0265  B4 09				 mov ah, 09h
6   439	    0267  BA 02CFr			 mov dx, offset	open_err_4
6   440	    026A  CD 21				 int 21h
5   441						 print <offset file_newline>
6   442	    026C  B4 09				 mov ah, 09h
6   443	    026E  BA 032Er			 mov dx, offset	file_newline
6   444	    0271  CD 21				 int 21h
3   445	    0273  EB 23	90		     jmp _open_read_end
3   446	    0276			 l5:
3   447					     print_range <open_err_5, file_newline>
5   448						 print <offset open_err_5>
6   449	    0276  B4 09				 mov ah, 09h
6   450	    0278  BA 02E2r			 mov dx, offset	open_err_5
6   451	    027B  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 9
checkcl.ASM



5   452						 print <offset file_newline>
6   453	    027D  B4 09				 mov ah, 09h
6   454	    027F  BA 032Er			 mov dx, offset	file_newline
6   455	    0282  CD 21				 int 21h
3   456	    0284  EB 12	90		     jmp _open_read_end
3   457	    0287			 l12:
3   458					     print_range <open_err_12, file_newline>
5   459						 print <offset open_err_12>
6   460	    0287  B4 09				 mov ah, 09h
6   461	    0289  BA 02F0r			 mov dx, offset	open_err_12
6   462	    028C  CD 21				 int 21h
5   463						 print <offset file_newline>
6   464	    028E  B4 09				 mov ah, 09h
6   465	    0290  BA 032Er			 mov dx, offset	file_newline
6   466	    0293  CD 21				 int 21h
3   467	    0295  EB 01	90		     jmp _open_read_end
3   468
3   469	    0298			 _open_read_end:
3   470	    0298  C3			     ret
3   471					 ;
3   472					 ; error codes
3   473					 ;
3   474	    0299  66 75	6E 63 74 69 6F+	 open_err_1 db 'function number	invalid$'
    475		  6E 20	6E 75 6D 62 65+
    476		  72 20	69 6E 76 61 6C+
    477		  69 64	24
3   478	    02B1  66 69	6C 65 20 6E 6F+	 open_err_2 db 'file not found$'
    479		  74 20	66 6F 75 6E 64+
    480		  24
3   481	    02C0  70 61	74 68 20 6E 6F+	 open_err_3 db 'path not found$'
    482		  74 20	66 6F 75 6E 64+
    483		  24
3   484	    02CF  6E 6F	20 68 61 6E 64+	 open_err_4 db 'no handle avaiable$'
    485		  6C 65	20 61 76 61 69+
    486		  61 62	6C 65 24
3   487	    02E2  61 63	63 65 73 73 20+	 open_err_5 db 'access denied$'
    488		  64 65	6E 69 65 64 24
3   489	    02F0  6F 70	65 6E 20 6D 6F+	 open_err_12 db	'open mode invalid$'
    490		  64 65	20 69 6E 76 61+
    491		  6C 69	64 24
3   492
3   493	    0302  69 6E	76 61 6C 69 64+	 close_err_6 db	'invalid handle$'
    494		  20 68	61 6E 64 6C 65+
    495		  24
3   496
3   497	    0311  61 63	63 65 73 73 20+	 read_err_5 db 'access denied$'
    498		  64 65	6E 69 65 64 24
3   499	    031F  69 6E	76 61 6C 69 64+	 read_err_6 db 'invalid	handle$'
    500		  20 68	61 6E 64 6C 65+
    501		  24
3   502					 ;
3   503					 ; constants
3   504					 ;
3   505	    032E  0A 24			 file_newline db 0ah, '$'
2   506
2   507	    0330			 parse_file_from:
2   508	    0330  E8 00D9		     call create_first_transition_table
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 10
checkcl.ASM



2   509	    0333  E8 0163		     call create_middle_transition_table
2   510	    0336  E8 01ED		     call create_last_transition_table
2   511	    0339  E8 0277		     call create_level_shift_transition_table
2   512	    033C  E8 0301		     call create_space_transition_table
2   513
2   514	    033F  5B			     pop bx  ; ret address
2   515	    0340  5A			     pop dx  ; filename	pointer
2   516	    0341  53			     push bx
2   517	    0342  52			     push dx
2   518	    0343  E8 FEB2		     call open_read
2   519	    0346  72 10	90 90		     jc	ext
2   520					     load <ax>
4   521	    034A  50				 push ax
2   522	    034B  50			     push ax
2   523	    034C  E8 000A		     call parse_file
2   524					     restore <ax>
4   525	    034F  58				 pop ax
2   526	    0350  50			     push ax
2   527	    0351  E8 FE8A		     call close_file
2   528	    0354  72 02	90 90		     jc	ext
2   529	    0358			 ext:
2   530	    0358  C3			     ret
2   531
2   532	    0359			 parse_file:
2   533	    0359  5B			     pop bx
2   534	    035A  58			     pop ax ; file handler
2   535	    035B  53			     push bx
2   536
2   537					     load <ax>
4   538	    035C  50				 push ax
2   539	    035D			 _parse_file_loop:
2   540	    035D  B9 0001		     mov cx, 1
2   541	    0360  BA 073Fr		     lea dx, buf
2   542					     restore <ax>
4   543	    0363  58				 pop ax
2   544					     load <ax>
4   545	    0364  50				 push ax
2   546	    0365  52			     push dx
2   547	    0366  51			     push cx
2   548	    0367  50			     push ax
2   549	    0368  E8 FE32		     call read_from_file
2   550	    036B  0F 82	009B		     jc	_parse_file_ext
2   551	    036F  3D 0000		     cmp ax, 0
2   552	    0372  0F 84	0094		     je	_parse_file_ext
2   553	    0376  33 D2			     xor dx, dx
2   554	    0378  8A 16	073Fr		     mov dl, byte ptr [buf]
2   555	    037C  8A 1E	073Er		     mov bl, byte ptr [state]
2   556					     get_transition transition_table, bl, dx
3   557					     load <dx>
5   558	    0380  52				 push dx
3   559					     get_offset	bl
4   560	    0381  33 D2			     xor dx, dx
4   561	    0383  33 C0			     xor ax, ax
4   562	    0385  8A C3			     mov al, bl
4   563	    0387  C1 E0	08		     shl ax, 8
3   564					     restore <dx>
5   565	    038A  5A				 pop dx
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 11
checkcl.ASM



3   566	    038B  05 0741r		     add ax, offset transition_table
3   567	    038E  03 C2			     add ax, dx
3   568	    0390  8B D8			     mov bx, ax
3   569	    0392  33 C0			     xor ax, ax
3   570	    0394  8A 07			     mov al, byte ptr [bx]
2   571	    0396  80 FA	00		     cmp dl, 0
2   572	    0399  75 19	90 90		     jne _parse_file_next
2   573	    039D  3C 00			     cmp al, 0
2   574	    039F  75 13	90 90		     jne _parse_file_next
2   575					     print_range <parse_error, parse_newline>
4   576						 print <offset parse_error>
5   577	    03A3  B4 09				 mov ah, 09h
5   578	    03A5  BA 06CDr			 mov dx, offset	parse_error
5   579	    03A8  CD 21				 int 21h
4   580						 print <offset parse_newline>
5   581	    03AA  B4 09				 mov ah, 09h
5   582	    03AC  BA 0732r			 mov dx, offset	parse_newline
5   583	    03AF  CD 21				 int 21h
2   584	    03B1  EB 57	90		     jmp _parse_file_ext
2   585	    03B4			 _parse_file_next:
2   586	    03B4  A2 073Er		     mov byte ptr [state], al
2   587	    03B7  3A 06	06EBr		     cmp al, byte ptr [first_terminal]
2   588	    03BB  75 0A	90 90		     jne _parse_file_next_terminal_1
2   589	    03BF  A0 073Fr		     mov al, byte ptr [buf]
2   590	    03C2  A2 0734r		     mov byte ptr [fp],	al
2   591					     ; print_range <first_parsed, buf, open_newline>
2   592	    03C5  EB 96			     jmp _parse_file_loop
2   593	    03C7			 _parse_file_next_terminal_1:
2   594	    03C7  3A 06	06ECr		     cmp al, byte ptr [middle_terminal]
2   595	    03CB  75 0A	90 90		     jne _parse_file_next_terminal_2
2   596	    03CF  A0 073Fr		     mov al, byte ptr [buf]
2   597	    03D2  A2 0736r		     mov byte ptr [mp],	al
2   598					     ; print_range <middle_parsed, buf,	open_newline>
2   599	    03D5  EB 86			     jmp _parse_file_loop
2   600	    03D7			 _parse_file_next_terminal_2:
2   601	    03D7  3A 06	06EDr		     cmp al, byte ptr [last_terminal]
2   602	    03DB  75 0B	90 90		     jne _parse_file_next_terminal_3
2   603	    03DF  A0 073Fr		     mov al, byte ptr [buf]
2   604	    03E2  A2 0738r		     mov byte ptr [lp],	al
2   605					     ; print_range <last_parsed, buf, open_newline>
2   606	    03E5  E9 FF75		     jmp _parse_file_loop
2   607	    03E8			 _parse_file_next_terminal_3:
2   608	    03E8  3A 06	06EEr		     cmp al, byte ptr [level_shift_terminal]
2   609	    03EC  75 0B	90 90		     jne _parse_file_next_terminal_4
2   610	    03F0  A0 073Fr		     mov al, byte ptr [buf]
2   611	    03F3  A2 073Ar		     mov byte ptr [lhp], al
2   612					     ; print_range <last_parsed, buf, open_newline>
2   613	    03F6  E9 FF64		     jmp _parse_file_loop
2   614	    03F9			 _parse_file_next_terminal_4:
2   615	    03F9  3A 06	06EFr		     cmp al, byte ptr [space_terminal]
2   616	    03FD  0F 85	FF5C		     jne _parse_file_loop
2   617	    0401  A0 073Fr		     mov al, byte ptr [buf]
2   618	    0404  A2 073Cr		     mov byte ptr [spac], al
2   619					     ; print_range <last_parsed, buf, open_newline>
2   620	    0407  E9 FF53		     jmp _parse_file_loop
2   621
2   622	    040A			 _parse_file_ext:
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 12
checkcl.ASM



2   623					     restore <bx>
4   624	    040A  5B				 pop bx
2   625	    040B  C3			     ret
2   626
2   627	    040C			 create_first_transition_table:
2   628					     set_transition transition_table 0 1 'f'
3   629					     load<bx, dx>
5   630	    040C  53				 push bx
5   631	    040D  52				 push dx
3   632					     get_offset	0
4   633	    040E  33 D2			     xor dx, dx
4   634	    0410  33 C0			     xor ax, ax
4   635	    0412  B0 00			     mov al, 0
4   636	    0414  C1 E0	08		     shl ax, 8
3   637	    0417  05 0741r		     add ax, offset transition_table
3   638	    041A  05 0066		     add ax, 'f'
3   639	    041D  8B D8			     mov bx, ax
3   640	    041F  C6 07	01		     mov byte ptr [bx],	1
3   641					     restore<dx, bx>
5   642	    0422  5A				 pop dx
5   643	    0423  5B				 pop bx
2   644					     set_transition transition_table 1 2 ':'
3   645					     load<bx, dx>
5   646	    0424  53				 push bx
5   647	    0425  52				 push dx
3   648					     get_offset	1
4   649	    0426  33 D2			     xor dx, dx
4   650	    0428  33 C0			     xor ax, ax
4   651	    042A  B0 01			     mov al, 1
4   652	    042C  C1 E0	08		     shl ax, 8
3   653	    042F  05 0741r		     add ax, offset transition_table
3   654	    0432  05 003A		     add ax, ':'
3   655	    0435  8B D8			     mov bx, ax
3   656	    0437  C6 07	02		     mov byte ptr [bx],	2
3   657					     restore<dx, bx>
5   658	    043A  5A				 pop dx
5   659	    043B  5B				 pop bx
2   660					     set_transition transition_table 2 3 ' '
3   661					     load<bx, dx>
5   662	    043C  53				 push bx
5   663	    043D  52				 push dx
3   664					     get_offset	2
4   665	    043E  33 D2			     xor dx, dx
4   666	    0440  33 C0			     xor ax, ax
4   667	    0442  B0 02			     mov al, 2
4   668	    0444  C1 E0	08		     shl ax, 8
3   669	    0447  05 0741r		     add ax, offset transition_table
3   670	    044A  05 0020		     add ax, ' '
3   671	    044D  8B D8			     mov bx, ax
3   672	    044F  C6 07	03		     mov byte ptr [bx],	3
3   673					     restore<dx, bx>
5   674	    0452  5A				 pop dx
5   675	    0453  5B				 pop bx
2   676					     set_transition_for_all transition_table 3 4
3   677					     set_transition_length_from_start transition_table,	3, 4, 0, 255
4   678	    0454  BB 0000		     mov bx, 0
4   679	    0457  B9 00FF		     mov cx, 255
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 13
checkcl.ASM



4   680	    045A			 ??0000:
4   681	    045A  83 F9	00		     cmp cx, 0
4   682	    045D  74 21	90 90		     je	??0001
4   683					     load <bx,cx>
6   684	    0461  53				 push bx
6   685	    0462  51				 push cx
4   686					     set_transition transition_table 3 4 bx
5   687					     load<bx, dx>
7   688	    0463  53				 push bx
7   689	    0464  52				 push dx
5   690					     get_offset	3
6   691	    0465  33 D2			     xor dx, dx
6   692	    0467  33 C0			     xor ax, ax
6   693	    0469  B0 03			     mov al, 3
6   694	    046B  C1 E0	08		     shl ax, 8
5   695	    046E  05 0741r		     add ax, offset transition_table
5   696	    0471  03 C3			     add ax, bx
5   697	    0473  8B D8			     mov bx, ax
5   698	    0475  C6 07	04		     mov byte ptr [bx],	4
5   699					     restore<dx, bx>
7   700	    0478  5A				 pop dx
7   701	    0479  5B				 pop bx
4   702					     restore <cx,bx>
6   703	    047A  59				 pop cx
6   704	    047B  5B				 pop bx
4   705	    047C  43			     inc bx
4   706	    047D  49			     dec cx
4   707	    047E  EB DA			     jmp ??0000
4   708	    0480			 ??0001:
2   709					     set_transition transition_table 4 0 0ah
3   710					     load<bx, dx>
5   711	    0480  53				 push bx
5   712	    0481  52				 push dx
3   713					     get_offset	4
4   714	    0482  33 D2			     xor dx, dx
4   715	    0484  33 C0			     xor ax, ax
4   716	    0486  B0 04			     mov al, 4
4   717	    0488  C1 E0	08		     shl ax, 8
3   718	    048B  05 0741r		     add ax, offset transition_table
3   719	    048E  05 000A		     add ax, 0ah
3   720	    0491  8B D8			     mov bx, ax
3   721	    0493  C6 07	00		     mov byte ptr [bx],	0
3   722					     restore<dx, bx>
5   723	    0496  5A				 pop dx
5   724	    0497  5B				 pop bx
2   725	    0498  C3			     ret
2   726
2   727	    0499			 create_middle_transition_table:
2   728					     set_transition transition_table 0 5 'm'
3   729					     load<bx, dx>
5   730	    0499  53				 push bx
5   731	    049A  52				 push dx
3   732					     get_offset	0
4   733	    049B  33 D2			     xor dx, dx
4   734	    049D  33 C0			     xor ax, ax
4   735	    049F  B0 00			     mov al, 0
4   736	    04A1  C1 E0	08		     shl ax, 8
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 14
checkcl.ASM



3   737	    04A4  05 0741r		     add ax, offset transition_table
3   738	    04A7  05 006D		     add ax, 'm'
3   739	    04AA  8B D8			     mov bx, ax
3   740	    04AC  C6 07	05		     mov byte ptr [bx],	5
3   741					     restore<dx, bx>
5   742	    04AF  5A				 pop dx
5   743	    04B0  5B				 pop bx
2   744					     set_transition transition_table 5 6 ':'
3   745					     load<bx, dx>
5   746	    04B1  53				 push bx
5   747	    04B2  52				 push dx
3   748					     get_offset	5
4   749	    04B3  33 D2			     xor dx, dx
4   750	    04B5  33 C0			     xor ax, ax
4   751	    04B7  B0 05			     mov al, 5
4   752	    04B9  C1 E0	08		     shl ax, 8
3   753	    04BC  05 0741r		     add ax, offset transition_table
3   754	    04BF  05 003A		     add ax, ':'
3   755	    04C2  8B D8			     mov bx, ax
3   756	    04C4  C6 07	06		     mov byte ptr [bx],	6
3   757					     restore<dx, bx>
5   758	    04C7  5A				 pop dx
5   759	    04C8  5B				 pop bx
2   760					     set_transition transition_table 6 7 ' '
3   761					     load<bx, dx>
5   762	    04C9  53				 push bx
5   763	    04CA  52				 push dx
3   764					     get_offset	6
4   765	    04CB  33 D2			     xor dx, dx
4   766	    04CD  33 C0			     xor ax, ax
4   767	    04CF  B0 06			     mov al, 6
4   768	    04D1  C1 E0	08		     shl ax, 8
3   769	    04D4  05 0741r		     add ax, offset transition_table
3   770	    04D7  05 0020		     add ax, ' '
3   771	    04DA  8B D8			     mov bx, ax
3   772	    04DC  C6 07	07		     mov byte ptr [bx],	7
3   773					     restore<dx, bx>
5   774	    04DF  5A				 pop dx
5   775	    04E0  5B				 pop bx
2   776					     set_transition_for_all transition_table 7 8
3   777					     set_transition_length_from_start transition_table,	7, 8, 0, 255
4   778	    04E1  BB 0000		     mov bx, 0
4   779	    04E4  B9 00FF		     mov cx, 255
4   780	    04E7			 ??0002:
4   781	    04E7  83 F9	00		     cmp cx, 0
4   782	    04EA  74 21	90 90		     je	??0003
4   783					     load <bx,cx>
6   784	    04EE  53				 push bx
6   785	    04EF  51				 push cx
4   786					     set_transition transition_table 7 8 bx
5   787					     load<bx, dx>
7   788	    04F0  53				 push bx
7   789	    04F1  52				 push dx
5   790					     get_offset	7
6   791	    04F2  33 D2			     xor dx, dx
6   792	    04F4  33 C0			     xor ax, ax
6   793	    04F6  B0 07			     mov al, 7
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 15
checkcl.ASM



6   794	    04F8  C1 E0	08		     shl ax, 8
5   795	    04FB  05 0741r		     add ax, offset transition_table
5   796	    04FE  03 C3			     add ax, bx
5   797	    0500  8B D8			     mov bx, ax
5   798	    0502  C6 07	08		     mov byte ptr [bx],	8
5   799					     restore<dx, bx>
7   800	    0505  5A				 pop dx
7   801	    0506  5B				 pop bx
4   802					     restore <cx,bx>
6   803	    0507  59				 pop cx
6   804	    0508  5B				 pop bx
4   805	    0509  43			     inc bx
4   806	    050A  49			     dec cx
4   807	    050B  EB DA			     jmp ??0002
4   808	    050D			 ??0003:
2   809					     set_transition transition_table 8 0 0ah
3   810					     load<bx, dx>
5   811	    050D  53				 push bx
5   812	    050E  52				 push dx
3   813					     get_offset	8
4   814	    050F  33 D2			     xor dx, dx
4   815	    0511  33 C0			     xor ax, ax
4   816	    0513  B0 08			     mov al, 8
4   817	    0515  C1 E0	08		     shl ax, 8
3   818	    0518  05 0741r		     add ax, offset transition_table
3   819	    051B  05 000A		     add ax, 0ah
3   820	    051E  8B D8			     mov bx, ax
3   821	    0520  C6 07	00		     mov byte ptr [bx],	0
3   822					     restore<dx, bx>
5   823	    0523  5A				 pop dx
5   824	    0524  5B				 pop bx
2   825	    0525  C3			     ret
2   826
2   827	    0526			 create_last_transition_table:
2   828					     set_transition transition_table 0 9 'l'
3   829					     load<bx, dx>
5   830	    0526  53				 push bx
5   831	    0527  52				 push dx
3   832					     get_offset	0
4   833	    0528  33 D2			     xor dx, dx
4   834	    052A  33 C0			     xor ax, ax
4   835	    052C  B0 00			     mov al, 0
4   836	    052E  C1 E0	08		     shl ax, 8
3   837	    0531  05 0741r		     add ax, offset transition_table
3   838	    0534  05 006C		     add ax, 'l'
3   839	    0537  8B D8			     mov bx, ax
3   840	    0539  C6 07	09		     mov byte ptr [bx],	9
3   841					     restore<dx, bx>
5   842	    053C  5A				 pop dx
5   843	    053D  5B				 pop bx
2   844					     set_transition transition_table 9 10 ':'
3   845					     load<bx, dx>
5   846	    053E  53				 push bx
5   847	    053F  52				 push dx
3   848					     get_offset	9
4   849	    0540  33 D2			     xor dx, dx
4   850	    0542  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 16
checkcl.ASM



4   851	    0544  B0 09			     mov al, 9
4   852	    0546  C1 E0	08		     shl ax, 8
3   853	    0549  05 0741r		     add ax, offset transition_table
3   854	    054C  05 003A		     add ax, ':'
3   855	    054F  8B D8			     mov bx, ax
3   856	    0551  C6 07	0A		     mov byte ptr [bx],	10
3   857					     restore<dx, bx>
5   858	    0554  5A				 pop dx
5   859	    0555  5B				 pop bx
2   860					     set_transition transition_table 10	11 ' '
3   861					     load<bx, dx>
5   862	    0556  53				 push bx
5   863	    0557  52				 push dx
3   864					     get_offset	10
4   865	    0558  33 D2			     xor dx, dx
4   866	    055A  33 C0			     xor ax, ax
4   867	    055C  B0 0A			     mov al, 10
4   868	    055E  C1 E0	08		     shl ax, 8
3   869	    0561  05 0741r		     add ax, offset transition_table
3   870	    0564  05 0020		     add ax, ' '
3   871	    0567  8B D8			     mov bx, ax
3   872	    0569  C6 07	0B		     mov byte ptr [bx],	11
3   873					     restore<dx, bx>
5   874	    056C  5A				 pop dx
5   875	    056D  5B				 pop bx
2   876					     set_transition_for_all transition_table 11	12
3   877					     set_transition_length_from_start transition_table,	11, 12,	0, 255
4   878	    056E  BB 0000		     mov bx, 0
4   879	    0571  B9 00FF		     mov cx, 255
4   880	    0574			 ??0004:
4   881	    0574  83 F9	00		     cmp cx, 0
4   882	    0577  74 21	90 90		     je	??0005
4   883					     load <bx,cx>
6   884	    057B  53				 push bx
6   885	    057C  51				 push cx
4   886					     set_transition transition_table 11	12 bx
5   887					     load<bx, dx>
7   888	    057D  53				 push bx
7   889	    057E  52				 push dx
5   890					     get_offset	11
6   891	    057F  33 D2			     xor dx, dx
6   892	    0581  33 C0			     xor ax, ax
6   893	    0583  B0 0B			     mov al, 11
6   894	    0585  C1 E0	08		     shl ax, 8
5   895	    0588  05 0741r		     add ax, offset transition_table
5   896	    058B  03 C3			     add ax, bx
5   897	    058D  8B D8			     mov bx, ax
5   898	    058F  C6 07	0C		     mov byte ptr [bx],	12
5   899					     restore<dx, bx>
7   900	    0592  5A				 pop dx
7   901	    0593  5B				 pop bx
4   902					     restore <cx,bx>
6   903	    0594  59				 pop cx
6   904	    0595  5B				 pop bx
4   905	    0596  43			     inc bx
4   906	    0597  49			     dec cx
4   907	    0598  EB DA			     jmp ??0004
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 17
checkcl.ASM



4   908	    059A			 ??0005:
2   909					     set_transition transition_table 12	0 0ah
3   910					     load<bx, dx>
5   911	    059A  53				 push bx
5   912	    059B  52				 push dx
3   913					     get_offset	12
4   914	    059C  33 D2			     xor dx, dx
4   915	    059E  33 C0			     xor ax, ax
4   916	    05A0  B0 0C			     mov al, 12
4   917	    05A2  C1 E0	08		     shl ax, 8
3   918	    05A5  05 0741r		     add ax, offset transition_table
3   919	    05A8  05 000A		     add ax, 0ah
3   920	    05AB  8B D8			     mov bx, ax
3   921	    05AD  C6 07	00		     mov byte ptr [bx],	0
3   922					     restore<dx, bx>
5   923	    05B0  5A				 pop dx
5   924	    05B1  5B				 pop bx
2   925	    05B2  C3			     ret
2   926
2   927	    05B3			 create_level_shift_transition_table:
2   928					     set_transition transition_table 9 14 'h'
3   929					     load<bx, dx>
5   930	    05B3  53				 push bx
5   931	    05B4  52				 push dx
3   932					     get_offset	9
4   933	    05B5  33 D2			     xor dx, dx
4   934	    05B7  33 C0			     xor ax, ax
4   935	    05B9  B0 09			     mov al, 9
4   936	    05BB  C1 E0	08		     shl ax, 8
3   937	    05BE  05 0741r		     add ax, offset transition_table
3   938	    05C1  05 0068		     add ax, 'h'
3   939	    05C4  8B D8			     mov bx, ax
3   940	    05C6  C6 07	0E		     mov byte ptr [bx],	14
3   941					     restore<dx, bx>
5   942	    05C9  5A				 pop dx
5   943	    05CA  5B				 pop bx
2   944					     set_transition transition_table 14	15 ':'
3   945					     load<bx, dx>
5   946	    05CB  53				 push bx
5   947	    05CC  52				 push dx
3   948					     get_offset	14
4   949	    05CD  33 D2			     xor dx, dx
4   950	    05CF  33 C0			     xor ax, ax
4   951	    05D1  B0 0E			     mov al, 14
4   952	    05D3  C1 E0	08		     shl ax, 8
3   953	    05D6  05 0741r		     add ax, offset transition_table
3   954	    05D9  05 003A		     add ax, ':'
3   955	    05DC  8B D8			     mov bx, ax
3   956	    05DE  C6 07	0F		     mov byte ptr [bx],	15
3   957					     restore<dx, bx>
5   958	    05E1  5A				 pop dx
5   959	    05E2  5B				 pop bx
2   960					     set_transition transition_table 15	16 ' '
3   961					     load<bx, dx>
5   962	    05E3  53				 push bx
5   963	    05E4  52				 push dx
3   964					     get_offset	15
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 18
checkcl.ASM



4   965	    05E5  33 D2			     xor dx, dx
4   966	    05E7  33 C0			     xor ax, ax
4   967	    05E9  B0 0F			     mov al, 15
4   968	    05EB  C1 E0	08		     shl ax, 8
3   969	    05EE  05 0741r		     add ax, offset transition_table
3   970	    05F1  05 0020		     add ax, ' '
3   971	    05F4  8B D8			     mov bx, ax
3   972	    05F6  C6 07	10		     mov byte ptr [bx],	16
3   973					     restore<dx, bx>
5   974	    05F9  5A				 pop dx
5   975	    05FA  5B				 pop bx
2   976					     set_transition_for_all transition_table 16	17
3   977					     set_transition_length_from_start transition_table,	16, 17,	0, 255
4   978	    05FB  BB 0000		     mov bx, 0
4   979	    05FE  B9 00FF		     mov cx, 255
4   980	    0601			 ??0006:
4   981	    0601  83 F9	00		     cmp cx, 0
4   982	    0604  74 21	90 90		     je	??0007
4   983					     load <bx,cx>
6   984	    0608  53				 push bx
6   985	    0609  51				 push cx
4   986					     set_transition transition_table 16	17 bx
5   987					     load<bx, dx>
7   988	    060A  53				 push bx
7   989	    060B  52				 push dx
5   990					     get_offset	16
6   991	    060C  33 D2			     xor dx, dx
6   992	    060E  33 C0			     xor ax, ax
6   993	    0610  B0 10			     mov al, 16
6   994	    0612  C1 E0	08		     shl ax, 8
5   995	    0615  05 0741r		     add ax, offset transition_table
5   996	    0618  03 C3			     add ax, bx
5   997	    061A  8B D8			     mov bx, ax
5   998	    061C  C6 07	11		     mov byte ptr [bx],	17
5   999					     restore<dx, bx>
7  1000	    061F  5A				 pop dx
7  1001	    0620  5B				 pop bx
4  1002					     restore <cx,bx>
6  1003	    0621  59				 pop cx
6  1004	    0622  5B				 pop bx
4  1005	    0623  43			     inc bx
4  1006	    0624  49			     dec cx
4  1007	    0625  EB DA			     jmp ??0006
4  1008	    0627			 ??0007:
2  1009					     set_transition transition_table 17	0 0ah
3  1010					     load<bx, dx>
5  1011	    0627  53				 push bx
5  1012	    0628  52				 push dx
3  1013					     get_offset	17
4  1014	    0629  33 D2			     xor dx, dx
4  1015	    062B  33 C0			     xor ax, ax
4  1016	    062D  B0 11			     mov al, 17
4  1017	    062F  C1 E0	08		     shl ax, 8
3  1018	    0632  05 0741r		     add ax, offset transition_table
3  1019	    0635  05 000A		     add ax, 0ah
3  1020	    0638  8B D8			     mov bx, ax
3  1021	    063A  C6 07	00		     mov byte ptr [bx],	0
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 19
checkcl.ASM



3  1022					     restore<dx, bx>
5  1023	    063D  5A				 pop dx
5  1024	    063E  5B				 pop bx
2  1025	    063F  C3			     ret
2  1026
2  1027	    0640			 create_space_transition_table:
2  1028					     set_transition transition_table 0 18 's'
3  1029					     load<bx, dx>
5  1030	    0640  53				 push bx
5  1031	    0641  52				 push dx
3  1032					     get_offset	0
4  1033	    0642  33 D2			     xor dx, dx
4  1034	    0644  33 C0			     xor ax, ax
4  1035	    0646  B0 00			     mov al, 0
4  1036	    0648  C1 E0	08		     shl ax, 8
3  1037	    064B  05 0741r		     add ax, offset transition_table
3  1038	    064E  05 0073		     add ax, 's'
3  1039	    0651  8B D8			     mov bx, ax
3  1040	    0653  C6 07	12		     mov byte ptr [bx],	18
3  1041					     restore<dx, bx>
5  1042	    0656  5A				 pop dx
5  1043	    0657  5B				 pop bx
2  1044					     set_transition transition_table 18	19 ':'
3  1045					     load<bx, dx>
5  1046	    0658  53				 push bx
5  1047	    0659  52				 push dx
3  1048					     get_offset	18
4  1049	    065A  33 D2			     xor dx, dx
4  1050	    065C  33 C0			     xor ax, ax
4  1051	    065E  B0 12			     mov al, 18
4  1052	    0660  C1 E0	08		     shl ax, 8
3  1053	    0663  05 0741r		     add ax, offset transition_table
3  1054	    0666  05 003A		     add ax, ':'
3  1055	    0669  8B D8			     mov bx, ax
3  1056	    066B  C6 07	13		     mov byte ptr [bx],	19
3  1057					     restore<dx, bx>
5  1058	    066E  5A				 pop dx
5  1059	    066F  5B				 pop bx
2  1060					     set_transition transition_table 19	20 ' '
3  1061					     load<bx, dx>
5  1062	    0670  53				 push bx
5  1063	    0671  52				 push dx
3  1064					     get_offset	19
4  1065	    0672  33 D2			     xor dx, dx
4  1066	    0674  33 C0			     xor ax, ax
4  1067	    0676  B0 13			     mov al, 19
4  1068	    0678  C1 E0	08		     shl ax, 8
3  1069	    067B  05 0741r		     add ax, offset transition_table
3  1070	    067E  05 0020		     add ax, ' '
3  1071	    0681  8B D8			     mov bx, ax
3  1072	    0683  C6 07	14		     mov byte ptr [bx],	20
3  1073					     restore<dx, bx>
5  1074	    0686  5A				 pop dx
5  1075	    0687  5B				 pop bx
2  1076					     set_transition_for_all transition_table 20	21
3  1077					     set_transition_length_from_start transition_table,	20, 21,	0, 255
4  1078	    0688  BB 0000		     mov bx, 0
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 20
checkcl.ASM



4  1079	    068B  B9 00FF		     mov cx, 255
4  1080	    068E			 ??0008:
4  1081	    068E  83 F9	00		     cmp cx, 0
4  1082	    0691  74 21	90 90		     je	??0009
4  1083					     load <bx,cx>
6  1084	    0695  53				 push bx
6  1085	    0696  51				 push cx
4  1086					     set_transition transition_table 20	21 bx
5  1087					     load<bx, dx>
7  1088	    0697  53				 push bx
7  1089	    0698  52				 push dx
5  1090					     get_offset	20
6  1091	    0699  33 D2			     xor dx, dx
6  1092	    069B  33 C0			     xor ax, ax
6  1093	    069D  B0 14			     mov al, 20
6  1094	    069F  C1 E0	08		     shl ax, 8
5  1095	    06A2  05 0741r		     add ax, offset transition_table
5  1096	    06A5  03 C3			     add ax, bx
5  1097	    06A7  8B D8			     mov bx, ax
5  1098	    06A9  C6 07	15		     mov byte ptr [bx],	21
5  1099					     restore<dx, bx>
7  1100	    06AC  5A				 pop dx
7  1101	    06AD  5B				 pop bx
4  1102					     restore <cx,bx>
6  1103	    06AE  59				 pop cx
6  1104	    06AF  5B				 pop bx
4  1105	    06B0  43			     inc bx
4  1106	    06B1  49			     dec cx
4  1107	    06B2  EB DA			     jmp ??0008
4  1108	    06B4			 ??0009:
2  1109					     set_transition transition_table 21	0 0ah
3  1110					     load<bx, dx>
5  1111	    06B4  53				 push bx
5  1112	    06B5  52				 push dx
3  1113					     get_offset	21
4  1114	    06B6  33 D2			     xor dx, dx
4  1115	    06B8  33 C0			     xor ax, ax
4  1116	    06BA  B0 15			     mov al, 21
4  1117	    06BC  C1 E0	08		     shl ax, 8
3  1118	    06BF  05 0741r		     add ax, offset transition_table
3  1119	    06C2  05 000A		     add ax, 0ah
3  1120	    06C5  8B D8			     mov bx, ax
3  1121	    06C7  C6 07	00		     mov byte ptr [bx],	0
3  1122					     restore<dx, bx>
5  1123	    06CA  5A				 pop dx
5  1124	    06CB  5B				 pop bx
2  1125	    06CC  C3			     ret
2  1126
2  1127
2  1128
2  1129
2  1130					 ;
2  1131					 ; errors
2  1132					 ;
2  1133	    06CD  70 61	72 73 65 20 65+	 parse_error db	'parse error: incorrect	format$'
   1134		  72 72	6F 72 3A 20 69+
   1135		  6E 63	6F 72 72 65 63+
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 21
checkcl.ASM



   1136		  74 20	66 6F 72 6D 61+
   1137		  74 24
2  1138
2  1139					 ;
2  1140					 ; terminal states
2  1141					 ;
2  1142	    06EB  04			 first_terminal	db 4
2  1143	    06EC  08			 middle_terminal db 8
2  1144	    06ED  0C			 last_terminal db 12
2  1145	    06EE  11			 level_shift_terminal db 17
2  1146	    06EF  15			 space_terminal	db 21
2  1147
2  1148					 ;
2  1149					 ; info	messages
2  1150					 ;
2  1151	    06F0  66 69	72 73 74 20 70+	 first_parsed db 'first	parsed:	$'
   1152		  61 72	73 65 64 3A 20+
   1153		  24
2  1154	    06FF  6D 69	64 64 6C 65 20+	 middle_parsed db 'middle parsed: $'
   1155		  70 61	72 73 65 64 3A+
   1156		  20 24
2  1157	    070F  6C 61	73 74 20 70 61+	 last_parsed db	'last parsed: $'
   1158		  72 73	65 64 3A 20 24
2  1159	    071D  6C 65	76 65 6C 20 73+	 level_shift_parsed db 'level shift parsed: $'
   1160		  68 69	66 74 20 70 61+
   1161		  72 73	65 64 3A 20 24
2  1162	    0732  0A 24			 parse_newline db 0ah, '$'
2  1163
2  1164					 ;
2  1165					 ; parsed symbols
2  1166					 ;
2  1167	    0734  C2 24			 fp db 194, '$'
2  1168	    0736  C3 24			 mp db 195, '$'
2  1169	    0738  C0 24			 lp db 192, '$'
2  1170	    073A  B3 24			 lhp db	179, '$'
2  1171	    073C  20 24			 spac db 32, '$'
2  1172
2  1173	    073E  00			 state db 0
2  1174	    073F  24 24			 buf db	'$$'
2  1175	    0741  15EA*(00)		 transition_table db 5610 dup(0)
1  1176
1  1177	    1D2B			 count_no_space_no_zero_letters:
1  1178	    1D2B  5B			     pop bx ; ret address
1  1179	    1D2C  5E			     pop si ; string offset
1  1180	    1D2D  59			     pop cx ; string length
1  1181	    1D2E  53			     push bx ; ret address
1  1182	    1D2F  B8 0000		     mov ax, 0
1  1183	    1D32			 _count_non_space_symbols_loop:
1  1184	    1D32  80 3C	20		     cmp byte ptr [si],	20h
1  1185	    1D35  74 1A	90 90		     je	_count_non_space_symbols_end
1  1186	    1D39  80 3C	0D		     cmp byte ptr [si],	0Dh
1  1187	    1D3C  74 13	90 90		     je	_count_non_space_symbols_end
1  1188	    1D40  80 3C	00		     cmp byte ptr [si],	00h
1  1189	    1D43  74 0C	90 90		     je	_count_non_space_symbols_end
1  1190	    1D47  3B C1			     cmp ax, cx
1  1191	    1D49  74 06	90 90		     je	_count_non_space_symbols_end
1  1192	    1D4D  40			     inc ax
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 22
checkcl.ASM



1  1193	    1D4E  46			     inc si
1  1194	    1D4F  EB E1			     jmp _count_non_space_symbols_loop
1  1195	    1D51			 _count_non_space_symbols_end:
1  1196	    1D51  C3			     ret
1  1197
1  1198	    1D52			 parse_command_line:
1  1199					     ;
1  1200					     ; prepare root folder
1  1201					     ;
1  1202	    1D52  BE 0082		     mov si, 82h
1  1203	    1D55  B9 0040		     mov cx, 64
1  1204	    1D58  51			     push cx
1  1205	    1D59  56			     push si
1  1206	    1D5A  E8 FFCE		     call count_no_space_no_zero_letters
1  1207	    1D5D  8B C8			     mov cx, ax
1  1208	    1D5F  BE 0082		     mov si, 82h
1  1209	    1D62  BF 0105r		     mov di, offset root_folder
1  1210	    1D65  F3> A4		     rep movsb
1  1211
1  1212	    1D67			 parse_args:
1  1213	    1D67  46			     inc si
1  1214	    1D68  46			     inc si
1  1215	    1D69  80 3C	64		     cmp byte ptr [si],	'd'
1  1216	    1D6C  74 21	90 90		     je	parse_d
1  1217	    1D70  80 3C	66		     cmp byte ptr [si],	'f'
1  1218	    1D73  74 28	90 90		     je	parse_f
1  1219	    1D77  80 3C	73		     cmp byte ptr [si],	's'
1  1220	    1D7A  74 2D	90 90		     je	parse_s
1  1221	    1D7E  80 3C	74		     cmp byte ptr [si],	't'
1  1222	    1D81  74 2F	90 90		     je	parse_t
1  1223	    1D85  80 3C	6F		     cmp byte ptr [si],	'o'
1  1224	    1D88  74 31	90 90		     je	parse_o
1  1225	    1D8C  EB 73	90		     jmp parse_end
1  1226	    1D8F			 parse_d:
1  1227					     ;
1  1228					     ; parse_deep level
1  1229					     ;
1  1230	    1D8F  46			     inc si
1  1231	    1D90  46			     inc si
1  1232	    1D91  8A 1C			     mov bl, byte ptr [si]
1  1233	    1D93  80 EB	30		     sub bl, 30h	     ; to number
1  1234	    1D96  88 1E	1E44r		     mov byte ptr [deep_level],	bl
1  1235	    1D9A  46			     inc si
1  1236	    1D9B  EB CA			     jmp parse_args
1  1237	    1D9D			 parse_f:
1  1238					     ;
1  1239					     ; parse file extension
1  1240					     ;
1  1241	    1D9D  46			     inc si
1  1242	    1D9E  46			     inc si
1  1243	    1D9F  BF 1E46r		     mov di, offset file_ext
1  1244	    1DA2  B9 0004		     mov cx, 4
1  1245	    1DA5  F3> A4		     rep movsb
1  1246	    1DA7  EB BE			     jmp parse_args
1  1247	    1DA9			 parse_s:
1  1248					     ;
1  1249					     ; print storage
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 23
checkcl.ASM



1  1250					     ;
1  1251	    1DA9  B3 01			     mov bl, 1
1  1252	    1DAB  88 1E	1E42r		     mov byte ptr [use_storage], bl
1  1253	    1DAF  46			     inc si
1  1254	    1DB0  EB B5			     jmp parse_args
1  1255	    1DB2			 parse_t:
1  1256					     ;
1  1257					     ; print time
1  1258					     ;
1  1259	    1DB2  B3 01			     mov bl, 1
1  1260	    1DB4  88 1E	1E43r		     mov byte ptr [use_time], bl
1  1261	    1DB8  46			     inc si
1  1262	    1DB9  EB AC			     jmp parse_args
1  1263	    1DBB			 parse_o:
1  1264					     ;
1  1265					     ; use file	for specifying pseudographic
1  1266					     ;
1  1267	    1DBB  46			     inc si
1  1268	    1DBC  46			     inc si
1  1269					     load <si>
3  1270	    1DBD  56				 push si
1  1271	    1DBE  B9 0040		     mov cx, 64
1  1272	    1DC1  51			     push cx
1  1273	    1DC2  56			     push si
1  1274	    1DC3  E8 FF65		     call count_no_space_no_zero_letters
1  1275					     restore <si>
3  1276	    1DC6  5E				 pop si
1  1277	    1DC7  8B C8			     mov cx, ax
1  1278	    1DC9  BA 1E02r		     lea dx, filename
1  1279	    1DCC  FC			     cld
1  1280	    1DCD  F3> A4		     rep movsb
1  1281
1  1282	    1DCF  BA 1E02r		     lea dx, filename
1  1283	    1DD2  52			     push dx
1  1284	    1DD3  E8 E55A		     call parse_file_from
1  1285	    1DD6  A0 0734r		     mov al, byte ptr [fp]
1  1286	    1DD9  A2 0197r		     mov byte ptr [first_file_char], al
1  1287	    1DDC  A0 0736r		     mov al, byte ptr [mp]
1  1288	    1DDF  A2 0199r		     mov byte ptr [middle_file_char], al
1  1289	    1DE2  A0 0738r		     mov al, byte ptr [lp]
1  1290	    1DE5  A2 019Br		     mov byte ptr [end_file_char], al
1  1291	    1DE8  A0 073Ar		     mov al, byte ptr [lhp]
1  1292	    1DEB  A2 0179r		     mov byte ptr [old_level_shift], al
1  1293
1  1294	    1DEE  BF 017Br		     lea di, level_shift
1  1295	    1DF1  B9 000A		     mov cx, 10
1  1296	    1DF4  FC			     cld
1  1297	    1DF5  F3> AA		     rep stosb
1  1298
1  1299	    1DF7  A0 073Cr		     mov al, byte ptr [spac]
1  1300	    1DFA  A2 0190r		     mov byte ptr [space], al
1  1301
1  1302	    1DFD  46			     inc si
1  1303	    1DFE  E9 FF66		     jmp parse_args
1  1304
1  1305
1  1306	    1E01			 parse_end:
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 24
checkcl.ASM



1  1307	    1E01  C3			     ret
1  1308
1  1309					 ;
1  1310					 ;   parse arguments
1  1311					 ;
1  1312	    1E02  40*(00)		 filename db 64	dup(0)
1  1313	    1E42  00			 use_storage db	0
1  1314	    1E43  00			 use_time db 0
1  1315	    1E44  01			 deep_level db 1
1  1316	    1E45  2A			 file_mask db '*'
1  1317	    1E46  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
1  1318	    1E4B  2A 00			 folder_mask db	'*', 00h
1  1319	    1E4D  2A 2E	2A 00		 all_files db '*.*', 00h
   1320					 end start
*Warning* checkcl.ASM(12) Module is pass dependent - compatibility pass	was done
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 25
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:045A
??0001				  Near	 DGROUP:0480
??0002				  Near	 DGROUP:04E7
??0003				  Near	 DGROUP:050D
??0004				  Near	 DGROUP:0574
??0005				  Near	 DGROUP:059A
??0006				  Near	 DGROUP:0601
??0007				  Near	 DGROUP:0627
??0008				  Near	 DGROUP:068E
??0009				  Near	 DGROUP:06B4
??DATE				  Text	 "12/24/19"
??FILENAME			  Text	 "checkcl "
??TIME				  Text	 "01:14:24"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 CHECKCL
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:1E4D
BUF				  Byte	 DGROUP:073F
CLOSE_ERR_6			  Byte	 DGROUP:0302
CLOSE_FILE			  Near	 DGROUP:01DE
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:1D2B
CREATE_FIRST_TRANSITION_TABLE	  Near	 DGROUP:040C
CREATE_LAST_TRANSITION_TABLE	  Near	 DGROUP:0526
CREATE_LEVEL_SHIFT_TRANSITION_TA  Near	 DGROUP:05B3
BLE
CREATE_MIDDLE_TRANSITION_TABLE	  Near	 DGROUP:0499
CREATE_SPACE_TRANSITION_TABLE	  Near	 DGROUP:0640
CURRENT_MAX_ENTITIES		  Word	 DGROUP:0103
DEEP_LEVEL			  Byte	 DGROUP:1E44
END_FILE_CHAR			  Byte	 DGROUP:019B
EXT				  Near	 DGROUP:0358
FILENAME			  Byte	 DGROUP:1E02
FILE_EXT			  Byte	 DGROUP:1E46
FILE_MASK			  Byte	 DGROUP:1E45
FILE_NEWLINE			  Byte	 DGROUP:032E
FIRST_FILE_CHAR			  Byte	 DGROUP:0197
FIRST_PARSED			  Byte	 DGROUP:06F0
FIRST_TERMINAL			  Byte	 DGROUP:06EB
FOLDER_MASK			  Byte	 DGROUP:1E4B
FP				  Byte	 DGROUP:0734
L1				  Near	 DGROUP:0232
L12				  Near	 DGROUP:0287
L2				  Near	 DGROUP:0243
L3				  Near	 DGROUP:0254
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 26
Symbol Table



L4				  Near	 DGROUP:0265
L5				  Near	 DGROUP:0276
LAST_PARSED			  Byte	 DGROUP:070F
LAST_TERMINAL			  Byte	 DGROUP:06ED
LEVEL_SHIFT			  Byte	 DGROUP:017B
LEVEL_SHIFT_PARSED		  Byte	 DGROUP:071D
LEVEL_SHIFT_TERMINAL		  Byte	 DGROUP:06EE
LHP				  Byte	 DGROUP:073A
LL5				  Near	 DGROUP:01BB
LL6				  Near	 DGROUP:01CC
LP				  Byte	 DGROUP:0738
MIDDLE_FILE_CHAR		  Byte	 DGROUP:0199
MIDDLE_PARSED			  Byte	 DGROUP:06FF
MIDDLE_TERMINAL			  Byte	 DGROUP:06EC
MP				  Byte	 DGROUP:0736
OLD_LEVEL_SHIFT			  Byte	 DGROUP:0179
OPEN_ERR_1			  Byte	 DGROUP:0299
OPEN_ERR_12			  Byte	 DGROUP:02F0
OPEN_ERR_2			  Byte	 DGROUP:02B1
OPEN_ERR_3			  Byte	 DGROUP:02C0
OPEN_ERR_4			  Byte	 DGROUP:02CF
OPEN_ERR_5			  Byte	 DGROUP:02E2
OPEN_READ			  Near	 DGROUP:01F8
PARSE_ARGS			  Near	 DGROUP:1D67
PARSE_COMMAND_LINE		  Near	 DGROUP:1D52
PARSE_D				  Near	 DGROUP:1D8F
PARSE_END			  Near	 DGROUP:1E01
PARSE_ERROR			  Byte	 DGROUP:06CD
PARSE_F				  Near	 DGROUP:1D9D
PARSE_FILE			  Near	 DGROUP:0359
PARSE_FILE_FROM			  Near	 DGROUP:0330
PARSE_NEWLINE			  Byte	 DGROUP:0732
PARSE_O				  Near	 DGROUP:1DBB
PARSE_S				  Near	 DGROUP:1DA9
PARSE_T				  Near	 DGROUP:1DB2
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0107
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0161
READ_ERR_5			  Byte	 DGROUP:0311
READ_ERR_6			  Byte	 DGROUP:031F
READ_FROM_FILE			  Near	 DGROUP:019D
RESET_LEVEL_SHIFT		  Near	 DGROUP:0150
ROOT_FOLDER			  Byte	 DGROUP:0105
SET_LEVEL_SHIFT			  Near	 DGROUP:013F
SPAC				  Byte	 DGROUP:073C
SPACE				  Byte	 DGROUP:0190
SPACE_TERMINAL			  Byte	 DGROUP:06EF
START				  Near	 DGROUP:0100
STATE				  Byte	 DGROUP:073E
TRANSITION_TABLE		  Byte	 DGROUP:0741
USE_STORAGE			  Byte	 DGROUP:1E42
USE_TIME			  Byte	 DGROUP:1E43
ZERO_END_FILE			  Byte	 DGROUP:0195
ZERO_FIRST_FILE			  Byte	 DGROUP:0193
_CLOSE_FILE_END			  Near	 DGROUP:01F7
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:1D51
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:1D32
_OPEN_READ_END			  Near	 DGROUP:0298
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 27
Symbol Table



_PARSE_FILE_EXT			  Near	 DGROUP:040A
_PARSE_FILE_LOOP		  Near	 DGROUP:035D
_PARSE_FILE_NEXT		  Near	 DGROUP:03B4
_PARSE_FILE_NEXT_TERMINAL_1	  Near	 DGROUP:03C7
_PARSE_FILE_NEXT_TERMINAL_2	  Near	 DGROUP:03D7
_PARSE_FILE_NEXT_TERMINAL_3	  Near	 DGROUP:03E8
_PARSE_FILE_NEXT_TERMINAL_4	  Near	 DGROUP:03F9
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:013E
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:011A
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:013B
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0135
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0138
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:0178
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0167
_READ_FORM_FILE_END		  Near	 DGROUP:01DD

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
PUT
RESTORE
SET_DTA
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  1E51 Word	  Public  CODE
Turbo Assembler	 Version 4.1	    12/24/19 01:14:25	    Page 28
Error Summary



**Error** pgraph.asm(11) Forward reference needs override
**Error** pgraph.asm(17) Symbol	redefined or moved between passes: _PRINT_PSEUDOGRAPHIC_PREFIX_ZERO_LEVEL
**Error** pgraph.asm(29) Forward reference needs override
**Error** pgraph.asm(32) Forward reference needs override
**Error** pgraph.asm(35) Forward reference needs override
*Warning* checkcl.ASM(12) Module is pass dependent - compatibility pass	was done
