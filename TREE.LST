Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 2
tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
     80
     81	    0000			 model tiny
     82					 .386
     83	    0000			 .code
     84					 org 100h
     85	    0100			 start:
     86	    0100  E8 01DD		     call save_cwd
     87					     set_dta dta
1    88	    0103  BA 080Er		     lea dx, dta
1    89	    0106  33 C0			     xor ax, ax
1    90	    0108  B4 1A			     mov ah, 1Ah
1    91	    010A  CD 21			     int 21h
     92	    010C  E8 0268		     call parse_command_line
     93					     ;
     94					     ;	 start tree
     95					     ;
     96	    010F  B8 08CDr		     mov ax, offset root_folder
     97	    0112  B9 0000		     mov cx, 0
     98	    0115  51			     push cx
     99	    0116  50			     push ax
    100	    0117  E8 000B		     call list_subfiles_recursive_from
    101					     ;
    102					     ;	 cd to start folder
    103					     ;
    104	    011A  B8 02FEr		     mov ax, offset working_folder
    105	    011D  50			     push ax
    106	    011E  E8 0192		     call cd
    107					     exit
1   108	    0121  B4 00			     mov ah, 00h
1   109	    0123  CD 21			     int 21h
    110
    111	    0125			 list_subfiles_recursive_from:
    112	    0125  5B			     pop bx	 ; ret address
    113	    0126  58			     pop ax	 ; deep	level
    114	    0127  59			     pop cx	 ; root	folder offset
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 3
tree.ASM



    115	    0128  53			     push bx
    116					     load <cx>
2   117	    0129  51				 push cx
    118	    012A  50			     push ax
    119	    012B  E8 0185		     call cd
    120					     restore <cx>
2   121	    012E  59				 pop cx
    122					     ;
    123					     ; list subfolder
    124					     ;
    125	    012F  BE 0281r		     mov si, offset find_first_folder
    126	    0132  BB 0000		     mov bx, 0
    127	    0135  B8 03DAr		     mov ax, offset folder_mask
    128					     load <cx>
2   129	    0138  51				 push cx
    130	    0139  56			     push si
    131	    013A  53			     push bx
    132	    013B  50			     push ax
    133	    013C  51			     push cx
    134	    013D  E8 0013		     call list_subfiles_recursive
    135					     restore <cx>
2   136	    0140  59				 pop cx
    137					     ;
    138					     ; list files
    139					     ;
    140	    0141  BE 0274r		     mov si, offset find_first_file
    141	    0144  8B D8			     mov bx, ax
    142	    0146  B8 03D4r		     mov ax, offset file_mask
    143					     load <cx>
2   144	    0149  51				 push cx
    145	    014A  56			     push si
    146	    014B  53			     push bx
    147	    014C  50			     push ax
    148	    014D  51			     push cx
    149	    014E  E8 0002		     call list_subfiles_recursive
    150					     restore <cx>
2   151	    0151  59				 pop cx
    152	    0152  C3			     ret
    153
    154	    0153			 list_subfiles_recursive:
    155					     ;
    156					     ;	 save current files count
    157					     ;
    158	    0153  E8 04FF		     call count_subfiles_here
    159	    0156  A3 088Er		     mov word ptr [current_max_entities], ax
    160
    161	    0159  5A			     pop dx
    162	    015A  59			     pop cx ; deep level
    163	    015B  58			     pop ax ; filemask offset
    164	    015C  5B			     pop bx ; current index
    165	    015D  5E			     pop si ; search address
    166	    015E  52			     push dx
    167
    168					     load <cx, ax, bx, si>
2   169	    015F  51				 push cx
2   170	    0160  50				 push ax
2   171	    0161  53				 push bx
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 4
tree.ASM



2   172	    0162  56				 push si
    173					     set_dta dta
1   174	    0163  BA 080Er		     lea dx, dta
1   175	    0166  33 C0			     xor ax, ax
1   176	    0168  B4 1A			     mov ah, 1Ah
1   177	    016A  CD 21			     int 21h
    178					     restore <si, bx, ax, cx>
2   179	    016C  5E				 pop si
2   180	    016D  5B				 pop bx
2   181	    016E  58				 pop ax
2   182	    016F  59				 pop cx
    183
    184					     load <bx, cx>
2   185	    0170  53				 push bx
2   186	    0171  51				 push cx
    187	    0172  50			     push ax
    188	    0173  FF D6			     call si
    189	    0175  73 03			     jnc _list_subfiles_recursive_loop
    190	    0177  E9 00D4		     jmp _list_subfiles_recursive_end
    191	    017A			 _list_subfiles_recursive_loop:
    192					     restore <cx>
2   193	    017A  59				 pop cx
    194	    017B  51			     push cx
    195	    017C  E8 05B8		     call is_valid_name
    196					     load <cx>
2   197	    017F  51				 push cx
    198	    0180  3D 0001		     cmp ax, 1
    199	    0183  0F 85	00BA		     jne _list_subfiles_recursive_next
    200					     ;
    201					     ;	 increment current index in subfiles
    202					     ;
    203					     restore <cx, bx>
2   204	    0187  59				 pop cx
2   205	    0188  5B				 pop bx
    206	    0189  43			     inc bx
    207					     load <bx, cx>
2   208	    018A  53				 push bx
2   209	    018B  51				 push cx
    210	    018C  53			     push bx
    211	    018D  51			     push cx
    212	    018E  E8 051B		     call show_filename_from_dta
    213					     ;
    214					     ;	 check if folder
    215					     ;
    216					     restore <cx>
2   217	    0191  59				 pop cx
    218					     load <cx>
2   219	    0192  51				 push cx
    220	    0193  B8 080Er		     lea ax, dta
    221	    0196  50			     push ax
    222	    0197  51			     push cx
    223	    0198  E8 00F8		     call is_folder
    224	    019B  3D 0001		     cmp ax, 1
    225	    019E  0F 85	009F		     jne _list_subfiles_recursive_next
    226					     ;
    227					     ;	 check deep level
    228					     ;
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 5
tree.ASM



    229					     restore <cx>
2   230	    01A2  59				 pop cx
    231					     load <cx>
2   232	    01A3  51				 push cx
    233	    01A4  33 DB			     xor bx, bx
    234	    01A6  8A 1E	03D3r		     mov bl, byte ptr [deep_level]
    235	    01AA  3B CB			     cmp cx, bx
    236	    01AC  0F 8D	0091		     jge _list_subfiles_recursive_next
    237					     ;
    238					     ;	 pseudographic hack
    239					     ;
    240					     restore <cx, bx>
2   241	    01B0  59				 pop cx
2   242	    01B1  5B				 pop bx
    243					     load <bx, cx>
2   244	    01B2  53				 push bx
2   245	    01B3  51				 push cx
    246
    247	    01B4  3B 1E	088Er		     cmp bx, word ptr [current_max_entities]
    248	    01B8  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack_end
    249					     load <ax, bx, cx>
2   250	    01BA  50				 push ax
2   251	    01BB  53				 push bx
2   252	    01BC  51				 push cx
    253	    01BD  51			     push cx
    254	    01BE  E8 0264		     call set_level_shift
    255					     restore <cx, bx, ax>
2   256	    01C1  59				 pop cx
2   257	    01C2  5B				 pop bx
2   258	    01C3  58				 pop ax
    259
    260	    01C4			 _list_subfiles_recursive_loop_pseudographic_hack_end:
    261	    01C4  8B C1			     mov ax, cx
    262					     ;
    263					     ;	 save dta
    264					     ;
    265					     push_fragment dta,	128
1   266	    01C6  BF 080Er		     lea di, dta
1   267	    01C9  B9 0080		     mov cx, 128
1   268	    01CC  33 DB			     xor bx, bx
1   269	    01CE			 ??0000:
1   270	    01CE  8A 1D			     mov bl, byte ptr [di]
1   271	    01D0  53			     push bx
1   272	    01D1  47			     inc di
1   273	    01D2  49			     dec cx
1   274	    01D3  83 F9	00		     cmp cx, 0
1   275	    01D6  75 F6			     jne ??0000
    276	    01D8  8B C8			     mov cx, ax
    277					     ;
    278					     ; start new search
    279					     ;
    280	    01DA  A1 088Er		     mov ax, word ptr [current_max_entities]
    281					     load <ax>
2   282	    01DD  50				 push ax
    283
    284					     load <cx>
2   285	    01DE  51				 push cx
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 6
tree.ASM



    286					     ;
    287					     ;	 cd to subfolder
    288					     ;
    289	    01DF  B8 080Er		     lea ax, dta
    290	    01E2  05 001E		     add ax, 1Eh
    291
    292	    01E5  50			     push ax
    293	    01E6  E8 00CA		     call cd
    294					     restore <cx>
2   295	    01E9  59				 pop cx
    296
    297	    01EA  41			     inc cx
    298					     ;
    299					     ;	 list subfiles from subfolder
    300					     ;
    301					     load <cx>
2   302	    01EB  51				 push cx
    303	    01EC  BB 0000		     mov bx, 0
    304	    01EF  B8 03D4r		     mov ax, offset file_mask
    305	    01F2  BE 0274r		     mov si, offset find_first_file
    306
    307	    01F5  56			     push si
    308	    01F6  53			     push bx
    309	    01F7  50			     push ax
    310	    01F8  51			     push cx
    311	    01F9  E8 FF57		     call list_subfiles_recursive
    312					     restore <cx>
2   313	    01FC  59				 pop cx
    314					     ;
    315					     ;	 list subfolders from subfolder
    316					     ;
    317					     load <cx>
2   318	    01FD  51				 push cx
    319	    01FE  8B D8			     mov bx, ax
    320	    0200  B8 03DAr		     mov ax, offset folder_mask
    321	    0203  BE 0281r		     mov si, offset find_first_folder
    322
    323	    0206  56			     push si
    324	    0207  53			     push bx
    325	    0208  50			     push ax
    326	    0209  51			     push cx
    327	    020A  E8 FF46		     call list_subfiles_recursive
    328					     restore <cx>
2   329	    020D  59				 pop cx
    330					     ;
    331					     ;	 reverse pseudographic hack
    332					     ;
    333					     load <ax, bx, cx>
2   334	    020E  50				 push ax
2   335	    020F  53				 push bx
2   336	    0210  51				 push cx
    337	    0211  51			     push cx
    338	    0212  E8 0221		     call reset_level_shift
    339					     restore <cx, bx, ax>
2   340	    0215  59				 pop cx
2   341	    0216  5B				 pop bx
2   342	    0217  58				 pop ax
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 7
tree.ASM



    343					     ;
    344					     ;	 cd back to this function
    345					     ;
    346	    0218  B8 08CAr		     mov ax, offset parent_folder
    347	    021B  50			     push ax
    348	    021C  E8 0094		     call cd
    349
    350					     restore <ax>
2   351	    021F  58				 pop ax
    352	    0220  A3 088Er		     mov word ptr [current_max_entities], ax
    353					     ;
    354					     ;	 restore dta
    355					     ;
    356					     pop_fragment dta, 128
1   357	    0223  BF 080Er		     lea di, dta
1   358	    0226  B9 0080		     mov cx, 128
1   359	    0229  03 F9			     add di, cx
1   360	    022B  4F			     dec di
1   361	    022C  33 DB			     xor bx, bx
1   362	    022E			 ??0001:
1   363	    022E  5B			     pop bx
1   364	    022F  88 1D			     mov byte ptr [di],	bl
1   365	    0231  4F			     dec di
1   366	    0232  49			     dec cx
1   367	    0233  83 F9	00		     cmp cx, 0
1   368	    0236  75 F6			     jne ??0001
    369					     set_dta dta
1   370	    0238  BA 080Er		     lea dx, dta
1   371	    023B  33 C0			     xor ax, ax
1   372	    023D  B4 1A			     mov ah, 1Ah
1   373	    023F  CD 21			     int 21h
    374	    0241			 _list_subfiles_recursive_next:
    375	    0241  E8 004A		     call find_next
    376	    0244  0F 83	FF32		     jnc _list_subfiles_recursive_loop
    377	    0248  3A 06	0890r		     cmp al, byte ptr [no_more_files]
    378	    024C  75 14			     jne find_next_error
    379	    024E			 _list_subfiles_recursive_end:
    380					     restore <cx, bx>
2   381	    024E  59				 pop cx
2   382	    024F  5B				 pop bx
    383	    0250  8B C3			     mov ax, bx
    384	    0252  C3			     ret
    385	    0253			 find_first_error:
    386					     print_range <find_first_fails, newline>
2   387						 print <offset find_first_fails>
3   388	    0253  B4 09				 mov ah, 09h
3   389	    0255  BA 0891r			 mov dx, offset	find_first_fails
3   390	    0258  CD 21				 int 21h
2   391						 print <offset newline>
3   392	    025A  B4 09				 mov ah, 09h
3   393	    025C  BA 0356r			 mov dx, offset	newline
3   394	    025F  CD 21				 int 21h
    395	    0261  C3			     ret
    396	    0262			 find_next_error:
    397					     print_range <find_next_fails, newline>
2   398						 print <offset find_next_fails>
3   399	    0262  B4 09				 mov ah, 09h
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 8
tree.ASM



3   400	    0264  BA 08ADr			 mov dx, offset	find_next_fails
3   401	    0267  CD 21				 int 21h
2   402						 print <offset newline>
3   403	    0269  B4 09				 mov ah, 09h
3   404	    026B  BA 0356r			 mov dx, offset	newline
3   405	    026E  CD 21				 int 21h
    406					     exit
1   407	    0270  B4 00			     mov ah, 00h
1   408	    0272  CD 21			     int 21h
    409
    410					 include dtafunc.asm
1   411					 include filefunc.asm
2   412	    0274			 find_first_file:
2   413	    0274  5B			     pop bx
2   414	    0275  5A			     pop dx		; filename spec
2   415	    0276  B9 000F		     mov cx, 0fh	 ; include files
2   416	    0279  53			     push bx
2   417
2   418	    027A  33 C0			     xor ax, ax
2   419	    027C  B4 4E			     mov ah, 4Eh
2   420	    027E  CD 21			     int 21h
2   421	    0280  C3			     ret
2   422
2   423	    0281			 find_first_folder:
2   424	    0281  5B			     pop bx
2   425	    0282  5A			     pop dx		 ; filename spec
2   426	    0283  B9 0010		     mov cx, 10h	 ; include directories
2   427	    0286  53			     push bx
2   428
2   429	    0287  33 C0			     xor ax, ax
2   430	    0289  B4 4E			     mov ah, 4Eh
2   431	    028B  CD 21			     int 21h
2   432	    028D  C3			     ret
2   433
2   434	    028E			 find_next:
2   435	    028E  B4 4F			     mov ah, 4Fh
2   436	    0290  CD 21			     int 21h
2   437
2   438	    0292  C3			     ret
2   439
2   440	    0293			 is_folder:
2   441	    0293  5B			     pop bx
2   442	    0294  59			     pop cx
2   443	    0295  58			     pop ax ; dta address
2   444	    0296  53			     push bx
2   445
2   446	    0297  05 0015		     add ax, 15h
2   447	    029A  8B D8			     mov bx, ax
2   448	    029C  8A 1F			     mov bl, byte ptr [bx]
2   449	    029E  80 E3	10		     and bl, 10h
2   450	    02A1  80 FB	10		     cmp bl, 10h
2   451	    02A4  74 02			     je	_is_folder_true
2   452	    02A6  75 05			     jne _is_folder_false
2   453	    02A8			 _is_folder_true:
2   454	    02A8  B8 0001		     mov ax, 1
2   455	    02AB  EB 05			     jmp _is_folder_end
2   456	    02AD			 _is_folder_false:
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 9
tree.ASM



2   457	    02AD  B8 0000		     mov ax, 0
2   458	    02B0  EB 00			     jmp _is_folder_end
2   459	    02B2			 _is_folder_end:
2   460	    02B2  C3			     ret
2   461
2   462	    02B3			 cd:
2   463	    02B3  5B			     pop bx ; ret addr
2   464	    02B4  5A			     pop dx ; root address
2   465	    02B5  53			     push bx ; ret addr
2   466
2   467					     load <dx>
4   468	    02B6  52				 push dx
2   469	    02B7  33 C0			     xor ax, ax
2   470	    02B9  B4 3B			     mov ah, 3Bh
2   471	    02BB  CD 21			     int 21h
2   472
2   473	    02BD  72 02			     jc	cd_error
2   474					     restore <dx>
4   475	    02BF  5A				 pop dx
2   476	    02C0  C3			     ret
2   477	    02C1			 cd_error:
2   478					     print_range <cd_fails, newline>
4   479						 print <offset cd_fails>
5   480	    02C1  B4 09				 mov ah, 09h
5   481	    02C3  BA 033Er			 mov dx, offset	cd_fails
5   482	    02C6  CD 21				 int 21h
4   483						 print <offset newline>
5   484	    02C8  B4 09				 mov ah, 09h
5   485	    02CA  BA 0356r			 mov dx, offset	newline
5   486	    02CD  CD 21				 int 21h
2   487					     restore <dx>
4   488	    02CF  5A				 pop dx
2   489
2   490	    02D0  B4 09				 mov ah, 09h
2   491	    02D2  CD 21			     int 21h
2   492
2   493					     print_range <newline>
4   494						 print <offset newline>
5   495	    02D4  B4 09				 mov ah, 09h
5   496	    02D6  BA 0356r			 mov dx, offset	newline
5   497	    02D9  CD 21				 int 21h
2   498					     exit
3   499	    02DB  B4 00			     mov ah, 00h
3   500	    02DD  CD 21			     int 21h
2   501	    02DF  C3			     ret
2   502
2   503	    02E0			 save_cwd:
2   504	    02E0  BE 02FEr		     mov si, offset working_folder
2   505
2   506					     ;
2   507					     ; save driver
2   508					     ;
2   509	    02E3  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
2   510	    02E5  CD 21			     int 21h
2   511	    02E7  8A D0			     mov dl, al
2   512	    02E9  80 C2	41		     add dl, 41h
2   513	    02EC  88 14			     mov byte ptr [si],	dl
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 10
tree.ASM



2   514	    02EE  46			     inc si
2   515	    02EF  C6 04	3A		     mov byte ptr [si],	':'
2   516	    02F2  46			     inc si
2   517	    02F3  C6 04	5C		     mov byte ptr [si],	'\'
2   518	    02F6  46			     inc si
2   519
2   520					     ;
2   521					     ; save folder
2   522					     ;
2   523	    02F7  32 D2			     xor dl, dl			 ; Actual drive
2   524	    02F9  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
2   525	    02FB  CD 21			     int 21h
2   526	    02FD  C3			     ret
2   527
2   528
2   529	    02FE  40*(00)		 working_folder	db 64 dup(00h)
2   530	    033E  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    531		  64 69	72 65 63 74 6F+
    532		  72 79	20 66 61 69 6C+
    533		  73 2E	24
2   534	    0356  0A 24			 newline db 0Ah, '$'
1   535					 include clfunc.asm
2   536	    0358			 count_no_space_no_zero_letters:
2   537	    0358  5B			     pop bx ; ret address
2   538	    0359  5E			     pop si ; string offset
2   539	    035A  59			     pop cx ; string length
2   540	    035B  53			     push bx ; ret address
2   541	    035C  B8 0000		     mov ax, 0
2   542	    035F			 _count_non_space_symbols_loop:
2   543	    035F  80 3C	20		     cmp byte ptr [si],	20h
2   544	    0362  74 12			     je	_count_non_space_symbols_end
2   545	    0364  80 3C	0D		     cmp byte ptr [si],	0Dh
2   546	    0367  74 0D			     je	_count_non_space_symbols_end
2   547	    0369  80 3C	00		     cmp byte ptr [si],	00h
2   548	    036C  74 08			     je	_count_non_space_symbols_end
2   549	    036E  3B C1			     cmp ax, cx
2   550	    0370  74 04			     je	_count_non_space_symbols_end
2   551	    0372  40			     inc ax
2   552	    0373  46			     inc si
2   553	    0374  EB E9			     jmp _count_non_space_symbols_loop
2   554	    0376			 _count_non_space_symbols_end:
2   555	    0376  C3			     ret
2   556
2   557	    0377			 parse_command_line:
2   558					     ;
2   559					     ; prepare root folder
2   560					     ;
2   561	    0377  BE 0082		     mov si, 82h
2   562	    037A  B9 0040		     mov cx, 64
2   563	    037D  51			     push cx
2   564	    037E  56			     push si
2   565	    037F  E8 FFD6		     call count_no_space_no_zero_letters
2   566	    0382  8B C8			     mov cx, ax
2   567	    0384  BE 0082		     mov si, 82h
2   568	    0387  BF 08CDr		     mov di, offset root_folder
2   569	    038A  F3> A4		     rep movsb
2   570
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 11
tree.ASM



2   571	    038C			 parse_args:
2   572	    038C  46			     inc si
2   573	    038D  46			     inc si
2   574	    038E  80 3C	64		     cmp byte ptr [si],	'd'
2   575	    0391  74 11			     je	parse_d
2   576	    0393  80 3C	66		     cmp byte ptr [si],	'f'
2   577	    0396  74 1A			     je	parse_f
2   578	    0398  80 3C	73		     cmp byte ptr [si],	's'
2   579	    039B  74 21			     je	parse_s
2   580	    039D  80 3C	74		     cmp byte ptr [si],	't'
2   581	    03A0  74 25			     je	parse_t
2   582	    03A2  EB 2C			     jmp parse_end
2   583	    03A4			 parse_d:
2   584					     ;
2   585					     ; parse_deep level
2   586					     ;
2   587	    03A4  46			     inc si
2   588	    03A5  46			     inc si
2   589	    03A6  8A 1C			     mov bl, byte ptr [si]
2   590	    03A8  80 EB	30		     sub bl, 30h	     ; to number
2   591	    03AB  88 1E	03D3r		     mov byte ptr [deep_level],	bl
2   592	    03AF  46			     inc si
2   593	    03B0  EB DA			     jmp parse_args
2   594	    03B2			 parse_f:
2   595					     ;
2   596					     ; parse file extension
2   597					     ;
2   598	    03B2  46			     inc si
2   599	    03B3  46			     inc si
2   600	    03B4  BF 03D5r		     mov di, offset file_ext
2   601	    03B7  B9 0004		     mov cx, 4
2   602	    03BA  F3> A4		     rep movsb
2   603	    03BC  EB CE			     jmp parse_args
2   604	    03BE			 parse_s:
2   605					     ;
2   606					     ; print storage
2   607					     ;
2   608	    03BE  B3 01			     mov bl, 1
2   609	    03C0  88 1E	03D1r		     mov byte ptr [use_storage], bl
2   610	    03C4  46			     inc si
2   611	    03C5  EB C5			     jmp parse_args
2   612	    03C7			 parse_t:
2   613					     ;
2   614					     ; print time
2   615					     ;
2   616	    03C7  B3 01			     mov bl, 1
2   617	    03C9  88 1E	03D2r		     mov byte ptr [use_time], bl
2   618	    03CD  46			     inc si
2   619	    03CE  EB BC			     jmp parse_args
2   620
2   621	    03D0			 parse_end:
2   622	    03D0  C3			     ret
2   623
2   624					 ;
2   625					 ;   parse arguments
2   626					 ;
2   627	    03D1  00			 use_storage db	0
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 12
tree.ASM



2   628	    03D2  00			 use_time db 0
2   629	    03D3  01			 deep_level db 1
2   630	    03D4  2A			 file_mask db '*'
2   631	    03D5  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
2   632	    03DA  2A 00			 folder_mask db	'*', 00h
2   633	    03DC  2A 2E	2A 00		 all_files db '*.*', 00h
1   634					 include pgraph.asm
2   635
2   636	    03E0			 print_pseudographic_prefix:
2   637	    03E0  5B			     pop bx
2   638	    03E1  59			     pop cx	 ; deep	level
2   639	    03E2  58			     pop ax	 ; entity count
2   640	    03E3  53			     push bx
2   641
2   642	    03E4  83 F9	00		     cmp cx, 0
2   643	    03E7  74 0C			     je	_print_pseudographic_prefix_zero_level
2   644					     load <cx, ax>
4   645	    03E9  51				 push cx
4   646	    03EA  50				 push ax
2   647	    03EB  B8 045Fr		     mov ax, offset level_shift
2   648
2   649	    03EE  51			     push cx
2   650	    03EF  50			     push ax
2   651	    03F0  E8 0054		     call print_string_with_length
2   652					     restore <ax, cx>
4   653	    03F3  58				 pop ax
4   654	    03F4  59				 pop cx
2   655	    03F5			 _print_pseudographic_prefix_zero_level:
2   656
2   657	    03F5  8B 1E	088Er		     mov bx, word ptr [current_max_entities]
2   658	    03F9  3A C3			     cmp al, bl
2   659	    03FB  74 1E			     je	_print_pseudographic_prefix_zero_level_end
2   660	    03FD  3D 0001		     cmp ax, 1
2   661	    0400  75 10			     jne _print_pseudographic_prefix_zero_level_middle
2   662	    0402  83 F9	00		     cmp cx, 0
2   663	    0405  74 02			     je	_print_pseudographic_prefix_zero_level_first
2   664	    0407  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
2   665	    0409			 _print_pseudographic_prefix_zero_level_first:
2   666					     print_range <first_file_char>
4   667						 print <offset first_file_char>
5   668	    0409  B4 09				 mov ah, 09h
5   669	    040B  BA 0471r			 mov dx, offset	first_file_char
5   670	    040E  CD 21				 int 21h
2   671	    0410  EB 12			     jmp _print_pseudographic_prefix_end
2   672	    0412			 _print_pseudographic_prefix_zero_level_middle:
2   673					     print_range <middle_file_char>
4   674						 print <offset middle_file_char>
5   675	    0412  B4 09				 mov ah, 09h
5   676	    0414  BA 0473r			 mov dx, offset	middle_file_char
5   677	    0417  CD 21				 int 21h
2   678	    0419  EB 09			     jmp _print_pseudographic_prefix_end
2   679	    041B			 _print_pseudographic_prefix_zero_level_end:
2   680					     print_range <end_file_char>
4   681						 print <offset end_file_char>
5   682	    041B  B4 09				 mov ah, 09h
5   683	    041D  BA 0475r			 mov dx, offset	end_file_char
5   684	    0420  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 13
tree.ASM



2   685	    0422  EB 00			     jmp _print_pseudographic_prefix_end
2   686	    0424			 _print_pseudographic_prefix_end:
2   687	    0424  C3			     ret
2   688
2   689	    0425			 set_level_shift:
2   690	    0425  5B			     pop bx
2   691	    0426  59			     pop cx  ; line level
2   692	    0427  53			     push bx
2   693
2   694	    0428  BB 045Fr		     lea bx, level_shift
2   695	    042B  03 D9			     add bx, cx
2   696	    042D  A0 046Ar		     mov al, byte ptr [space]
2   697	    0430  88 07			     mov byte ptr [bx],	al
2   698
2   699	    0432  B8 0001		     mov ax, 1
2   700
2   701	    0435  C3			     ret
2   702
2   703	    0436			 reset_level_shift:
2   704	    0436  5B			     pop bx
2   705	    0437  59			     pop cx  ; line level
2   706	    0438  53			     push bx
2   707
2   708	    0439  BB 045Fr		     lea bx, level_shift
2   709	    043C  03 D9			     add bx, cx
2   710	    043E  A0 045Dr		     mov al, byte ptr [old_level_shift]
2   711	    0441  88 07			     mov byte ptr [bx],	al
2   712
2   713	    0443  B8 0001		     mov ax, 1
2   714
2   715	    0446  C3			     ret
2   716
2   717	    0447			 print_string_with_length:
2   718	    0447  5B			     pop bx ; ret address
2   719	    0448  5E			     pop si ; string offset
2   720	    0449  59			     pop cx ; string length
2   721	    044A  53			     push bx; ret address
2   722	    044B  33 C0			     xor ax, ax
2   723	    044D			 _print_string_with_length_loop:
2   724	    044D  B4 02			     mov ah, 02h
2   725	    044F  8A 14			     mov dl, byte ptr [si]
2   726	    0451  CD 21			     int 21h
2   727	    0453  49			     dec cx
2   728	    0454  46			     inc si
2   729	    0455  83 F9	00		     cmp cx, 00h
2   730	    0458  74 02			     je	_print_string_with_length_end
2   731	    045A  EB F1			     jmp _print_string_with_length_loop
2   732	    045C			 _print_string_with_length_end:
2   733	    045C  C3			     ret
2   734
2   735					 ;
2   736					 ;   pseudographic
2   737					 ;
2   738	    045D  B3 24			 old_level_shift db 179, '$'
2   739	    045F  0A*(B3) 24		 level_shift db	10 dup(179), '$'
2   740	    046A  ?? 20	24		 space db, 32, '$'
2   741
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 14
tree.ASM



2   742	    046D  C3 24			 zero_first_file db 195, '$'
2   743	    046F  C0 24			 zero_end_file db 192, '$'
2   744
2   745	    0471  C2 24			 first_file_char db 194, '$'
2   746	    0473  C3 24			 middle_file_char db 195, '$'
2   747	    0475  C0 24			 end_file_char db 192, '$'
2   748
1   749					 include tmacro.asm
2   750					 load macro args
2   751					     irp d,<args>
2   752						 push d
2   753					     endm
2   754					 endm
2   755
2   756					 restore macro args
2   757					     irp d,<args>
2   758						 pop d
2   759					     endm
2   760					 endm
2   761
2   762					 exit macro
2   763					     mov ah, 00h
2   764					     int 21h
2   765					 endm
2   766
2   767					 print macro buf
2   768						 mov ah, 09h
2   769						 mov dx, buf
2   770						 int 21h
2   771					 endm
2   772
2   773					 print_range macro args
2   774					     irp d,<args>
2   775						 print <offset d>
2   776					     endm
2   777					 endm
2   778
2   779					 push_fragment macro buf, length
2   780					     local l1
2   781					     lea di, buf
2   782					     mov cx, length
2   783					     xor bx, bx
2   784					 l1:
2   785					     mov bl, byte ptr [di]
2   786					     push bx
2   787					     inc di
2   788					     dec cx
2   789					     cmp cx, 0
2   790					     jne l1
2   791					 endm
2   792
2   793					 pop_fragment macro buf, length
2   794					     local l1
2   795					     lea di, buf
2   796					     mov cx, length
2   797					     add di, cx
2   798					     dec di
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 15
tree.ASM



2   799					     xor bx, bx
2   800					 l1:
2   801					     pop bx
2   802					     mov byte ptr [di],	bl
2   803					     dec di
2   804					     dec cx
2   805					     cmp cx, 0
2   806					     jne l1
2   807					 endm
2   808
2   809					 set_dta macro dta
2   810					     lea dx, dta
2   811					     xor ax, ax
2   812					     mov ah, 1Ah
2   813					     int 21h
2   814					 endm
2   815
2   816					 break_point macro arg
2   817					     load <arg>
2   818					     xor arg, arg
2   819					     xor arg, arg
2   820					     xor arg, arg
2   821					     xor arg, arg
2   822					     xor arg, arg
2   823					     xor arg, arg
2   824					     xor arg, arg
2   825					     xor arg, arg
2   826					     restore <arg>
2   827					 endm
1   828					 include time.asm
2   829					 include bmacro.asm
3   830					 load macro args
3   831					     irp d,<args>
3   832						 push d
3   833					     endm
3   834					 endm
3   835
3   836					 restore macro args
3   837					     irp d,<args>
3   838						 pop d
3   839					     endm
3   840					 endm
3   841
3   842					 exit macro
3   843					     mov ah, 00h
3   844					     int 21h
3   845					 endm
3   846
3   847					 print macro buf
3   848						 mov ah, 09h
3   849						 mov dx, buf
3   850						 int 21h
3   851					 endm
3   852
3   853					 print_range macro args
3   854					     irp d,<args>
3   855						 print <offset d>
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 16
tree.ASM



3   856					     endm
3   857					 endm
3   858
3   859					 break_point macro arg
3   860					     load <arg>
3   861					     xor arg, arg
3   862					     xor arg, arg
3   863					     xor arg, arg
3   864					     xor arg, arg
3   865					     xor arg, arg
3   866					     xor arg, arg
3   867					     xor arg, arg
3   868					     xor arg, arg
3   869					     restore <arg>
3   870					 endm
3   871
3   872					 parse_byte_to_str macro from, to, length
3   873					     mov ax, length
3   874					     push ax
3   875					     mov ax, to
3   876					     push ax
3   877					     xor ax, ax
3   878					     mov al, from
3   879					     push ax
3   880					     call store_iint_to_string
3   881					 endm
3   882
3   883					 parse_word_to_str macro from, to, length
3   884					     mov ax, length
3   885					     push ax
3   886					     mov ax, to
3   887					     push ax
3   888					     xor ax, ax
3   889					     mov ax, from
3   890					     push ax
3   891					     call store_iint_to_string
3   892					 endm
2   893					 include pnum.asm
3   894
3   895	    0477			 store_iint_to_string:
3   896	    0477  5B			     pop bx
3   897	    0478  58			     pop ax ; integer
3   898	    0479  5E			     pop si ; memory for storing integer
3   899	    047A  5F			     pop di ; integer max length
3   900	    047B  53			     push bx
3   901
3   902	    047C  B9 0000		     mov cx, 0
3   903	    047F  BB 000A		     mov bx, 10
3   904	    0482			 _store_iint_to_string_direct:
3   905	    0482  3D 0000		     cmp ax, 0
3   906	    0485  74 08			     je	_store_iint_to_string_zero_padding_start
3   907
3   908	    0487  33 D2			     xor dx, dx
3   909	    0489  F7 F3			     div bx
3   910	    048B  52			     push dx
3   911	    048C  41			     inc cx
3   912
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 17
tree.ASM



3   913	    048D  EB F3			     jmp _store_iint_to_string_direct
3   914
3   915	    048F			 _store_iint_to_string_zero_padding_start:
3   916	    048F  2B F9			     sub di, cx
3   917	    0491			 _store_iint_to_string_zero_padding_loop:
3   918	    0491  83 FF	00		     cmp di, 0
3   919	    0494  7E 08			     jle _store_iint_to_string_zero_padding_end
3   920	    0496  BB 0000		     mov bx, 0
3   921	    0499  53			     push bx
3   922	    049A  4F			     dec di
3   923	    049B  41			     inc cx
3   924	    049C  EB F3			     jmp _store_iint_to_string_zero_padding_loop
3   925	    049E			 _store_iint_to_string_zero_padding_end:
3   926					 ; _store_iint_to_string_leading_zeros:
3   927					 ;     cmp cx, 0
3   928					 ;     jne _store_iint_to_string_leading_zeros_start
3   929					 ;     mov bx, 0
3   930					 ;     push bx
3   931					 ;     inc cx
3   932					 ; _store_iint_to_string_leading_zeros_start:
3   933					 ;     load <cx>
3   934					 ;     and cx, 1
3   935					 ;     cmp cx, 0
3   936					 ;     restore <cx>
3   937					 ;     je _store_iint_to_string_inverse
3   938					 ;     inc cx
3   939					 ;     mov bx, 0
3   940					 ;     push bx
3   941					 ;     jmp _store_iint_to_string_leading_zeros_start
3   942	    049E			 _store_iint_to_string_inverse:
3   943					     load <si>
5   944	    049E  56				 push si
3   945	    049F  03 F1			     add si, cx
3   946	    04A1  C6 04	24		     mov byte ptr [si],	'$'
3   947					     restore <si>
5   948	    04A4  5E				 pop si
3   949	    04A5			 _store_iint_to_string_inverse_loop:
3   950	    04A5  83 F9	00		     cmp cx, 0
3   951	    04A8  74 0A			     je	_store_iint_to_string_end
3   952
3   953	    04AA  5A			     pop dx
3   954	    04AB  80 C2	30		     add dl, 30h
3   955	    04AE  88 14			     mov byte ptr [si],	dl
3   956	    04B0  46			     inc si
3   957	    04B1  49			     dec cx
3   958
3   959	    04B2  EB F1			     jmp _store_iint_to_string_inverse_loop
3   960
3   961	    04B4			 _store_iint_to_string_end:
3   962	    04B4  C3			     ret
2   963
2   964	    04B5			 print_datetimestamp:
2   965	    04B5  5B			     pop bx
2   966	    04B6  59			     pop cx ; time
2   967	    04B7  5A			     pop dx ; date
2   968	    04B8  53			     push bx
2   969
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 18
tree.ASM



2   970	    04B9  BE 05BBr		     lea si, datetime
2   971
2   972					     ;
2   973					     ; date format
2   974					     ;
2   975					     load <cx, dx, si>
4   976	    04BC  51				 push cx
4   977	    04BD  52				 push dx
4   978	    04BE  56				 push si
2   979	    04BF  C1 FA	09		     sar dx, 9
2   980	    04C2  81 C2	07BC		     add dx, 1980
2   981					     parse_word_to_str dx, si, 4
3   982	    04C6  B8 0004		     mov ax, 4
3   983	    04C9  50			     push ax
3   984	    04CA  8B C6			     mov ax, si
3   985	    04CC  50			     push ax
3   986	    04CD  33 C0			     xor ax, ax
3   987	    04CF  8B C2			     mov ax, dx
3   988	    04D1  50			     push ax
3   989	    04D2  E8 FFA2		     call store_iint_to_string
2   990					     restore <si, dx, cx>
4   991	    04D5  5E				 pop si
4   992	    04D6  5A				 pop dx
4   993	    04D7  59				 pop cx
2   994					     break_point ax
3   995					     load <ax>
5   996	    04D8  50				 push ax
3   997	    04D9  33 C0			     xor ax, ax
3   998	    04DB  33 C0			     xor ax, ax
3   999	    04DD  33 C0			     xor ax, ax
3  1000	    04DF  33 C0			     xor ax, ax
3  1001	    04E1  33 C0			     xor ax, ax
3  1002	    04E3  33 C0			     xor ax, ax
3  1003	    04E5  33 C0			     xor ax, ax
3  1004	    04E7  33 C0			     xor ax, ax
3  1005					     restore <ax>
5  1006	    04E9  58				 pop ax
2  1007	    04EA  83 C6	04		     add si, 4
2  1008	    04ED  C6 04	2E		     mov byte ptr [si],	'.'
2  1009	    04F0  46			     inc si
2  1010
2  1011					     load <cx, dx, si>
4  1012	    04F1  51				 push cx
4  1013	    04F2  52				 push dx
4  1014	    04F3  56				 push si
2  1015	    04F4  81 E2	01E0		     and dx, 32	+ 64 + 128 + 256
2  1016	    04F8  C1 FA	05		     sar dx, 5
2  1017					     parse_byte_to_str dl, si, 2
3  1018	    04FB  B8 0002		     mov ax, 2
3  1019	    04FE  50			     push ax
3  1020	    04FF  8B C6			     mov ax, si
3  1021	    0501  50			     push ax
3  1022	    0502  33 C0			     xor ax, ax
3  1023	    0504  8A C2			     mov al, dl
3  1024	    0506  50			     push ax
3  1025	    0507  E8 FF6D		     call store_iint_to_string
2  1026					     restore <si, dx, cx>
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 19
tree.ASM



4  1027	    050A  5E				 pop si
4  1028	    050B  5A				 pop dx
4  1029	    050C  59				 pop cx
2  1030	    050D  83 C6	02		     add si, 2
2  1031	    0510  C6 04	2E		     mov byte ptr [si],	'.'
2  1032	    0513  46			     inc si
2  1033
2  1034					     load <cx, dx, si>
4  1035	    0514  51				 push cx
4  1036	    0515  52				 push dx
4  1037	    0516  56				 push si
2  1038	    0517  80 E2	1F		     and dl, 1 + 2 + 4 + 8 + 16
2  1039					     parse_byte_to_str dl, si, 2
3  1040	    051A  B8 0002		     mov ax, 2
3  1041	    051D  50			     push ax
3  1042	    051E  8B C6			     mov ax, si
3  1043	    0520  50			     push ax
3  1044	    0521  33 C0			     xor ax, ax
3  1045	    0523  8A C2			     mov al, dl
3  1046	    0525  50			     push ax
3  1047	    0526  E8 FF4E		     call store_iint_to_string
2  1048					     restore <si, dx, cx>
4  1049	    0529  5E				 pop si
4  1050	    052A  5A				 pop dx
4  1051	    052B  59				 pop cx
2  1052	    052C  83 C6	02		     add si, 2
2  1053	    052F  C6 04	20		     mov byte ptr [si],	' '
2  1054	    0532  46			     inc si
2  1055
2  1056					     ;
2  1057					     ; time format
2  1058					     ;
2  1059					     load <cx, dx, si>
4  1060	    0533  51				 push cx
4  1061	    0534  52				 push dx
4  1062	    0535  56				 push si
2  1063	    0536  C1 F9	0B		     sar cx, 11
2  1064					     parse_byte_to_str cl, si, 2
3  1065	    0539  B8 0002		     mov ax, 2
3  1066	    053C  50			     push ax
3  1067	    053D  8B C6			     mov ax, si
3  1068	    053F  50			     push ax
3  1069	    0540  33 C0			     xor ax, ax
3  1070	    0542  8A C1			     mov al, cl
3  1071	    0544  50			     push ax
3  1072	    0545  E8 FF2F		     call store_iint_to_string
2  1073					     restore <si, dx, cx>
4  1074	    0548  5E				 pop si
4  1075	    0549  5A				 pop dx
4  1076	    054A  59				 pop cx
2  1077	    054B  83 C6	02		     add si, 2
2  1078	    054E  C6 04	3A		     mov byte ptr [si],	':'
2  1079	    0551  46			     inc si
2  1080
2  1081					     load <cx, dx, si>
4  1082	    0552  51				 push cx
4  1083	    0553  52				 push dx
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 20
tree.ASM



4  1084	    0554  56				 push si
2  1085	    0555  81 E1	07E0		     and cx, 2016
2  1086	    0559  C1 F9	05		     sar cx, 5
2  1087					     parse_byte_to_str cl, si, 2
3  1088	    055C  B8 0002		     mov ax, 2
3  1089	    055F  50			     push ax
3  1090	    0560  8B C6			     mov ax, si
3  1091	    0562  50			     push ax
3  1092	    0563  33 C0			     xor ax, ax
3  1093	    0565  8A C1			     mov al, cl
3  1094	    0567  50			     push ax
3  1095	    0568  E8 FF0C		     call store_iint_to_string
2  1096					     restore <si, dx, cx>
4  1097	    056B  5E				 pop si
4  1098	    056C  5A				 pop dx
4  1099	    056D  59				 pop cx
2  1100	    056E  83 C6	02		     add si, 2
2  1101	    0571  C6 04	3A		     mov byte ptr [si],	':'
2  1102	    0574  46			     inc si
2  1103
2  1104					     load <cx, dx, si>
4  1105	    0575  51				 push cx
4  1106	    0576  52				 push dx
4  1107	    0577  56				 push si
2  1108	    0578  80 E1	0F		     and cl, 15
2  1109	    057B  D0 E1			     sal cl, 1
2  1110					     parse_byte_to_str cl, si, 2
3  1111	    057D  B8 0002		     mov ax, 2
3  1112	    0580  50			     push ax
3  1113	    0581  8B C6			     mov ax, si
3  1114	    0583  50			     push ax
3  1115	    0584  33 C0			     xor ax, ax
3  1116	    0586  8A C1			     mov al, cl
3  1117	    0588  50			     push ax
3  1118	    0589  E8 FEEB		     call store_iint_to_string
2  1119					     restore <si, dx, cx>
4  1120	    058C  5E				 pop si
4  1121	    058D  5A				 pop dx
4  1122	    058E  59				 pop cx
2  1123	    058F  83 C6	02		     add si, 2
2  1124	    0592  C6 04	24		     mov byte ptr [si],	'$'
2  1125	    0595  46			     inc si
2  1126
2  1127	    0596  C3			     ret
2  1128
2  1129	    0597  43 75	72 72 65 6E 74+	 hello_time db 'Current	time is: $'
   1130		  20 74	69 6D 65 20 69+
   1131		  73 3A	20 24
2  1132	    05A9  43 75	72 72 65 6E 74+	 hello_date db 'Current	date is: $'
   1133		  20 64	61 74 65 20 69+
   1134		  73 3A	20 24
2  1135	    05BB  14*(24)		 datetime db 20	dup('$')
2  1136	    05CF  3A 24			 time_semicolon	db ':',	'$'
2  1137	    05D1  20 24			 time_space db ' ', '$'
2  1138	    05D3  0A 24			 time_newline db 0Ah, '$'
2  1139	    05D5  80*(24)		 num db	128 dup('$')
1  1140
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 21
tree.ASM



1  1141	    0655			 count_subfiles_here:
1  1142	    0655  B8 03D4r		     lea ax, file_mask
1  1143	    0658  BE 0274r		     lea si, find_first_file
1  1144
1  1145	    065B  50			     push ax
1  1146	    065C  56			     push si
1  1147	    065D  E8 0017		     call count_subfiles_here_by_mask
1  1148					     load <ax>
3  1149	    0660  50				 push ax
1  1150	    0661  B8 03DAr		     mov ax, offset folder_mask
1  1151	    0664  BE 0281r		     mov si, offset find_first_folder
1  1152
1  1153	    0667  50			     push ax
1  1154	    0668  56			     push si
1  1155	    0669  E8 000B		     call count_subfiles_here_by_mask
1  1156	    066C  8B D8			     mov bx, ax
1  1157					     restore <ax>
3  1158	    066E  58				 pop ax
1  1159	    066F  03 D8			     add bx, ax
1  1160	    0671  8B C3			     mov ax, bx
1  1161	    0673  A3 088Er		     mov word ptr [current_max_entities], ax
1  1162	    0676  C3			     ret
1  1163
1  1164	    0677			 count_subfiles_here_by_mask:
1  1165	    0677  5B			     pop bx
1  1166	    0678  5E			     pop si		 ; find_first address
1  1167	    0679  58			     pop ax		 ; mask	address
1  1168	    067A  53			     push bx
1  1169
1  1170					     load <ax, si>
3  1171	    067B  50				 push ax
3  1172	    067C  56				 push si
1  1173					     set_dta count_dta
2  1174	    067D  BA 078Er		     lea dx, count_dta
2  1175	    0680  33 C0			     xor ax, ax
2  1176	    0682  B4 1A			     mov ah, 1Ah
2  1177	    0684  CD 21			     int 21h
1  1178					     restore <si, ax>
3  1179	    0686  5E				 pop si
3  1180	    0687  58				 pop ax
1  1181
1  1182	    0688  B9 0000		     mov cx, 0
1  1183					     load <cx>
3  1184	    068B  51				 push cx
1  1185	    068C  50			     push ax
1  1186	    068D  FF D6			     call si
1  1187	    068F  72 17			     jc	_count_subfiles_from_end
1  1188	    0691			 _count_subfiles_from_loop:
1  1189	    0691  B8 078Er		     lea ax, count_dta
1  1190	    0694  05 001E		     add ax, 1Eh
1  1191	    0697  8B D8			     mov bx, ax
1  1192	    0699  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1193	    069C  74 03			     je	_count_subfiles_from_loop_next
1  1194
1  1195					     restore <cx>
3  1196	    069E  59				 pop cx
1  1197	    069F  41			     inc cx
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 22
tree.ASM



1  1198					     load <cx>
3  1199	    06A0  51				 push cx
1  1200	    06A1			 _count_subfiles_from_loop_next:
1  1201	    06A1  E8 FBEA		     call find_next
1  1202	    06A4  72 02			     jc	_count_subfiles_from_end
1  1203
1  1204	    06A6  EB E9			     jmp _count_subfiles_from_loop
1  1205	    06A8			 _count_subfiles_from_end:
1  1206					     restore <cx>
3  1207	    06A8  59				 pop cx
1  1208	    06A9  8B C1			     mov ax, cx
1  1209	    06AB  C3			     ret
1  1210
1  1211	    06AC			 show_filename_from_dta:
1  1212	    06AC  5B			     pop bx
1  1213	    06AD  59			     pop cx  ; deep level
1  1214	    06AE  58			     pop ax  ; entity count
1  1215	    06AF  53			     push bx
1  1216
1  1217	    06B0			 _show_filename_from_dta_valid_name:
1  1218					     ;
1  1219					     ;	 pseudo	graphic	prefix
1  1220					     ;
1  1221					     load <ax>
3  1222	    06B0  50				 push ax
1  1223	    06B1  B8 080Er		     lea ax, dta
1  1224
1  1225	    06B4  05 001E		     add ax, 1Eh
1  1226	    06B7  8B D8			     mov bx, ax
1  1227					     restore <ax>
3  1228	    06B9  58				 pop ax
1  1229
1  1230					     load <cx, bx>
3  1231	    06BA  51				 push cx
3  1232	    06BB  53				 push bx
1  1233	    06BC  50			     push ax	 ; entity count
1  1234	    06BD  51			     push cx	 ; deep	level
1  1235	    06BE  E8 FD1F		     call print_pseudographic_prefix
1  1236					     restore <bx, cx>
3  1237	    06C1  5B				 pop bx
3  1238	    06C2  59				 pop cx
1  1239
1  1240					     load <bx>
3  1241	    06C3  53				 push bx
1  1242	    06C4  B9 000D		     mov cx, 13
1  1243	    06C7  51			     push cx
1  1244	    06C8  53			     push bx
1  1245	    06C9  E8 FC8C		     call count_no_space_no_zero_letters
1  1246	    06CC  8B C8			     mov cx, ax
1  1247					     restore <bx>
3  1248	    06CE  5B				 pop bx
1  1249	    06CF  51			     push cx
1  1250	    06D0  53			     push bx
1  1251	    06D1  E8 FD73		     call print_string_with_length
1  1252
1  1253	    06D4			 _show_filename_from_dta_datetime:
1  1254	    06D4  B0 01			     mov al, 1
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 23
tree.ASM



1  1255	    06D6  38 06	03D2r		     cmp byte ptr [use_time], al
1  1256	    06DA  75 05			     jne _show_filename_from_dta_storage
1  1257	    06DC  E8 001A		     call show_datetime
1  1258	    06DF  EB 00			     jmp _show_filename_from_dta_storage
1  1259
1  1260	    06E1			 _show_filename_from_dta_storage:
1  1261	    06E1  B0 01			     mov al, 1
1  1262	    06E3  38 06	03D1r		     cmp byte ptr [use_storage], al
1  1263	    06E7  75 05			     jne _show_filename_from_dta_end
1  1264	    06E9  E8 002A		     call show_storage
1  1265	    06EC  EB 00			     jmp _show_filename_from_dta_end
1  1266
1  1267	    06EE			  _show_filename_from_dta_end:
1  1268					     print_range <newline>
3  1269						 print <offset newline>
4  1270	    06EE  B4 09				 mov ah, 09h
4  1271	    06F0  BA 0356r			 mov dx, offset	newline
4  1272	    06F3  CD 21				 int 21h
1  1273	    06F5  B8 0001		     mov ax, 1
1  1274	    06F8  C3			     ret
1  1275
1  1276	    06F9			 show_datetime:
1  1277	    06F9  BB 080Er		     lea bx, dta
1  1278	    06FC  8B 4F	16		     mov cx, word ptr [bx + 16h]
1  1279	    06FF  8B 57	18		     mov dx, word ptr [bx + 18h]
1  1280	    0702  52			     push dx
1  1281	    0703  51			     push cx
1  1282	    0704  E8 FDAE		     call print_datetimestamp
1  1283					     print_range <time_space, datetime>
3  1284						 print <offset time_space>
4  1285	    0707  B4 09				 mov ah, 09h
4  1286	    0709  BA 05D1r			 mov dx, offset	time_space
4  1287	    070C  CD 21				 int 21h
3  1288						 print <offset datetime>
4  1289	    070E  B4 09				 mov ah, 09h
4  1290	    0710  BA 05BBr			 mov dx, offset	datetime
4  1291	    0713  CD 21				 int 21h
1  1292	    0715  C3			     ret
1  1293
1  1294	    0716			 show_storage:
1  1295	    0716  BA 0000		     mov dx, 0
1  1296	    0719  52			     push dx
1  1297	    071A  BB 080Er		     lea bx, dta
1  1298	    071D  BA 074Er		     lea dx, storage
1  1299	    0720  52			     push dx
1  1300	    0721  8B 57	1A		     mov dx, word ptr [bx + 1Ah]
1  1301	    0724  52			     push dx
1  1302	    0725  E8 FD4F		     call store_iint_to_string
1  1303					     print_range <time_space, storage>
3  1304						 print <offset time_space>
4  1305	    0728  B4 09				 mov ah, 09h
4  1306	    072A  BA 05D1r			 mov dx, offset	time_space
4  1307	    072D  CD 21				 int 21h
3  1308						 print <offset storage>
4  1309	    072F  B4 09				 mov ah, 09h
4  1310	    0731  BA 074Er			 mov dx, offset	storage
4  1311	    0734  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 24
tree.ASM



1  1312	    0736  C3			     ret
1  1313
1  1314	    0737			 is_valid_name:
1  1315	    0737  5B			     pop bx
1  1316	    0738  59			     pop cx	 ; deep	level
1  1317	    0739  53			     push bx
1  1318
1  1319	    073A  B8 080Er		     lea ax, dta
1  1320	    073D  05 001E		     add ax, 1Eh
1  1321	    0740  8B D8			     mov bx, ax
1  1322	    0742  B8 0001		     mov ax, 1
1  1323	    0745  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1324	    0748  75 03			     jne _is_valid_name_end
1  1325	    074A  B8 0000		     mov ax, 0
1  1326	    074D			 _is_valid_name_end:
1  1327	    074D  C3			     ret
1  1328
1  1329	    074E  40*(24)		 storage db 64 dup('$')
1  1330	    078E  80*(00)		 count_dta db 128 dup(0)
1  1331	    080E  80*(00)		 dta db	128 dup(0)
1  1332	    088E  0000			 current_max_entities dw 0
1  1333
   1334
   1335					 ;
   1336					 ; error codes
   1337					 ;
   1338	    0890  12			 no_more_files db 18
   1339
   1340					 ;
   1341					 ; error messages
   1342					 ;
   1343	    0891  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
   1344		  72 73	74 20 66 69 6C+
   1345		  65 6E	61 6D 65 73 20+
   1346		  66 61	69 6C 73 2E 24
   1347	    08AD  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
   1348		  78 74	20 66 69 6C 65+
   1349		  6E 61	6D 65 73 20 66+
   1350		  61 69	6C 73 2E 24
   1351
   1352					 ;
   1353					 ; int variables
   1354					 ;
   1355	    08C8  0000			 current_id_entity dw 0
   1356
   1357
   1358					 ;
   1359					 ; strings
   1360					 ;
   1361	    08CA  2E 2E	00		 parent_folder db '..',	00h
   1362	    08CD  40*(00)		 root_folder db	64 dup(00h)
   1363					 end start
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 25
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:01CE
??0001				  Near	 DGROUP:022E
??DATE				  Text	 "12/23/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "12:13:29"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:03DC
CD				  Near	 DGROUP:02B3
CD_ERROR			  Near	 DGROUP:02C1
CD_FAILS			  Byte	 DGROUP:033E
COUNT_DTA			  Byte	 DGROUP:078E
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0358
COUNT_SUBFILES_HERE		  Near	 DGROUP:0655
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:0677
CURRENT_ID_ENTITY		  Word	 DGROUP:08C8
CURRENT_MAX_ENTITIES		  Word	 DGROUP:088E
DATETIME			  Byte	 DGROUP:05BB
DEEP_LEVEL			  Byte	 DGROUP:03D3
DTA				  Byte	 DGROUP:080E
END_FILE_CHAR			  Byte	 DGROUP:0475
FILE_EXT			  Byte	 DGROUP:03D5
FILE_MASK			  Byte	 DGROUP:03D4
FIND_FIRST_ERROR		  Near	 DGROUP:0253
FIND_FIRST_FAILS		  Byte	 DGROUP:0891
FIND_FIRST_FILE			  Near	 DGROUP:0274
FIND_FIRST_FOLDER		  Near	 DGROUP:0281
FIND_NEXT			  Near	 DGROUP:028E
FIND_NEXT_ERROR			  Near	 DGROUP:0262
FIND_NEXT_FAILS			  Byte	 DGROUP:08AD
FIRST_FILE_CHAR			  Byte	 DGROUP:0471
FOLDER_MASK			  Byte	 DGROUP:03DA
HELLO_DATE			  Byte	 DGROUP:05A9
HELLO_TIME			  Byte	 DGROUP:0597
IS_FOLDER			  Near	 DGROUP:0293
IS_VALID_NAME			  Near	 DGROUP:0737
LEVEL_SHIFT			  Byte	 DGROUP:045F
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0153
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0125
MIDDLE_FILE_CHAR		  Byte	 DGROUP:0473
NEWLINE				  Byte	 DGROUP:0356
NO_MORE_FILES			  Byte	 DGROUP:0890
NUM				  Byte	 DGROUP:05D5
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 26
Symbol Table



OLD_LEVEL_SHIFT			  Byte	 DGROUP:045D
PARENT_FOLDER			  Byte	 DGROUP:08CA
PARSE_ARGS			  Near	 DGROUP:038C
PARSE_COMMAND_LINE		  Near	 DGROUP:0377
PARSE_D				  Near	 DGROUP:03A4
PARSE_END			  Near	 DGROUP:03D0
PARSE_F				  Near	 DGROUP:03B2
PARSE_S				  Near	 DGROUP:03BE
PARSE_T				  Near	 DGROUP:03C7
PRINT_DATETIMESTAMP		  Near	 DGROUP:04B5
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:03E0
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0447
RESET_LEVEL_SHIFT		  Near	 DGROUP:0436
ROOT_FOLDER			  Byte	 DGROUP:08CD
SAVE_CWD			  Near	 DGROUP:02E0
SET_LEVEL_SHIFT			  Near	 DGROUP:0425
SHOW_DATETIME			  Near	 DGROUP:06F9
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:06AC
SHOW_STORAGE			  Near	 DGROUP:0716
SPACE				  Byte	 DGROUP:046A
START				  Near	 DGROUP:0100
STORAGE				  Byte	 DGROUP:074E
STORE_IINT_TO_STRING		  Near	 DGROUP:0477
TIME_NEWLINE			  Byte	 DGROUP:05D3
TIME_SEMICOLON			  Byte	 DGROUP:05CF
TIME_SPACE			  Byte	 DGROUP:05D1
USE_STORAGE			  Byte	 DGROUP:03D1
USE_TIME			  Byte	 DGROUP:03D2
WORKING_FOLDER			  Byte	 DGROUP:02FE
ZERO_END_FILE			  Byte	 DGROUP:046F
ZERO_FIRST_FILE			  Byte	 DGROUP:046D
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0376
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:035F
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:06A8
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:0691
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:06A1
_IS_FOLDER_END			  Near	 DGROUP:02B2
_IS_FOLDER_FALSE		  Near	 DGROUP:02AD
_IS_FOLDER_TRUE			  Near	 DGROUP:02A8
_IS_VALID_NAME_END		  Near	 DGROUP:074D
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:024E
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:017A
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:01C4
EUDOGRAPHIC_HACK_END
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0241
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0424
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:03F5
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:041B
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0409
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0412
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:045C
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:044D
_SHOW_FILENAME_FROM_DTA_DATETIME  Near	 DGROUP:06D4
Turbo Assembler	 Version 4.1	    12/23/19 12:13:31	    Page 27
Symbol Table



_SHOW_FILENAME_FROM_DTA_END	  Near	 DGROUP:06EE
_SHOW_FILENAME_FROM_DTA_STORAGE	  Near	 DGROUP:06E1
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:06B0
ME
_STORE_IINT_TO_STRING_DIRECT	  Near	 DGROUP:0482
_STORE_IINT_TO_STRING_END	  Near	 DGROUP:04B4
_STORE_IINT_TO_STRING_INVERSE	  Near	 DGROUP:049E
_STORE_IINT_TO_STRING_INVERSE_LO  Near	 DGROUP:04A5
OP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:049E
NG_END
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:0491
NG_LOOP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:048F
NG_START

Macro Name

BREAK_POINT
EXIT
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
RESTORE
SET_DTA

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  090D Word	  Public  CODE
