Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 _cd macro root_addr
1     3					     xor ax, ax
1     4					     mov ah, 3Bh
1     5					     mov dx, root_addr
1     6					     int 21h
1     7					 endm
1     8
1     9					 mcwd macro deviceid, buf
1    10					     xor ax, ax
1    11					     mov ah, 47h
1    12					     mov dl, deviceid
1    13					     mov si, offset buf
1    14					     int 21h
1    15					 endm
1    16
1    17					 parse_filename	macro fcb, filename
1    18					     xor ax, ax
1    19					     mov ah, 29h
1    20					     mov si, offset filename
1    21					     mov di, offset fcb
1    22
1    23					     int 21h
1    24					 endm
1    25
1    26					 parse_first macro fcb
1    27					     xor ax, ax
1    28					     mov ah, 11h
1    29					     mov dx, offset fcb
1    30					     int 21h
1    31					 endm
1    32
1    33					 parse_next macro fcb
1    34					     xor ax, ax
1    35					     mov ah, 12h
1    36					     mov dx, offset fcb
1    37					     int 21h
1    38					 endm
1    39
1    40
1    41					 set_dta macro addr
1    42					     xor ax, ax
1    43					     mov ah, 1Ah
1    44					     mov dx, offset addr
1    45					     int 21h
1    46					 endm
1    47
1    48					 get_dta macro
1    49					     mov ah, 2fh
1    50					     int 21h
1    51					 endm
1    52
1    53					 load macro args
1    54					     irp d,<args>
1    55						 push d
1    56					     endm
1    57					 endm
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 2
tree.ASM



1    58
1    59					 restore macro args
1    60					     irp d,<args>
1    61						 pop d
1    62					     endm
1    63					 endm
1    64
1    65					 exit macro
1    66					     mov ax, 0
1    67					     int 21h
1    68					 endm
1    69
1    70					 print_range macro args
1    71					     irp d,<args>
1    72						 print <offset d>
1    73					     endm
1    74					 endm
1    75
1    76					 print macro buf
1    77					     xor ax, ax
1    78						 mov ah, 09h
1    79						 mov dx, buf
1    80						 int 21h
1    81					 endm
1    82
     83
     84	    0000			 model tiny
     85					 .386
     86	    0000			 .code
     87					 org 100h
     88	    0100			 start:
     89	    0100  E8 013A		     call save_drive
     90	    0103  E8 012D		     call save_cwd
     91	    0106  E8 0029		     call parse_root_from_command_line
     92	    0109  50			     push ax
     93	    010A  E8 0103		     call cd
     94	    010D  0F 82	010B		     jC	cd_error
     95					     set_dta fcb
1    96	    0111  33 C0			     xor ax, ax
1    97	    0113  B4 1A			     mov ah, 1Ah
1    98	    0115  BA 02C1r		     mov dx, offset fcb
1    99	    0118  CD 21			     int 21h
    100					     parse_filename fcb, filename
1   101	    011A  33 C0			     xor ax, ax
1   102	    011C  B4 29			     mov ah, 29h
1   103	    011E  BE 0279r		     mov si, offset filename
1   104	    0121  BF 02C1r		     mov di, offset fcb
1   105	    0124  CD 21			     int 21h
    106	    0126  3A 06	024Br		     cmp al, byte ptr [parse_filename_function_falls]
    107	    012A  74 2A			     je	parsing_error
    108	    012C  3A 06	024Dr		     cmp al, byte ptr [parse_filename_function_with_wildcards]
    109	    0130  74 38			     je	parsing_wildcards
    110	    0132			 parse_root_from_command_line:
    111	    0132  BE 0080		     mov si, 80h
    112	    0135  B9 0040		     mov cx, 64
    113	    0138  51			     push cx
    114	    0139  56			     push si
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 3
tree.ASM



    115	    013A  E8 00B5		     call count_letters_from_command_line
    116	    013D  05 0080		     add ax, 80h
    117	    0140  50			     push ax
    118	    0141  E8 009E		     call skip_spaces
    119	    0144  50			     push ax			 ; save	root_start
    120	    0145  B9 0040		     mov cx, 64
    121	    0148  51			     push cx
    122	    0149  50			     push ax
    123	    014A  E8 00A5		     call count_letters_from_command_line
    124	    014D  5B			     pop bx
    125	    014E  53			     push bx
    126	    014F  03 D8			     add bx, ax
    127	    0151  C6 07	00		     mov byte ptr [bx],	00h	 ; set end of root
    128	    0154  58			     pop ax
    129	    0155  C3			     ret
    130	    0156			 parsing_error:
    131					     print_range <parse_fails, newline>
2   132						 print <offset parse_fails>
3   133	    0156  33 C0			     xor ax, ax
3   134	    0158  B4 09				 mov ah, 09h
3   135	    015A  BA 0250r			 mov dx, offset	parse_fails
3   136	    015D  CD 21				 int 21h
2   137						 print <offset newline>
3   138	    015F  33 C0			     xor ax, ax
3   139	    0161  B4 09				 mov ah, 09h
3   140	    0163  BA 0275r			 mov dx, offset	newline
3   141	    0166  CD 21				 int 21h
    142	    0168  EB 1D			     jmp program_end
    143	    016A			 parsing_wildcards:
    144					     parse_first fcb
1   145	    016A  33 C0			     xor ax, ax
1   146	    016C  B4 11			     mov ah, 11h
1   147	    016E  BA 02C1r		     mov dx, offset fcb
1   148	    0171  CD 21			     int 21h
    149	    0173			 parsing_wildcards_loop:
    150	    0173  3A 06	024Er		     cmp al, byte ptr [parse_iter_filename_found_code]
    151	    0177  75 0E			     jne program_end
    152	    0179  E8 0017		     call print_fname_from_fcb
    153					     parse_next	fcb
1   154	    017C  33 C0			     xor ax, ax
1   155	    017E  B4 12			     mov ah, 12h
1   156	    0180  BA 02C1r		     mov dx, offset fcb
1   157	    0183  CD 21			     int 21h
    158	    0185  EB EC			     jmp parsing_wildcards_loop
    159	    0187			 program_end:
    160	    0187  B8 027Er		     mov ax, offset cwd_full_name
    161	    018A  50			     push ax
    162	    018B  E8 0082		     call cd
    163					     exit
1   164	    018E  B8 0000		     mov ax, 0
1   165	    0191  CD 21			     int 21h
    166	    0193			 print_fname_from_fcb:
    167					     ;
    168					     ; fname
    169					     ;
    170	    0193  BB 02C2r		     mov bx, offset fcb	+ 01h
    171	    0196  B9 0008		     mov cx, 8
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 4
tree.ASM



    172	    0199  51			     push cx
    173	    019A  53			     push bx
    174	    019B  E8 0054		     call count_letters_from_command_line
    175	    019E  BB 02C2r		     mov bx, offset fcb	+ 01h
    176	    01A1  50			     push ax
    177	    01A2  53			     push bx
    178	    01A3  E8 0026		     call print_string_with_length
    179
    180					     print_range <dot>
2   181						 print <offset dot>
3   182	    01A6  33 C0			     xor ax, ax
3   183	    01A8  B4 09				 mov ah, 09h
3   184	    01AA  BA 0277r			 mov dx, offset	dot
3   185	    01AD  CD 21				 int 21h
    186					     ;
    187					     ; ext
    188					     ;
    189	    01AF  BB 02CAr		     mov bx, offset fcb	+ 09h
    190	    01B2  B9 0003		     mov cx, 3
    191	    01B5  51			     push cx
    192	    01B6  53			     push bx
    193	    01B7  E8 0038		     call count_letters_from_command_line
    194	    01BA  BB 02CAr		     mov bx, offset fcb	+ 09h
    195	    01BD  50			     push ax
    196	    01BE  53			     push bx
    197	    01BF  E8 000A		     call print_string_with_length
    198					     print_range <newline>
2   199						 print <offset newline>
3   200	    01C2  33 C0			     xor ax, ax
3   201	    01C4  B4 09				 mov ah, 09h
3   202	    01C6  BA 0275r			 mov dx, offset	newline
3   203	    01C9  CD 21				 int 21h
    204	    01CB  C3			     ret
    205
    206	    01CC			 print_string_with_length:
    207	    01CC  5B			     pop bx ; ret address
    208	    01CD  5E			     pop si ; string offset
    209	    01CE  59			     pop cx ; string length
    210	    01CF  53			     push bx; ret address
    211	    01D0  33 C0			     xor ax, ax
    212	    01D2			 _print_string_with_length_loop:
    213	    01D2  B4 02			     mov ah, 02h
    214	    01D4  8A 14			     mov dl, byte ptr [si]
    215	    01D6  CD 21			     int 21h
    216	    01D8  49			     dec cx
    217	    01D9  46			     inc si
    218	    01DA  83 F9	00		     cmp cx, 00h
    219	    01DD  74 02			     je	_print_string_with_length_end
    220	    01DF  EB F1			     jmp _print_string_with_length_loop
    221	    01E1			 _print_string_with_length_end:
    222	    01E1  C3			     ret
    223	    01E2			 skip_spaces:
    224	    01E2  33 C0			     xor ax, ax
    225	    01E4  5B			     pop bx ; ret addr
    226	    01E5  5E			     pop si ; str addr
    227	    01E6  53			     push bx ; ret addr
    228	    01E7			 _skip_spaces_loop:
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 5
tree.ASM



    229	    01E7  80 3C	20		     cmp byte ptr [si],	20h
    230	    01EA  75 03			     jne _skip_spaces_end
    231	    01EC  46			     inc si
    232	    01ED  EB F8			     jmp _skip_spaces_loop
    233	    01EF			 _skip_spaces_end:
    234	    01EF  8B C6			     mov ax, si
    235	    01F1  C3			     ret
    236	    01F2			 count_letters_from_command_line:
    237	    01F2  5B			     pop bx ; ret address
    238	    01F3  5E			     pop si ; string offset
    239	    01F4  59			     pop cx ; string length
    240	    01F5  53			     push bx ; ret address
    241	    01F6  B8 0000		     mov ax, 0
    242	    01F9			 _count_non_space_symbols_loop:
    243	    01F9  80 3C	20		     cmp byte ptr [si],	20h
    244	    01FC  74 0D			     je	_count_non_space_symbols_end
    245	    01FE  80 3C	0D		     cmp byte ptr [si],	0Dh
    246	    0201  74 08			     je	_count_non_space_symbols_end
    247	    0203  3B C1			     cmp ax, cx
    248	    0205  74 04			     je	_count_non_space_symbols_end
    249	    0207  40			     inc ax
    250	    0208  46			     inc si
    251	    0209  EB EE			     jmp _count_non_space_symbols_loop
    252	    020B			 _count_non_space_symbols_end:
    253	    020B  C3			     ret
    254
    255
    256	    020C			 list_files_from:
    257	    020C  5B			     pop bx ; ret addr
    258	    020D  5A			     pop dx ; root file_name
    259	    020E  53			     push bx ; ret addr
    260
    261	    020F  C3			     ret
    262	    0210			 cd:
    263	    0210  5B			     pop bx ; ret addr
    264	    0211  5A			     pop dx ; root address
    265	    0212  53			     push bx ; ret addr
    266
    267	    0213  33 C0			     xor ax, ax
    268	    0215  B4 3B			     mov ah, 3Bh
    269	    0217  CD 21			     int 21h
    270
    271	    0219  72 01			     jc	cd_error
    272	    021B  C3			     ret
    273	    021C			 cd_error:
    274					     print_range <cd_fails, newline>
2   275						 print <offset cd_fails>
3   276	    021C  33 C0			     xor ax, ax
3   277	    021E  B4 09				 mov ah, 09h
3   278	    0220  BA 025Dr			 mov dx, offset	cd_fails
3   279	    0223  CD 21				 int 21h
2   280						 print <offset newline>
3   281	    0225  33 C0			     xor ax, ax
3   282	    0227  B4 09				 mov ah, 09h
3   283	    0229  BA 0275r			 mov dx, offset	newline
3   284	    022C  CD 21				 int 21h
    285					     exit
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 6
tree.ASM



1   286	    022E  B8 0000		     mov ax, 0
1   287	    0231  CD 21			     int 21h
    288	    0233			 save_cwd:
    289	    0233  BE 0281r		     mov si, offset cwd_dir_name
    290	    0236  32 D2			     xor dl, dl			 ; Actual drive
    291	    0238  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    292	    023A  CD 21			     int 21h
    293	    023C  C3			     ret
    294	    023D			 save_drive:
    295	    023D  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    296	    023F  CD 21			     int 21h
    297
    298	    0241  8A D0			     mov dl, al
    299	    0243  80 C2	41		     add dl, 41h		 ; SAVE	AS CHARACTER
    300
    301	    0246  88 16	027Er		     mov byte ptr [cwd_full_name], dl
    302	    024A  C3			     ret
    303
    304	    024B  7F			 parse_filename_function_falls db 127
    305	    024C  00			 parse_filename_function_no_wildcards db 00h
    306	    024D  01			 parse_filename_function_with_wildcards	db 01h
    307
    308	    024E  00			 parse_iter_filename_found_code	db 00h
    309	    024F  7F			 parse_iter_no_filename_found_code db 127
    310
    311	    0250  50 61	72 73 65 20 66+	 parse_fails db	'Parse fails.$'
    312		  61 69	6C 73 2E 24
    313	    025D  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    314		  64 69	72 65 63 74 6F+
    315		  72 79	20 66 61 69 6C+
    316		  73 2E	24
    317	    0275  0A 24			 newline db 0Ah, '$'
    318	    0277  2E 24			 dot db	'.', '$'
    319	    0279  2A 2E	2A		 filename db '*.*'
    320	    027C  0000			 root_addr dw 0
    321	    027E  63 3A	5C		 cwd_full_name db 'c:\'
    322	    0281  40*(00)		 cwd_dir_name db 64 dup(00h)
    323	    02C1  80*(00)		 fcb db	128 dup(00h)
    324					 end start
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/07/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "09:02:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0210
CD_ERROR			  Near	 DGROUP:021C
CD_FAILS			  Byte	 DGROUP:025D
COUNT_LETTERS_FROM_COMMAND_LINE	  Near	 DGROUP:01F2
CWD_DIR_NAME			  Byte	 DGROUP:0281
CWD_FULL_NAME			  Byte	 DGROUP:027E
DOT				  Byte	 DGROUP:0277
FCB				  Byte	 DGROUP:02C1
FILENAME			  Byte	 DGROUP:0279
LIST_FILES_FROM			  Near	 DGROUP:020C
NEWLINE				  Byte	 DGROUP:0275
PARSE_FAILS			  Byte	 DGROUP:0250
PARSE_FILENAME_FUNCTION_FALLS	  Byte	 DGROUP:024B
PARSE_FILENAME_FUNCTION_NO_WILDC  Byte	 DGROUP:024C
ARDS
PARSE_FILENAME_FUNCTION_WITH_WIL  Byte	 DGROUP:024D
DCARDS
PARSE_ITER_FILENAME_FOUND_CODE	  Byte	 DGROUP:024E
PARSE_ITER_NO_FILENAME_FOUND_COD  Byte	 DGROUP:024F
E
PARSE_ROOT_FROM_COMMAND_LINE	  Near	 DGROUP:0132
PARSING_ERROR			  Near	 DGROUP:0156
PARSING_WILDCARDS		  Near	 DGROUP:016A
PARSING_WILDCARDS_LOOP		  Near	 DGROUP:0173
PRINT_FNAME_FROM_FCB		  Near	 DGROUP:0193
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:01CC
PROGRAM_END			  Near	 DGROUP:0187
ROOT_ADDR			  Word	 DGROUP:027C
SAVE_CWD			  Near	 DGROUP:0233
SAVE_DRIVE			  Near	 DGROUP:023D
SKIP_SPACES			  Near	 DGROUP:01E2
START				  Near	 DGROUP:0100
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:020B
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:01F9
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:01E1
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:01D2
_SKIP_SPACES_END		  Near	 DGROUP:01EF
_SKIP_SPACES_LOOP		  Near	 DGROUP:01E7
Turbo Assembler	 Version 4.1	    12/07/19 09:02:19	    Page 8
Symbol Table




Macro Name

EXIT
GET_DTA
LOAD
MCWD
PARSE_FILENAME
PARSE_FIRST
PARSE_NEXT
PRINT
PRINT_RANGE
RESTORE
SET_DTA
_CD

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0341 Word	  Public  CODE
