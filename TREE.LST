Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 2
tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
     80
     81	    0000			 model tiny
     82					 .386
     83	    0000			 .code
     84					 org 100h
     85	    0100			 start:
     86	    0100  E8 01FE		     call save_cwd
     87	    0103  B8 0000		     mov ax, 0
     88	    0106  50			     push ax
     89	    0107  50			     push ax
     90	    0108  E8 056B		     call set_dword
     91					     set_dta dta
1    92	    010B  BA 08C5r		     lea dx, dta
1    93	    010E  33 C0			     xor ax, ax
1    94	    0110  B4 1A			     mov ah, 1Ah
1    95	    0112  CD 21			     int 21h
     96	    0114  E8 0281		     call parse_command_line
     97					     ;
     98					     ;	 start tree
     99					     ;
    100	    0117  B8 0984r		     mov ax, offset root_folder
    101	    011A  B9 0000		     mov cx, 0
    102	    011D  51			     push cx
    103	    011E  50			     push ax
    104	    011F  E8 000B		     call list_subfiles_recursive_from
    105					     ;
    106					     ;	 cd to start folder
    107					     ;
    108	    0122  B8 031Fr		     mov ax, offset working_folder
    109	    0125  50			     push ax
    110	    0126  E8 01AB		     call cd
    111					     exit
1   112	    0129  B4 00			     mov ah, 00h
1   113	    012B  CD 21			     int 21h
    114
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 3
tree.ASM



    115	    012D			 list_subfiles_recursive_from:
    116	    012D  5B			     pop bx	 ; ret address
    117	    012E  58			     pop ax	 ; deep	level
    118	    012F  59			     pop cx	 ; root	folder offset
    119	    0130  53			     push bx
    120					     load <cx>
2   121	    0131  51				 push cx
    122	    0132  50			     push ax
    123	    0133  E8 019E		     call cd
    124					     restore <cx>
2   125	    0136  59				 pop cx
    126					     ;
    127					     ; list subfolder
    128					     ;
    129	    0137  BE 02A2r		     mov si, offset find_first_folder
    130	    013A  BB 0000		     mov bx, 0
    131	    013D  B8 03FBr		     mov ax, offset folder_mask
    132					     load <cx>
2   133	    0140  51				 push cx
    134	    0141  56			     push si
    135	    0142  53			     push bx
    136	    0143  50			     push ax
    137	    0144  51			     push cx
    138	    0145  E8 0013		     call list_subfiles_recursive
    139					     restore <cx>
2   140	    0148  59				 pop cx
    141					     ;
    142					     ; list files
    143					     ;
    144	    0149  BE 0295r		     mov si, offset find_first_file
    145	    014C  8B D8			     mov bx, ax
    146	    014E  B8 03F5r		     mov ax, offset file_mask
    147					     load <cx>
2   148	    0151  51				 push cx
    149	    0152  56			     push si
    150	    0153  53			     push bx
    151	    0154  50			     push ax
    152	    0155  51			     push cx
    153	    0156  E8 0002		     call list_subfiles_recursive
    154					     restore <cx>
2   155	    0159  59				 pop cx
    156	    015A  C3			     ret
    157
    158	    015B			 list_subfiles_recursive:
    159					     ;
    160					     ;	 save current files count
    161					     ;
    162	    015B  E8 0595		     call count_subfiles_here
    163	    015E  A3 0945r		     mov word ptr [current_max_entities], ax
    164
    165	    0161  5A			     pop dx
    166	    0162  59			     pop cx ; deep level
    167	    0163  58			     pop ax ; filemask offset
    168	    0164  5B			     pop bx ; current index
    169	    0165  5E			     pop si ; search address
    170	    0166  52			     push dx
    171
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 4
tree.ASM



    172					     load <cx, ax, bx, si>
2   173	    0167  51				 push cx
2   174	    0168  50				 push ax
2   175	    0169  53				 push bx
2   176	    016A  56				 push si
    177					     set_dta dta
1   178	    016B  BA 08C5r		     lea dx, dta
1   179	    016E  33 C0			     xor ax, ax
1   180	    0170  B4 1A			     mov ah, 1Ah
1   181	    0172  CD 21			     int 21h
    182					     restore <si, bx, ax, cx>
2   183	    0174  5E				 pop si
2   184	    0175  5B				 pop bx
2   185	    0176  58				 pop ax
2   186	    0177  59				 pop cx
    187
    188					     load <bx, cx>
2   189	    0178  53				 push bx
2   190	    0179  51				 push cx
    191	    017A  50			     push ax
    192	    017B  FF D6			     call si
    193	    017D  73 03			     jnc _list_subfiles_recursive_loop
    194	    017F  E9 00ED		     jmp _list_subfiles_recursive_end
    195	    0182			 _list_subfiles_recursive_loop:
    196					     restore <cx>
2   197	    0182  59				 pop cx
    198	    0183  51			     push cx
    199	    0184  E8 0657		     call is_valid_name
    200					     load <cx>
2   201	    0187  51				 push cx
    202	    0188  3D 0001		     cmp ax, 1
    203	    018B  0F 85	00D3		     jne _list_subfiles_recursive_next
    204					     ;
    205					     ;	 increment current index in subfiles
    206					     ;
    207					     restore <cx, bx>
2   208	    018F  59				 pop cx
2   209	    0190  5B				 pop bx
    210	    0191  43			     inc bx
    211					     load <bx, cx>
2   212	    0192  53				 push bx
2   213	    0193  51				 push cx
    214
    215					     ;
    216					     ;	 set current space counter to zero
    217					     ;
    218	    0194  B8 0000		     mov ax, 0
    219	    0197  50			     push ax
    220	    0198  50			     push ax
    221	    0199  E8 04DA		     call set_dword
    222
    223					     ;
    224					     ;	 check if folder
    225					     ;
    226					     restore <cx>
2   227	    019C  59				 pop cx
    228					     load <cx>
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 5
tree.ASM



2   229	    019D  51				 push cx
    230	    019E  B8 08C5r		     lea ax, dta
    231	    01A1  50			     push ax
    232	    01A2  51			     push cx
    233	    01A3  E8 010E		     call is_folder
    234	    01A6  3D 0001		     cmp ax, 1
    235	    01A9  74 0C			     je	_list_subfiles_recursive_folder
    236
    237					     ;
    238					     ;	 show filename
    239					     ;
    240					     restore <cx, bx>
2   241	    01AB  59				 pop cx
2   242	    01AC  5B				 pop bx
    243					     load <bx, cx>
2   244	    01AD  53				 push bx
2   245	    01AE  51				 push cx
    246	    01AF  53			     push bx
    247	    01B0  51			     push cx
    248	    01B1  E8 0596		     call show_filename_from_dta
    249
    250	    01B4  E9 00AB		     jmp _list_subfiles_recursive_next
    251	    01B7			 _list_subfiles_recursive_folder:
    252					     ;
    253					     ;	 count storages
    254					     ;
    255	    01B7  E8 0646		     call set_accumulative_storage_from_dir
    256
    257					     ;
    258					     ;	 show folder name
    259					     ;
    260					     restore <cx, bx>
2   261	    01BA  59				 pop cx
2   262	    01BB  5B				 pop bx
    263					     load <bx, cx>
2   264	    01BC  53				 push bx
2   265	    01BD  51				 push cx
    266	    01BE  53			     push bx
    267	    01BF  51			     push cx
    268	    01C0  E8 0587		     call show_filename_from_dta
    269
    270					     ;
    271					     ;	 check deep level
    272					     ;
    273					     restore <cx>
2   274	    01C3  59				 pop cx
    275					     load <cx>
2   276	    01C4  51				 push cx
    277	    01C5  33 DB			     xor bx, bx
    278	    01C7  8A 1E	03F4r		     mov bl, byte ptr [deep_level]
    279	    01CB  3B CB			     cmp cx, bx
    280	    01CD  0F 8D	0091		     jge _list_subfiles_recursive_next
    281					     ;
    282					     ;	 pseudographic hack
    283					     ;
    284					     restore <cx, bx>
2   285	    01D1  59				 pop cx
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 6
tree.ASM



2   286	    01D2  5B				 pop bx
    287					     load <bx, cx>
2   288	    01D3  53				 push bx
2   289	    01D4  51				 push cx
    290
    291	    01D5  3B 1E	0945r		     cmp bx, word ptr [current_max_entities]
    292	    01D9  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack_end
    293					     load <ax, bx, cx>
2   294	    01DB  50				 push ax
2   295	    01DC  53				 push bx
2   296	    01DD  51				 push cx
    297	    01DE  51			     push cx
    298	    01DF  E8 0264		     call set_level_shift
    299					     restore <cx, bx, ax>
2   300	    01E2  59				 pop cx
2   301	    01E3  5B				 pop bx
2   302	    01E4  58				 pop ax
    303
    304	    01E5			 _list_subfiles_recursive_loop_pseudographic_hack_end:
    305	    01E5  8B C1			     mov ax, cx
    306					     ;
    307					     ;	 save dta
    308					     ;
    309					     push_fragment dta,	128
1   310	    01E7  BF 08C5r		     lea di, dta
1   311	    01EA  B9 0080		     mov cx, 128
1   312	    01ED  33 DB			     xor bx, bx
1   313	    01EF			 ??0000:
1   314	    01EF  8A 1D			     mov bl, byte ptr [di]
1   315	    01F1  53			     push bx
1   316	    01F2  47			     inc di
1   317	    01F3  49			     dec cx
1   318	    01F4  83 F9	00		     cmp cx, 0
1   319	    01F7  75 F6			     jne ??0000
    320	    01F9  8B C8			     mov cx, ax
    321					     ;
    322					     ; start new search
    323					     ;
    324	    01FB  A1 0945r		     mov ax, word ptr [current_max_entities]
    325					     load <ax>
2   326	    01FE  50				 push ax
    327
    328					     load <cx>
2   329	    01FF  51				 push cx
    330					     ;
    331					     ;	 cd to subfolder
    332					     ;
    333	    0200  B8 08C5r		     lea ax, dta
    334	    0203  05 001E		     add ax, 1Eh
    335
    336	    0206  50			     push ax
    337	    0207  E8 00CA		     call cd
    338					     restore <cx>
2   339	    020A  59				 pop cx
    340
    341	    020B  41			     inc cx
    342					     ;
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 7
tree.ASM



    343					     ;	 list subfiles from subfolder
    344					     ;
    345					     load <cx>
2   346	    020C  51				 push cx
    347	    020D  BB 0000		     mov bx, 0
    348	    0210  B8 03F5r		     mov ax, offset file_mask
    349	    0213  BE 0295r		     mov si, offset find_first_file
    350
    351	    0216  56			     push si
    352	    0217  53			     push bx
    353	    0218  50			     push ax
    354	    0219  51			     push cx
    355	    021A  E8 FF3E		     call list_subfiles_recursive
    356					     restore <cx>
2   357	    021D  59				 pop cx
    358					     ;
    359					     ;	 list subfolders from subfolder
    360					     ;
    361					     load <cx>
2   362	    021E  51				 push cx
    363	    021F  8B D8			     mov bx, ax
    364	    0221  B8 03FBr		     mov ax, offset folder_mask
    365	    0224  BE 02A2r		     mov si, offset find_first_folder
    366
    367	    0227  56			     push si
    368	    0228  53			     push bx
    369	    0229  50			     push ax
    370	    022A  51			     push cx
    371	    022B  E8 FF2D		     call list_subfiles_recursive
    372					     restore <cx>
2   373	    022E  59				 pop cx
    374					     ;
    375					     ;	 reverse pseudographic hack
    376					     ;
    377					     load <ax, bx, cx>
2   378	    022F  50				 push ax
2   379	    0230  53				 push bx
2   380	    0231  51				 push cx
    381	    0232  51			     push cx
    382	    0233  E8 0221		     call reset_level_shift
    383					     restore <cx, bx, ax>
2   384	    0236  59				 pop cx
2   385	    0237  5B				 pop bx
2   386	    0238  58				 pop ax
    387					     ;
    388					     ;	 cd back to this function
    389					     ;
    390	    0239  B8 0981r		     mov ax, offset parent_folder
    391	    023C  50			     push ax
    392	    023D  E8 0094		     call cd
    393
    394					     restore <ax>
2   395	    0240  58				 pop ax
    396	    0241  A3 0945r		     mov word ptr [current_max_entities], ax
    397					     ;
    398					     ;	 restore dta
    399					     ;
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 8
tree.ASM



    400					     pop_fragment dta, 128
1   401	    0244  BF 08C5r		     lea di, dta
1   402	    0247  B9 0080		     mov cx, 128
1   403	    024A  03 F9			     add di, cx
1   404	    024C  4F			     dec di
1   405	    024D  33 DB			     xor bx, bx
1   406	    024F			 ??0001:
1   407	    024F  5B			     pop bx
1   408	    0250  88 1D			     mov byte ptr [di],	bl
1   409	    0252  4F			     dec di
1   410	    0253  49			     dec cx
1   411	    0254  83 F9	00		     cmp cx, 0
1   412	    0257  75 F6			     jne ??0001
    413					     set_dta dta
1   414	    0259  BA 08C5r		     lea dx, dta
1   415	    025C  33 C0			     xor ax, ax
1   416	    025E  B4 1A			     mov ah, 1Ah
1   417	    0260  CD 21			     int 21h
    418	    0262			 _list_subfiles_recursive_next:
    419	    0262  E8 004A		     call find_next
    420	    0265  0F 83	FF19		     jnc _list_subfiles_recursive_loop
    421	    0269  3A 06	0947r		     cmp al, byte ptr [no_more_files]
    422	    026D  75 14			     jne find_next_error
    423	    026F			 _list_subfiles_recursive_end:
    424					     restore <cx, bx>
2   425	    026F  59				 pop cx
2   426	    0270  5B				 pop bx
    427	    0271  8B C3			     mov ax, bx
    428	    0273  C3			     ret
    429	    0274			 find_first_error:
    430					     print_range <find_first_fails, newline>
2   431						 print <offset find_first_fails>
3   432	    0274  B4 09				 mov ah, 09h
3   433	    0276  BA 0948r			 mov dx, offset	find_first_fails
3   434	    0279  CD 21				 int 21h
2   435						 print <offset newline>
3   436	    027B  B4 09				 mov ah, 09h
3   437	    027D  BA 0377r			 mov dx, offset	newline
3   438	    0280  CD 21				 int 21h
    439	    0282  C3			     ret
    440	    0283			 find_next_error:
    441					     print_range <find_next_fails, newline>
2   442						 print <offset find_next_fails>
3   443	    0283  B4 09				 mov ah, 09h
3   444	    0285  BA 0964r			 mov dx, offset	find_next_fails
3   445	    0288  CD 21				 int 21h
2   446						 print <offset newline>
3   447	    028A  B4 09				 mov ah, 09h
3   448	    028C  BA 0377r			 mov dx, offset	newline
3   449	    028F  CD 21				 int 21h
    450					     exit
1   451	    0291  B4 00			     mov ah, 00h
1   452	    0293  CD 21			     int 21h
    453
    454					 include dtafunc.asm
1   455					 include filefunc.asm
2   456	    0295			 find_first_file:
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 9
tree.ASM



2   457	    0295  5B			     pop bx
2   458	    0296  5A			     pop dx		; filename spec
2   459	    0297  B9 000F		     mov cx, 0fh	 ; include files
2   460	    029A  53			     push bx
2   461
2   462	    029B  33 C0			     xor ax, ax
2   463	    029D  B4 4E			     mov ah, 4Eh
2   464	    029F  CD 21			     int 21h
2   465	    02A1  C3			     ret
2   466
2   467	    02A2			 find_first_folder:
2   468	    02A2  5B			     pop bx
2   469	    02A3  5A			     pop dx		 ; filename spec
2   470	    02A4  B9 0010		     mov cx, 10h	 ; include directories
2   471	    02A7  53			     push bx
2   472
2   473	    02A8  33 C0			     xor ax, ax
2   474	    02AA  B4 4E			     mov ah, 4Eh
2   475	    02AC  CD 21			     int 21h
2   476	    02AE  C3			     ret
2   477
2   478	    02AF			 find_next:
2   479	    02AF  B4 4F			     mov ah, 4Fh
2   480	    02B1  CD 21			     int 21h
2   481
2   482	    02B3  C3			     ret
2   483
2   484	    02B4			 is_folder:
2   485	    02B4  5B			     pop bx
2   486	    02B5  59			     pop cx
2   487	    02B6  58			     pop ax ; dta address
2   488	    02B7  53			     push bx
2   489
2   490	    02B8  05 0015		     add ax, 15h
2   491	    02BB  8B D8			     mov bx, ax
2   492	    02BD  8A 1F			     mov bl, byte ptr [bx]
2   493	    02BF  80 E3	10		     and bl, 10h
2   494	    02C2  80 FB	10		     cmp bl, 10h
2   495	    02C5  74 02			     je	_is_folder_true
2   496	    02C7  75 05			     jne _is_folder_false
2   497	    02C9			 _is_folder_true:
2   498	    02C9  B8 0001		     mov ax, 1
2   499	    02CC  EB 05			     jmp _is_folder_end
2   500	    02CE			 _is_folder_false:
2   501	    02CE  B8 0000		     mov ax, 0
2   502	    02D1  EB 00			     jmp _is_folder_end
2   503	    02D3			 _is_folder_end:
2   504	    02D3  C3			     ret
2   505
2   506	    02D4			 cd:
2   507	    02D4  5B			     pop bx ; ret addr
2   508	    02D5  5A			     pop dx ; root address
2   509	    02D6  53			     push bx ; ret addr
2   510
2   511					     load <dx>
4   512	    02D7  52				 push dx
2   513	    02D8  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 10
tree.ASM



2   514	    02DA  B4 3B			     mov ah, 3Bh
2   515	    02DC  CD 21			     int 21h
2   516
2   517	    02DE  72 02			     jc	cd_error
2   518					     restore <dx>
4   519	    02E0  5A				 pop dx
2   520	    02E1  C3			     ret
2   521	    02E2			 cd_error:
2   522					     print_range <cd_fails, newline>
4   523						 print <offset cd_fails>
5   524	    02E2  B4 09				 mov ah, 09h
5   525	    02E4  BA 035Fr			 mov dx, offset	cd_fails
5   526	    02E7  CD 21				 int 21h
4   527						 print <offset newline>
5   528	    02E9  B4 09				 mov ah, 09h
5   529	    02EB  BA 0377r			 mov dx, offset	newline
5   530	    02EE  CD 21				 int 21h
2   531					     restore <dx>
4   532	    02F0  5A				 pop dx
2   533
2   534	    02F1  B4 09				 mov ah, 09h
2   535	    02F3  CD 21			     int 21h
2   536
2   537					     print_range <newline>
4   538						 print <offset newline>
5   539	    02F5  B4 09				 mov ah, 09h
5   540	    02F7  BA 0377r			 mov dx, offset	newline
5   541	    02FA  CD 21				 int 21h
2   542					     exit
3   543	    02FC  B4 00			     mov ah, 00h
3   544	    02FE  CD 21			     int 21h
2   545	    0300  C3			     ret
2   546
2   547	    0301			 save_cwd:
2   548	    0301  BE 031Fr		     mov si, offset working_folder
2   549
2   550					     ;
2   551					     ; save driver
2   552					     ;
2   553	    0304  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
2   554	    0306  CD 21			     int 21h
2   555	    0308  8A D0			     mov dl, al
2   556	    030A  80 C2	41		     add dl, 41h
2   557	    030D  88 14			     mov byte ptr [si],	dl
2   558	    030F  46			     inc si
2   559	    0310  C6 04	3A		     mov byte ptr [si],	':'
2   560	    0313  46			     inc si
2   561	    0314  C6 04	5C		     mov byte ptr [si],	'\'
2   562	    0317  46			     inc si
2   563
2   564					     ;
2   565					     ; save folder
2   566					     ;
2   567	    0318  32 D2			     xor dl, dl			 ; Actual drive
2   568	    031A  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
2   569	    031C  CD 21			     int 21h
2   570	    031E  C3			     ret
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 11
tree.ASM



2   571
2   572
2   573	    031F  40*(00)		 working_folder	db 64 dup(00h)
2   574	    035F  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    575		  64 69	72 65 63 74 6F+
    576		  72 79	20 66 61 69 6C+
    577		  73 2E	24
2   578	    0377  0A 24			 newline db 0Ah, '$'
1   579					 include clfunc.asm
2   580	    0379			 count_no_space_no_zero_letters:
2   581	    0379  5B			     pop bx ; ret address
2   582	    037A  5E			     pop si ; string offset
2   583	    037B  59			     pop cx ; string length
2   584	    037C  53			     push bx ; ret address
2   585	    037D  B8 0000		     mov ax, 0
2   586	    0380			 _count_non_space_symbols_loop:
2   587	    0380  80 3C	20		     cmp byte ptr [si],	20h
2   588	    0383  74 12			     je	_count_non_space_symbols_end
2   589	    0385  80 3C	0D		     cmp byte ptr [si],	0Dh
2   590	    0388  74 0D			     je	_count_non_space_symbols_end
2   591	    038A  80 3C	00		     cmp byte ptr [si],	00h
2   592	    038D  74 08			     je	_count_non_space_symbols_end
2   593	    038F  3B C1			     cmp ax, cx
2   594	    0391  74 04			     je	_count_non_space_symbols_end
2   595	    0393  40			     inc ax
2   596	    0394  46			     inc si
2   597	    0395  EB E9			     jmp _count_non_space_symbols_loop
2   598	    0397			 _count_non_space_symbols_end:
2   599	    0397  C3			     ret
2   600
2   601	    0398			 parse_command_line:
2   602					     ;
2   603					     ; prepare root folder
2   604					     ;
2   605	    0398  BE 0082		     mov si, 82h
2   606	    039B  B9 0040		     mov cx, 64
2   607	    039E  51			     push cx
2   608	    039F  56			     push si
2   609	    03A0  E8 FFD6		     call count_no_space_no_zero_letters
2   610	    03A3  8B C8			     mov cx, ax
2   611	    03A5  BE 0082		     mov si, 82h
2   612	    03A8  BF 0984r		     mov di, offset root_folder
2   613	    03AB  F3> A4		     rep movsb
2   614
2   615	    03AD			 parse_args:
2   616	    03AD  46			     inc si
2   617	    03AE  46			     inc si
2   618	    03AF  80 3C	64		     cmp byte ptr [si],	'd'
2   619	    03B2  74 11			     je	parse_d
2   620	    03B4  80 3C	66		     cmp byte ptr [si],	'f'
2   621	    03B7  74 1A			     je	parse_f
2   622	    03B9  80 3C	73		     cmp byte ptr [si],	's'
2   623	    03BC  74 21			     je	parse_s
2   624	    03BE  80 3C	74		     cmp byte ptr [si],	't'
2   625	    03C1  74 25			     je	parse_t
2   626	    03C3  EB 2C			     jmp parse_end
2   627	    03C5			 parse_d:
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 12
tree.ASM



2   628					     ;
2   629					     ; parse_deep level
2   630					     ;
2   631	    03C5  46			     inc si
2   632	    03C6  46			     inc si
2   633	    03C7  8A 1C			     mov bl, byte ptr [si]
2   634	    03C9  80 EB	30		     sub bl, 30h	     ; to number
2   635	    03CC  88 1E	03F4r		     mov byte ptr [deep_level],	bl
2   636	    03D0  46			     inc si
2   637	    03D1  EB DA			     jmp parse_args
2   638	    03D3			 parse_f:
2   639					     ;
2   640					     ; parse file extension
2   641					     ;
2   642	    03D3  46			     inc si
2   643	    03D4  46			     inc si
2   644	    03D5  BF 03F6r		     mov di, offset file_ext
2   645	    03D8  B9 0004		     mov cx, 4
2   646	    03DB  F3> A4		     rep movsb
2   647	    03DD  EB CE			     jmp parse_args
2   648	    03DF			 parse_s:
2   649					     ;
2   650					     ; print storage
2   651					     ;
2   652	    03DF  B3 01			     mov bl, 1
2   653	    03E1  88 1E	03F2r		     mov byte ptr [use_storage], bl
2   654	    03E5  46			     inc si
2   655	    03E6  EB C5			     jmp parse_args
2   656	    03E8			 parse_t:
2   657					     ;
2   658					     ; print time
2   659					     ;
2   660	    03E8  B3 01			     mov bl, 1
2   661	    03EA  88 1E	03F3r		     mov byte ptr [use_time], bl
2   662	    03EE  46			     inc si
2   663	    03EF  EB BC			     jmp parse_args
2   664
2   665	    03F1			 parse_end:
2   666	    03F1  C3			     ret
2   667
2   668					 ;
2   669					 ;   parse arguments
2   670					 ;
2   671	    03F2  00			 use_storage db	0
2   672	    03F3  00			 use_time db 0
2   673	    03F4  01			 deep_level db 1
2   674	    03F5  2A			 file_mask db '*'
2   675	    03F6  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
2   676	    03FB  2A 00			 folder_mask db	'*', 00h
2   677	    03FD  2A 2E	2A 00		 all_files db '*.*', 00h
1   678					 include pgraph.asm
2   679
2   680	    0401			 print_pseudographic_prefix:
2   681	    0401  5B			     pop bx
2   682	    0402  59			     pop cx	 ; deep	level
2   683	    0403  58			     pop ax	 ; entity count
2   684	    0404  53			     push bx
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 13
tree.ASM



2   685
2   686	    0405  83 F9	00		     cmp cx, 0
2   687	    0408  74 0C			     je	_print_pseudographic_prefix_zero_level
2   688					     load <cx, ax>
4   689	    040A  51				 push cx
4   690	    040B  50				 push ax
2   691	    040C  B8 0480r		     mov ax, offset level_shift
2   692
2   693	    040F  51			     push cx
2   694	    0410  50			     push ax
2   695	    0411  E8 0054		     call print_string_with_length
2   696					     restore <ax, cx>
4   697	    0414  58				 pop ax
4   698	    0415  59				 pop cx
2   699	    0416			 _print_pseudographic_prefix_zero_level:
2   700
2   701	    0416  8B 1E	0945r		     mov bx, word ptr [current_max_entities]
2   702	    041A  3A C3			     cmp al, bl
2   703	    041C  74 1E			     je	_print_pseudographic_prefix_zero_level_end
2   704	    041E  3D 0001		     cmp ax, 1
2   705	    0421  75 10			     jne _print_pseudographic_prefix_zero_level_middle
2   706	    0423  83 F9	00		     cmp cx, 0
2   707	    0426  74 02			     je	_print_pseudographic_prefix_zero_level_first
2   708	    0428  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
2   709	    042A			 _print_pseudographic_prefix_zero_level_first:
2   710					     print_range <first_file_char>
4   711						 print <offset first_file_char>
5   712	    042A  B4 09				 mov ah, 09h
5   713	    042C  BA 0492r			 mov dx, offset	first_file_char
5   714	    042F  CD 21				 int 21h
2   715	    0431  EB 12			     jmp _print_pseudographic_prefix_end
2   716	    0433			 _print_pseudographic_prefix_zero_level_middle:
2   717					     print_range <middle_file_char>
4   718						 print <offset middle_file_char>
5   719	    0433  B4 09				 mov ah, 09h
5   720	    0435  BA 0494r			 mov dx, offset	middle_file_char
5   721	    0438  CD 21				 int 21h
2   722	    043A  EB 09			     jmp _print_pseudographic_prefix_end
2   723	    043C			 _print_pseudographic_prefix_zero_level_end:
2   724					     print_range <end_file_char>
4   725						 print <offset end_file_char>
5   726	    043C  B4 09				 mov ah, 09h
5   727	    043E  BA 0496r			 mov dx, offset	end_file_char
5   728	    0441  CD 21				 int 21h
2   729	    0443  EB 00			     jmp _print_pseudographic_prefix_end
2   730	    0445			 _print_pseudographic_prefix_end:
2   731	    0445  C3			     ret
2   732
2   733	    0446			 set_level_shift:
2   734	    0446  5B			     pop bx
2   735	    0447  59			     pop cx  ; line level
2   736	    0448  53			     push bx
2   737
2   738	    0449  BB 0480r		     lea bx, level_shift
2   739	    044C  03 D9			     add bx, cx
2   740	    044E  A0 048Br		     mov al, byte ptr [space]
2   741	    0451  88 07			     mov byte ptr [bx],	al
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 14
tree.ASM



2   742
2   743	    0453  B8 0001		     mov ax, 1
2   744
2   745	    0456  C3			     ret
2   746
2   747	    0457			 reset_level_shift:
2   748	    0457  5B			     pop bx
2   749	    0458  59			     pop cx  ; line level
2   750	    0459  53			     push bx
2   751
2   752	    045A  BB 0480r		     lea bx, level_shift
2   753	    045D  03 D9			     add bx, cx
2   754	    045F  A0 047Er		     mov al, byte ptr [old_level_shift]
2   755	    0462  88 07			     mov byte ptr [bx],	al
2   756
2   757	    0464  B8 0001		     mov ax, 1
2   758
2   759	    0467  C3			     ret
2   760
2   761	    0468			 print_string_with_length:
2   762	    0468  5B			     pop bx ; ret address
2   763	    0469  5E			     pop si ; string offset
2   764	    046A  59			     pop cx ; string length
2   765	    046B  53			     push bx; ret address
2   766	    046C  33 C0			     xor ax, ax
2   767	    046E			 _print_string_with_length_loop:
2   768	    046E  B4 02			     mov ah, 02h
2   769	    0470  8A 14			     mov dl, byte ptr [si]
2   770	    0472  CD 21			     int 21h
2   771	    0474  49			     dec cx
2   772	    0475  46			     inc si
2   773	    0476  83 F9	00		     cmp cx, 00h
2   774	    0479  74 02			     je	_print_string_with_length_end
2   775	    047B  EB F1			     jmp _print_string_with_length_loop
2   776	    047D			 _print_string_with_length_end:
2   777	    047D  C3			     ret
2   778
2   779					 ;
2   780					 ;   pseudographic
2   781					 ;
2   782	    047E  B3 24			 old_level_shift db 179, '$'
2   783	    0480  0A*(B3) 24		 level_shift db	10 dup(179), '$'
2   784	    048B  ?? 20	24		 space db, 32, '$'
2   785
2   786	    048E  C3 24			 zero_first_file db 195, '$'
2   787	    0490  C0 24			 zero_end_file db 192, '$'
2   788
2   789	    0492  C2 24			 first_file_char db 194, '$'
2   790	    0494  C3 24			 middle_file_char db 195, '$'
2   791	    0496  C0 24			 end_file_char db 192, '$'
2   792
1   793					 include tmacro.asm
2   794					 load macro args
2   795					     irp d,<args>
2   796						 push d
2   797					     endm
2   798					 endm
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 15
tree.ASM



2   799
2   800					 restore macro args
2   801					     irp d,<args>
2   802						 pop d
2   803					     endm
2   804					 endm
2   805
2   806					 exit macro
2   807					     mov ah, 00h
2   808					     int 21h
2   809					 endm
2   810
2   811					 print macro buf
2   812						 mov ah, 09h
2   813						 mov dx, buf
2   814						 int 21h
2   815					 endm
2   816
2   817					 print_range macro args
2   818					     irp d,<args>
2   819						 print <offset d>
2   820					     endm
2   821					 endm
2   822
2   823					 push_fragment macro buf, length
2   824					     local l1
2   825					     lea di, buf
2   826					     mov cx, length
2   827					     xor bx, bx
2   828					 l1:
2   829					     mov bl, byte ptr [di]
2   830					     push bx
2   831					     inc di
2   832					     dec cx
2   833					     cmp cx, 0
2   834					     jne l1
2   835					 endm
2   836
2   837					 pop_fragment macro buf, length
2   838					     local l1
2   839					     lea di, buf
2   840					     mov cx, length
2   841					     add di, cx
2   842					     dec di
2   843					     xor bx, bx
2   844					 l1:
2   845					     pop bx
2   846					     mov byte ptr [di],	bl
2   847					     dec di
2   848					     dec cx
2   849					     cmp cx, 0
2   850					     jne l1
2   851					 endm
2   852
2   853					 set_dta macro dta
2   854					     lea dx, dta
2   855					     xor ax, ax
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 16
tree.ASM



2   856					     mov ah, 1Ah
2   857					     int 21h
2   858					 endm
2   859
2   860					 break_point macro arg
2   861					     load <arg>
2   862					     xor arg, arg
2   863					     xor arg, arg
2   864					     xor arg, arg
2   865					     xor arg, arg
2   866					     xor arg, arg
2   867					     xor arg, arg
2   868					     xor arg, arg
2   869					     xor arg, arg
2   870					     restore <arg>
2   871					 endm
1   872					 include time.asm
2   873					 include bmacro.asm
3   874					 load macro args
3   875					     irp d,<args>
3   876						 push d
3   877					     endm
3   878					 endm
3   879
3   880					 restore macro args
3   881					     irp d,<args>
3   882						 pop d
3   883					     endm
3   884					 endm
3   885
3   886					 exit macro
3   887					     mov ah, 00h
3   888					     int 21h
3   889					 endm
3   890
3   891					 print macro buf
3   892						 mov ah, 09h
3   893						 mov dx, buf
3   894						 int 21h
3   895					 endm
3   896
3   897					 print_range macro args
3   898					     irp d,<args>
3   899						 print <offset d>
3   900					     endm
3   901					 endm
3   902
3   903					 break_point macro arg
3   904					     load <arg>
3   905					     xor arg, arg
3   906					     xor arg, arg
3   907					     xor arg, arg
3   908					     xor arg, arg
3   909					     xor arg, arg
3   910					     xor arg, arg
3   911					     xor arg, arg
3   912					     xor arg, arg
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 17
tree.ASM



3   913					     restore <arg>
3   914					 endm
3   915
3   916					 parse_byte_to_str macro from, to, length
3   917					     mov ax, length
3   918					     push ax
3   919					     mov ax, to
3   920					     push ax
3   921					     xor ax, ax
3   922					     mov al, from
3   923					     push ax
3   924					     call store_iint_to_string
3   925					 endm
3   926
3   927					 parse_word_to_str macro from, to, length
3   928					     mov ax, length
3   929					     push ax
3   930					     mov ax, to
3   931					     push ax
3   932					     xor ax, ax
3   933					     mov ax, from
3   934					     push ax
3   935					     call store_iint_to_string
3   936					 endm
2   937					 include pnum.asm
3   938
3   939	    0498			 store_iint_to_string:
3   940	    0498  5B			     pop bx
3   941	    0499  58			     pop ax ; integer
3   942	    049A  5E			     pop si ; memory for storing integer
3   943	    049B  5F			     pop di ; integer min length
3   944	    049C  53			     push bx
3   945
3   946	    049D  B9 0000		     mov cx, 0
3   947	    04A0  BB 000A		     mov bx, 10
3   948	    04A3			 _store_iint_to_string_direct:
3   949	    04A3  3D 0000		     cmp ax, 0
3   950	    04A6  74 08			     je	_store_iint_to_string_zero_padding_start
3   951
3   952	    04A8  33 D2			     xor dx, dx
3   953	    04AA  F7 F3			     div bx
3   954	    04AC  52			     push dx
3   955	    04AD  41			     inc cx
3   956
3   957	    04AE  EB F3			     jmp _store_iint_to_string_direct
3   958
3   959	    04B0			 _store_iint_to_string_zero_padding_start:
3   960	    04B0  2B F9			     sub di, cx
3   961	    04B2			 _store_iint_to_string_zero_padding_loop:
3   962	    04B2  83 FF	00		     cmp di, 0
3   963	    04B5  7E 08			     jle _store_iint_to_string_zero_padding_end
3   964	    04B7  BB 0000		     mov bx, 0
3   965	    04BA  53			     push bx
3   966	    04BB  4F			     dec di
3   967	    04BC  41			     inc cx
3   968	    04BD  EB F3			     jmp _store_iint_to_string_zero_padding_loop
3   969	    04BF			 _store_iint_to_string_zero_padding_end:
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 18
tree.ASM



3   970	    04BF			 _store_iint_to_string_inverse:
3   971					     load <si>
5   972	    04BF  56				 push si
3   973	    04C0  03 F1			     add si, cx
3   974	    04C2  C6 04	24		     mov byte ptr [si],	'$'
3   975					     restore <si>
5   976	    04C5  5E				 pop si
3   977	    04C6			 _store_iint_to_string_inverse_loop:
3   978	    04C6  83 F9	00		     cmp cx, 0
3   979	    04C9  74 0A			     je	_store_iint_to_string_end
3   980
3   981	    04CB  5A			     pop dx
3   982	    04CC  80 C2	30		     add dl, 30h
3   983	    04CF  88 14			     mov byte ptr [si],	dl
3   984	    04D1  46			     inc si
3   985	    04D2  49			     dec cx
3   986
3   987	    04D3  EB F1			     jmp _store_iint_to_string_inverse_loop
3   988
3   989	    04D5			 _store_iint_to_string_end:
3   990	    04D5  C3			     ret
2   991
2   992	    04D6			 print_datetimestamp:
2   993	    04D6  5B			     pop bx
2   994	    04D7  59			     pop cx ; time
2   995	    04D8  5A			     pop dx ; date
2   996	    04D9  53			     push bx
2   997
2   998	    04DA  BE 05DCr		     lea si, datetime
2   999
2  1000					     ;
2  1001					     ; date format
2  1002					     ;
2  1003					     load <cx, dx, si>
4  1004	    04DD  51				 push cx
4  1005	    04DE  52				 push dx
4  1006	    04DF  56				 push si
2  1007	    04E0  C1 FA	09		     sar dx, 9
2  1008	    04E3  81 C2	07BC		     add dx, 1980
2  1009					     parse_word_to_str dx, si, 4
3  1010	    04E7  B8 0004		     mov ax, 4
3  1011	    04EA  50			     push ax
3  1012	    04EB  8B C6			     mov ax, si
3  1013	    04ED  50			     push ax
3  1014	    04EE  33 C0			     xor ax, ax
3  1015	    04F0  8B C2			     mov ax, dx
3  1016	    04F2  50			     push ax
3  1017	    04F3  E8 FFA2		     call store_iint_to_string
2  1018					     restore <si, dx, cx>
4  1019	    04F6  5E				 pop si
4  1020	    04F7  5A				 pop dx
4  1021	    04F8  59				 pop cx
2  1022					     break_point ax
3  1023					     load <ax>
5  1024	    04F9  50				 push ax
3  1025	    04FA  33 C0			     xor ax, ax
3  1026	    04FC  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 19
tree.ASM



3  1027	    04FE  33 C0			     xor ax, ax
3  1028	    0500  33 C0			     xor ax, ax
3  1029	    0502  33 C0			     xor ax, ax
3  1030	    0504  33 C0			     xor ax, ax
3  1031	    0506  33 C0			     xor ax, ax
3  1032	    0508  33 C0			     xor ax, ax
3  1033					     restore <ax>
5  1034	    050A  58				 pop ax
2  1035	    050B  83 C6	04		     add si, 4
2  1036	    050E  C6 04	2E		     mov byte ptr [si],	'.'
2  1037	    0511  46			     inc si
2  1038
2  1039					     load <cx, dx, si>
4  1040	    0512  51				 push cx
4  1041	    0513  52				 push dx
4  1042	    0514  56				 push si
2  1043	    0515  81 E2	01E0		     and dx, 32	+ 64 + 128 + 256
2  1044	    0519  C1 FA	05		     sar dx, 5
2  1045					     parse_byte_to_str dl, si, 2
3  1046	    051C  B8 0002		     mov ax, 2
3  1047	    051F  50			     push ax
3  1048	    0520  8B C6			     mov ax, si
3  1049	    0522  50			     push ax
3  1050	    0523  33 C0			     xor ax, ax
3  1051	    0525  8A C2			     mov al, dl
3  1052	    0527  50			     push ax
3  1053	    0528  E8 FF6D		     call store_iint_to_string
2  1054					     restore <si, dx, cx>
4  1055	    052B  5E				 pop si
4  1056	    052C  5A				 pop dx
4  1057	    052D  59				 pop cx
2  1058	    052E  83 C6	02		     add si, 2
2  1059	    0531  C6 04	2E		     mov byte ptr [si],	'.'
2  1060	    0534  46			     inc si
2  1061
2  1062					     load <cx, dx, si>
4  1063	    0535  51				 push cx
4  1064	    0536  52				 push dx
4  1065	    0537  56				 push si
2  1066	    0538  80 E2	1F		     and dl, 1 + 2 + 4 + 8 + 16
2  1067					     parse_byte_to_str dl, si, 2
3  1068	    053B  B8 0002		     mov ax, 2
3  1069	    053E  50			     push ax
3  1070	    053F  8B C6			     mov ax, si
3  1071	    0541  50			     push ax
3  1072	    0542  33 C0			     xor ax, ax
3  1073	    0544  8A C2			     mov al, dl
3  1074	    0546  50			     push ax
3  1075	    0547  E8 FF4E		     call store_iint_to_string
2  1076					     restore <si, dx, cx>
4  1077	    054A  5E				 pop si
4  1078	    054B  5A				 pop dx
4  1079	    054C  59				 pop cx
2  1080	    054D  83 C6	02		     add si, 2
2  1081	    0550  C6 04	20		     mov byte ptr [si],	' '
2  1082	    0553  46			     inc si
2  1083
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 20
tree.ASM



2  1084					     ;
2  1085					     ; time format
2  1086					     ;
2  1087					     load <cx, dx, si>
4  1088	    0554  51				 push cx
4  1089	    0555  52				 push dx
4  1090	    0556  56				 push si
2  1091	    0557  C1 F9	0B		     sar cx, 11
2  1092					     parse_byte_to_str cl, si, 2
3  1093	    055A  B8 0002		     mov ax, 2
3  1094	    055D  50			     push ax
3  1095	    055E  8B C6			     mov ax, si
3  1096	    0560  50			     push ax
3  1097	    0561  33 C0			     xor ax, ax
3  1098	    0563  8A C1			     mov al, cl
3  1099	    0565  50			     push ax
3  1100	    0566  E8 FF2F		     call store_iint_to_string
2  1101					     restore <si, dx, cx>
4  1102	    0569  5E				 pop si
4  1103	    056A  5A				 pop dx
4  1104	    056B  59				 pop cx
2  1105	    056C  83 C6	02		     add si, 2
2  1106	    056F  C6 04	3A		     mov byte ptr [si],	':'
2  1107	    0572  46			     inc si
2  1108
2  1109					     load <cx, dx, si>
4  1110	    0573  51				 push cx
4  1111	    0574  52				 push dx
4  1112	    0575  56				 push si
2  1113	    0576  81 E1	07E0		     and cx, 2016
2  1114	    057A  C1 F9	05		     sar cx, 5
2  1115					     parse_byte_to_str cl, si, 2
3  1116	    057D  B8 0002		     mov ax, 2
3  1117	    0580  50			     push ax
3  1118	    0581  8B C6			     mov ax, si
3  1119	    0583  50			     push ax
3  1120	    0584  33 C0			     xor ax, ax
3  1121	    0586  8A C1			     mov al, cl
3  1122	    0588  50			     push ax
3  1123	    0589  E8 FF0C		     call store_iint_to_string
2  1124					     restore <si, dx, cx>
4  1125	    058C  5E				 pop si
4  1126	    058D  5A				 pop dx
4  1127	    058E  59				 pop cx
2  1128	    058F  83 C6	02		     add si, 2
2  1129	    0592  C6 04	3A		     mov byte ptr [si],	':'
2  1130	    0595  46			     inc si
2  1131
2  1132					     load <cx, dx, si>
4  1133	    0596  51				 push cx
4  1134	    0597  52				 push dx
4  1135	    0598  56				 push si
2  1136	    0599  80 E1	0F		     and cl, 15
2  1137	    059C  D0 E1			     sal cl, 1
2  1138					     parse_byte_to_str cl, si, 2
3  1139	    059E  B8 0002		     mov ax, 2
3  1140	    05A1  50			     push ax
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 21
tree.ASM



3  1141	    05A2  8B C6			     mov ax, si
3  1142	    05A4  50			     push ax
3  1143	    05A5  33 C0			     xor ax, ax
3  1144	    05A7  8A C1			     mov al, cl
3  1145	    05A9  50			     push ax
3  1146	    05AA  E8 FEEB		     call store_iint_to_string
2  1147					     restore <si, dx, cx>
4  1148	    05AD  5E				 pop si
4  1149	    05AE  5A				 pop dx
4  1150	    05AF  59				 pop cx
2  1151	    05B0  83 C6	02		     add si, 2
2  1152	    05B3  C6 04	24		     mov byte ptr [si],	'$'
2  1153	    05B6  46			     inc si
2  1154
2  1155	    05B7  C3			     ret
2  1156
2  1157	    05B8  43 75	72 72 65 6E 74+	 hello_time db 'Current	time is: $'
   1158		  20 74	69 6D 65 20 69+
   1159		  73 3A	20 24
2  1160	    05CA  43 75	72 72 65 6E 74+	 hello_date db 'Current	date is: $'
   1161		  20 64	61 74 65 20 69+
   1162		  73 3A	20 24
2  1163	    05DC  14*(24)		 datetime db 20	dup('$')
2  1164	    05F0  3A 24			 time_semicolon	db ':',	'$'
2  1165	    05F2  20 24			 time_space db ' ', '$'
2  1166	    05F4  0A 24			 time_newline db 0Ah, '$'
2  1167	    05F6  80*(24)		 num db	128 dup('$')
1  1168					 include fdwcalc.asm
2  1169	    0676			 set_dword:
2  1170	    0676  59			     pop cx ; ret address
2  1171	    0677  58			     pop ax ; word ptr [l16]
2  1172	    0678  5A			     pop dx ; word ptr [h16]
2  1173
2  1174	    0679  51			     push cx
2  1175	    067A  A3 06EFr		     mov word ptr [doubleword],	ax
2  1176	    067D  89 16	06F1r		     mov word ptr [doubleword +	2], dx
2  1177
2  1178	    0681  C3			     ret
2  1179
2  1180	    0682			 get_dword:
2  1181	    0682  59			     pop cx ; ret address
2  1182
2  1183	    0683  A1 06EFr		     mov ax, word ptr [doubleword]
2  1184	    0686  8B 16	06F1r		     mov dx, word ptr [doubleword + 2]
2  1185
2  1186	    068A  52			     push dx
2  1187	    068B  50			     push ax
2  1188	    068C  51			     push cx
2  1189
2  1190	    068D  C3			     ret
2  1191
2  1192	    068E			 get_dword_addr:
2  1193	    068E  5B			     pop bx
2  1194	    068F  B8 06EFr		     lea ax, doubleword
2  1195	    0692  53			     push bx
2  1196
2  1197	    0693  C3			     ret
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 22
tree.ASM



2  1198
2  1199	    0694			 set_dword_from:
2  1200	    0694  5A			     pop dx
2  1201	    0695  5B			     pop bx ; address from
2  1202	    0696  52			     push dx
2  1203	    0697  8B 57	02		     mov dx, word ptr [bx + 2]
2  1204	    069A  52			     push dx
2  1205	    069B  8B 17			     mov dx, word ptr [bx]
2  1206	    069D  52			     push dx
2  1207	    069E  E8 FFD5		     call set_dword
2  1208	    06A1  C3			     ret
2  1209
2  1210	    06A2			 dadd_from:
2  1211	    06A2  5A			     pop dx
2  1212	    06A3  5B			     pop bx ; address from
2  1213	    06A4  52			     push dx
2  1214	    06A5  8B 47	02		     mov ax, word ptr [bx + 2]
2  1215	    06A8  50			     push ax
2  1216	    06A9  8B 07			     mov ax, word ptr [bx]
2  1217	    06AB  50			     push ax
2  1218	    06AC  E8 0001		     call dadd
2  1219	    06AF  C3			     ret
2  1220
2  1221	    06B0			 dadd:
2  1222	    06B0  5E			     pop si
2  1223					     ;
2  1224					     ; on stack	lay pair (l,h) of one dword, then we load second
2  1225					     ;
2  1226	    06B1  E8 FFCE		     call get_dword
2  1227
2  1228	    06B4  58			     pop ax ; our low
2  1229	    06B5  5B			     pop bx ; our hight
2  1230	    06B6  59			     pop cx ; their low
2  1231	    06B7  5A			     pop dx ; their hight
2  1232
2  1233	    06B8  13 C1			     adc ax, cx
2  1234	    06BA  72 00			     jc	_dadd_add_one
2  1235	    06BC			 _dadd_add_one:
2  1236	    06BC  43			     inc bx
2  1237	    06BD  03 DA			     add bx, dx
2  1238	    06BF  53			     push bx
2  1239	    06C0  50			     push ax
2  1240	    06C1  E8 FFB2		     call set_dword
2  1241	    06C4  56			     push si
2  1242	    06C5  C3			     ret
2  1243
2  1244	    06C6			 ddiv10:
2  1245	    06C6  E8 FFB9		     call get_dword
2  1246	    06C9  E8 0008		     call _ddiv10
2  1247	    06CC  89 16	06EDr		     mov word ptr [remainder], dx
2  1248	    06D0  E8 FFA3		     call set_dword
2  1249
2  1250	    06D3  C3			     ret
2  1251
2  1252	    06D4			 _ddiv10:
2  1253	    06D4  59			     pop cx ; ret address
2  1254	    06D5  58			     pop ax ; word ptr [l16]
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 23
tree.ASM



2  1255	    06D6  5A			     pop dx ; word ptr [h16]
2  1256
2  1257					     load <ax>
4  1258	    06D7  50				 push ax
2  1259	    06D8  8B C2			     mov ax, dx
2  1260	    06DA  33 D2			     xor dx, dx
2  1261	    06DC  BB 000A		     mov bx, 10
2  1262	    06DF  F7 F3			     div bx
2  1263	    06E1  8B D8			     mov bx, ax	; word ptr [h16]
2  1264					     restore <ax>
4  1265	    06E3  58				 pop ax
2  1266	    06E4  53			     push bx
2  1267
2  1268	    06E5  BB 000A		     mov bx, 10
2  1269	    06E8  F7 F3			     div bx
2  1270	    06EA  50			     push ax ; word ptr	[l15]
2  1271
2  1272	    06EB  51			     push cx
2  1273	    06EC  C3			     ret
2  1274
2  1275	    06ED  0000			 remainder dw 0
2  1276	    06EF  00000000		 doubleword dd 0
1  1277
1  1278	    06F3			 count_subfiles_here:
1  1279	    06F3  B8 03F5r		     lea ax, file_mask
1  1280	    06F6  BE 0295r		     lea si, find_first_file
1  1281
1  1282	    06F9  50			     push ax
1  1283	    06FA  56			     push si
1  1284	    06FB  E8 0017		     call count_subfiles_here_by_mask
1  1285					     load <ax>
3  1286	    06FE  50				 push ax
1  1287	    06FF  B8 03FBr		     mov ax, offset folder_mask
1  1288	    0702  BE 02A2r		     mov si, offset find_first_folder
1  1289
1  1290	    0705  50			     push ax
1  1291	    0706  56			     push si
1  1292	    0707  E8 000B		     call count_subfiles_here_by_mask
1  1293	    070A  8B D8			     mov bx, ax
1  1294					     restore <ax>
3  1295	    070C  58				 pop ax
1  1296	    070D  03 D8			     add bx, ax
1  1297	    070F  8B C3			     mov ax, bx
1  1298	    0711  A3 0945r		     mov word ptr [current_max_entities], ax
1  1299	    0714  C3			     ret
1  1300
1  1301	    0715			 count_subfiles_here_by_mask:
1  1302	    0715  5B			     pop bx
1  1303	    0716  5E			     pop si		 ; find_first address
1  1304	    0717  58			     pop ax		 ; mask	address
1  1305	    0718  53			     push bx
1  1306
1  1307					     load <ax, si>
3  1308	    0719  50				 push ax
3  1309	    071A  56				 push si
1  1310					     set_dta count_dta
2  1311	    071B  BA 0845r		     lea dx, count_dta
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 24
tree.ASM



2  1312	    071E  33 C0			     xor ax, ax
2  1313	    0720  B4 1A			     mov ah, 1Ah
2  1314	    0722  CD 21			     int 21h
1  1315					     restore <si, ax>
3  1316	    0724  5E				 pop si
3  1317	    0725  58				 pop ax
1  1318
1  1319	    0726  B9 0000		     mov cx, 0
1  1320					     load <cx>
3  1321	    0729  51				 push cx
1  1322	    072A  50			     push ax
1  1323	    072B  FF D6			     call si
1  1324	    072D  72 17			     jc	_count_subfiles_from_end
1  1325	    072F			 _count_subfiles_from_loop:
1  1326	    072F  B8 0845r		     lea ax, count_dta
1  1327	    0732  05 001E		     add ax, 1Eh
1  1328	    0735  8B D8			     mov bx, ax
1  1329	    0737  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1330	    073A  74 03			     je	_count_subfiles_from_loop_next
1  1331
1  1332					     restore <cx>
3  1333	    073C  59				 pop cx
1  1334	    073D  41			     inc cx
1  1335					     load <cx>
3  1336	    073E  51				 push cx
1  1337	    073F			 _count_subfiles_from_loop_next:
1  1338	    073F  E8 FB6D		     call find_next
1  1339	    0742  72 02			     jc	_count_subfiles_from_end
1  1340
1  1341	    0744  EB E9			     jmp _count_subfiles_from_loop
1  1342	    0746			 _count_subfiles_from_end:
1  1343					     restore <cx>
3  1344	    0746  59				 pop cx
1  1345	    0747  8B C1			     mov ax, cx
1  1346	    0749  C3			     ret
1  1347
1  1348	    074A			 show_filename_from_dta:
1  1349					     ;
1  1350					     ; returns file storage
1  1351					     ;
1  1352	    074A  5B			     pop bx
1  1353	    074B  59			     pop cx  ; deep level
1  1354	    074C  58			     pop ax  ; entity count
1  1355	    074D  53			     push bx
1  1356
1  1357	    074E			 _show_filename_from_dta_valid_name:
1  1358					     ;
1  1359					     ;	 pseudo	graphic	prefix
1  1360					     ;
1  1361					     load <ax>
3  1362	    074E  50				 push ax
1  1363	    074F  B8 08C5r		     lea ax, dta
1  1364
1  1365	    0752  05 001E		     add ax, 1Eh
1  1366	    0755  8B D8			     mov bx, ax
1  1367					     restore <ax>
3  1368	    0757  58				 pop ax
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 25
tree.ASM



1  1369
1  1370					     load <cx, bx>
3  1371	    0758  51				 push cx
3  1372	    0759  53				 push bx
1  1373	    075A  50			     push ax	 ; entity count
1  1374	    075B  51			     push cx	 ; deep	level
1  1375	    075C  E8 FCA2		     call print_pseudographic_prefix
1  1376					     restore <bx, cx>
3  1377	    075F  5B				 pop bx
3  1378	    0760  59				 pop cx
1  1379
1  1380					     load <bx>
3  1381	    0761  53				 push bx
1  1382	    0762  B9 000D		     mov cx, 13
1  1383	    0765  51			     push cx
1  1384	    0766  53			     push bx
1  1385	    0767  E8 FC0F		     call count_no_space_no_zero_letters
1  1386	    076A  8B C8			     mov cx, ax
1  1387					     restore <bx>
3  1388	    076C  5B				 pop bx
1  1389	    076D  51			     push cx
1  1390	    076E  53			     push bx
1  1391	    076F  E8 FCF6		     call print_string_with_length
1  1392
1  1393	    0772			 _show_filename_from_dta_datetime:
1  1394	    0772  B0 01			     mov al, 1
1  1395	    0774  38 06	03F3r		     cmp byte ptr [use_time], al
1  1396	    0778  75 05			     jne _show_filename_from_dta_storage
1  1397	    077A  E8 001A		     call show_datetime
1  1398	    077D  EB 00			     jmp _show_filename_from_dta_storage
1  1399
1  1400	    077F			 _show_filename_from_dta_storage:
1  1401	    077F  B0 01			     mov al, 1
1  1402	    0781  38 06	03F2r		     cmp byte ptr [use_storage], al
1  1403	    0785  75 05			     jne _show_filename_from_dta_end
1  1404	    0787  E8 002A		     call show_storage
1  1405	    078A  EB 00			     jmp _show_filename_from_dta_end
1  1406
1  1407	    078C			  _show_filename_from_dta_end:
1  1408					     print_range <newline>
3  1409						 print <offset newline>
4  1410	    078C  B4 09				 mov ah, 09h
4  1411	    078E  BA 0377r			 mov dx, offset	newline
4  1412	    0791  CD 21				 int 21h
1  1413	    0793  B8 0001		     mov ax, 1
1  1414	    0796  C3			     ret
1  1415
1  1416	    0797			 show_datetime:
1  1417	    0797  BB 08C5r		     lea bx, dta
1  1418	    079A  8B 4F	16		     mov cx, word ptr [bx + 16h]
1  1419	    079D  8B 57	18		     mov dx, word ptr [bx + 18h]
1  1420	    07A0  52			     push dx
1  1421	    07A1  51			     push cx
1  1422	    07A2  E8 FD31		     call print_datetimestamp
1  1423					     print_range <time_space, datetime>
3  1424						 print <offset time_space>
4  1425	    07A5  B4 09				 mov ah, 09h
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 26
tree.ASM



4  1426	    07A7  BA 05F2r			 mov dx, offset	time_space
4  1427	    07AA  CD 21				 int 21h
3  1428						 print <offset datetime>
4  1429	    07AC  B4 09				 mov ah, 09h
4  1430	    07AE  BA 05DCr			 mov dx, offset	datetime
4  1431	    07B1  CD 21				 int 21h
1  1432	    07B3  C3			     ret
1  1433
1  1434	    07B4			 show_storage:
1  1435					     ;
1  1436					     ; print without padding
1  1437					     ;
1  1438	    07B4  BA 0000		     mov dx, 0
1  1439	    07B7  52			     push dx
1  1440
1  1441					     ;
1  1442					     ; memory for storing integer
1  1443					     ;
1  1444	    07B8  BA 0805r		     lea dx, storage
1  1445	    07BB  52			     push dx
1  1446
1  1447					     ;
1  1448					     ; move low	16 bit as integer to printing integer
1  1449					     ;
1  1450	    07BC  BB 08C5r		     lea bx, dta
1  1451	    07BF  83 C3	1A		     add bx, 1Ah
1  1452	    07C2  53			     push bx
1  1453	    07C3  E8 FEDC		     call dadd_from
1  1454	    07C6  E8 FEB9		     call get_dword
1  1455	    07C9  58			     pop ax
1  1456	    07CA  5B			     pop bx
1  1457	    07CB  50			     push ax
1  1458
1  1459	    07CC  E8 FCC9		     call store_iint_to_string
1  1460					     print_range <time_space, storage>
3  1461						 print <offset time_space>
4  1462	    07CF  B4 09				 mov ah, 09h
4  1463	    07D1  BA 05F2r			 mov dx, offset	time_space
4  1464	    07D4  CD 21				 int 21h
3  1465						 print <offset storage>
4  1466	    07D6  B4 09				 mov ah, 09h
4  1467	    07D8  BA 0805r			 mov dx, offset	storage
4  1468	    07DB  CD 21				 int 21h
1  1469	    07DD  C3			     ret
1  1470
1  1471	    07DE			 is_valid_name:
1  1472	    07DE  5B			     pop bx
1  1473	    07DF  59			     pop cx	 ; deep	level
1  1474	    07E0  53			     push bx
1  1475
1  1476	    07E1  B8 08C5r		     lea ax, dta
1  1477	    07E4  05 001E		     add ax, 1Eh
1  1478	    07E7  8B D8			     mov bx, ax
1  1479	    07E9  B8 0001		     mov ax, 1
1  1480	    07EC  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1481	    07EF  75 03			     jne _is_valid_name_end
1  1482	    07F1  B8 0000		     mov ax, 0
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 27
tree.ASM



1  1483	    07F4			 _is_valid_name_end:
1  1484	    07F4  C3			     ret
1  1485
1  1486	    07F5			 load_accumulative_storage:
1  1487	    07F5  5B			     pop bx
1  1488	    07F6  58			     pop ax
1  1489	    07F7  A3 0801r		     mov word ptr [accumulative_storage], ax
1  1490	    07FA  58			     pop ax
1  1491	    07FB  A3 0803r		     mov word ptr [accumulative_storage	+ 2], ax
1  1492	    07FE  53			     push bx
1  1493	    07FF  C3			     ret
1  1494
1  1495	    0800			 set_accumulative_storage_from_dir:
1  1496					     ;
1  1497					     ; this function suppose that we count subfiles sizes from current directory
1  1498					     ;
1  1499
1  1500	    0800  C3			     ret
1  1501
1  1502	    0801  00000000		 accumulative_storage dd 0
1  1503	    0805  40*(24)		 storage db 64 dup('$')
1  1504	    0845  80*(00)		 count_dta db 128 dup(0)
1  1505	    08C5  80*(00)		 dta db	128 dup(0)
1  1506	    0945  0000			 current_max_entities dw 0
1  1507
   1508
   1509					 ;
   1510					 ; error codes
   1511					 ;
   1512	    0947  12			 no_more_files db 18
   1513
   1514					 ;
   1515					 ; error messages
   1516					 ;
   1517	    0948  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
   1518		  72 73	74 20 66 69 6C+
   1519		  65 6E	61 6D 65 73 20+
   1520		  66 61	69 6C 73 2E 24
   1521	    0964  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
   1522		  78 74	20 66 69 6C 65+
   1523		  6E 61	6D 65 73 20 66+
   1524		  61 69	6C 73 2E 24
   1525
   1526					 ;
   1527					 ; int variables
   1528					 ;
   1529	    097F  0000			 current_id_entity dw 0
   1530
   1531					 ;
   1532					 ; strings
   1533					 ;
   1534	    0981  2E 2E	00		 parent_folder db '..',	00h
   1535	    0984  40*(00)		 root_folder db	64 dup(00h)
   1536					 end start
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 28
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:01EF
??0001				  Near	 DGROUP:024F
??DATE				  Text	 "12/23/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "14:05:04"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACCUMULATIVE_STORAGE		  Dword	 DGROUP:0801
ALL_FILES			  Byte	 DGROUP:03FD
CD				  Near	 DGROUP:02D4
CD_ERROR			  Near	 DGROUP:02E2
CD_FAILS			  Byte	 DGROUP:035F
COUNT_DTA			  Byte	 DGROUP:0845
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0379
COUNT_SUBFILES_HERE		  Near	 DGROUP:06F3
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:0715
CURRENT_ID_ENTITY		  Word	 DGROUP:097F
CURRENT_MAX_ENTITIES		  Word	 DGROUP:0945
DADD				  Near	 DGROUP:06B0
DADD_FROM			  Near	 DGROUP:06A2
DATETIME			  Byte	 DGROUP:05DC
DDIV10				  Near	 DGROUP:06C6
DEEP_LEVEL			  Byte	 DGROUP:03F4
DOUBLEWORD			  Dword	 DGROUP:06EF
DTA				  Byte	 DGROUP:08C5
END_FILE_CHAR			  Byte	 DGROUP:0496
FILE_EXT			  Byte	 DGROUP:03F6
FILE_MASK			  Byte	 DGROUP:03F5
FIND_FIRST_ERROR		  Near	 DGROUP:0274
FIND_FIRST_FAILS		  Byte	 DGROUP:0948
FIND_FIRST_FILE			  Near	 DGROUP:0295
FIND_FIRST_FOLDER		  Near	 DGROUP:02A2
FIND_NEXT			  Near	 DGROUP:02AF
FIND_NEXT_ERROR			  Near	 DGROUP:0283
FIND_NEXT_FAILS			  Byte	 DGROUP:0964
FIRST_FILE_CHAR			  Byte	 DGROUP:0492
FOLDER_MASK			  Byte	 DGROUP:03FB
GET_DWORD			  Near	 DGROUP:0682
GET_DWORD_ADDR			  Near	 DGROUP:068E
HELLO_DATE			  Byte	 DGROUP:05CA
HELLO_TIME			  Byte	 DGROUP:05B8
IS_FOLDER			  Near	 DGROUP:02B4
IS_VALID_NAME			  Near	 DGROUP:07DE
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 29
Symbol Table



LEVEL_SHIFT			  Byte	 DGROUP:0480
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:015B
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:012D
LOAD_ACCUMULATIVE_STORAGE	  Near	 DGROUP:07F5
MIDDLE_FILE_CHAR		  Byte	 DGROUP:0494
NEWLINE				  Byte	 DGROUP:0377
NO_MORE_FILES			  Byte	 DGROUP:0947
NUM				  Byte	 DGROUP:05F6
OLD_LEVEL_SHIFT			  Byte	 DGROUP:047E
PARENT_FOLDER			  Byte	 DGROUP:0981
PARSE_ARGS			  Near	 DGROUP:03AD
PARSE_COMMAND_LINE		  Near	 DGROUP:0398
PARSE_D				  Near	 DGROUP:03C5
PARSE_END			  Near	 DGROUP:03F1
PARSE_F				  Near	 DGROUP:03D3
PARSE_S				  Near	 DGROUP:03DF
PARSE_T				  Near	 DGROUP:03E8
PRINT_DATETIMESTAMP		  Near	 DGROUP:04D6
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0401
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0468
REMAINDER			  Word	 DGROUP:06ED
RESET_LEVEL_SHIFT		  Near	 DGROUP:0457
ROOT_FOLDER			  Byte	 DGROUP:0984
SAVE_CWD			  Near	 DGROUP:0301
SET_ACCUMULATIVE_STORAGE_FROM_DI  Near	 DGROUP:0800
R
SET_DWORD			  Near	 DGROUP:0676
SET_DWORD_FROM			  Near	 DGROUP:0694
SET_LEVEL_SHIFT			  Near	 DGROUP:0446
SHOW_DATETIME			  Near	 DGROUP:0797
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:074A
SHOW_STORAGE			  Near	 DGROUP:07B4
SPACE				  Byte	 DGROUP:048B
START				  Near	 DGROUP:0100
STORAGE				  Byte	 DGROUP:0805
STORE_IINT_TO_STRING		  Near	 DGROUP:0498
TIME_NEWLINE			  Byte	 DGROUP:05F4
TIME_SEMICOLON			  Byte	 DGROUP:05F0
TIME_SPACE			  Byte	 DGROUP:05F2
USE_STORAGE			  Byte	 DGROUP:03F2
USE_TIME			  Byte	 DGROUP:03F3
WORKING_FOLDER			  Byte	 DGROUP:031F
ZERO_END_FILE			  Byte	 DGROUP:0490
ZERO_FIRST_FILE			  Byte	 DGROUP:048E
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0397
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:0380
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0746
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:072F
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:073F
_DADD_ADD_ONE			  Near	 DGROUP:06BC
_DDIV10				  Near	 DGROUP:06D4
_IS_FOLDER_END			  Near	 DGROUP:02D3
_IS_FOLDER_FALSE		  Near	 DGROUP:02CE
_IS_FOLDER_TRUE			  Near	 DGROUP:02C9
_IS_VALID_NAME_END		  Near	 DGROUP:07F4
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:026F
_LIST_SUBFILES_RECURSIVE_FOLDER	  Near	 DGROUP:01B7
Turbo Assembler	 Version 4.1	    12/23/19 14:05:06	    Page 30
Symbol Table



_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0182
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:01E5
EUDOGRAPHIC_HACK_END
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0262
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0445
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0416
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:043C
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:042A
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0433
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:047D
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:046E
_SHOW_FILENAME_FROM_DTA_DATETIME  Near	 DGROUP:0772
_SHOW_FILENAME_FROM_DTA_END	  Near	 DGROUP:078C
_SHOW_FILENAME_FROM_DTA_STORAGE	  Near	 DGROUP:077F
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:074E
ME
_STORE_IINT_TO_STRING_DIRECT	  Near	 DGROUP:04A3
_STORE_IINT_TO_STRING_END	  Near	 DGROUP:04D5
_STORE_IINT_TO_STRING_INVERSE	  Near	 DGROUP:04BF
_STORE_IINT_TO_STRING_INVERSE_LO  Near	 DGROUP:04C6
OP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:04BF
NG_END
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:04B2
NG_LOOP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:04B0
NG_START

Macro Name

BREAK_POINT
EXIT
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
RESTORE
SET_DTA

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  09C4 Word	  Public  CODE
