Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 2
tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
     80
     81	    0000			 model tiny
     82					 .386
     83	    0000			 .code
     84					 org 100h
     85	    0100			 start:
     86	    0100  E8 0096		     call save_cwd
     87	    0103  B8 0000		     mov ax, 0
     88	    0106  50			     push ax
     89	    0107  50			     push ax
     90	    0108  E8 0225		     call set_dword
     91					     set_dta dta
1    92	    010B  BA 0A92r		     lea dx, dta
1    93	    010E  33 C0			     xor ax, ax
1    94	    0110  B4 1A			     mov ah, 1Ah
1    95	    0112  CD 21			     int 21h
     96	    0114  E8 0119		     call parse_command_line
     97					     ;
     98					     ;	 start tree
     99					     ;
    100	    0117  B8 0988r		     mov ax, offset root_folder
    101	    011A  B9 0000		     mov cx, 0
    102	    011D  51			     push cx
    103	    011E  50			     push ax
    104	    011F  E8 068E		     call list_subfiles_recursive_from
    105					     ;
    106					     ;	 cd to start folder
    107					     ;
    108	    0122  B8 01B7r		     mov ax, offset working_folder
    109	    0125  50			     push ax
    110	    0126  E8 0043		     call cd
    111					     exit
1   112	    0129  B4 00			     mov ah, 00h
1   113	    012B  CD 21			     int 21h
    114
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 3
tree.ASM



    115					 include dtafunc.asm
1   116					 include filefunc.asm
2   117	    012D			 find_first_file:
2   118	    012D  5B			     pop bx
2   119	    012E  5A			     pop dx		; filename spec
2   120	    012F  B9 000F		     mov cx, 0fh	 ; include files
2   121	    0132  53			     push bx
2   122
2   123	    0133  33 C0			     xor ax, ax
2   124	    0135  B4 4E			     mov ah, 4Eh
2   125	    0137  CD 21			     int 21h
2   126	    0139  C3			     ret
2   127
2   128	    013A			 find_first_folder:
2   129	    013A  5B			     pop bx
2   130	    013B  5A			     pop dx		 ; filename spec
2   131	    013C  B9 0010		     mov cx, 10h	 ; include directories
2   132	    013F  53			     push bx
2   133
2   134	    0140  33 C0			     xor ax, ax
2   135	    0142  B4 4E			     mov ah, 4Eh
2   136	    0144  CD 21			     int 21h
2   137	    0146  C3			     ret
2   138
2   139	    0147			 find_next:
2   140	    0147  B4 4F			     mov ah, 4Fh
2   141	    0149  CD 21			     int 21h
2   142
2   143	    014B  C3			     ret
2   144
2   145	    014C			 is_folder:
2   146	    014C  5B			     pop bx
2   147	    014D  59			     pop cx
2   148	    014E  58			     pop ax ; dta address
2   149	    014F  53			     push bx
2   150
2   151	    0150  05 0015		     add ax, 15h
2   152	    0153  8B D8			     mov bx, ax
2   153	    0155  8A 1F			     mov bl, byte ptr [bx]
2   154	    0157  80 E3	10		     and bl, 10h
2   155	    015A  80 FB	10		     cmp bl, 10h
2   156	    015D  74 02			     je	_is_folder_true
2   157	    015F  75 05			     jne _is_folder_false
2   158	    0161			 _is_folder_true:
2   159	    0161  B8 0001		     mov ax, 1
2   160	    0164  EB 05			     jmp _is_folder_end
2   161	    0166			 _is_folder_false:
2   162	    0166  B8 0000		     mov ax, 0
2   163	    0169  EB 00			     jmp _is_folder_end
2   164	    016B			 _is_folder_end:
2   165	    016B  C3			     ret
2   166
2   167	    016C			 cd:
2   168	    016C  5B			     pop bx ; ret addr
2   169	    016D  5A			     pop dx ; root address
2   170	    016E  53			     push bx ; ret addr
2   171
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 4
tree.ASM



2   172					     load <dx>
4   173	    016F  52				 push dx
2   174	    0170  33 C0			     xor ax, ax
2   175	    0172  B4 3B			     mov ah, 3Bh
2   176	    0174  CD 21			     int 21h
2   177
2   178	    0176  72 02			     jc	cd_error
2   179					     restore <dx>
4   180	    0178  5A				 pop dx
2   181	    0179  C3			     ret
2   182	    017A			 cd_error:
2   183					     print_range <cd_fails, newline>
4   184						 print <offset cd_fails>
5   185	    017A  B4 09				 mov ah, 09h
5   186	    017C  BA 01F7r			 mov dx, offset	cd_fails
5   187	    017F  CD 21				 int 21h
4   188						 print <offset newline>
5   189	    0181  B4 09				 mov ah, 09h
5   190	    0183  BA 020Fr			 mov dx, offset	newline
5   191	    0186  CD 21				 int 21h
2   192					     restore <dx>
4   193	    0188  5A				 pop dx
2   194
2   195	    0189  B4 09				 mov ah, 09h
2   196	    018B  CD 21			     int 21h
2   197
2   198					     print_range <newline>
4   199						 print <offset newline>
5   200	    018D  B4 09				 mov ah, 09h
5   201	    018F  BA 020Fr			 mov dx, offset	newline
5   202	    0192  CD 21				 int 21h
2   203					     exit
3   204	    0194  B4 00			     mov ah, 00h
3   205	    0196  CD 21			     int 21h
2   206	    0198  C3			     ret
2   207
2   208	    0199			 save_cwd:
2   209	    0199  BE 01B7r		     mov si, offset working_folder
2   210
2   211					     ;
2   212					     ; save driver
2   213					     ;
2   214	    019C  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
2   215	    019E  CD 21			     int 21h
2   216	    01A0  8A D0			     mov dl, al
2   217	    01A2  80 C2	41		     add dl, 41h
2   218	    01A5  88 14			     mov byte ptr [si],	dl
2   219	    01A7  46			     inc si
2   220	    01A8  C6 04	3A		     mov byte ptr [si],	':'
2   221	    01AB  46			     inc si
2   222	    01AC  C6 04	5C		     mov byte ptr [si],	'\'
2   223	    01AF  46			     inc si
2   224
2   225					     ;
2   226					     ; save folder
2   227					     ;
2   228	    01B0  32 D2			     xor dl, dl			 ; Actual drive
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 5
tree.ASM



2   229	    01B2  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
2   230	    01B4  CD 21			     int 21h
2   231	    01B6  C3			     ret
2   232
2   233
2   234	    01B7  40*(00)		 working_folder	db 64 dup(00h)
2   235	    01F7  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    236		  64 69	72 65 63 74 6F+
    237		  72 79	20 66 61 69 6C+
    238		  73 2E	24
2   239	    020F  0A 24			 newline db 0Ah, '$'
1   240					 include clfunc.asm
2   241	    0211			 count_no_space_no_zero_letters:
2   242	    0211  5B			     pop bx ; ret address
2   243	    0212  5E			     pop si ; string offset
2   244	    0213  59			     pop cx ; string length
2   245	    0214  53			     push bx ; ret address
2   246	    0215  B8 0000		     mov ax, 0
2   247	    0218			 _count_non_space_symbols_loop:
2   248	    0218  80 3C	20		     cmp byte ptr [si],	20h
2   249	    021B  74 12			     je	_count_non_space_symbols_end
2   250	    021D  80 3C	0D		     cmp byte ptr [si],	0Dh
2   251	    0220  74 0D			     je	_count_non_space_symbols_end
2   252	    0222  80 3C	00		     cmp byte ptr [si],	00h
2   253	    0225  74 08			     je	_count_non_space_symbols_end
2   254	    0227  3B C1			     cmp ax, cx
2   255	    0229  74 04			     je	_count_non_space_symbols_end
2   256	    022B  40			     inc ax
2   257	    022C  46			     inc si
2   258	    022D  EB E9			     jmp _count_non_space_symbols_loop
2   259	    022F			 _count_non_space_symbols_end:
2   260	    022F  C3			     ret
2   261
2   262	    0230			 parse_command_line:
2   263					     ;
2   264					     ; prepare root folder
2   265					     ;
2   266	    0230  BE 0082		     mov si, 82h
2   267	    0233  B9 0040		     mov cx, 64
2   268	    0236  51			     push cx
2   269	    0237  56			     push si
2   270	    0238  E8 FFD6		     call count_no_space_no_zero_letters
2   271	    023B  8B C8			     mov cx, ax
2   272	    023D  BE 0082		     mov si, 82h
2   273	    0240  BF 0988r		     mov di, offset root_folder
2   274	    0243  F3> A4		     rep movsb
2   275
2   276	    0245			 parse_args:
2   277	    0245  46			     inc si
2   278	    0246  46			     inc si
2   279	    0247  80 3C	64		     cmp byte ptr [si],	'd'
2   280	    024A  74 11			     je	parse_d
2   281	    024C  80 3C	66		     cmp byte ptr [si],	'f'
2   282	    024F  74 1A			     je	parse_f
2   283	    0251  80 3C	73		     cmp byte ptr [si],	's'
2   284	    0254  74 21			     je	parse_s
2   285	    0256  80 3C	74		     cmp byte ptr [si],	't'
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 6
tree.ASM



2   286	    0259  74 25			     je	parse_t
2   287	    025B  EB 2C			     jmp parse_end
2   288	    025D			 parse_d:
2   289					     ;
2   290					     ; parse_deep level
2   291					     ;
2   292	    025D  46			     inc si
2   293	    025E  46			     inc si
2   294	    025F  8A 1C			     mov bl, byte ptr [si]
2   295	    0261  80 EB	30		     sub bl, 30h	     ; to number
2   296	    0264  88 1E	028Cr		     mov byte ptr [deep_level],	bl
2   297	    0268  46			     inc si
2   298	    0269  EB DA			     jmp parse_args
2   299	    026B			 parse_f:
2   300					     ;
2   301					     ; parse file extension
2   302					     ;
2   303	    026B  46			     inc si
2   304	    026C  46			     inc si
2   305	    026D  BF 028Er		     mov di, offset file_ext
2   306	    0270  B9 0004		     mov cx, 4
2   307	    0273  F3> A4		     rep movsb
2   308	    0275  EB CE			     jmp parse_args
2   309	    0277			 parse_s:
2   310					     ;
2   311					     ; print storage
2   312					     ;
2   313	    0277  B3 01			     mov bl, 1
2   314	    0279  88 1E	028Ar		     mov byte ptr [use_storage], bl
2   315	    027D  46			     inc si
2   316	    027E  EB C5			     jmp parse_args
2   317	    0280			 parse_t:
2   318					     ;
2   319					     ; print time
2   320					     ;
2   321	    0280  B3 01			     mov bl, 1
2   322	    0282  88 1E	028Br		     mov byte ptr [use_time], bl
2   323	    0286  46			     inc si
2   324	    0287  EB BC			     jmp parse_args
2   325
2   326	    0289			 parse_end:
2   327	    0289  C3			     ret
2   328
2   329					 ;
2   330					 ;   parse arguments
2   331					 ;
2   332	    028A  00			 use_storage db	0
2   333	    028B  00			 use_time db 0
2   334	    028C  01			 deep_level db 1
2   335	    028D  2A			 file_mask db '*'
2   336	    028E  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
2   337	    0293  2A 00			 folder_mask db	'*', 00h
2   338	    0295  2A 2E	2A 00		 all_files db '*.*', 00h
1   339					 include pgraph.asm
2   340
2   341	    0299			 print_pseudographic_prefix:
2   342	    0299  5B			     pop bx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 7
tree.ASM



2   343	    029A  59			     pop cx	 ; deep	level
2   344	    029B  58			     pop ax	 ; entity count
2   345	    029C  53			     push bx
2   346
2   347	    029D  83 F9	00		     cmp cx, 0
2   348	    02A0  74 0C			     je	_print_pseudographic_prefix_zero_level
2   349					     load <cx, ax>
4   350	    02A2  51				 push cx
4   351	    02A3  50				 push ax
2   352	    02A4  B8 0318r		     mov ax, offset level_shift
2   353
2   354	    02A7  51			     push cx
2   355	    02A8  50			     push ax
2   356	    02A9  E8 0054		     call print_string_with_length
2   357					     restore <ax, cx>
4   358	    02AC  58				 pop ax
4   359	    02AD  59				 pop cx
2   360	    02AE			 _print_pseudographic_prefix_zero_level:
2   361
2   362	    02AE  8B 1E	0B12r		     mov bx, word ptr [current_max_entities]
2   363	    02B2  3A C3			     cmp al, bl
2   364	    02B4  74 1E			     je	_print_pseudographic_prefix_zero_level_end
2   365	    02B6  3D 0001		     cmp ax, 1
2   366	    02B9  75 10			     jne _print_pseudographic_prefix_zero_level_middle
2   367	    02BB  83 F9	00		     cmp cx, 0
2   368	    02BE  74 02			     je	_print_pseudographic_prefix_zero_level_first
2   369	    02C0  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
2   370	    02C2			 _print_pseudographic_prefix_zero_level_first:
2   371					     print_range <first_file_char>
4   372						 print <offset first_file_char>
5   373	    02C2  B4 09				 mov ah, 09h
5   374	    02C4  BA 032Ar			 mov dx, offset	first_file_char
5   375	    02C7  CD 21				 int 21h
2   376	    02C9  EB 12			     jmp _print_pseudographic_prefix_end
2   377	    02CB			 _print_pseudographic_prefix_zero_level_middle:
2   378					     print_range <middle_file_char>
4   379						 print <offset middle_file_char>
5   380	    02CB  B4 09				 mov ah, 09h
5   381	    02CD  BA 032Cr			 mov dx, offset	middle_file_char
5   382	    02D0  CD 21				 int 21h
2   383	    02D2  EB 09			     jmp _print_pseudographic_prefix_end
2   384	    02D4			 _print_pseudographic_prefix_zero_level_end:
2   385					     print_range <end_file_char>
4   386						 print <offset end_file_char>
5   387	    02D4  B4 09				 mov ah, 09h
5   388	    02D6  BA 032Er			 mov dx, offset	end_file_char
5   389	    02D9  CD 21				 int 21h
2   390	    02DB  EB 00			     jmp _print_pseudographic_prefix_end
2   391	    02DD			 _print_pseudographic_prefix_end:
2   392	    02DD  C3			     ret
2   393
2   394	    02DE			 set_level_shift:
2   395	    02DE  5B			     pop bx
2   396	    02DF  59			     pop cx  ; line level
2   397	    02E0  53			     push bx
2   398
2   399	    02E1  BB 0318r		     lea bx, level_shift
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 8
tree.ASM



2   400	    02E4  03 D9			     add bx, cx
2   401	    02E6  A0 0323r		     mov al, byte ptr [space]
2   402	    02E9  88 07			     mov byte ptr [bx],	al
2   403
2   404	    02EB  B8 0001		     mov ax, 1
2   405
2   406	    02EE  C3			     ret
2   407
2   408	    02EF			 reset_level_shift:
2   409	    02EF  5B			     pop bx
2   410	    02F0  59			     pop cx  ; line level
2   411	    02F1  53			     push bx
2   412
2   413	    02F2  BB 0318r		     lea bx, level_shift
2   414	    02F5  03 D9			     add bx, cx
2   415	    02F7  A0 0316r		     mov al, byte ptr [old_level_shift]
2   416	    02FA  88 07			     mov byte ptr [bx],	al
2   417
2   418	    02FC  B8 0001		     mov ax, 1
2   419
2   420	    02FF  C3			     ret
2   421
2   422	    0300			 print_string_with_length:
2   423	    0300  5B			     pop bx ; ret address
2   424	    0301  5E			     pop si ; string offset
2   425	    0302  59			     pop cx ; string length
2   426	    0303  53			     push bx; ret address
2   427	    0304  33 C0			     xor ax, ax
2   428	    0306			 _print_string_with_length_loop:
2   429	    0306  B4 02			     mov ah, 02h
2   430	    0308  8A 14			     mov dl, byte ptr [si]
2   431	    030A  CD 21			     int 21h
2   432	    030C  49			     dec cx
2   433	    030D  46			     inc si
2   434	    030E  83 F9	00		     cmp cx, 00h
2   435	    0311  74 02			     je	_print_string_with_length_end
2   436	    0313  EB F1			     jmp _print_string_with_length_loop
2   437	    0315			 _print_string_with_length_end:
2   438	    0315  C3			     ret
2   439
2   440					 ;
2   441					 ;   pseudographic
2   442					 ;
2   443	    0316  B3 24			 old_level_shift db 179, '$'
2   444	    0318  0A*(B3) 24		 level_shift db	10 dup(179), '$'
2   445	    0323  ?? 20	24		 space db, 32, '$'
2   446
2   447	    0326  C3 24			 zero_first_file db 195, '$'
2   448	    0328  C0 24			 zero_end_file db 192, '$'
2   449
2   450	    032A  C2 24			 first_file_char db 194, '$'
2   451	    032C  C3 24			 middle_file_char db 195, '$'
2   452	    032E  C0 24			 end_file_char db 192, '$'
2   453
1   454					 include tmacro.asm
2   455					 load macro args
2   456					     irp d,<args>
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 9
tree.ASM



2   457						 push d
2   458					     endm
2   459					 endm
2   460
2   461					 restore macro args
2   462					     irp d,<args>
2   463						 pop d
2   464					     endm
2   465					 endm
2   466
2   467					 exit macro
2   468					     mov ah, 00h
2   469					     int 21h
2   470					 endm
2   471
2   472					 print macro buf
2   473						 mov ah, 09h
2   474						 mov dx, buf
2   475						 int 21h
2   476					 endm
2   477
2   478					 print_range macro args
2   479					     irp d,<args>
2   480						 print <offset d>
2   481					     endm
2   482					 endm
2   483
2   484					 push_fragment macro buf, length
2   485					     local l1
2   486					     lea di, buf
2   487					     mov cx, length
2   488					     xor bx, bx
2   489					 l1:
2   490					     mov bl, byte ptr [di]
2   491					     push bx
2   492					     inc di
2   493					     dec cx
2   494					     cmp cx, 0
2   495					     jne l1
2   496					 endm
2   497
2   498					 pop_fragment macro buf, length
2   499					     local l1
2   500					     lea di, buf
2   501					     mov cx, length
2   502					     add di, cx
2   503					     dec di
2   504					     xor bx, bx
2   505					 l1:
2   506					     pop bx
2   507					     mov byte ptr [di],	bl
2   508					     dec di
2   509					     dec cx
2   510					     cmp cx, 0
2   511					     jne l1
2   512					 endm
2   513
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 10
tree.ASM



2   514					 set_dta macro dta
2   515					     lea dx, dta
2   516					     xor ax, ax
2   517					     mov ah, 1Ah
2   518					     int 21h
2   519					 endm
2   520
2   521					 break_point macro arg
2   522					     load <arg>
2   523					     xor arg, arg
2   524					     xor arg, arg
2   525					     xor arg, arg
2   526					     xor arg, arg
2   527					     xor arg, arg
2   528					     xor arg, arg
2   529					     xor arg, arg
2   530					     xor arg, arg
2   531					     restore <arg>
2   532					 endm
1   533					 include time.asm
2   534					 include bmacro.asm
3   535					 load macro args
3   536					     irp d,<args>
3   537						 push d
3   538					     endm
3   539					 endm
3   540
3   541					 restore macro args
3   542					     irp d,<args>
3   543						 pop d
3   544					     endm
3   545					 endm
3   546
3   547					 exit macro
3   548					     mov ah, 00h
3   549					     int 21h
3   550					 endm
3   551
3   552					 print macro buf
3   553						 mov ah, 09h
3   554						 mov dx, buf
3   555						 int 21h
3   556					 endm
3   557
3   558					 print_range macro args
3   559					     irp d,<args>
3   560						 print <offset d>
3   561					     endm
3   562					 endm
3   563
3   564					 break_point macro arg
3   565					     load <arg>
3   566					     xor arg, arg
3   567					     xor arg, arg
3   568					     xor arg, arg
3   569					     xor arg, arg
3   570					     xor arg, arg
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 11
tree.ASM



3   571					     xor arg, arg
3   572					     xor arg, arg
3   573					     xor arg, arg
3   574					     restore <arg>
3   575					 endm
3   576
3   577					 parse_byte_to_str macro from, to, length
3   578					     mov ax, length
3   579					     push ax
3   580					     mov ax, to
3   581					     push ax
3   582					     xor ax, ax
3   583					     mov al, from
3   584					     push ax
3   585					     call store_iint_to_string
3   586					 endm
3   587
3   588					 parse_word_to_str macro from, to, length
3   589					     mov ax, length
3   590					     push ax
3   591					     mov ax, to
3   592					     push ax
3   593					     xor ax, ax
3   594					     mov ax, from
3   595					     push ax
3   596					     call store_iint_to_string
3   597					 endm
2   598					 include pnum.asm
3   599					 include fdwcalc.asm
4   600	    0330			 set_dword:
4   601	    0330  59			     pop cx ; ret address
4   602	    0331  58			     pop ax ; word ptr [l16]
4   603	    0332  5A			     pop dx ; word ptr [h16]
4   604
4   605	    0333  51			     push cx
4   606	    0334  A3 03ABr		     mov word ptr [doubleword],	ax
4   607	    0337  89 16	03ADr		     mov word ptr [doubleword +	2], dx
4   608
4   609	    033B  C3			     ret
4   610
4   611	    033C			 get_dword:
4   612	    033C  59			     pop cx ; ret address
4   613
4   614	    033D  A1 03ABr		     mov ax, word ptr [doubleword]
4   615	    0340  8B 16	03ADr		     mov dx, word ptr [doubleword + 2]
4   616
4   617	    0344  52			     push dx
4   618	    0345  50			     push ax
4   619	    0346  51			     push cx
4   620
4   621	    0347  C3			     ret
4   622
4   623	    0348			 get_dword_addr:
4   624	    0348  5B			     pop bx
4   625	    0349  B8 03ABr		     lea ax, doubleword
4   626	    034C  53			     push bx
4   627
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 12
tree.ASM



4   628	    034D  C3			     ret
4   629
4   630	    034E			 set_dword_from:
4   631	    034E  5A			     pop dx
4   632	    034F  5B			     pop bx ; address from
4   633	    0350  52			     push dx
4   634	    0351  8B 57	02		     mov dx, word ptr [bx + 2]
4   635	    0354  52			     push dx
4   636	    0355  8B 17			     mov dx, word ptr [bx]
4   637	    0357  52			     push dx
4   638	    0358  E8 FFD5		     call set_dword
4   639	    035B  C3			     ret
4   640
4   641	    035C			 dadd_from:
4   642	    035C  5A			     pop dx
4   643	    035D  5B			     pop bx ; address from
4   644	    035E  52			     push dx
4   645	    035F  8B 47	02		     mov ax, word ptr [bx + 2]
4   646	    0362  50			     push ax
4   647	    0363  8B 07			     mov ax, word ptr [bx]
4   648	    0365  50			     push ax
4   649	    0366  E8 0001		     call dadd
4   650	    0369  C3			     ret
4   651
4   652	    036A			 dadd:
4   653	    036A  5E			     pop si
4   654					     ;
4   655					     ; on stack	lay pair (l,h) of one dword, then we load second
4   656					     ;
4   657	    036B  E8 FFCE		     call get_dword
4   658
4   659	    036E  58			     pop ax ; our low
4   660	    036F  5B			     pop bx ; our hight
4   661	    0370  59			     pop cx ; their low
4   662	    0371  5A			     pop dx ; their hight
4   663
4   664	    0372  13 C1			     adc ax, cx
4   665	    0374  72 02			     jc	_dadd_add_one
4   666	    0376  EB 01			     jmp _dadd_no_add_one
4   667	    0378			 _dadd_add_one:
4   668	    0378  43			     inc bx
4   669	    0379			 _dadd_no_add_one:
4   670	    0379  03 DA			     add bx, dx
4   671	    037B  53			     push bx
4   672	    037C  50			     push ax
4   673	    037D  E8 FFB0		     call set_dword
4   674	    0380  56			     push si
4   675	    0381  C3			     ret
4   676
4   677	    0382			 ddiv10:
4   678	    0382  E8 FFB7		     call get_dword
4   679	    0385  E8 0008		     call _ddiv10
4   680	    0388  89 16	03A9r		     mov word ptr [remainder], dx
4   681	    038C  E8 FFA1		     call set_dword
4   682
4   683	    038F  C3			     ret
4   684
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 13
tree.ASM



4   685	    0390			 _ddiv10:
4   686	    0390  59			     pop cx ; ret address
4   687	    0391  58			     pop ax ; word ptr [l16]
4   688	    0392  5A			     pop dx ; word ptr [h16]
4   689
4   690					     load <ax>
6   691	    0393  50				 push ax
4   692	    0394  8B C2			     mov ax, dx
4   693	    0396  33 D2			     xor dx, dx
4   694	    0398  BB 000A		     mov bx, 10
4   695	    039B  F7 F3			     div bx
4   696	    039D  8B D8			     mov bx, ax	; word ptr [h16]
4   697					     restore <ax>
6   698	    039F  58				 pop ax
4   699	    03A0  53			     push bx
4   700
4   701	    03A1  BB 000A		     mov bx, 10
4   702	    03A4  F7 F3			     div bx
4   703	    03A6  50			     push ax ; word ptr	[l15]
4   704
4   705	    03A7  51			     push cx
4   706	    03A8  C3			     ret
4   707
4   708	    03A9  0000			 remainder dw 0
4   709	    03AB  00000000		 doubleword dd 0
3   710
3   711	    03AF			 store_iint_to_string:
3   712	    03AF  5B			     pop bx
3   713	    03B0  58			     pop ax ; dword integer address
3   714	    03B1  5E			     pop si ; memory for storing integer
3   715	    03B2  5F			     pop di ; integer min length
3   716	    03B3  53			     push bx
3   717
3   718	    03B4  B9 0000		     mov cx, 0
3   719	    03B7  BB 000A		     mov bx, 10
3   720	    03BA			 _store_iint_to_string_direct:
3   721	    03BA  3D 0000		     cmp ax, 0
3   722	    03BD  74 08			     je	_store_iint_to_string_zero_padding_start
3   723
3   724	    03BF  33 D2			     xor dx, dx
3   725	    03C1  F7 F3			     div bx
3   726	    03C3  52			     push dx
3   727	    03C4  41			     inc cx
3   728
3   729	    03C5  EB F3			     jmp _store_iint_to_string_direct
3   730
3   731	    03C7			 _store_iint_to_string_zero_padding_start:
3   732	    03C7  2B F9			     sub di, cx
3   733	    03C9			 _store_iint_to_string_zero_padding_loop:
3   734	    03C9  83 FF	00		     cmp di, 0
3   735	    03CC  7E 08			     jle _store_iint_to_string_zero_padding_end
3   736	    03CE  BB 0000		     mov bx, 0
3   737	    03D1  53			     push bx
3   738	    03D2  4F			     dec di
3   739	    03D3  41			     inc cx
3   740	    03D4  EB F3			     jmp _store_iint_to_string_zero_padding_loop
3   741	    03D6			 _store_iint_to_string_zero_padding_end:
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 14
tree.ASM



3   742	    03D6			 _store_iint_to_string_inverse:
3   743					     load <si>
5   744	    03D6  56				 push si
3   745	    03D7  03 F1			     add si, cx
3   746	    03D9  C6 04	24		     mov byte ptr [si],	'$'
3   747					     restore <si>
5   748	    03DC  5E				 pop si
3   749	    03DD			 _store_iint_to_string_inverse_loop:
3   750	    03DD  83 F9	00		     cmp cx, 0
3   751	    03E0  74 0A			     je	_store_iint_to_string_end
3   752
3   753	    03E2  5A			     pop dx
3   754	    03E3  80 C2	30		     add dl, 30h
3   755	    03E6  88 14			     mov byte ptr [si],	dl
3   756	    03E8  46			     inc si
3   757	    03E9  49			     dec cx
3   758
3   759	    03EA  EB F1			     jmp _store_iint_to_string_inverse_loop
3   760
3   761	    03EC			 _store_iint_to_string_end:
3   762	    03EC  C3			     ret
3   763
3   764
3   765	    03ED			 store_dword_to_string:
3   766	    03ED  5B			     pop bx
3   767	    03EE  58			     pop ax ; dword integer address
3   768	    03EF  5E			     pop si ; memory for storing integer
3   769	    03F0  5F			     pop di ; integer min length
3   770	    03F1  53			     push bx
3   771
3   772	    03F2  50			     push ax
3   773	    03F3  E8 FF58		     call set_dword_from
3   774
3   775	    03F6  B9 0000		     mov cx, 0
3   776	    03F9			 _store_dword_to_string_direct:
3   777					     load <cx>
5   778	    03F9  51				 push cx
3   779	    03FA  E8 FF3F		     call get_dword
3   780	    03FD  58			     pop ax
3   781	    03FE  5B			     pop bx
3   782					     restore <cx>
5   783	    03FF  59				 pop cx
3   784	    0400  3D 0000		     cmp ax, 0
3   785	    0403  75 07			     jne _store_dword_to_string_direct_next_loop
3   786	    0405  83 FB	00		     cmp bx, 0
3   787	    0408  75 02			     jne _store_dword_to_string_direct_next_loop
3   788	    040A  EB 11			     jmp _store_dword_to_string_zero_padding_start
3   789
3   790	    040C			 _store_dword_to_string_direct_next_loop:
3   791					     load <cx, si, di>
5   792	    040C  51				 push cx
5   793	    040D  56				 push si
5   794	    040E  57				 push di
3   795	    040F  E8 FF70		     call ddiv10
3   796					     restore <di, si, cx>
5   797	    0412  5F				 pop di
5   798	    0413  5E				 pop si
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 15
tree.ASM



5   799	    0414  59				 pop cx
3   800	    0415  8B 16	03A9r		     mov dx, word ptr [remainder]
3   801	    0419  52			     push dx
3   802	    041A  41			     inc cx
3   803
3   804	    041B  EB DC			     jmp _store_dword_to_string_direct
3   805
3   806	    041D			 _store_dword_to_string_zero_padding_start:
3   807	    041D  2B F9			     sub di, cx
3   808	    041F			 _store_dword_to_string_zero_padding_loop:
3   809	    041F  83 FF	00		     cmp di, 0
3   810	    0422  7E 08			     jle _store_dword_to_string_zero_padding_end
3   811	    0424  BB 0000		     mov bx, 0
3   812	    0427  53			     push bx
3   813	    0428  4F			     dec di
3   814	    0429  41			     inc cx
3   815	    042A  EB F3			     jmp _store_dword_to_string_zero_padding_loop
3   816	    042C			 _store_dword_to_string_zero_padding_end:
3   817	    042C			 _store_dword_to_string_inverse:
3   818					     load <si>
5   819	    042C  56				 push si
3   820	    042D  03 F1			     add si, cx
3   821	    042F  C6 04	24		     mov byte ptr [si],	'$'
3   822					     restore <si>
5   823	    0432  5E				 pop si
3   824	    0433			 _store_dword_to_string_inverse_loop:
3   825	    0433  83 F9	00		     cmp cx, 0
3   826	    0436  74 0A			     je	_store_dword_to_string_end
3   827
3   828	    0438  5A			     pop dx
3   829	    0439  80 C2	30		     add dl, 30h
3   830	    043C  88 14			     mov byte ptr [si],	dl
3   831	    043E  46			     inc si
3   832	    043F  49			     dec cx
3   833
3   834	    0440  EB F1			     jmp _store_dword_to_string_inverse_loop
3   835
3   836	    0442			 _store_dword_to_string_end:
3   837	    0442  C3			     ret
2   838
2   839	    0443			 print_datetimestamp:
2   840	    0443  5B			     pop bx
2   841	    0444  59			     pop cx ; time
2   842	    0445  5A			     pop dx ; date
2   843	    0446  53			     push bx
2   844
2   845	    0447  BE 0549r		     lea si, datetime
2   846
2   847					     ;
2   848					     ; date format
2   849					     ;
2   850					     load <cx, dx, si>
4   851	    044A  51				 push cx
4   852	    044B  52				 push dx
4   853	    044C  56				 push si
2   854	    044D  C1 FA	09		     sar dx, 9
2   855	    0450  81 C2	07BC		     add dx, 1980
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 16
tree.ASM



2   856					     parse_word_to_str dx, si, 4
3   857	    0454  B8 0004		     mov ax, 4
3   858	    0457  50			     push ax
3   859	    0458  8B C6			     mov ax, si
3   860	    045A  50			     push ax
3   861	    045B  33 C0			     xor ax, ax
3   862	    045D  8B C2			     mov ax, dx
3   863	    045F  50			     push ax
3   864	    0460  E8 FF4C		     call store_iint_to_string
2   865					     restore <si, dx, cx>
4   866	    0463  5E				 pop si
4   867	    0464  5A				 pop dx
4   868	    0465  59				 pop cx
2   869					     break_point ax
3   870					     load <ax>
5   871	    0466  50				 push ax
3   872	    0467  33 C0			     xor ax, ax
3   873	    0469  33 C0			     xor ax, ax
3   874	    046B  33 C0			     xor ax, ax
3   875	    046D  33 C0			     xor ax, ax
3   876	    046F  33 C0			     xor ax, ax
3   877	    0471  33 C0			     xor ax, ax
3   878	    0473  33 C0			     xor ax, ax
3   879	    0475  33 C0			     xor ax, ax
3   880					     restore <ax>
5   881	    0477  58				 pop ax
2   882	    0478  83 C6	04		     add si, 4
2   883	    047B  C6 04	2E		     mov byte ptr [si],	'.'
2   884	    047E  46			     inc si
2   885
2   886					     load <cx, dx, si>
4   887	    047F  51				 push cx
4   888	    0480  52				 push dx
4   889	    0481  56				 push si
2   890	    0482  81 E2	01E0		     and dx, 32	+ 64 + 128 + 256
2   891	    0486  C1 FA	05		     sar dx, 5
2   892					     parse_byte_to_str dl, si, 2
3   893	    0489  B8 0002		     mov ax, 2
3   894	    048C  50			     push ax
3   895	    048D  8B C6			     mov ax, si
3   896	    048F  50			     push ax
3   897	    0490  33 C0			     xor ax, ax
3   898	    0492  8A C2			     mov al, dl
3   899	    0494  50			     push ax
3   900	    0495  E8 FF17		     call store_iint_to_string
2   901					     restore <si, dx, cx>
4   902	    0498  5E				 pop si
4   903	    0499  5A				 pop dx
4   904	    049A  59				 pop cx
2   905	    049B  83 C6	02		     add si, 2
2   906	    049E  C6 04	2E		     mov byte ptr [si],	'.'
2   907	    04A1  46			     inc si
2   908
2   909					     load <cx, dx, si>
4   910	    04A2  51				 push cx
4   911	    04A3  52				 push dx
4   912	    04A4  56				 push si
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 17
tree.ASM



2   913	    04A5  80 E2	1F		     and dl, 1 + 2 + 4 + 8 + 16
2   914					     parse_byte_to_str dl, si, 2
3   915	    04A8  B8 0002		     mov ax, 2
3   916	    04AB  50			     push ax
3   917	    04AC  8B C6			     mov ax, si
3   918	    04AE  50			     push ax
3   919	    04AF  33 C0			     xor ax, ax
3   920	    04B1  8A C2			     mov al, dl
3   921	    04B3  50			     push ax
3   922	    04B4  E8 FEF8		     call store_iint_to_string
2   923					     restore <si, dx, cx>
4   924	    04B7  5E				 pop si
4   925	    04B8  5A				 pop dx
4   926	    04B9  59				 pop cx
2   927	    04BA  83 C6	02		     add si, 2
2   928	    04BD  C6 04	20		     mov byte ptr [si],	' '
2   929	    04C0  46			     inc si
2   930
2   931					     ;
2   932					     ; time format
2   933					     ;
2   934					     load <cx, dx, si>
4   935	    04C1  51				 push cx
4   936	    04C2  52				 push dx
4   937	    04C3  56				 push si
2   938	    04C4  C1 F9	0B		     sar cx, 11
2   939					     parse_byte_to_str cl, si, 2
3   940	    04C7  B8 0002		     mov ax, 2
3   941	    04CA  50			     push ax
3   942	    04CB  8B C6			     mov ax, si
3   943	    04CD  50			     push ax
3   944	    04CE  33 C0			     xor ax, ax
3   945	    04D0  8A C1			     mov al, cl
3   946	    04D2  50			     push ax
3   947	    04D3  E8 FED9		     call store_iint_to_string
2   948					     restore <si, dx, cx>
4   949	    04D6  5E				 pop si
4   950	    04D7  5A				 pop dx
4   951	    04D8  59				 pop cx
2   952	    04D9  83 C6	02		     add si, 2
2   953	    04DC  C6 04	3A		     mov byte ptr [si],	':'
2   954	    04DF  46			     inc si
2   955
2   956					     load <cx, dx, si>
4   957	    04E0  51				 push cx
4   958	    04E1  52				 push dx
4   959	    04E2  56				 push si
2   960	    04E3  81 E1	07E0		     and cx, 2016
2   961	    04E7  C1 F9	05		     sar cx, 5
2   962					     parse_byte_to_str cl, si, 2
3   963	    04EA  B8 0002		     mov ax, 2
3   964	    04ED  50			     push ax
3   965	    04EE  8B C6			     mov ax, si
3   966	    04F0  50			     push ax
3   967	    04F1  33 C0			     xor ax, ax
3   968	    04F3  8A C1			     mov al, cl
3   969	    04F5  50			     push ax
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 18
tree.ASM



3   970	    04F6  E8 FEB6		     call store_iint_to_string
2   971					     restore <si, dx, cx>
4   972	    04F9  5E				 pop si
4   973	    04FA  5A				 pop dx
4   974	    04FB  59				 pop cx
2   975	    04FC  83 C6	02		     add si, 2
2   976	    04FF  C6 04	3A		     mov byte ptr [si],	':'
2   977	    0502  46			     inc si
2   978
2   979					     load <cx, dx, si>
4   980	    0503  51				 push cx
4   981	    0504  52				 push dx
4   982	    0505  56				 push si
2   983	    0506  80 E1	0F		     and cl, 15
2   984	    0509  D0 E1			     sal cl, 1
2   985					     parse_byte_to_str cl, si, 2
3   986	    050B  B8 0002		     mov ax, 2
3   987	    050E  50			     push ax
3   988	    050F  8B C6			     mov ax, si
3   989	    0511  50			     push ax
3   990	    0512  33 C0			     xor ax, ax
3   991	    0514  8A C1			     mov al, cl
3   992	    0516  50			     push ax
3   993	    0517  E8 FE95		     call store_iint_to_string
2   994					     restore <si, dx, cx>
4   995	    051A  5E				 pop si
4   996	    051B  5A				 pop dx
4   997	    051C  59				 pop cx
2   998	    051D  83 C6	02		     add si, 2
2   999	    0520  C6 04	24		     mov byte ptr [si],	'$'
2  1000	    0523  46			     inc si
2  1001
2  1002	    0524  C3			     ret
2  1003
2  1004	    0525  43 75	72 72 65 6E 74+	 hello_time db 'Current	time is: $'
   1005		  20 74	69 6D 65 20 69+
   1006		  73 3A	20 24
2  1007	    0537  43 75	72 72 65 6E 74+	 hello_date db 'Current	date is: $'
   1008		  20 64	61 74 65 20 69+
   1009		  73 3A	20 24
2  1010	    0549  14*(24)		 datetime db 20	dup('$')
2  1011	    055D  3A 24			 time_semicolon	db ':',	'$'
2  1012	    055F  20 24			 time_space db ' ', '$'
2  1013	    0561  0A 24			 time_newline db 0Ah, '$'
2  1014	    0563  80*(24)		 num db	128 dup('$')
1  1015
1  1016	    05E3			 count_subfiles_here:
1  1017	    05E3  B8 028Dr		     lea ax, file_mask
1  1018	    05E6  BE 012Dr		     lea si, find_first_file
1  1019
1  1020	    05E9  50			     push ax
1  1021	    05EA  56			     push si
1  1022	    05EB  E8 0017		     call count_subfiles_here_by_mask
1  1023					     load <ax>
3  1024	    05EE  50				 push ax
1  1025	    05EF  B8 0293r		     mov ax, offset folder_mask
1  1026	    05F2  BE 013Ar		     mov si, offset find_first_folder
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 19
tree.ASM



1  1027
1  1028	    05F5  50			     push ax
1  1029	    05F6  56			     push si
1  1030	    05F7  E8 000B		     call count_subfiles_here_by_mask
1  1031	    05FA  8B D8			     mov bx, ax
1  1032					     restore <ax>
3  1033	    05FC  58				 pop ax
1  1034	    05FD  03 D8			     add bx, ax
1  1035	    05FF  8B C3			     mov ax, bx
1  1036	    0601  A3 0B12r		     mov word ptr [current_max_entities], ax
1  1037	    0604  C3			     ret
1  1038
1  1039	    0605			 count_subfiles_here_by_mask:
1  1040	    0605  5B			     pop bx
1  1041	    0606  5E			     pop si		 ; find_first address
1  1042	    0607  58			     pop ax		 ; mask	address
1  1043	    0608  53			     push bx
1  1044
1  1045					     load <ax, si>
3  1046	    0609  50				 push ax
3  1047	    060A  56				 push si
1  1048					     set_dta count_dta
2  1049	    060B  BA 0A12r		     lea dx, count_dta
2  1050	    060E  33 C0			     xor ax, ax
2  1051	    0610  B4 1A			     mov ah, 1Ah
2  1052	    0612  CD 21			     int 21h
1  1053					     restore <si, ax>
3  1054	    0614  5E				 pop si
3  1055	    0615  58				 pop ax
1  1056
1  1057	    0616  B9 0000		     mov cx, 0
1  1058					     load <cx>
3  1059	    0619  51				 push cx
1  1060	    061A  50			     push ax
1  1061	    061B  FF D6			     call si
1  1062	    061D  72 17			     jc	_count_subfiles_from_end
1  1063	    061F			 _count_subfiles_from_loop:
1  1064	    061F  B8 0A12r		     lea ax, count_dta
1  1065	    0622  05 001E		     add ax, 1Eh
1  1066	    0625  8B D8			     mov bx, ax
1  1067	    0627  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1068	    062A  74 03			     je	_count_subfiles_from_loop_next
1  1069
1  1070					     restore <cx>
3  1071	    062C  59				 pop cx
1  1072	    062D  41			     inc cx
1  1073					     load <cx>
3  1074	    062E  51				 push cx
1  1075	    062F			 _count_subfiles_from_loop_next:
1  1076	    062F  E8 FB15		     call find_next
1  1077	    0632  72 02			     jc	_count_subfiles_from_end
1  1078
1  1079	    0634  EB E9			     jmp _count_subfiles_from_loop
1  1080	    0636			 _count_subfiles_from_end:
1  1081					     restore <cx>
3  1082	    0636  59				 pop cx
1  1083	    0637  8B C1			     mov ax, cx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 20
tree.ASM



1  1084	    0639  C3			     ret
1  1085
1  1086	    063A			 show_filename_from_dta:
1  1087					     ;
1  1088					     ; returns file storage
1  1089					     ;
1  1090	    063A  5B			     pop bx
1  1091	    063B  59			     pop cx  ; deep level
1  1092	    063C  58			     pop ax  ; entity count
1  1093	    063D  53			     push bx
1  1094
1  1095	    063E			 _show_filename_from_dta_valid_name:
1  1096					     ;
1  1097					     ;	 pseudo	graphic	prefix
1  1098					     ;
1  1099					     load <ax>
3  1100	    063E  50				 push ax
1  1101	    063F  B8 0A92r		     lea ax, dta
1  1102
1  1103	    0642  05 001E		     add ax, 1Eh
1  1104	    0645  8B D8			     mov bx, ax
1  1105					     restore <ax>
3  1106	    0647  58				 pop ax
1  1107
1  1108					     load <cx, bx>
3  1109	    0648  51				 push cx
3  1110	    0649  53				 push bx
1  1111	    064A  50			     push ax	 ; entity count
1  1112	    064B  51			     push cx	 ; deep	level
1  1113	    064C  E8 FC4A		     call print_pseudographic_prefix
1  1114					     restore <bx, cx>
3  1115	    064F  5B				 pop bx
3  1116	    0650  59				 pop cx
1  1117
1  1118					     load <bx>
3  1119	    0651  53				 push bx
1  1120	    0652  B9 000D		     mov cx, 13
1  1121	    0655  51			     push cx
1  1122	    0656  53			     push bx
1  1123	    0657  E8 FBB7		     call count_no_space_no_zero_letters
1  1124	    065A  8B C8			     mov cx, ax
1  1125					     restore <bx>
3  1126	    065C  5B				 pop bx
1  1127	    065D  51			     push cx
1  1128	    065E  53			     push bx
1  1129	    065F  E8 FC9E		     call print_string_with_length
1  1130
1  1131	    0662			 _show_filename_from_dta_datetime:
1  1132	    0662  B0 01			     mov al, 1
1  1133	    0664  38 06	028Br		     cmp byte ptr [use_time], al
1  1134	    0668  75 05			     jne _show_filename_from_dta_storage
1  1135	    066A  E8 001A		     call show_datetime
1  1136	    066D  EB 00			     jmp _show_filename_from_dta_storage
1  1137
1  1138	    066F			 _show_filename_from_dta_storage:
1  1139	    066F  B0 01			     mov al, 1
1  1140	    0671  38 06	028Ar		     cmp byte ptr [use_storage], al
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 21
tree.ASM



1  1141	    0675  75 05			     jne _show_filename_from_dta_end
1  1142	    0677  E8 0031		     call show_storage
1  1143	    067A  EB 00			     jmp _show_filename_from_dta_end
1  1144
1  1145	    067C			  _show_filename_from_dta_end:
1  1146					     print_range <newline>
3  1147						 print <offset newline>
4  1148	    067C  B4 09				 mov ah, 09h
4  1149	    067E  BA 020Fr			 mov dx, offset	newline
4  1150	    0681  CD 21				 int 21h
1  1151	    0683  B8 0001		     mov ax, 1
1  1152	    0686  C3			     ret
1  1153
1  1154	    0687			 show_datetime:
1  1155	    0687  BB 0A92r		     lea bx, dta
1  1156	    068A  8B 4F	16		     mov cx, word ptr [bx + 16h]
1  1157	    068D  8B 57	18		     mov dx, word ptr [bx + 18h]
1  1158	    0690  52			     push dx
1  1159	    0691  51			     push cx
1  1160	    0692  E8 FDAE		     call print_datetimestamp
1  1161					     print_range <time_space, datetime,	time_space>
3  1162						 print <offset time_space>
4  1163	    0695  B4 09				 mov ah, 09h
4  1164	    0697  BA 055Fr			 mov dx, offset	time_space
4  1165	    069A  CD 21				 int 21h
3  1166						 print <offset datetime>
4  1167	    069C  B4 09				 mov ah, 09h
4  1168	    069E  BA 0549r			 mov dx, offset	datetime
4  1169	    06A1  CD 21				 int 21h
3  1170						 print <offset time_space>
4  1171	    06A3  B4 09				 mov ah, 09h
4  1172	    06A5  BA 055Fr			 mov dx, offset	time_space
4  1173	    06A8  CD 21				 int 21h
1  1174	    06AA  C3			     ret
1  1175
1  1176	    06AB			 show_storage:
1  1177					     ;
1  1178					     ; print without padding
1  1179					     ;
1  1180	    06AB  BA 0000		     mov dx, 0
1  1181	    06AE  52			     push dx
1  1182
1  1183					     ;
1  1184					     ; memory for storing integer
1  1185					     ;
1  1186	    06AF  BA 09D2r		     lea dx, storage
1  1187	    06B2  52			     push dx
1  1188
1  1189					     ;
1  1190					     ; move low	16 bit as integer to printing integer
1  1191					     ;
1  1192	    06B3  A1 09CAr		     mov ax, word ptr [is_file]
1  1193	    06B6  3D 0000		     cmp ax, 0
1  1194	    06B9  74 09			     je	_show_storage_folder
1  1195	    06BB			 _show_storage_file:
1  1196	    06BB  BB 0A92r		     lea bx, dta
1  1197	    06BE  83 C3	1A		     add bx, 1Ah
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 22
tree.ASM



1  1198					     ; mov bx, word ptr	[bx]
1  1199	    06C1  53			     push bx
1  1200	    06C2  EB 06			     jmp _print_storage
1  1201					     ; call dadd_from
1  1202					     ; call get_dword
1  1203					     ; pop ax
1  1204					     ; pop bx
1  1205					     ; push ax
1  1206	    06C4			 _show_storage_folder:
1  1207	    06C4  B8 09CEr		     lea ax, accumulative_storage
1  1208	    06C7  50			     push ax
1  1209	    06C8  EB 00			     jmp _print_storage
1  1210	    06CA			 _print_storage:
1  1211	    06CA  E8 FD20		     call store_dword_to_string
1  1212					     print_range <time_space, storage, time_space>
3  1213						 print <offset time_space>
4  1214	    06CD  B4 09				 mov ah, 09h
4  1215	    06CF  BA 055Fr			 mov dx, offset	time_space
4  1216	    06D2  CD 21				 int 21h
3  1217						 print <offset storage>
4  1218	    06D4  B4 09				 mov ah, 09h
4  1219	    06D6  BA 09D2r			 mov dx, offset	storage
4  1220	    06D9  CD 21				 int 21h
3  1221						 print <offset time_space>
4  1222	    06DB  B4 09				 mov ah, 09h
4  1223	    06DD  BA 055Fr			 mov dx, offset	time_space
4  1224	    06E0  CD 21				 int 21h
1  1225	    06E2  C3			     ret
1  1226
1  1227	    06E3			 is_valid_name:
1  1228	    06E3  5B			     pop bx
1  1229	    06E4  59			     pop cx	 ; deep	level
1  1230	    06E5  53			     push bx
1  1231
1  1232	    06E6  B8 0A92r		     lea ax, dta
1  1233	    06E9  05 001E		     add ax, 1Eh
1  1234	    06EC  8B D8			     mov bx, ax
1  1235	    06EE  B8 0001		     mov ax, 1
1  1236	    06F1  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1237	    06F4  75 03			     jne _is_valid_name_end
1  1238	    06F6  B8 0000		     mov ax, 0
1  1239	    06F9			 _is_valid_name_end:
1  1240	    06F9  C3			     ret
1  1241
1  1242	    06FA			 add_accumulative_storage_from_dta:
1  1243	    06FA  BB 0A92r		     lea bx, dta
1  1244	    06FD  83 C3	1A		     add bx, 1Ah
1  1245	    0700  53			     push bx
1  1246	    0701  E8 FC58		     call dadd_from
1  1247	    0704  E8 FC35		     call get_dword
1  1248	    0707  BB 09CEr		     lea bx, accumulative_storage
1  1249	    070A  5A			     pop dx
1  1250	    070B  89 17			     mov word ptr [bx],	dx
1  1251	    070D  5A			     pop dx
1  1252	    070E  89 57	02		     mov word ptr [bx +	2], dx
1  1253
1  1254	    0711  C3			     ret
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 23
tree.ASM



1  1255
1  1256	    0712			 zeros_accumulative_storage:
1  1257	    0712  B8 0000		     mov ax, 0
1  1258	    0715  A3 09CEr		     mov word ptr [accumulative_storage], ax
1  1259	    0718  A3 09D0r		     mov word ptr [accumulative_storage	+ 2], ax
1  1260	    071B  C3			     ret
1  1261
1  1262	    071C			 zeros_dword:
1  1263	    071C  B8 0000		     mov ax, 0
1  1264	    071F  50			     push ax
1  1265	    0720  50			     push ax
1  1266	    0721  E8 FC0C		     call set_dword
1  1267	    0724  C3			     ret
1  1268
1  1269	    0725			 set_accumulative_storage_from_dir:
1  1270					     ;
1  1271					     ; this function suppose that we count subfiles sizes from current directory
1  1272					     ;
1  1273					     ; ret
1  1274	    0725  E8 FFF4		     call zeros_dword
1  1275	    0728  E8 FFE7		     call zeros_accumulative_storage
1  1276	    072B  BB 0001		     mov bx, 1
1  1277	    072E  89 1E	09C8r		     mov word ptr [is_silent], bx
1  1278	    0732  89 1E	09CCr		     mov word ptr [skip_storage_accumulating], bx
1  1279					     ;
1  1280					     ;	 save dta
1  1281					     ;
1  1282					     push_fragment dta,	128
2  1283	    0736  BF 0A92r		     lea di, dta
2  1284	    0739  B9 0080		     mov cx, 128
2  1285	    073C  33 DB			     xor bx, bx
2  1286	    073E			 ??0000:
2  1287	    073E  8A 1D			     mov bl, byte ptr [di]
2  1288	    0740  53			     push bx
2  1289	    0741  47			     inc di
2  1290	    0742  49			     dec cx
2  1291	    0743  83 F9	00		     cmp cx, 0
2  1292	    0746  75 F6			     jne ??0000
1  1293					     ;
1  1294					     ; start new search
1  1295					     ;
1  1296	    0748  A1 0B12r		     mov ax, word ptr [current_max_entities]
1  1297					     load <ax>
3  1298	    074B  50				 push ax
1  1299					     ;
1  1300					     ;	 cd to subfolder
1  1301					     ;
1  1302	    074C  B8 0A92r		     lea ax, dta
1  1303	    074F  05 001E		     add ax, 1Eh
1  1304
1  1305	    0752  50			     push ax
1  1306	    0753  E8 FA16		     call cd
1  1307					     ;
1  1308					     ;	 list subfiles from subfolder
1  1309					     ;
1  1310	    0756  BB 0000		     mov bx, 0
1  1311	    0759  B9 0001		     mov cx, 1
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 24
tree.ASM



1  1312	    075C  B8 028Dr		     mov ax, offset file_mask
1  1313	    075F  BE 012Dr		     mov si, offset find_first_file
1  1314
1  1315	    0762  56			     push si
1  1316	    0763  53			     push bx
1  1317	    0764  50			     push ax
1  1318	    0765  51			     push cx
1  1319	    0766  E8 0075		     call list_subfiles_recursive
1  1320					     ;
1  1321					     ;	 list subfolders from subfolder
1  1322					     ;
1  1323	    0769  B9 0001		     mov cx, 1
1  1324	    076C  8B D8			     mov bx, ax
1  1325	    076E  B8 0293r		     mov ax, offset folder_mask
1  1326	    0771  BE 013Ar		     mov si, offset find_first_folder
1  1327
1  1328	    0774  56			     push si
1  1329	    0775  53			     push bx
1  1330	    0776  50			     push ax
1  1331	    0777  51			     push cx
1  1332	    0778  E8 0063		     call list_subfiles_recursive
1  1333					     ;
1  1334					     ;	 cd back to this function
1  1335					     ;
1  1336	    077B  B8 0983r		     mov ax, offset parent_folder
1  1337	    077E  50			     push ax
1  1338	    077F  E8 F9EA		     call cd
1  1339
1  1340					     restore<ax>
3  1341	    0782  58				 pop ax
1  1342	    0783  A3 0B12r		     mov word ptr [current_max_entities], ax
1  1343					     ;
1  1344					     ;	 restore dta
1  1345					     ;
1  1346					     pop_fragment dta, 128
2  1347	    0786  BF 0A92r		     lea di, dta
2  1348	    0789  B9 0080		     mov cx, 128
2  1349	    078C  03 F9			     add di, cx
2  1350	    078E  4F			     dec di
2  1351	    078F  33 DB			     xor bx, bx
2  1352	    0791			 ??0001:
2  1353	    0791  5B			     pop bx
2  1354	    0792  88 1D			     mov byte ptr [di],	bl
2  1355	    0794  4F			     dec di
2  1356	    0795  49			     dec cx
2  1357	    0796  83 F9	00		     cmp cx, 0
2  1358	    0799  75 F6			     jne ??0001
1  1359					     set_dta dta
2  1360	    079B  BA 0A92r		     lea dx, dta
2  1361	    079E  33 C0			     xor ax, ax
2  1362	    07A0  B4 1A			     mov ah, 1Ah
2  1363	    07A2  CD 21			     int 21h
1  1364
1  1365	    07A4  BB 0000		     mov bx, 0
1  1366	    07A7  89 1E	09C8r		     mov word ptr [is_silent], bx
1  1367	    07AB  89 1E	09CCr		     mov word ptr [skip_storage_accumulating], bx
1  1368	    07AF  C3			     ret
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 25
tree.ASM



1  1369
1  1370	    07B0			 list_subfiles_recursive_from:
1  1371	    07B0  5B			     pop bx	 ; ret address
1  1372	    07B1  58			     pop ax	 ; deep	level
1  1373	    07B2  59			     pop cx	 ; root	folder offset
1  1374	    07B3  53			     push bx
1  1375					     load <cx>
3  1376	    07B4  51				 push cx
1  1377	    07B5  50			     push ax
1  1378	    07B6  E8 F9B3		     call cd
1  1379					     restore <cx>
3  1380	    07B9  59				 pop cx
1  1381					     ;
1  1382					     ; list subfolder
1  1383					     ;
1  1384	    07BA  BE 013Ar		     mov si, offset find_first_folder
1  1385	    07BD  BB 0000		     mov bx, 0
1  1386	    07C0  B8 0293r		     mov ax, offset folder_mask
1  1387					     load <cx>
3  1388	    07C3  51				 push cx
1  1389	    07C4  56			     push si
1  1390	    07C5  53			     push bx
1  1391	    07C6  50			     push ax
1  1392	    07C7  51			     push cx
1  1393	    07C8  E8 0013		     call list_subfiles_recursive
1  1394					     restore <cx>
3  1395	    07CB  59				 pop cx
1  1396					     ;
1  1397					     ; list files
1  1398					     ;
1  1399	    07CC  BE 012Dr		     mov si, offset find_first_file
1  1400	    07CF  8B D8			     mov bx, ax
1  1401	    07D1  B8 028Dr		     mov ax, offset file_mask
1  1402					     load <cx>
3  1403	    07D4  51				 push cx
1  1404	    07D5  56			     push si
1  1405	    07D6  53			     push bx
1  1406	    07D7  50			     push ax
1  1407	    07D8  51			     push cx
1  1408	    07D9  E8 0002		     call list_subfiles_recursive
1  1409					     restore <cx>
3  1410	    07DC  59				 pop cx
1  1411	    07DD  C3			     ret
1  1412
1  1413	    07DE			 list_subfiles_recursive:
1  1414					     ;
1  1415					     ;	 save current files count
1  1416					     ;
1  1417	    07DE  E8 FE02		     call count_subfiles_here
1  1418	    07E1  A3 0B12r		     mov word ptr [current_max_entities], ax
1  1419
1  1420	    07E4  5A			     pop dx
1  1421	    07E5  59			     pop cx ; deep level
1  1422	    07E6  58			     pop ax ; filemask offset
1  1423	    07E7  5B			     pop bx ; current index
1  1424	    07E8  5E			     pop si ; search address
1  1425	    07E9  52			     push dx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 26
tree.ASM



1  1426
1  1427					     load <cx, ax, bx, si>
3  1428	    07EA  51				 push cx
3  1429	    07EB  50				 push ax
3  1430	    07EC  53				 push bx
3  1431	    07ED  56				 push si
1  1432					     set_dta dta
2  1433	    07EE  BA 0A92r		     lea dx, dta
2  1434	    07F1  33 C0			     xor ax, ax
2  1435	    07F3  B4 1A			     mov ah, 1Ah
2  1436	    07F5  CD 21			     int 21h
1  1437					     restore <si, bx, ax, cx>
3  1438	    07F7  5E				 pop si
3  1439	    07F8  5B				 pop bx
3  1440	    07F9  58				 pop ax
3  1441	    07FA  59				 pop cx
1  1442
1  1443					     load <bx, cx>
3  1444	    07FB  53				 push bx
3  1445	    07FC  51				 push cx
1  1446	    07FD  50			     push ax
1  1447	    07FE  FF D6			     call si
1  1448	    0800  73 03			     jnc _list_subfiles_recursive_loop
1  1449	    0802  E9 011E		     jmp _list_subfiles_recursive_end
1  1450	    0805			 _list_subfiles_recursive_loop:
1  1451					     restore <cx>
3  1452	    0805  59				 pop cx
1  1453	    0806  51			     push cx
1  1454	    0807  E8 FED9		     call is_valid_name
1  1455					     load <cx>
3  1456	    080A  51				 push cx
1  1457	    080B  3D 0001		     cmp ax, 1
1  1458	    080E  0F 85	0104		     jne _list_subfiles_recursive_next
1  1459					     ;
1  1460					     ;	 increment current index in subfiles
1  1461					     ;
1  1462					     restore <cx, bx>
3  1463	    0812  59				 pop cx
3  1464	    0813  5B				 pop bx
1  1465	    0814  43			     inc bx
1  1466					     load <bx, cx>
3  1467	    0815  53				 push bx
3  1468	    0816  51				 push cx
1  1469
1  1470					     ; ;
1  1471					     ; ;   set current space counter to	zero
1  1472					     ; ;
1  1473					     ; mov ax, 0
1  1474					     ; push ax
1  1475					     ; push ax
1  1476					     ; call set_dword
1  1477
1  1478					     ;
1  1479					     ;	 check if folder
1  1480					     ;
1  1481					     restore <cx>
3  1482	    0817  59				 pop cx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 27
tree.ASM



1  1483					     load <cx>
3  1484	    0818  51				 push cx
1  1485	    0819  B8 0A92r		     lea ax, dta
1  1486	    081C  50			     push ax
1  1487	    081D  51			     push cx
1  1488	    081E  E8 F92B		     call is_folder
1  1489	    0821  3D 0001		     cmp ax, 1
1  1490	    0824  74 27			     je	_list_subfiles_recursive_folder
1  1491
1  1492	    0826  E8 FED1		     call add_accumulative_storage_from_dta
1  1493
1  1494	    0829  A1 09C8r		     mov ax, word ptr [is_silent]
1  1495	    082C  3D 0001		     cmp ax, 1
1  1496	    082F  0F 84	00E3		     je	_list_subfiles_recursive_next
1  1497
1  1498	    0833  BB 0001		     mov bx, 1
1  1499	    0836  89 1E	09CAr		     mov word ptr [is_file], bx
1  1500					     ;
1  1501					     ;	 show filename
1  1502					     ;
1  1503					     restore <cx, bx>
3  1504	    083A  59				 pop cx
3  1505	    083B  5B				 pop bx
1  1506					     load <bx, cx>
3  1507	    083C  53				 push bx
3  1508	    083D  51				 push cx
1  1509	    083E  53			     push bx
1  1510	    083F  51			     push cx
1  1511	    0840  E8 FDF7		     call show_filename_from_dta
1  1512
1  1513	    0843  BB 0000		     mov bx, 0
1  1514	    0846  89 1E	09CAr		     mov word ptr [is_file], bx
1  1515
1  1516	    084A  E9 00C9		     jmp _list_subfiles_recursive_next
1  1517	    084D			 _list_subfiles_recursive_folder:
1  1518	    084D  A1 09CCr		     mov ax, word ptr [skip_storage_accumulating]
1  1519	    0850  3D 0001		     cmp ax, 1
1  1520	    0853  74 03			     je	_list_subfiles_recursive_folder_check_silence
1  1521
1  1522					     ;
1  1523					     ;	 count storages
1  1524					     ;
1  1525	    0855  E8 FECD		     call set_accumulative_storage_from_dir
1  1526	    0858			 _list_subfiles_recursive_folder_check_silence:
1  1527	    0858  A1 09C8r		     mov ax, word ptr [is_silent]
1  1528	    085B  3D 0001		     cmp ax, 1
1  1529	    085E  74 0F			     je	_list_subfiles_recursive_folder_serach_logic
1  1530
1  1531					     ;
1  1532					     ;	 show folder name
1  1533					     ;
1  1534					     restore <cx, bx>
3  1535	    0860  59				 pop cx
3  1536	    0861  5B				 pop bx
1  1537					     load <bx, cx>
3  1538	    0862  53				 push bx
3  1539	    0863  51				 push cx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 28
tree.ASM



1  1540	    0864  53			     push bx
1  1541	    0865  51			     push cx
1  1542	    0866  E8 FDD1		     call show_filename_from_dta
1  1543
1  1544	    0869  E8 FEB0		     call zeros_dword
1  1545	    086C  E8 FEA3		     call zeros_accumulative_storage
1  1546
1  1547	    086F			 _list_subfiles_recursive_folder_serach_logic:
1  1548
1  1549					     ;
1  1550					     ;	 check deep level
1  1551					     ;
1  1552					     restore <cx>
3  1553	    086F  59				 pop cx
1  1554					     load <cx>
3  1555	    0870  51				 push cx
1  1556	    0871  33 DB			     xor bx, bx
1  1557	    0873  8A 1E	028Cr		     mov bl, byte ptr [deep_level]
1  1558	    0877  3B CB			     cmp cx, bx
1  1559	    0879  0F 8D	0099		     jge _list_subfiles_recursive_next
1  1560
1  1561					     restore <cx, bx>
3  1562	    087D  59				 pop cx
3  1563	    087E  5B				 pop bx
1  1564					     load <bx, cx>
3  1565	    087F  53				 push bx
3  1566	    0880  51				 push cx
1  1567
1  1568	    0881  A1 09C8r		     mov ax, word ptr [is_silent]
1  1569	    0884  3D 0001		     cmp ax, 1
1  1570	    0887  74 10			     je	_list_subfiles_recursive_loop_pseudographic_hack_end
1  1571					     ;
1  1572					     ;	 pseudographic hack
1  1573					     ;
1  1574	    0889  3B 1E	0B12r		     cmp bx, word ptr [current_max_entities]
1  1575	    088D  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack_end
1  1576					     load <ax, bx, cx>
3  1577	    088F  50				 push ax
3  1578	    0890  53				 push bx
3  1579	    0891  51				 push cx
1  1580	    0892  51			     push cx
1  1581	    0893  E8 FA48		     call set_level_shift
1  1582					     restore <cx, bx, ax>
3  1583	    0896  59				 pop cx
3  1584	    0897  5B				 pop bx
3  1585	    0898  58				 pop ax
1  1586
1  1587	    0899			 _list_subfiles_recursive_loop_pseudographic_hack_end:
1  1588	    0899  8B C1			     mov ax, cx
1  1589					     ;
1  1590					     ;	 save dta
1  1591					     ;
1  1592					     push_fragment dta,	128
2  1593	    089B  BF 0A92r		     lea di, dta
2  1594	    089E  B9 0080		     mov cx, 128
2  1595	    08A1  33 DB			     xor bx, bx
2  1596	    08A3			 ??0002:
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 29
tree.ASM



2  1597	    08A3  8A 1D			     mov bl, byte ptr [di]
2  1598	    08A5  53			     push bx
2  1599	    08A6  47			     inc di
2  1600	    08A7  49			     dec cx
2  1601	    08A8  83 F9	00		     cmp cx, 0
2  1602	    08AB  75 F6			     jne ??0002
1  1603	    08AD  8B C8			     mov cx, ax
1  1604					     ;
1  1605					     ; start new search
1  1606					     ;
1  1607	    08AF  A1 0B12r		     mov ax, word ptr [current_max_entities]
1  1608					     load <ax>
3  1609	    08B2  50				 push ax
1  1610
1  1611					     load <cx>
3  1612	    08B3  51				 push cx
1  1613					     ;
1  1614					     ;	 cd to subfolder
1  1615					     ;
1  1616	    08B4  B8 0A92r		     lea ax, dta
1  1617	    08B7  05 001E		     add ax, 1Eh
1  1618
1  1619	    08BA  50			     push ax
1  1620	    08BB  E8 F8AE		     call cd
1  1621					     restore <cx>
3  1622	    08BE  59				 pop cx
1  1623
1  1624	    08BF  41			     inc cx
1  1625					     ;
1  1626					     ;	 list subfiles from subfolder
1  1627					     ;
1  1628					     load <cx>
3  1629	    08C0  51				 push cx
1  1630	    08C1  BB 0000		     mov bx, 0
1  1631	    08C4  B8 028Dr		     mov ax, offset file_mask
1  1632	    08C7  BE 012Dr		     mov si, offset find_first_file
1  1633
1  1634	    08CA  56			     push si
1  1635	    08CB  53			     push bx
1  1636	    08CC  50			     push ax
1  1637	    08CD  51			     push cx
1  1638	    08CE  E8 FF0D		     call list_subfiles_recursive
1  1639					     restore <cx>
3  1640	    08D1  59				 pop cx
1  1641					     ;
1  1642					     ;	 list subfolders from subfolder
1  1643					     ;
1  1644					     load <cx>
3  1645	    08D2  51				 push cx
1  1646	    08D3  8B D8			     mov bx, ax
1  1647	    08D5  B8 0293r		     mov ax, offset folder_mask
1  1648	    08D8  BE 013Ar		     mov si, offset find_first_folder
1  1649
1  1650	    08DB  56			     push si
1  1651	    08DC  53			     push bx
1  1652	    08DD  50			     push ax
1  1653	    08DE  51			     push cx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 30
tree.ASM



1  1654	    08DF  E8 FEFC		     call list_subfiles_recursive
1  1655					     restore <cx>
3  1656	    08E2  59				 pop cx
1  1657					     ;
1  1658					     ;	 reverse pseudographic hack
1  1659					     ;
1  1660					     load <ax, bx, cx>
3  1661	    08E3  50				 push ax
3  1662	    08E4  53				 push bx
3  1663	    08E5  51				 push cx
1  1664	    08E6  51			     push cx
1  1665	    08E7  E8 FA05		     call reset_level_shift
1  1666					     restore <cx, bx, ax>
3  1667	    08EA  59				 pop cx
3  1668	    08EB  5B				 pop bx
3  1669	    08EC  58				 pop ax
1  1670					     ;
1  1671					     ;	 cd back to this function
1  1672					     ;
1  1673	    08ED  B8 0983r		     mov ax, offset parent_folder
1  1674	    08F0  50			     push ax
1  1675	    08F1  E8 F878		     call cd
1  1676
1  1677					     restore <ax>
3  1678	    08F4  58				 pop ax
1  1679	    08F5  A3 0B12r		     mov word ptr [current_max_entities], ax
1  1680					     ;
1  1681					     ;	 restore dta
1  1682					     ;
1  1683					     pop_fragment dta, 128
2  1684	    08F8  BF 0A92r		     lea di, dta
2  1685	    08FB  B9 0080		     mov cx, 128
2  1686	    08FE  03 F9			     add di, cx
2  1687	    0900  4F			     dec di
2  1688	    0901  33 DB			     xor bx, bx
2  1689	    0903			 ??0003:
2  1690	    0903  5B			     pop bx
2  1691	    0904  88 1D			     mov byte ptr [di],	bl
2  1692	    0906  4F			     dec di
2  1693	    0907  49			     dec cx
2  1694	    0908  83 F9	00		     cmp cx, 0
2  1695	    090B  75 F6			     jne ??0003
1  1696					     set_dta dta
2  1697	    090D  BA 0A92r		     lea dx, dta
2  1698	    0910  33 C0			     xor ax, ax
2  1699	    0912  B4 1A			     mov ah, 1Ah
2  1700	    0914  CD 21			     int 21h
1  1701	    0916			 _list_subfiles_recursive_next:
1  1702	    0916  E8 F82E		     call find_next
1  1703	    0919  0F 83	FEE8		     jnc _list_subfiles_recursive_loop
1  1704	    091D  3A 06	0949r		     cmp al, byte ptr [no_more_files]
1  1705	    0921  75 14			     jne find_next_error
1  1706	    0923			 _list_subfiles_recursive_end:
1  1707					     restore <cx, bx>
3  1708	    0923  59				 pop cx
3  1709	    0924  5B				 pop bx
1  1710	    0925  8B C3			     mov ax, bx
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 31
tree.ASM



1  1711	    0927  C3			     ret
1  1712	    0928			 find_first_error:
1  1713					     print_range <find_first_fails, newline>
3  1714						 print <offset find_first_fails>
4  1715	    0928  B4 09				 mov ah, 09h
4  1716	    092A  BA 094Ar			 mov dx, offset	find_first_fails
4  1717	    092D  CD 21				 int 21h
3  1718						 print <offset newline>
4  1719	    092F  B4 09				 mov ah, 09h
4  1720	    0931  BA 020Fr			 mov dx, offset	newline
4  1721	    0934  CD 21				 int 21h
1  1722	    0936  C3			     ret
1  1723	    0937			 find_next_error:
1  1724					     print_range <find_next_fails, newline>
3  1725						 print <offset find_next_fails>
4  1726	    0937  B4 09				 mov ah, 09h
4  1727	    0939  BA 0966r			 mov dx, offset	find_next_fails
4  1728	    093C  CD 21				 int 21h
3  1729						 print <offset newline>
4  1730	    093E  B4 09				 mov ah, 09h
4  1731	    0940  BA 020Fr			 mov dx, offset	newline
4  1732	    0943  CD 21				 int 21h
1  1733					     exit
2  1734	    0945  B4 00			     mov ah, 00h
2  1735	    0947  CD 21			     int 21h
1  1736
1  1737					 ;
1  1738					 ; error codes
1  1739					 ;
1  1740	    0949  12			 no_more_files db 18
1  1741
1  1742					 ;
1  1743					 ; error messages
1  1744					 ;
1  1745	    094A  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
   1746		  72 73	74 20 66 69 6C+
   1747		  65 6E	61 6D 65 73 20+
   1748		  66 61	69 6C 73 2E 24
1  1749	    0966  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
   1750		  78 74	20 66 69 6C 65+
   1751		  6E 61	6D 65 73 20 66+
   1752		  61 69	6C 73 2E 24
1  1753
1  1754					 ;
1  1755					 ; int variables
1  1756					 ;
1  1757	    0981  0000			 current_id_entity dw 0
1  1758
1  1759					 ;
1  1760					 ; strings
1  1761					 ;
1  1762	    0983  2E 2E	00		 parent_folder db '..',	00h
1  1763	    0986  2E 00			 current_folder	db '.',	00h
1  1764	    0988  40*(00)		 root_folder db	64 dup(00h)
1  1765
1  1766					 ;
1  1767					 ; mode	variables
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 32
tree.ASM



1  1768					 ;
1  1769	    09C8  0000			 is_silent dw 0
1  1770	    09CA  0000			 is_file dw 0
1  1771	    09CC  0000			 skip_storage_accumulating dw 0
1  1772
1  1773					 ;
1  1774					 ; storages
1  1775					 ;
1  1776	    09CE  00000000		 accumulative_storage dd 0
1  1777	    09D2  40*(24)		 storage db 64 dup('$')
1  1778	    0A12  80*(00)		 count_dta db 128 dup(0)
1  1779	    0A92  80*(00)		 dta db	128 dup(0)
1  1780	    0B12  0000			 current_max_entities dw 0
1  1781
   1782
   1783					 end start
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 33
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:073E
??0001				  Near	 DGROUP:0791
??0002				  Near	 DGROUP:08A3
??0003				  Near	 DGROUP:0903
??DATE				  Text	 "12/23/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "16:08:54"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACCUMULATIVE_STORAGE		  Dword	 DGROUP:09CE
ADD_ACCUMULATIVE_STORAGE_FROM_DT  Near	 DGROUP:06FA
A
ALL_FILES			  Byte	 DGROUP:0295
CD				  Near	 DGROUP:016C
CD_ERROR			  Near	 DGROUP:017A
CD_FAILS			  Byte	 DGROUP:01F7
COUNT_DTA			  Byte	 DGROUP:0A12
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0211
COUNT_SUBFILES_HERE		  Near	 DGROUP:05E3
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:0605
CURRENT_FOLDER			  Byte	 DGROUP:0986
CURRENT_ID_ENTITY		  Word	 DGROUP:0981
CURRENT_MAX_ENTITIES		  Word	 DGROUP:0B12
DADD				  Near	 DGROUP:036A
DADD_FROM			  Near	 DGROUP:035C
DATETIME			  Byte	 DGROUP:0549
DDIV10				  Near	 DGROUP:0382
DEEP_LEVEL			  Byte	 DGROUP:028C
DOUBLEWORD			  Dword	 DGROUP:03AB
DTA				  Byte	 DGROUP:0A92
END_FILE_CHAR			  Byte	 DGROUP:032E
FILE_EXT			  Byte	 DGROUP:028E
FILE_MASK			  Byte	 DGROUP:028D
FIND_FIRST_ERROR		  Near	 DGROUP:0928
FIND_FIRST_FAILS		  Byte	 DGROUP:094A
FIND_FIRST_FILE			  Near	 DGROUP:012D
FIND_FIRST_FOLDER		  Near	 DGROUP:013A
FIND_NEXT			  Near	 DGROUP:0147
FIND_NEXT_ERROR			  Near	 DGROUP:0937
FIND_NEXT_FAILS			  Byte	 DGROUP:0966
FIRST_FILE_CHAR			  Byte	 DGROUP:032A
FOLDER_MASK			  Byte	 DGROUP:0293
GET_DWORD			  Near	 DGROUP:033C
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 34
Symbol Table



GET_DWORD_ADDR			  Near	 DGROUP:0348
HELLO_DATE			  Byte	 DGROUP:0537
HELLO_TIME			  Byte	 DGROUP:0525
IS_FILE				  Word	 DGROUP:09CA
IS_FOLDER			  Near	 DGROUP:014C
IS_SILENT			  Word	 DGROUP:09C8
IS_VALID_NAME			  Near	 DGROUP:06E3
LEVEL_SHIFT			  Byte	 DGROUP:0318
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:07DE
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:07B0
MIDDLE_FILE_CHAR		  Byte	 DGROUP:032C
NEWLINE				  Byte	 DGROUP:020F
NO_MORE_FILES			  Byte	 DGROUP:0949
NUM				  Byte	 DGROUP:0563
OLD_LEVEL_SHIFT			  Byte	 DGROUP:0316
PARENT_FOLDER			  Byte	 DGROUP:0983
PARSE_ARGS			  Near	 DGROUP:0245
PARSE_COMMAND_LINE		  Near	 DGROUP:0230
PARSE_D				  Near	 DGROUP:025D
PARSE_END			  Near	 DGROUP:0289
PARSE_F				  Near	 DGROUP:026B
PARSE_S				  Near	 DGROUP:0277
PARSE_T				  Near	 DGROUP:0280
PRINT_DATETIMESTAMP		  Near	 DGROUP:0443
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0299
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0300
REMAINDER			  Word	 DGROUP:03A9
RESET_LEVEL_SHIFT		  Near	 DGROUP:02EF
ROOT_FOLDER			  Byte	 DGROUP:0988
SAVE_CWD			  Near	 DGROUP:0199
SET_ACCUMULATIVE_STORAGE_FROM_DI  Near	 DGROUP:0725
R
SET_DWORD			  Near	 DGROUP:0330
SET_DWORD_FROM			  Near	 DGROUP:034E
SET_LEVEL_SHIFT			  Near	 DGROUP:02DE
SHOW_DATETIME			  Near	 DGROUP:0687
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:063A
SHOW_STORAGE			  Near	 DGROUP:06AB
SKIP_STORAGE_ACCUMULATING	  Word	 DGROUP:09CC
SPACE				  Byte	 DGROUP:0323
START				  Near	 DGROUP:0100
STORAGE				  Byte	 DGROUP:09D2
STORE_DWORD_TO_STRING		  Near	 DGROUP:03ED
STORE_IINT_TO_STRING		  Near	 DGROUP:03AF
TIME_NEWLINE			  Byte	 DGROUP:0561
TIME_SEMICOLON			  Byte	 DGROUP:055D
TIME_SPACE			  Byte	 DGROUP:055F
USE_STORAGE			  Byte	 DGROUP:028A
USE_TIME			  Byte	 DGROUP:028B
WORKING_FOLDER			  Byte	 DGROUP:01B7
ZEROS_ACCUMULATIVE_STORAGE	  Near	 DGROUP:0712
ZEROS_DWORD			  Near	 DGROUP:071C
ZERO_END_FILE			  Byte	 DGROUP:0328
ZERO_FIRST_FILE			  Byte	 DGROUP:0326
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:022F
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:0218
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0636
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 35
Symbol Table



_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:061F
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:062F
_DADD_ADD_ONE			  Near	 DGROUP:0378
_DADD_NO_ADD_ONE		  Near	 DGROUP:0379
_DDIV10				  Near	 DGROUP:0390
_IS_FOLDER_END			  Near	 DGROUP:016B
_IS_FOLDER_FALSE		  Near	 DGROUP:0166
_IS_FOLDER_TRUE			  Near	 DGROUP:0161
_IS_VALID_NAME_END		  Near	 DGROUP:06F9
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:0923
_LIST_SUBFILES_RECURSIVE_FOLDER	  Near	 DGROUP:084D
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:0858
CHECK_SILENCE
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:086F
SERACH_LOGIC
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0805
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:0899
EUDOGRAPHIC_HACK_END
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0916
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:02DD
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02AE
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02D4
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02C2
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02CB
_LEVEL_MIDDLE
_PRINT_STORAGE			  Near	 DGROUP:06CA
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:0315
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0306
_SHOW_FILENAME_FROM_DTA_DATETIME  Near	 DGROUP:0662
_SHOW_FILENAME_FROM_DTA_END	  Near	 DGROUP:067C
_SHOW_FILENAME_FROM_DTA_STORAGE	  Near	 DGROUP:066F
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:063E
ME
_SHOW_STORAGE_FILE		  Near	 DGROUP:06BB
_SHOW_STORAGE_FOLDER		  Near	 DGROUP:06C4
_STORE_DWORD_TO_STRING_DIRECT	  Near	 DGROUP:03F9
_STORE_DWORD_TO_STRING_DIRECT_NE  Near	 DGROUP:040C
XT_LOOP
_STORE_DWORD_TO_STRING_END	  Near	 DGROUP:0442
_STORE_DWORD_TO_STRING_INVERSE	  Near	 DGROUP:042C
_STORE_DWORD_TO_STRING_INVERSE_L  Near	 DGROUP:0433
OOP
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:042C
ING_END
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:041F
ING_LOOP
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:041D
ING_START
_STORE_IINT_TO_STRING_DIRECT	  Near	 DGROUP:03BA
_STORE_IINT_TO_STRING_END	  Near	 DGROUP:03EC
_STORE_IINT_TO_STRING_INVERSE	  Near	 DGROUP:03D6
_STORE_IINT_TO_STRING_INVERSE_LO  Near	 DGROUP:03DD
OP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:03D6
Turbo Assembler	 Version 4.1	    12/23/19 16:08:56	    Page 36
Symbol Table



NG_END
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:03C9
NG_LOOP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:03C7
NG_START

Macro Name

BREAK_POINT
EXIT
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
RESTORE
SET_DTA

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0B14 Word	  Public  CODE
