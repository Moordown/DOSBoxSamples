Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 2
tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
     80
     81	    0000			 model tiny
     82					 .386
     83	    0000			 .code
     84					 org 100h
     85	    0100			 start:
     86	    0100  E8 0096		     call save_cwd
     87	    0103  B8 0000		     mov ax, 0
     88	    0106  50			     push ax
     89	    0107  50			     push ax
     90	    0108  E8 0403		     call set_dword
     91					     set_dta dta
1    92	    010B  BA 0A2Er		     lea dx, dta
1    93	    010E  33 C0			     xor ax, ax
1    94	    0110  B4 1A			     mov ah, 1Ah
1    95	    0112  CD 21			     int 21h
     96	    0114  E8 0119		     call parse_command_line
     97					     ;
     98					     ;	 start tree
     99					     ;
    100	    0117  B8 0924r		     mov ax, offset root_folder
    101	    011A  B9 0000		     mov cx, 0
    102	    011D  51			     push cx
    103	    011E  50			     push ax
    104	    011F  E8 062A		     call list_subfiles_recursive_from
    105					     ;
    106					     ;	 cd to start folder
    107					     ;
    108	    0122  B8 01B7r		     mov ax, offset working_folder
    109	    0125  50			     push ax
    110	    0126  E8 0043		     call cd
    111					     exit
1   112	    0129  B4 00			     mov ah, 00h
1   113	    012B  CD 21			     int 21h
    114
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 3
tree.ASM



    115					 include dtafunc.asm
1   116					 include filefunc.asm
2   117	    012D			 find_first_file:
2   118	    012D  5B			     pop bx
2   119	    012E  5A			     pop dx		; filename spec
2   120	    012F  B9 000F		     mov cx, 0fh	 ; include files
2   121	    0132  53			     push bx
2   122
2   123	    0133  33 C0			     xor ax, ax
2   124	    0135  B4 4E			     mov ah, 4Eh
2   125	    0137  CD 21			     int 21h
2   126	    0139  C3			     ret
2   127
2   128	    013A			 find_first_folder:
2   129	    013A  5B			     pop bx
2   130	    013B  5A			     pop dx		 ; filename spec
2   131	    013C  B9 0010		     mov cx, 10h	 ; include directories
2   132	    013F  53			     push bx
2   133
2   134	    0140  33 C0			     xor ax, ax
2   135	    0142  B4 4E			     mov ah, 4Eh
2   136	    0144  CD 21			     int 21h
2   137	    0146  C3			     ret
2   138
2   139	    0147			 find_next:
2   140	    0147  B4 4F			     mov ah, 4Fh
2   141	    0149  CD 21			     int 21h
2   142
2   143	    014B  C3			     ret
2   144
2   145	    014C			 is_folder:
2   146	    014C  5B			     pop bx
2   147	    014D  59			     pop cx
2   148	    014E  58			     pop ax ; dta address
2   149	    014F  53			     push bx
2   150
2   151	    0150  05 0015		     add ax, 15h
2   152	    0153  8B D8			     mov bx, ax
2   153	    0155  8A 1F			     mov bl, byte ptr [bx]
2   154	    0157  80 E3	10		     and bl, 10h
2   155	    015A  80 FB	10		     cmp bl, 10h
2   156	    015D  74 02			     je	_is_folder_true
2   157	    015F  75 05			     jne _is_folder_false
2   158	    0161			 _is_folder_true:
2   159	    0161  B8 0001		     mov ax, 1
2   160	    0164  EB 05			     jmp _is_folder_end
2   161	    0166			 _is_folder_false:
2   162	    0166  B8 0000		     mov ax, 0
2   163	    0169  EB 00			     jmp _is_folder_end
2   164	    016B			 _is_folder_end:
2   165	    016B  C3			     ret
2   166
2   167	    016C			 cd:
2   168	    016C  5B			     pop bx ; ret addr
2   169	    016D  5A			     pop dx ; root address
2   170	    016E  53			     push bx ; ret addr
2   171
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 4
tree.ASM



2   172					     load <dx>
4   173	    016F  52				 push dx
2   174	    0170  33 C0			     xor ax, ax
2   175	    0172  B4 3B			     mov ah, 3Bh
2   176	    0174  CD 21			     int 21h
2   177
2   178	    0176  72 02			     jc	cd_error
2   179					     restore <dx>
4   180	    0178  5A				 pop dx
2   181	    0179  C3			     ret
2   182	    017A			 cd_error:
2   183					     print_range <cd_fails, newline>
4   184						 print <offset cd_fails>
5   185	    017A  B4 09				 mov ah, 09h
5   186	    017C  BA 01F7r			 mov dx, offset	cd_fails
5   187	    017F  CD 21				 int 21h
4   188						 print <offset newline>
5   189	    0181  B4 09				 mov ah, 09h
5   190	    0183  BA 020Fr			 mov dx, offset	newline
5   191	    0186  CD 21				 int 21h
2   192					     restore <dx>
4   193	    0188  5A				 pop dx
2   194
2   195	    0189  B4 09				 mov ah, 09h
2   196	    018B  CD 21			     int 21h
2   197
2   198					     print_range <newline>
4   199						 print <offset newline>
5   200	    018D  B4 09				 mov ah, 09h
5   201	    018F  BA 020Fr			 mov dx, offset	newline
5   202	    0192  CD 21				 int 21h
2   203					     exit
3   204	    0194  B4 00			     mov ah, 00h
3   205	    0196  CD 21			     int 21h
2   206	    0198  C3			     ret
2   207
2   208	    0199			 save_cwd:
2   209	    0199  BE 01B7r		     mov si, offset working_folder
2   210
2   211					     ;
2   212					     ; save driver
2   213					     ;
2   214	    019C  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
2   215	    019E  CD 21			     int 21h
2   216	    01A0  8A D0			     mov dl, al
2   217	    01A2  80 C2	41		     add dl, 41h
2   218	    01A5  88 14			     mov byte ptr [si],	dl
2   219	    01A7  46			     inc si
2   220	    01A8  C6 04	3A		     mov byte ptr [si],	':'
2   221	    01AB  46			     inc si
2   222	    01AC  C6 04	5C		     mov byte ptr [si],	'\'
2   223	    01AF  46			     inc si
2   224
2   225					     ;
2   226					     ; save folder
2   227					     ;
2   228	    01B0  32 D2			     xor dl, dl			 ; Actual drive
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 5
tree.ASM



2   229	    01B2  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
2   230	    01B4  CD 21			     int 21h
2   231	    01B6  C3			     ret
2   232
2   233
2   234	    01B7  40*(00)		 working_folder	db 64 dup(00h)
2   235	    01F7  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    236		  64 69	72 65 63 74 6F+
    237		  72 79	20 66 61 69 6C+
    238		  73 2E	24
2   239	    020F  0A 24			 newline db 0Ah, '$'
1   240					 include clfunc.asm
2   241	    0211			 count_no_space_no_zero_letters:
2   242	    0211  5B			     pop bx ; ret address
2   243	    0212  5E			     pop si ; string offset
2   244	    0213  59			     pop cx ; string length
2   245	    0214  53			     push bx ; ret address
2   246	    0215  B8 0000		     mov ax, 0
2   247	    0218			 _count_non_space_symbols_loop:
2   248	    0218  80 3C	20		     cmp byte ptr [si],	20h
2   249	    021B  74 12			     je	_count_non_space_symbols_end
2   250	    021D  80 3C	0D		     cmp byte ptr [si],	0Dh
2   251	    0220  74 0D			     je	_count_non_space_symbols_end
2   252	    0222  80 3C	00		     cmp byte ptr [si],	00h
2   253	    0225  74 08			     je	_count_non_space_symbols_end
2   254	    0227  3B C1			     cmp ax, cx
2   255	    0229  74 04			     je	_count_non_space_symbols_end
2   256	    022B  40			     inc ax
2   257	    022C  46			     inc si
2   258	    022D  EB E9			     jmp _count_non_space_symbols_loop
2   259	    022F			 _count_non_space_symbols_end:
2   260	    022F  C3			     ret
2   261
2   262	    0230			 parse_command_line:
2   263					     ;
2   264					     ; prepare root folder
2   265					     ;
2   266	    0230  BE 0082		     mov si, 82h
2   267	    0233  B9 0040		     mov cx, 64
2   268	    0236  51			     push cx
2   269	    0237  56			     push si
2   270	    0238  E8 FFD6		     call count_no_space_no_zero_letters
2   271	    023B  8B C8			     mov cx, ax
2   272	    023D  BE 0082		     mov si, 82h
2   273	    0240  BF 0924r		     mov di, offset root_folder
2   274	    0243  F3> A4		     rep movsb
2   275
2   276	    0245			 parse_args:
2   277	    0245  46			     inc si
2   278	    0246  46			     inc si
2   279	    0247  80 3C	64		     cmp byte ptr [si],	'd'
2   280	    024A  74 11			     je	parse_d
2   281	    024C  80 3C	66		     cmp byte ptr [si],	'f'
2   282	    024F  74 1A			     je	parse_f
2   283	    0251  80 3C	73		     cmp byte ptr [si],	's'
2   284	    0254  74 21			     je	parse_s
2   285	    0256  80 3C	74		     cmp byte ptr [si],	't'
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 6
tree.ASM



2   286	    0259  74 25			     je	parse_t
2   287	    025B  EB 2C			     jmp parse_end
2   288	    025D			 parse_d:
2   289					     ;
2   290					     ; parse_deep level
2   291					     ;
2   292	    025D  46			     inc si
2   293	    025E  46			     inc si
2   294	    025F  8A 1C			     mov bl, byte ptr [si]
2   295	    0261  80 EB	30		     sub bl, 30h	     ; to number
2   296	    0264  88 1E	028Cr		     mov byte ptr [deep_level],	bl
2   297	    0268  46			     inc si
2   298	    0269  EB DA			     jmp parse_args
2   299	    026B			 parse_f:
2   300					     ;
2   301					     ; parse file extension
2   302					     ;
2   303	    026B  46			     inc si
2   304	    026C  46			     inc si
2   305	    026D  BF 028Er		     mov di, offset file_ext
2   306	    0270  B9 0004		     mov cx, 4
2   307	    0273  F3> A4		     rep movsb
2   308	    0275  EB CE			     jmp parse_args
2   309	    0277			 parse_s:
2   310					     ;
2   311					     ; print storage
2   312					     ;
2   313	    0277  B3 01			     mov bl, 1
2   314	    0279  88 1E	028Ar		     mov byte ptr [use_storage], bl
2   315	    027D  46			     inc si
2   316	    027E  EB C5			     jmp parse_args
2   317	    0280			 parse_t:
2   318					     ;
2   319					     ; print time
2   320					     ;
2   321	    0280  B3 01			     mov bl, 1
2   322	    0282  88 1E	028Br		     mov byte ptr [use_time], bl
2   323	    0286  46			     inc si
2   324	    0287  EB BC			     jmp parse_args
2   325
2   326	    0289			 parse_end:
2   327	    0289  C3			     ret
2   328
2   329					 ;
2   330					 ;   parse arguments
2   331					 ;
2   332	    028A  00			 use_storage db	0
2   333	    028B  00			 use_time db 0
2   334	    028C  01			 deep_level db 1
2   335	    028D  2A			 file_mask db '*'
2   336	    028E  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
2   337	    0293  2A 00			 folder_mask db	'*', 00h
2   338	    0295  2A 2E	2A 00		 all_files db '*.*', 00h
1   339					 include pgraph.asm
2   340
2   341	    0299			 print_pseudographic_prefix:
2   342	    0299  5B			     pop bx
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 7
tree.ASM



2   343	    029A  59			     pop cx	 ; deep	level
2   344	    029B  58			     pop ax	 ; entity count
2   345	    029C  53			     push bx
2   346
2   347	    029D  83 F9	00		     cmp cx, 0
2   348	    02A0  74 0C			     je	_print_pseudographic_prefix_zero_level
2   349					     load <cx, ax>
4   350	    02A2  51				 push cx
4   351	    02A3  50				 push ax
2   352	    02A4  B8 0318r		     mov ax, offset level_shift
2   353
2   354	    02A7  51			     push cx
2   355	    02A8  50			     push ax
2   356	    02A9  E8 0054		     call print_string_with_length
2   357					     restore <ax, cx>
4   358	    02AC  58				 pop ax
4   359	    02AD  59				 pop cx
2   360	    02AE			 _print_pseudographic_prefix_zero_level:
2   361
2   362	    02AE  8B 1E	0AAEr		     mov bx, word ptr [current_max_entities]
2   363	    02B2  3A C3			     cmp al, bl
2   364	    02B4  74 1E			     je	_print_pseudographic_prefix_zero_level_end
2   365	    02B6  3D 0001		     cmp ax, 1
2   366	    02B9  75 10			     jne _print_pseudographic_prefix_zero_level_middle
2   367	    02BB  83 F9	00		     cmp cx, 0
2   368	    02BE  74 02			     je	_print_pseudographic_prefix_zero_level_first
2   369	    02C0  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
2   370	    02C2			 _print_pseudographic_prefix_zero_level_first:
2   371					     print_range <first_file_char>
4   372						 print <offset first_file_char>
5   373	    02C2  B4 09				 mov ah, 09h
5   374	    02C4  BA 032Ar			 mov dx, offset	first_file_char
5   375	    02C7  CD 21				 int 21h
2   376	    02C9  EB 12			     jmp _print_pseudographic_prefix_end
2   377	    02CB			 _print_pseudographic_prefix_zero_level_middle:
2   378					     print_range <middle_file_char>
4   379						 print <offset middle_file_char>
5   380	    02CB  B4 09				 mov ah, 09h
5   381	    02CD  BA 032Cr			 mov dx, offset	middle_file_char
5   382	    02D0  CD 21				 int 21h
2   383	    02D2  EB 09			     jmp _print_pseudographic_prefix_end
2   384	    02D4			 _print_pseudographic_prefix_zero_level_end:
2   385					     print_range <end_file_char>
4   386						 print <offset end_file_char>
5   387	    02D4  B4 09				 mov ah, 09h
5   388	    02D6  BA 032Er			 mov dx, offset	end_file_char
5   389	    02D9  CD 21				 int 21h
2   390	    02DB  EB 00			     jmp _print_pseudographic_prefix_end
2   391	    02DD			 _print_pseudographic_prefix_end:
2   392	    02DD  C3			     ret
2   393
2   394	    02DE			 set_level_shift:
2   395	    02DE  5B			     pop bx
2   396	    02DF  59			     pop cx  ; line level
2   397	    02E0  53			     push bx
2   398
2   399	    02E1  BB 0318r		     lea bx, level_shift
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 8
tree.ASM



2   400	    02E4  03 D9			     add bx, cx
2   401	    02E6  A0 0323r		     mov al, byte ptr [space]
2   402	    02E9  88 07			     mov byte ptr [bx],	al
2   403
2   404	    02EB  B8 0001		     mov ax, 1
2   405
2   406	    02EE  C3			     ret
2   407
2   408	    02EF			 reset_level_shift:
2   409	    02EF  5B			     pop bx
2   410	    02F0  59			     pop cx  ; line level
2   411	    02F1  53			     push bx
2   412
2   413	    02F2  BB 0318r		     lea bx, level_shift
2   414	    02F5  03 D9			     add bx, cx
2   415	    02F7  A0 0316r		     mov al, byte ptr [old_level_shift]
2   416	    02FA  88 07			     mov byte ptr [bx],	al
2   417
2   418	    02FC  B8 0001		     mov ax, 1
2   419
2   420	    02FF  C3			     ret
2   421
2   422	    0300			 print_string_with_length:
2   423	    0300  5B			     pop bx ; ret address
2   424	    0301  5E			     pop si ; string offset
2   425	    0302  59			     pop cx ; string length
2   426	    0303  53			     push bx; ret address
2   427	    0304  33 C0			     xor ax, ax
2   428	    0306			 _print_string_with_length_loop:
2   429	    0306  B4 02			     mov ah, 02h
2   430	    0308  8A 14			     mov dl, byte ptr [si]
2   431	    030A  CD 21			     int 21h
2   432	    030C  49			     dec cx
2   433	    030D  46			     inc si
2   434	    030E  83 F9	00		     cmp cx, 00h
2   435	    0311  74 02			     je	_print_string_with_length_end
2   436	    0313  EB F1			     jmp _print_string_with_length_loop
2   437	    0315			 _print_string_with_length_end:
2   438	    0315  C3			     ret
2   439
2   440					 ;
2   441					 ;   pseudographic
2   442					 ;
2   443	    0316  B3 24			 old_level_shift db 179, '$'
2   444	    0318  0A*(B3) 24		 level_shift db	10 dup(179), '$'
2   445	    0323  ?? 20	24		 space db, 32, '$'
2   446
2   447	    0326  C3 24			 zero_first_file db 195, '$'
2   448	    0328  C0 24			 zero_end_file db 192, '$'
2   449
2   450	    032A  C2 24			 first_file_char db 194, '$'
2   451	    032C  C3 24			 middle_file_char db 195, '$'
2   452	    032E  C0 24			 end_file_char db 192, '$'
2   453
1   454					 include tmacro.asm
2   455					 load macro args
2   456					     irp d,<args>
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 9
tree.ASM



2   457						 push d
2   458					     endm
2   459					 endm
2   460
2   461					 restore macro args
2   462					     irp d,<args>
2   463						 pop d
2   464					     endm
2   465					 endm
2   466
2   467					 exit macro
2   468					     mov ah, 00h
2   469					     int 21h
2   470					 endm
2   471
2   472					 print macro buf
2   473						 mov ah, 09h
2   474						 mov dx, buf
2   475						 int 21h
2   476					 endm
2   477
2   478					 print_range macro args
2   479					     irp d,<args>
2   480						 print <offset d>
2   481					     endm
2   482					 endm
2   483
2   484					 push_fragment macro buf, length
2   485					     local l1
2   486					     lea di, buf
2   487					     mov cx, length
2   488					     xor bx, bx
2   489					 l1:
2   490					     mov bl, byte ptr [di]
2   491					     push bx
2   492					     inc di
2   493					     dec cx
2   494					     cmp cx, 0
2   495					     jne l1
2   496					 endm
2   497
2   498					 pop_fragment macro buf, length
2   499					     local l1
2   500					     lea di, buf
2   501					     mov cx, length
2   502					     add di, cx
2   503					     dec di
2   504					     xor bx, bx
2   505					 l1:
2   506					     pop bx
2   507					     mov byte ptr [di],	bl
2   508					     dec di
2   509					     dec cx
2   510					     cmp cx, 0
2   511					     jne l1
2   512					 endm
2   513
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 10
tree.ASM



2   514					 set_dta macro dta
2   515					     lea dx, dta
2   516					     xor ax, ax
2   517					     mov ah, 1Ah
2   518					     int 21h
2   519					 endm
2   520
2   521					 break_point macro arg
2   522					     load <arg>
2   523					     xor arg, arg
2   524					     xor arg, arg
2   525					     xor arg, arg
2   526					     xor arg, arg
2   527					     xor arg, arg
2   528					     xor arg, arg
2   529					     xor arg, arg
2   530					     xor arg, arg
2   531					     restore <arg>
2   532					 endm
1   533					 include time.asm
2   534					 include bmacro.asm
3   535					 load macro args
3   536					     irp d,<args>
3   537						 push d
3   538					     endm
3   539					 endm
3   540
3   541					 restore macro args
3   542					     irp d,<args>
3   543						 pop d
3   544					     endm
3   545					 endm
3   546
3   547					 exit macro
3   548					     mov ah, 00h
3   549					     int 21h
3   550					 endm
3   551
3   552					 print macro buf
3   553						 mov ah, 09h
3   554						 mov dx, buf
3   555						 int 21h
3   556					 endm
3   557
3   558					 print_range macro args
3   559					     irp d,<args>
3   560						 print <offset d>
3   561					     endm
3   562					 endm
3   563
3   564					 break_point macro arg
3   565					     load <arg>
3   566					     xor arg, arg
3   567					     xor arg, arg
3   568					     xor arg, arg
3   569					     xor arg, arg
3   570					     xor arg, arg
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 11
tree.ASM



3   571					     xor arg, arg
3   572					     xor arg, arg
3   573					     xor arg, arg
3   574					     restore <arg>
3   575					 endm
3   576
3   577					 parse_byte_to_str macro from, to, length
3   578					     mov ax, length
3   579					     push ax
3   580					     mov ax, to
3   581					     push ax
3   582					     xor ax, ax
3   583					     mov al, from
3   584					     push ax
3   585					     call store_iint_to_string
3   586					 endm
3   587
3   588					 parse_word_to_str macro from, to, length
3   589					     mov ax, length
3   590					     push ax
3   591					     mov ax, to
3   592					     push ax
3   593					     xor ax, ax
3   594					     mov ax, from
3   595					     push ax
3   596					     call store_iint_to_string
3   597					 endm
2   598					 include pnum.asm
3   599
3   600	    0330			 store_iint_to_string:
3   601	    0330  5B			     pop bx
3   602	    0331  58			     pop ax ; integer
3   603	    0332  5E			     pop si ; memory for storing integer
3   604	    0333  5F			     pop di ; integer min length
3   605	    0334  53			     push bx
3   606
3   607	    0335  B9 0000		     mov cx, 0
3   608	    0338  BB 000A		     mov bx, 10
3   609	    033B			 _store_iint_to_string_direct:
3   610	    033B  3D 0000		     cmp ax, 0
3   611	    033E  74 08			     je	_store_iint_to_string_zero_padding_start
3   612
3   613	    0340  33 D2			     xor dx, dx
3   614	    0342  F7 F3			     div bx
3   615	    0344  52			     push dx
3   616	    0345  41			     inc cx
3   617
3   618	    0346  EB F3			     jmp _store_iint_to_string_direct
3   619
3   620	    0348			 _store_iint_to_string_zero_padding_start:
3   621	    0348  2B F9			     sub di, cx
3   622	    034A			 _store_iint_to_string_zero_padding_loop:
3   623	    034A  83 FF	00		     cmp di, 0
3   624	    034D  7E 08			     jle _store_iint_to_string_zero_padding_end
3   625	    034F  BB 0000		     mov bx, 0
3   626	    0352  53			     push bx
3   627	    0353  4F			     dec di
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 12
tree.ASM



3   628	    0354  41			     inc cx
3   629	    0355  EB F3			     jmp _store_iint_to_string_zero_padding_loop
3   630	    0357			 _store_iint_to_string_zero_padding_end:
3   631	    0357			 _store_iint_to_string_inverse:
3   632					     load <si>
5   633	    0357  56				 push si
3   634	    0358  03 F1			     add si, cx
3   635	    035A  C6 04	24		     mov byte ptr [si],	'$'
3   636					     restore <si>
5   637	    035D  5E				 pop si
3   638	    035E			 _store_iint_to_string_inverse_loop:
3   639	    035E  83 F9	00		     cmp cx, 0
3   640	    0361  74 0A			     je	_store_iint_to_string_end
3   641
3   642	    0363  5A			     pop dx
3   643	    0364  80 C2	30		     add dl, 30h
3   644	    0367  88 14			     mov byte ptr [si],	dl
3   645	    0369  46			     inc si
3   646	    036A  49			     dec cx
3   647
3   648	    036B  EB F1			     jmp _store_iint_to_string_inverse_loop
3   649
3   650	    036D			 _store_iint_to_string_end:
3   651	    036D  C3			     ret
2   652
2   653	    036E			 print_datetimestamp:
2   654	    036E  5B			     pop bx
2   655	    036F  59			     pop cx ; time
2   656	    0370  5A			     pop dx ; date
2   657	    0371  53			     push bx
2   658
2   659	    0372  BE 0474r		     lea si, datetime
2   660
2   661					     ;
2   662					     ; date format
2   663					     ;
2   664					     load <cx, dx, si>
4   665	    0375  51				 push cx
4   666	    0376  52				 push dx
4   667	    0377  56				 push si
2   668	    0378  C1 FA	09		     sar dx, 9
2   669	    037B  81 C2	07BC		     add dx, 1980
2   670					     parse_word_to_str dx, si, 4
3   671	    037F  B8 0004		     mov ax, 4
3   672	    0382  50			     push ax
3   673	    0383  8B C6			     mov ax, si
3   674	    0385  50			     push ax
3   675	    0386  33 C0			     xor ax, ax
3   676	    0388  8B C2			     mov ax, dx
3   677	    038A  50			     push ax
3   678	    038B  E8 FFA2		     call store_iint_to_string
2   679					     restore <si, dx, cx>
4   680	    038E  5E				 pop si
4   681	    038F  5A				 pop dx
4   682	    0390  59				 pop cx
2   683					     break_point ax
3   684					     load <ax>
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 13
tree.ASM



5   685	    0391  50				 push ax
3   686	    0392  33 C0			     xor ax, ax
3   687	    0394  33 C0			     xor ax, ax
3   688	    0396  33 C0			     xor ax, ax
3   689	    0398  33 C0			     xor ax, ax
3   690	    039A  33 C0			     xor ax, ax
3   691	    039C  33 C0			     xor ax, ax
3   692	    039E  33 C0			     xor ax, ax
3   693	    03A0  33 C0			     xor ax, ax
3   694					     restore <ax>
5   695	    03A2  58				 pop ax
2   696	    03A3  83 C6	04		     add si, 4
2   697	    03A6  C6 04	2E		     mov byte ptr [si],	'.'
2   698	    03A9  46			     inc si
2   699
2   700					     load <cx, dx, si>
4   701	    03AA  51				 push cx
4   702	    03AB  52				 push dx
4   703	    03AC  56				 push si
2   704	    03AD  81 E2	01E0		     and dx, 32	+ 64 + 128 + 256
2   705	    03B1  C1 FA	05		     sar dx, 5
2   706					     parse_byte_to_str dl, si, 2
3   707	    03B4  B8 0002		     mov ax, 2
3   708	    03B7  50			     push ax
3   709	    03B8  8B C6			     mov ax, si
3   710	    03BA  50			     push ax
3   711	    03BB  33 C0			     xor ax, ax
3   712	    03BD  8A C2			     mov al, dl
3   713	    03BF  50			     push ax
3   714	    03C0  E8 FF6D		     call store_iint_to_string
2   715					     restore <si, dx, cx>
4   716	    03C3  5E				 pop si
4   717	    03C4  5A				 pop dx
4   718	    03C5  59				 pop cx
2   719	    03C6  83 C6	02		     add si, 2
2   720	    03C9  C6 04	2E		     mov byte ptr [si],	'.'
2   721	    03CC  46			     inc si
2   722
2   723					     load <cx, dx, si>
4   724	    03CD  51				 push cx
4   725	    03CE  52				 push dx
4   726	    03CF  56				 push si
2   727	    03D0  80 E2	1F		     and dl, 1 + 2 + 4 + 8 + 16
2   728					     parse_byte_to_str dl, si, 2
3   729	    03D3  B8 0002		     mov ax, 2
3   730	    03D6  50			     push ax
3   731	    03D7  8B C6			     mov ax, si
3   732	    03D9  50			     push ax
3   733	    03DA  33 C0			     xor ax, ax
3   734	    03DC  8A C2			     mov al, dl
3   735	    03DE  50			     push ax
3   736	    03DF  E8 FF4E		     call store_iint_to_string
2   737					     restore <si, dx, cx>
4   738	    03E2  5E				 pop si
4   739	    03E3  5A				 pop dx
4   740	    03E4  59				 pop cx
2   741	    03E5  83 C6	02		     add si, 2
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 14
tree.ASM



2   742	    03E8  C6 04	20		     mov byte ptr [si],	' '
2   743	    03EB  46			     inc si
2   744
2   745					     ;
2   746					     ; time format
2   747					     ;
2   748					     load <cx, dx, si>
4   749	    03EC  51				 push cx
4   750	    03ED  52				 push dx
4   751	    03EE  56				 push si
2   752	    03EF  C1 F9	0B		     sar cx, 11
2   753					     parse_byte_to_str cl, si, 2
3   754	    03F2  B8 0002		     mov ax, 2
3   755	    03F5  50			     push ax
3   756	    03F6  8B C6			     mov ax, si
3   757	    03F8  50			     push ax
3   758	    03F9  33 C0			     xor ax, ax
3   759	    03FB  8A C1			     mov al, cl
3   760	    03FD  50			     push ax
3   761	    03FE  E8 FF2F		     call store_iint_to_string
2   762					     restore <si, dx, cx>
4   763	    0401  5E				 pop si
4   764	    0402  5A				 pop dx
4   765	    0403  59				 pop cx
2   766	    0404  83 C6	02		     add si, 2
2   767	    0407  C6 04	3A		     mov byte ptr [si],	':'
2   768	    040A  46			     inc si
2   769
2   770					     load <cx, dx, si>
4   771	    040B  51				 push cx
4   772	    040C  52				 push dx
4   773	    040D  56				 push si
2   774	    040E  81 E1	07E0		     and cx, 2016
2   775	    0412  C1 F9	05		     sar cx, 5
2   776					     parse_byte_to_str cl, si, 2
3   777	    0415  B8 0002		     mov ax, 2
3   778	    0418  50			     push ax
3   779	    0419  8B C6			     mov ax, si
3   780	    041B  50			     push ax
3   781	    041C  33 C0			     xor ax, ax
3   782	    041E  8A C1			     mov al, cl
3   783	    0420  50			     push ax
3   784	    0421  E8 FF0C		     call store_iint_to_string
2   785					     restore <si, dx, cx>
4   786	    0424  5E				 pop si
4   787	    0425  5A				 pop dx
4   788	    0426  59				 pop cx
2   789	    0427  83 C6	02		     add si, 2
2   790	    042A  C6 04	3A		     mov byte ptr [si],	':'
2   791	    042D  46			     inc si
2   792
2   793					     load <cx, dx, si>
4   794	    042E  51				 push cx
4   795	    042F  52				 push dx
4   796	    0430  56				 push si
2   797	    0431  80 E1	0F		     and cl, 15
2   798	    0434  D0 E1			     sal cl, 1
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 15
tree.ASM



2   799					     parse_byte_to_str cl, si, 2
3   800	    0436  B8 0002		     mov ax, 2
3   801	    0439  50			     push ax
3   802	    043A  8B C6			     mov ax, si
3   803	    043C  50			     push ax
3   804	    043D  33 C0			     xor ax, ax
3   805	    043F  8A C1			     mov al, cl
3   806	    0441  50			     push ax
3   807	    0442  E8 FEEB		     call store_iint_to_string
2   808					     restore <si, dx, cx>
4   809	    0445  5E				 pop si
4   810	    0446  5A				 pop dx
4   811	    0447  59				 pop cx
2   812	    0448  83 C6	02		     add si, 2
2   813	    044B  C6 04	24		     mov byte ptr [si],	'$'
2   814	    044E  46			     inc si
2   815
2   816	    044F  C3			     ret
2   817
2   818	    0450  43 75	72 72 65 6E 74+	 hello_time db 'Current	time is: $'
    819		  20 74	69 6D 65 20 69+
    820		  73 3A	20 24
2   821	    0462  43 75	72 72 65 6E 74+	 hello_date db 'Current	date is: $'
    822		  20 64	61 74 65 20 69+
    823		  73 3A	20 24
2   824	    0474  14*(24)		 datetime db 20	dup('$')
2   825	    0488  3A 24			 time_semicolon	db ':',	'$'
2   826	    048A  20 24			 time_space db ' ', '$'
2   827	    048C  0A 24			 time_newline db 0Ah, '$'
2   828	    048E  80*(24)		 num db	128 dup('$')
1   829					 include fdwcalc.asm
2   830	    050E			 set_dword:
2   831	    050E  59			     pop cx ; ret address
2   832	    050F  58			     pop ax ; word ptr [l16]
2   833	    0510  5A			     pop dx ; word ptr [h16]
2   834
2   835	    0511  51			     push cx
2   836	    0512  A3 0587r		     mov word ptr [doubleword],	ax
2   837	    0515  89 16	0589r		     mov word ptr [doubleword +	2], dx
2   838
2   839	    0519  C3			     ret
2   840
2   841	    051A			 get_dword:
2   842	    051A  59			     pop cx ; ret address
2   843
2   844	    051B  A1 0587r		     mov ax, word ptr [doubleword]
2   845	    051E  8B 16	0589r		     mov dx, word ptr [doubleword + 2]
2   846
2   847	    0522  52			     push dx
2   848	    0523  50			     push ax
2   849	    0524  51			     push cx
2   850
2   851	    0525  C3			     ret
2   852
2   853	    0526			 get_dword_addr:
2   854	    0526  5B			     pop bx
2   855	    0527  B8 0587r		     lea ax, doubleword
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 16
tree.ASM



2   856	    052A  53			     push bx
2   857
2   858	    052B  C3			     ret
2   859
2   860	    052C			 set_dword_from:
2   861	    052C  5A			     pop dx
2   862	    052D  5B			     pop bx ; address from
2   863	    052E  52			     push dx
2   864	    052F  8B 57	02		     mov dx, word ptr [bx + 2]
2   865	    0532  52			     push dx
2   866	    0533  8B 17			     mov dx, word ptr [bx]
2   867	    0535  52			     push dx
2   868	    0536  E8 FFD5		     call set_dword
2   869	    0539  C3			     ret
2   870
2   871	    053A			 dadd_from:
2   872	    053A  5A			     pop dx
2   873	    053B  5B			     pop bx ; address from
2   874	    053C  52			     push dx
2   875	    053D  8B 47	02		     mov ax, word ptr [bx + 2]
2   876	    0540  50			     push ax
2   877	    0541  8B 07			     mov ax, word ptr [bx]
2   878	    0543  50			     push ax
2   879	    0544  E8 0001		     call dadd
2   880	    0547  C3			     ret
2   881
2   882	    0548			 dadd:
2   883	    0548  5E			     pop si
2   884					     ;
2   885					     ; on stack	lay pair (l,h) of one dword, then we load second
2   886					     ;
2   887	    0549  E8 FFCE		     call get_dword
2   888
2   889	    054C  58			     pop ax ; our low
2   890	    054D  5B			     pop bx ; our hight
2   891	    054E  59			     pop cx ; their low
2   892	    054F  5A			     pop dx ; their hight
2   893
2   894	    0550  13 C1			     adc ax, cx
2   895	    0552  72 00			     jc	_dadd_add_one
2   896	    0554			 _dadd_add_one:
2   897	    0554  43			     inc bx
2   898	    0555  03 DA			     add bx, dx
2   899	    0557  53			     push bx
2   900	    0558  50			     push ax
2   901	    0559  E8 FFB2		     call set_dword
2   902	    055C  56			     push si
2   903	    055D  C3			     ret
2   904
2   905	    055E			 ddiv10:
2   906	    055E  E8 FFB9		     call get_dword
2   907	    0561  E8 0008		     call _ddiv10
2   908	    0564  89 16	0585r		     mov word ptr [remainder], dx
2   909	    0568  E8 FFA3		     call set_dword
2   910
2   911	    056B  C3			     ret
2   912
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 17
tree.ASM



2   913	    056C			 _ddiv10:
2   914	    056C  59			     pop cx ; ret address
2   915	    056D  58			     pop ax ; word ptr [l16]
2   916	    056E  5A			     pop dx ; word ptr [h16]
2   917
2   918					     load <ax>
4   919	    056F  50				 push ax
2   920	    0570  8B C2			     mov ax, dx
2   921	    0572  33 D2			     xor dx, dx
2   922	    0574  BB 000A		     mov bx, 10
2   923	    0577  F7 F3			     div bx
2   924	    0579  8B D8			     mov bx, ax	; word ptr [h16]
2   925					     restore <ax>
4   926	    057B  58				 pop ax
2   927	    057C  53			     push bx
2   928
2   929	    057D  BB 000A		     mov bx, 10
2   930	    0580  F7 F3			     div bx
2   931	    0582  50			     push ax ; word ptr	[l15]
2   932
2   933	    0583  51			     push cx
2   934	    0584  C3			     ret
2   935
2   936	    0585  0000			 remainder dw 0
2   937	    0587  00000000		 doubleword dd 0
1   938
1   939	    058B			 count_subfiles_here:
1   940	    058B  B8 028Dr		     lea ax, file_mask
1   941	    058E  BE 012Dr		     lea si, find_first_file
1   942
1   943	    0591  50			     push ax
1   944	    0592  56			     push si
1   945	    0593  E8 0017		     call count_subfiles_here_by_mask
1   946					     load <ax>
3   947	    0596  50				 push ax
1   948	    0597  B8 0293r		     mov ax, offset folder_mask
1   949	    059A  BE 013Ar		     mov si, offset find_first_folder
1   950
1   951	    059D  50			     push ax
1   952	    059E  56			     push si
1   953	    059F  E8 000B		     call count_subfiles_here_by_mask
1   954	    05A2  8B D8			     mov bx, ax
1   955					     restore <ax>
3   956	    05A4  58				 pop ax
1   957	    05A5  03 D8			     add bx, ax
1   958	    05A7  8B C3			     mov ax, bx
1   959	    05A9  A3 0AAEr		     mov word ptr [current_max_entities], ax
1   960	    05AC  C3			     ret
1   961
1   962	    05AD			 count_subfiles_here_by_mask:
1   963	    05AD  5B			     pop bx
1   964	    05AE  5E			     pop si		 ; find_first address
1   965	    05AF  58			     pop ax		 ; mask	address
1   966	    05B0  53			     push bx
1   967
1   968					     load <ax, si>
3   969	    05B1  50				 push ax
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 18
tree.ASM



3   970	    05B2  56				 push si
1   971					     set_dta count_dta
2   972	    05B3  BA 09AEr		     lea dx, count_dta
2   973	    05B6  33 C0			     xor ax, ax
2   974	    05B8  B4 1A			     mov ah, 1Ah
2   975	    05BA  CD 21			     int 21h
1   976					     restore <si, ax>
3   977	    05BC  5E				 pop si
3   978	    05BD  58				 pop ax
1   979
1   980	    05BE  B9 0000		     mov cx, 0
1   981					     load <cx>
3   982	    05C1  51				 push cx
1   983	    05C2  50			     push ax
1   984	    05C3  FF D6			     call si
1   985	    05C5  72 17			     jc	_count_subfiles_from_end
1   986	    05C7			 _count_subfiles_from_loop:
1   987	    05C7  B8 09AEr		     lea ax, count_dta
1   988	    05CA  05 001E		     add ax, 1Eh
1   989	    05CD  8B D8			     mov bx, ax
1   990	    05CF  80 3F	2E		     cmp byte ptr [bx],	'.'
1   991	    05D2  74 03			     je	_count_subfiles_from_loop_next
1   992
1   993					     restore <cx>
3   994	    05D4  59				 pop cx
1   995	    05D5  41			     inc cx
1   996					     load <cx>
3   997	    05D6  51				 push cx
1   998	    05D7			 _count_subfiles_from_loop_next:
1   999	    05D7  E8 FB6D		     call find_next
1  1000	    05DA  72 02			     jc	_count_subfiles_from_end
1  1001
1  1002	    05DC  EB E9			     jmp _count_subfiles_from_loop
1  1003	    05DE			 _count_subfiles_from_end:
1  1004					     restore <cx>
3  1005	    05DE  59				 pop cx
1  1006	    05DF  8B C1			     mov ax, cx
1  1007	    05E1  C3			     ret
1  1008
1  1009	    05E2			 show_filename_from_dta:
1  1010					     ;
1  1011					     ; returns file storage
1  1012					     ;
1  1013	    05E2  5B			     pop bx
1  1014	    05E3  59			     pop cx  ; deep level
1  1015	    05E4  58			     pop ax  ; entity count
1  1016	    05E5  53			     push bx
1  1017
1  1018	    05E6			 _show_filename_from_dta_valid_name:
1  1019					     ;
1  1020					     ;	 pseudo	graphic	prefix
1  1021					     ;
1  1022					     load <ax>
3  1023	    05E6  50				 push ax
1  1024	    05E7  B8 0A2Er		     lea ax, dta
1  1025
1  1026	    05EA  05 001E		     add ax, 1Eh
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 19
tree.ASM



1  1027	    05ED  8B D8			     mov bx, ax
1  1028					     restore <ax>
3  1029	    05EF  58				 pop ax
1  1030
1  1031					     load <cx, bx>
3  1032	    05F0  51				 push cx
3  1033	    05F1  53				 push bx
1  1034	    05F2  50			     push ax	 ; entity count
1  1035	    05F3  51			     push cx	 ; deep	level
1  1036	    05F4  E8 FCA2		     call print_pseudographic_prefix
1  1037					     restore <bx, cx>
3  1038	    05F7  5B				 pop bx
3  1039	    05F8  59				 pop cx
1  1040
1  1041					     load <bx>
3  1042	    05F9  53				 push bx
1  1043	    05FA  B9 000D		     mov cx, 13
1  1044	    05FD  51			     push cx
1  1045	    05FE  53			     push bx
1  1046	    05FF  E8 FC0F		     call count_no_space_no_zero_letters
1  1047	    0602  8B C8			     mov cx, ax
1  1048					     restore <bx>
3  1049	    0604  5B				 pop bx
1  1050	    0605  51			     push cx
1  1051	    0606  53			     push bx
1  1052	    0607  E8 FCF6		     call print_string_with_length
1  1053
1  1054	    060A			 _show_filename_from_dta_datetime:
1  1055	    060A  B0 01			     mov al, 1
1  1056	    060C  38 06	028Br		     cmp byte ptr [use_time], al
1  1057	    0610  75 05			     jne _show_filename_from_dta_storage
1  1058	    0612  E8 001A		     call show_datetime
1  1059	    0615  EB 00			     jmp _show_filename_from_dta_storage
1  1060
1  1061	    0617			 _show_filename_from_dta_storage:
1  1062	    0617  B0 01			     mov al, 1
1  1063	    0619  38 06	028Ar		     cmp byte ptr [use_storage], al
1  1064	    061D  75 05			     jne _show_filename_from_dta_end
1  1065	    061F  E8 002A		     call show_storage
1  1066	    0622  EB 00			     jmp _show_filename_from_dta_end
1  1067
1  1068	    0624			  _show_filename_from_dta_end:
1  1069					     print_range <newline>
3  1070						 print <offset newline>
4  1071	    0624  B4 09				 mov ah, 09h
4  1072	    0626  BA 020Fr			 mov dx, offset	newline
4  1073	    0629  CD 21				 int 21h
1  1074	    062B  B8 0001		     mov ax, 1
1  1075	    062E  C3			     ret
1  1076
1  1077	    062F			 show_datetime:
1  1078	    062F  BB 0A2Er		     lea bx, dta
1  1079	    0632  8B 4F	16		     mov cx, word ptr [bx + 16h]
1  1080	    0635  8B 57	18		     mov dx, word ptr [bx + 18h]
1  1081	    0638  52			     push dx
1  1082	    0639  51			     push cx
1  1083	    063A  E8 FD31		     call print_datetimestamp
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 20
tree.ASM



1  1084					     print_range <time_space, datetime>
3  1085						 print <offset time_space>
4  1086	    063D  B4 09				 mov ah, 09h
4  1087	    063F  BA 048Ar			 mov dx, offset	time_space
4  1088	    0642  CD 21				 int 21h
3  1089						 print <offset datetime>
4  1090	    0644  B4 09				 mov ah, 09h
4  1091	    0646  BA 0474r			 mov dx, offset	datetime
4  1092	    0649  CD 21				 int 21h
1  1093	    064B  C3			     ret
1  1094
1  1095	    064C			 show_storage:
1  1096					     ;
1  1097					     ; print without padding
1  1098					     ;
1  1099	    064C  BA 0000		     mov dx, 0
1  1100	    064F  52			     push dx
1  1101
1  1102					     ;
1  1103					     ; memory for storing integer
1  1104					     ;
1  1105	    0650  BA 096Er		     lea dx, storage
1  1106	    0653  52			     push dx
1  1107
1  1108					     ;
1  1109					     ; move low	16 bit as integer to printing integer
1  1110					     ;
1  1111	    0654  A1 0966r		     mov ax, word ptr [is_file]
1  1112	    0657  3D 0000		     cmp ax, 0
1  1113	    065A  74 0B			     je	_show_storage_folder
1  1114	    065C			 _show_storage_file:
1  1115	    065C  BB 0A2Er		     lea bx, dta
1  1116	    065F  83 C3	1A		     add bx, 1Ah
1  1117	    0662  8B 1F			     mov bx, word ptr [bx]
1  1118	    0664  53			     push bx
1  1119	    0665  EB 06			     jmp _print_storage
1  1120					     ; call dadd_from
1  1121					     ; call get_dword
1  1122					     ; pop ax
1  1123					     ; pop bx
1  1124					     ; push ax
1  1125	    0667			 _show_storage_folder:
1  1126	    0667  A1 096Ar		     mov ax, word ptr [accumulative_storage]
1  1127	    066A  50			     push ax
1  1128	    066B  EB 00			     jmp _print_storage
1  1129	    066D			 _print_storage:
1  1130	    066D  E8 FCC0		     call store_iint_to_string
1  1131					     print_range <time_space, storage>
3  1132						 print <offset time_space>
4  1133	    0670  B4 09				 mov ah, 09h
4  1134	    0672  BA 048Ar			 mov dx, offset	time_space
4  1135	    0675  CD 21				 int 21h
3  1136						 print <offset storage>
4  1137	    0677  B4 09				 mov ah, 09h
4  1138	    0679  BA 096Er			 mov dx, offset	storage
4  1139	    067C  CD 21				 int 21h
1  1140	    067E  C3			     ret
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 21
tree.ASM



1  1141
1  1142	    067F			 is_valid_name:
1  1143	    067F  5B			     pop bx
1  1144	    0680  59			     pop cx	 ; deep	level
1  1145	    0681  53			     push bx
1  1146
1  1147	    0682  B8 0A2Er		     lea ax, dta
1  1148	    0685  05 001E		     add ax, 1Eh
1  1149	    0688  8B D8			     mov bx, ax
1  1150	    068A  B8 0001		     mov ax, 1
1  1151	    068D  80 3F	2E		     cmp byte ptr [bx],	'.'
1  1152	    0690  75 03			     jne _is_valid_name_end
1  1153	    0692  B8 0000		     mov ax, 0
1  1154	    0695			 _is_valid_name_end:
1  1155	    0695  C3			     ret
1  1156
1  1157	    0696			 add_accumulative_storage_from_dta:
1  1158	    0696  BB 0A2Er		     lea bx, dta
1  1159	    0699  83 C3	1A		     add bx, 1Ah
1  1160	    069C  53			     push bx
1  1161	    069D  E8 FE9A		     call dadd_from
1  1162	    06A0  E8 FE77		     call get_dword
1  1163	    06A3  BB 096Ar		     lea bx, accumulative_storage
1  1164	    06A6  5A			     pop dx
1  1165	    06A7  89 17			     mov word ptr [bx],	dx
1  1166	    06A9  5A			     pop dx
1  1167	    06AA  89 57	02		     mov word ptr [bx +	2], dx
1  1168
1  1169	    06AD  C3			     ret
1  1170
1  1171	    06AE			 zeros_accumulative_storage:
1  1172	    06AE  B8 0000		     mov ax, 0
1  1173	    06B1  A3 096Ar		     mov word ptr [accumulative_storage], ax
1  1174	    06B4  A3 096Cr		     mov word ptr [accumulative_storage	+ 2], ax
1  1175	    06B7  C3			     ret
1  1176
1  1177	    06B8			 zeros_dword:
1  1178	    06B8  B8 0000		     mov ax, 0
1  1179	    06BB  50			     push ax
1  1180	    06BC  50			     push ax
1  1181	    06BD  E8 FE4E		     call set_dword
1  1182	    06C0  C3			     ret
1  1183
1  1184	    06C1			 set_accumulative_storage_from_dir:
1  1185					     ;
1  1186					     ; this function suppose that we count subfiles sizes from current directory
1  1187					     ;
1  1188					     ; ret
1  1189	    06C1  E8 FFF4		     call zeros_dword
1  1190	    06C4  E8 FFE7		     call zeros_accumulative_storage
1  1191	    06C7  BB 0001		     mov bx, 1
1  1192	    06CA  89 1E	0964r		     mov word ptr [is_silent], bx
1  1193	    06CE  89 1E	0968r		     mov word ptr [skip_storage_accumulating], bx
1  1194					     ;
1  1195					     ;	 save dta
1  1196					     ;
1  1197					     push_fragment dta,	128
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 22
tree.ASM



2  1198	    06D2  BF 0A2Er		     lea di, dta
2  1199	    06D5  B9 0080		     mov cx, 128
2  1200	    06D8  33 DB			     xor bx, bx
2  1201	    06DA			 ??0000:
2  1202	    06DA  8A 1D			     mov bl, byte ptr [di]
2  1203	    06DC  53			     push bx
2  1204	    06DD  47			     inc di
2  1205	    06DE  49			     dec cx
2  1206	    06DF  83 F9	00		     cmp cx, 0
2  1207	    06E2  75 F6			     jne ??0000
1  1208					     ;
1  1209					     ; start new search
1  1210					     ;
1  1211	    06E4  A1 0AAEr		     mov ax, word ptr [current_max_entities]
1  1212					     load <ax>
3  1213	    06E7  50				 push ax
1  1214					     ;
1  1215					     ;	 cd to subfolder
1  1216					     ;
1  1217	    06E8  B8 0A2Er		     lea ax, dta
1  1218	    06EB  05 001E		     add ax, 1Eh
1  1219
1  1220	    06EE  50			     push ax
1  1221	    06EF  E8 FA7A		     call cd
1  1222					     ;
1  1223					     ;	 list subfiles from subfolder
1  1224					     ;
1  1225	    06F2  BB 0000		     mov bx, 0
1  1226	    06F5  B9 0001		     mov cx, 1
1  1227	    06F8  B8 028Dr		     mov ax, offset file_mask
1  1228	    06FB  BE 012Dr		     mov si, offset find_first_file
1  1229
1  1230	    06FE  56			     push si
1  1231	    06FF  53			     push bx
1  1232	    0700  50			     push ax
1  1233	    0701  51			     push cx
1  1234	    0702  E8 0075		     call list_subfiles_recursive
1  1235					     ;
1  1236					     ;	 list subfolders from subfolder
1  1237					     ;
1  1238	    0705  B9 0001		     mov cx, 1
1  1239	    0708  8B D8			     mov bx, ax
1  1240	    070A  B8 0293r		     mov ax, offset folder_mask
1  1241	    070D  BE 013Ar		     mov si, offset find_first_folder
1  1242
1  1243	    0710  56			     push si
1  1244	    0711  53			     push bx
1  1245	    0712  50			     push ax
1  1246	    0713  51			     push cx
1  1247	    0714  E8 0063		     call list_subfiles_recursive
1  1248					     ;
1  1249					     ;	 cd back to this function
1  1250					     ;
1  1251	    0717  B8 091Fr		     mov ax, offset parent_folder
1  1252	    071A  50			     push ax
1  1253	    071B  E8 FA4E		     call cd
1  1254
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 23
tree.ASM



1  1255					     restore<ax>
3  1256	    071E  58				 pop ax
1  1257	    071F  A3 0AAEr		     mov word ptr [current_max_entities], ax
1  1258					     ;
1  1259					     ;	 restore dta
1  1260					     ;
1  1261					     pop_fragment dta, 128
2  1262	    0722  BF 0A2Er		     lea di, dta
2  1263	    0725  B9 0080		     mov cx, 128
2  1264	    0728  03 F9			     add di, cx
2  1265	    072A  4F			     dec di
2  1266	    072B  33 DB			     xor bx, bx
2  1267	    072D			 ??0001:
2  1268	    072D  5B			     pop bx
2  1269	    072E  88 1D			     mov byte ptr [di],	bl
2  1270	    0730  4F			     dec di
2  1271	    0731  49			     dec cx
2  1272	    0732  83 F9	00		     cmp cx, 0
2  1273	    0735  75 F6			     jne ??0001
1  1274					     set_dta dta
2  1275	    0737  BA 0A2Er		     lea dx, dta
2  1276	    073A  33 C0			     xor ax, ax
2  1277	    073C  B4 1A			     mov ah, 1Ah
2  1278	    073E  CD 21			     int 21h
1  1279
1  1280	    0740  BB 0000		     mov bx, 0
1  1281	    0743  89 1E	0964r		     mov word ptr [is_silent], bx
1  1282	    0747  89 1E	0968r		     mov word ptr [skip_storage_accumulating], bx
1  1283	    074B  C3			     ret
1  1284
1  1285	    074C			 list_subfiles_recursive_from:
1  1286	    074C  5B			     pop bx	 ; ret address
1  1287	    074D  58			     pop ax	 ; deep	level
1  1288	    074E  59			     pop cx	 ; root	folder offset
1  1289	    074F  53			     push bx
1  1290					     load <cx>
3  1291	    0750  51				 push cx
1  1292	    0751  50			     push ax
1  1293	    0752  E8 FA17		     call cd
1  1294					     restore <cx>
3  1295	    0755  59				 pop cx
1  1296					     ;
1  1297					     ; list subfolder
1  1298					     ;
1  1299	    0756  BE 013Ar		     mov si, offset find_first_folder
1  1300	    0759  BB 0000		     mov bx, 0
1  1301	    075C  B8 0293r		     mov ax, offset folder_mask
1  1302					     load <cx>
3  1303	    075F  51				 push cx
1  1304	    0760  56			     push si
1  1305	    0761  53			     push bx
1  1306	    0762  50			     push ax
1  1307	    0763  51			     push cx
1  1308	    0764  E8 0013		     call list_subfiles_recursive
1  1309					     restore <cx>
3  1310	    0767  59				 pop cx
1  1311					     ;
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 24
tree.ASM



1  1312					     ; list files
1  1313					     ;
1  1314	    0768  BE 012Dr		     mov si, offset find_first_file
1  1315	    076B  8B D8			     mov bx, ax
1  1316	    076D  B8 028Dr		     mov ax, offset file_mask
1  1317					     load <cx>
3  1318	    0770  51				 push cx
1  1319	    0771  56			     push si
1  1320	    0772  53			     push bx
1  1321	    0773  50			     push ax
1  1322	    0774  51			     push cx
1  1323	    0775  E8 0002		     call list_subfiles_recursive
1  1324					     restore <cx>
3  1325	    0778  59				 pop cx
1  1326	    0779  C3			     ret
1  1327
1  1328	    077A			 list_subfiles_recursive:
1  1329					     ;
1  1330					     ;	 save current files count
1  1331					     ;
1  1332	    077A  E8 FE0E		     call count_subfiles_here
1  1333	    077D  A3 0AAEr		     mov word ptr [current_max_entities], ax
1  1334
1  1335	    0780  5A			     pop dx
1  1336	    0781  59			     pop cx ; deep level
1  1337	    0782  58			     pop ax ; filemask offset
1  1338	    0783  5B			     pop bx ; current index
1  1339	    0784  5E			     pop si ; search address
1  1340	    0785  52			     push dx
1  1341
1  1342					     load <cx, ax, bx, si>
3  1343	    0786  51				 push cx
3  1344	    0787  50				 push ax
3  1345	    0788  53				 push bx
3  1346	    0789  56				 push si
1  1347					     set_dta dta
2  1348	    078A  BA 0A2Er		     lea dx, dta
2  1349	    078D  33 C0			     xor ax, ax
2  1350	    078F  B4 1A			     mov ah, 1Ah
2  1351	    0791  CD 21			     int 21h
1  1352					     restore <si, bx, ax, cx>
3  1353	    0793  5E				 pop si
3  1354	    0794  5B				 pop bx
3  1355	    0795  58				 pop ax
3  1356	    0796  59				 pop cx
1  1357
1  1358					     load <bx, cx>
3  1359	    0797  53				 push bx
3  1360	    0798  51				 push cx
1  1361	    0799  50			     push ax
1  1362	    079A  FF D6			     call si
1  1363	    079C  73 03			     jnc _list_subfiles_recursive_loop
1  1364	    079E  E9 011E		     jmp _list_subfiles_recursive_end
1  1365	    07A1			 _list_subfiles_recursive_loop:
1  1366					     restore <cx>
3  1367	    07A1  59				 pop cx
1  1368	    07A2  51			     push cx
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 25
tree.ASM



1  1369	    07A3  E8 FED9		     call is_valid_name
1  1370					     load <cx>
3  1371	    07A6  51				 push cx
1  1372	    07A7  3D 0001		     cmp ax, 1
1  1373	    07AA  0F 85	0104		     jne _list_subfiles_recursive_next
1  1374					     ;
1  1375					     ;	 increment current index in subfiles
1  1376					     ;
1  1377					     restore <cx, bx>
3  1378	    07AE  59				 pop cx
3  1379	    07AF  5B				 pop bx
1  1380	    07B0  43			     inc bx
1  1381					     load <bx, cx>
3  1382	    07B1  53				 push bx
3  1383	    07B2  51				 push cx
1  1384
1  1385					     ; ;
1  1386					     ; ;   set current space counter to	zero
1  1387					     ; ;
1  1388					     ; mov ax, 0
1  1389					     ; push ax
1  1390					     ; push ax
1  1391					     ; call set_dword
1  1392
1  1393					     ;
1  1394					     ;	 check if folder
1  1395					     ;
1  1396					     restore <cx>
3  1397	    07B3  59				 pop cx
1  1398					     load <cx>
3  1399	    07B4  51				 push cx
1  1400	    07B5  B8 0A2Er		     lea ax, dta
1  1401	    07B8  50			     push ax
1  1402	    07B9  51			     push cx
1  1403	    07BA  E8 F98F		     call is_folder
1  1404	    07BD  3D 0001		     cmp ax, 1
1  1405	    07C0  74 27			     je	_list_subfiles_recursive_folder
1  1406
1  1407	    07C2  E8 FED1		     call add_accumulative_storage_from_dta
1  1408
1  1409	    07C5  A1 0964r		     mov ax, word ptr [is_silent]
1  1410	    07C8  3D 0001		     cmp ax, 1
1  1411	    07CB  0F 84	00E3		     je	_list_subfiles_recursive_next
1  1412
1  1413	    07CF  BB 0001		     mov bx, 1
1  1414	    07D2  89 1E	0966r		     mov word ptr [is_file], bx
1  1415					     ;
1  1416					     ;	 show filename
1  1417					     ;
1  1418					     restore <cx, bx>
3  1419	    07D6  59				 pop cx
3  1420	    07D7  5B				 pop bx
1  1421					     load <bx, cx>
3  1422	    07D8  53				 push bx
3  1423	    07D9  51				 push cx
1  1424	    07DA  53			     push bx
1  1425	    07DB  51			     push cx
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 26
tree.ASM



1  1426	    07DC  E8 FE03		     call show_filename_from_dta
1  1427
1  1428	    07DF  BB 0000		     mov bx, 0
1  1429	    07E2  89 1E	0966r		     mov word ptr [is_file], bx
1  1430
1  1431	    07E6  E9 00C9		     jmp _list_subfiles_recursive_next
1  1432	    07E9			 _list_subfiles_recursive_folder:
1  1433	    07E9  A1 0968r		     mov ax, word ptr [skip_storage_accumulating]
1  1434	    07EC  3D 0001		     cmp ax, 1
1  1435	    07EF  74 03			     je	_list_subfiles_recursive_folder_check_silence
1  1436
1  1437					     ;
1  1438					     ;	 count storages
1  1439					     ;
1  1440	    07F1  E8 FECD		     call set_accumulative_storage_from_dir
1  1441	    07F4			 _list_subfiles_recursive_folder_check_silence:
1  1442	    07F4  A1 0964r		     mov ax, word ptr [is_silent]
1  1443	    07F7  3D 0001		     cmp ax, 1
1  1444	    07FA  74 0F			     je	_list_subfiles_recursive_folder_serach_logic
1  1445
1  1446					     ;
1  1447					     ;	 show folder name
1  1448					     ;
1  1449					     restore <cx, bx>
3  1450	    07FC  59				 pop cx
3  1451	    07FD  5B				 pop bx
1  1452					     load <bx, cx>
3  1453	    07FE  53				 push bx
3  1454	    07FF  51				 push cx
1  1455	    0800  53			     push bx
1  1456	    0801  51			     push cx
1  1457	    0802  E8 FDDD		     call show_filename_from_dta
1  1458
1  1459	    0805  E8 FEB0		     call zeros_dword
1  1460	    0808  E8 FEA3		     call zeros_accumulative_storage
1  1461
1  1462	    080B			 _list_subfiles_recursive_folder_serach_logic:
1  1463
1  1464					     ;
1  1465					     ;	 check deep level
1  1466					     ;
1  1467					     restore <cx>
3  1468	    080B  59				 pop cx
1  1469					     load <cx>
3  1470	    080C  51				 push cx
1  1471	    080D  33 DB			     xor bx, bx
1  1472	    080F  8A 1E	028Cr		     mov bl, byte ptr [deep_level]
1  1473	    0813  3B CB			     cmp cx, bx
1  1474	    0815  0F 8D	0099		     jge _list_subfiles_recursive_next
1  1475
1  1476					     restore <cx, bx>
3  1477	    0819  59				 pop cx
3  1478	    081A  5B				 pop bx
1  1479					     load <bx, cx>
3  1480	    081B  53				 push bx
3  1481	    081C  51				 push cx
1  1482
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 27
tree.ASM



1  1483	    081D  A1 0964r		     mov ax, word ptr [is_silent]
1  1484	    0820  3D 0001		     cmp ax, 1
1  1485	    0823  74 10			     je	_list_subfiles_recursive_loop_pseudographic_hack_end
1  1486					     ;
1  1487					     ;	 pseudographic hack
1  1488					     ;
1  1489	    0825  3B 1E	0AAEr		     cmp bx, word ptr [current_max_entities]
1  1490	    0829  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack_end
1  1491					     load <ax, bx, cx>
3  1492	    082B  50				 push ax
3  1493	    082C  53				 push bx
3  1494	    082D  51				 push cx
1  1495	    082E  51			     push cx
1  1496	    082F  E8 FAAC		     call set_level_shift
1  1497					     restore <cx, bx, ax>
3  1498	    0832  59				 pop cx
3  1499	    0833  5B				 pop bx
3  1500	    0834  58				 pop ax
1  1501
1  1502	    0835			 _list_subfiles_recursive_loop_pseudographic_hack_end:
1  1503	    0835  8B C1			     mov ax, cx
1  1504					     ;
1  1505					     ;	 save dta
1  1506					     ;
1  1507					     push_fragment dta,	128
2  1508	    0837  BF 0A2Er		     lea di, dta
2  1509	    083A  B9 0080		     mov cx, 128
2  1510	    083D  33 DB			     xor bx, bx
2  1511	    083F			 ??0002:
2  1512	    083F  8A 1D			     mov bl, byte ptr [di]
2  1513	    0841  53			     push bx
2  1514	    0842  47			     inc di
2  1515	    0843  49			     dec cx
2  1516	    0844  83 F9	00		     cmp cx, 0
2  1517	    0847  75 F6			     jne ??0002
1  1518	    0849  8B C8			     mov cx, ax
1  1519					     ;
1  1520					     ; start new search
1  1521					     ;
1  1522	    084B  A1 0AAEr		     mov ax, word ptr [current_max_entities]
1  1523					     load <ax>
3  1524	    084E  50				 push ax
1  1525
1  1526					     load <cx>
3  1527	    084F  51				 push cx
1  1528					     ;
1  1529					     ;	 cd to subfolder
1  1530					     ;
1  1531	    0850  B8 0A2Er		     lea ax, dta
1  1532	    0853  05 001E		     add ax, 1Eh
1  1533
1  1534	    0856  50			     push ax
1  1535	    0857  E8 F912		     call cd
1  1536					     restore <cx>
3  1537	    085A  59				 pop cx
1  1538
1  1539	    085B  41			     inc cx
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 28
tree.ASM



1  1540					     ;
1  1541					     ;	 list subfiles from subfolder
1  1542					     ;
1  1543					     load <cx>
3  1544	    085C  51				 push cx
1  1545	    085D  BB 0000		     mov bx, 0
1  1546	    0860  B8 028Dr		     mov ax, offset file_mask
1  1547	    0863  BE 012Dr		     mov si, offset find_first_file
1  1548
1  1549	    0866  56			     push si
1  1550	    0867  53			     push bx
1  1551	    0868  50			     push ax
1  1552	    0869  51			     push cx
1  1553	    086A  E8 FF0D		     call list_subfiles_recursive
1  1554					     restore <cx>
3  1555	    086D  59				 pop cx
1  1556					     ;
1  1557					     ;	 list subfolders from subfolder
1  1558					     ;
1  1559					     load <cx>
3  1560	    086E  51				 push cx
1  1561	    086F  8B D8			     mov bx, ax
1  1562	    0871  B8 0293r		     mov ax, offset folder_mask
1  1563	    0874  BE 013Ar		     mov si, offset find_first_folder
1  1564
1  1565	    0877  56			     push si
1  1566	    0878  53			     push bx
1  1567	    0879  50			     push ax
1  1568	    087A  51			     push cx
1  1569	    087B  E8 FEFC		     call list_subfiles_recursive
1  1570					     restore <cx>
3  1571	    087E  59				 pop cx
1  1572					     ;
1  1573					     ;	 reverse pseudographic hack
1  1574					     ;
1  1575					     load <ax, bx, cx>
3  1576	    087F  50				 push ax
3  1577	    0880  53				 push bx
3  1578	    0881  51				 push cx
1  1579	    0882  51			     push cx
1  1580	    0883  E8 FA69		     call reset_level_shift
1  1581					     restore <cx, bx, ax>
3  1582	    0886  59				 pop cx
3  1583	    0887  5B				 pop bx
3  1584	    0888  58				 pop ax
1  1585					     ;
1  1586					     ;	 cd back to this function
1  1587					     ;
1  1588	    0889  B8 091Fr		     mov ax, offset parent_folder
1  1589	    088C  50			     push ax
1  1590	    088D  E8 F8DC		     call cd
1  1591
1  1592					     restore <ax>
3  1593	    0890  58				 pop ax
1  1594	    0891  A3 0AAEr		     mov word ptr [current_max_entities], ax
1  1595					     ;
1  1596					     ;	 restore dta
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 29
tree.ASM



1  1597					     ;
1  1598					     pop_fragment dta, 128
2  1599	    0894  BF 0A2Er		     lea di, dta
2  1600	    0897  B9 0080		     mov cx, 128
2  1601	    089A  03 F9			     add di, cx
2  1602	    089C  4F			     dec di
2  1603	    089D  33 DB			     xor bx, bx
2  1604	    089F			 ??0003:
2  1605	    089F  5B			     pop bx
2  1606	    08A0  88 1D			     mov byte ptr [di],	bl
2  1607	    08A2  4F			     dec di
2  1608	    08A3  49			     dec cx
2  1609	    08A4  83 F9	00		     cmp cx, 0
2  1610	    08A7  75 F6			     jne ??0003
1  1611					     set_dta dta
2  1612	    08A9  BA 0A2Er		     lea dx, dta
2  1613	    08AC  33 C0			     xor ax, ax
2  1614	    08AE  B4 1A			     mov ah, 1Ah
2  1615	    08B0  CD 21			     int 21h
1  1616	    08B2			 _list_subfiles_recursive_next:
1  1617	    08B2  E8 F892		     call find_next
1  1618	    08B5  0F 83	FEE8		     jnc _list_subfiles_recursive_loop
1  1619	    08B9  3A 06	08E5r		     cmp al, byte ptr [no_more_files]
1  1620	    08BD  75 14			     jne find_next_error
1  1621	    08BF			 _list_subfiles_recursive_end:
1  1622					     restore <cx, bx>
3  1623	    08BF  59				 pop cx
3  1624	    08C0  5B				 pop bx
1  1625	    08C1  8B C3			     mov ax, bx
1  1626	    08C3  C3			     ret
1  1627	    08C4			 find_first_error:
1  1628					     print_range <find_first_fails, newline>
3  1629						 print <offset find_first_fails>
4  1630	    08C4  B4 09				 mov ah, 09h
4  1631	    08C6  BA 08E6r			 mov dx, offset	find_first_fails
4  1632	    08C9  CD 21				 int 21h
3  1633						 print <offset newline>
4  1634	    08CB  B4 09				 mov ah, 09h
4  1635	    08CD  BA 020Fr			 mov dx, offset	newline
4  1636	    08D0  CD 21				 int 21h
1  1637	    08D2  C3			     ret
1  1638	    08D3			 find_next_error:
1  1639					     print_range <find_next_fails, newline>
3  1640						 print <offset find_next_fails>
4  1641	    08D3  B4 09				 mov ah, 09h
4  1642	    08D5  BA 0902r			 mov dx, offset	find_next_fails
4  1643	    08D8  CD 21				 int 21h
3  1644						 print <offset newline>
4  1645	    08DA  B4 09				 mov ah, 09h
4  1646	    08DC  BA 020Fr			 mov dx, offset	newline
4  1647	    08DF  CD 21				 int 21h
1  1648					     exit
2  1649	    08E1  B4 00			     mov ah, 00h
2  1650	    08E3  CD 21			     int 21h
1  1651
1  1652					 ;
1  1653					 ; error codes
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 30
tree.ASM



1  1654					 ;
1  1655	    08E5  12			 no_more_files db 18
1  1656
1  1657					 ;
1  1658					 ; error messages
1  1659					 ;
1  1660	    08E6  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
   1661		  72 73	74 20 66 69 6C+
   1662		  65 6E	61 6D 65 73 20+
   1663		  66 61	69 6C 73 2E 24
1  1664	    0902  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
   1665		  78 74	20 66 69 6C 65+
   1666		  6E 61	6D 65 73 20 66+
   1667		  61 69	6C 73 2E 24
1  1668
1  1669					 ;
1  1670					 ; int variables
1  1671					 ;
1  1672	    091D  0000			 current_id_entity dw 0
1  1673
1  1674					 ;
1  1675					 ; strings
1  1676					 ;
1  1677	    091F  2E 2E	00		 parent_folder db '..',	00h
1  1678	    0922  2E 00			 current_folder	db '.',	00h
1  1679	    0924  40*(00)		 root_folder db	64 dup(00h)
1  1680
1  1681					 ;
1  1682					 ; mode	variables
1  1683					 ;
1  1684	    0964  0000			 is_silent dw 0
1  1685	    0966  0000			 is_file dw 0
1  1686	    0968  0000			 skip_storage_accumulating dw 0
1  1687
1  1688					 ;
1  1689					 ; storages
1  1690					 ;
1  1691	    096A  00000000		 accumulative_storage dd 0
1  1692	    096E  40*(24)		 storage db 64 dup('$')
1  1693	    09AE  80*(00)		 count_dta db 128 dup(0)
1  1694	    0A2E  80*(00)		 dta db	128 dup(0)
1  1695	    0AAE  0000			 current_max_entities dw 0
1  1696
   1697
   1698					 end start
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 31
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:06DA
??0001				  Near	 DGROUP:072D
??0002				  Near	 DGROUP:083F
??0003				  Near	 DGROUP:089F
??DATE				  Text	 "12/23/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "15:32:01"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACCUMULATIVE_STORAGE		  Dword	 DGROUP:096A
ADD_ACCUMULATIVE_STORAGE_FROM_DT  Near	 DGROUP:0696
A
ALL_FILES			  Byte	 DGROUP:0295
CD				  Near	 DGROUP:016C
CD_ERROR			  Near	 DGROUP:017A
CD_FAILS			  Byte	 DGROUP:01F7
COUNT_DTA			  Byte	 DGROUP:09AE
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0211
COUNT_SUBFILES_HERE		  Near	 DGROUP:058B
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:05AD
CURRENT_FOLDER			  Byte	 DGROUP:0922
CURRENT_ID_ENTITY		  Word	 DGROUP:091D
CURRENT_MAX_ENTITIES		  Word	 DGROUP:0AAE
DADD				  Near	 DGROUP:0548
DADD_FROM			  Near	 DGROUP:053A
DATETIME			  Byte	 DGROUP:0474
DDIV10				  Near	 DGROUP:055E
DEEP_LEVEL			  Byte	 DGROUP:028C
DOUBLEWORD			  Dword	 DGROUP:0587
DTA				  Byte	 DGROUP:0A2E
END_FILE_CHAR			  Byte	 DGROUP:032E
FILE_EXT			  Byte	 DGROUP:028E
FILE_MASK			  Byte	 DGROUP:028D
FIND_FIRST_ERROR		  Near	 DGROUP:08C4
FIND_FIRST_FAILS		  Byte	 DGROUP:08E6
FIND_FIRST_FILE			  Near	 DGROUP:012D
FIND_FIRST_FOLDER		  Near	 DGROUP:013A
FIND_NEXT			  Near	 DGROUP:0147
FIND_NEXT_ERROR			  Near	 DGROUP:08D3
FIND_NEXT_FAILS			  Byte	 DGROUP:0902
FIRST_FILE_CHAR			  Byte	 DGROUP:032A
FOLDER_MASK			  Byte	 DGROUP:0293
GET_DWORD			  Near	 DGROUP:051A
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 32
Symbol Table



GET_DWORD_ADDR			  Near	 DGROUP:0526
HELLO_DATE			  Byte	 DGROUP:0462
HELLO_TIME			  Byte	 DGROUP:0450
IS_FILE				  Word	 DGROUP:0966
IS_FOLDER			  Near	 DGROUP:014C
IS_SILENT			  Word	 DGROUP:0964
IS_VALID_NAME			  Near	 DGROUP:067F
LEVEL_SHIFT			  Byte	 DGROUP:0318
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:077A
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:074C
MIDDLE_FILE_CHAR		  Byte	 DGROUP:032C
NEWLINE				  Byte	 DGROUP:020F
NO_MORE_FILES			  Byte	 DGROUP:08E5
NUM				  Byte	 DGROUP:048E
OLD_LEVEL_SHIFT			  Byte	 DGROUP:0316
PARENT_FOLDER			  Byte	 DGROUP:091F
PARSE_ARGS			  Near	 DGROUP:0245
PARSE_COMMAND_LINE		  Near	 DGROUP:0230
PARSE_D				  Near	 DGROUP:025D
PARSE_END			  Near	 DGROUP:0289
PARSE_F				  Near	 DGROUP:026B
PARSE_S				  Near	 DGROUP:0277
PARSE_T				  Near	 DGROUP:0280
PRINT_DATETIMESTAMP		  Near	 DGROUP:036E
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0299
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0300
REMAINDER			  Word	 DGROUP:0585
RESET_LEVEL_SHIFT		  Near	 DGROUP:02EF
ROOT_FOLDER			  Byte	 DGROUP:0924
SAVE_CWD			  Near	 DGROUP:0199
SET_ACCUMULATIVE_STORAGE_FROM_DI  Near	 DGROUP:06C1
R
SET_DWORD			  Near	 DGROUP:050E
SET_DWORD_FROM			  Near	 DGROUP:052C
SET_LEVEL_SHIFT			  Near	 DGROUP:02DE
SHOW_DATETIME			  Near	 DGROUP:062F
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:05E2
SHOW_STORAGE			  Near	 DGROUP:064C
SKIP_STORAGE_ACCUMULATING	  Word	 DGROUP:0968
SPACE				  Byte	 DGROUP:0323
START				  Near	 DGROUP:0100
STORAGE				  Byte	 DGROUP:096E
STORE_IINT_TO_STRING		  Near	 DGROUP:0330
TIME_NEWLINE			  Byte	 DGROUP:048C
TIME_SEMICOLON			  Byte	 DGROUP:0488
TIME_SPACE			  Byte	 DGROUP:048A
USE_STORAGE			  Byte	 DGROUP:028A
USE_TIME			  Byte	 DGROUP:028B
WORKING_FOLDER			  Byte	 DGROUP:01B7
ZEROS_ACCUMULATIVE_STORAGE	  Near	 DGROUP:06AE
ZEROS_DWORD			  Near	 DGROUP:06B8
ZERO_END_FILE			  Byte	 DGROUP:0328
ZERO_FIRST_FILE			  Byte	 DGROUP:0326
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:022F
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:0218
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:05DE
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:05C7
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 33
Symbol Table



_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:05D7
_DADD_ADD_ONE			  Near	 DGROUP:0554
_DDIV10				  Near	 DGROUP:056C
_IS_FOLDER_END			  Near	 DGROUP:016B
_IS_FOLDER_FALSE		  Near	 DGROUP:0166
_IS_FOLDER_TRUE			  Near	 DGROUP:0161
_IS_VALID_NAME_END		  Near	 DGROUP:0695
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:08BF
_LIST_SUBFILES_RECURSIVE_FOLDER	  Near	 DGROUP:07E9
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:07F4
CHECK_SILENCE
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:080B
SERACH_LOGIC
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:07A1
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:0835
EUDOGRAPHIC_HACK_END
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:08B2
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:02DD
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02AE
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02D4
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02C2
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:02CB
_LEVEL_MIDDLE
_PRINT_STORAGE			  Near	 DGROUP:066D
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:0315
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0306
_SHOW_FILENAME_FROM_DTA_DATETIME  Near	 DGROUP:060A
_SHOW_FILENAME_FROM_DTA_END	  Near	 DGROUP:0624
_SHOW_FILENAME_FROM_DTA_STORAGE	  Near	 DGROUP:0617
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:05E6
ME
_SHOW_STORAGE_FILE		  Near	 DGROUP:065C
_SHOW_STORAGE_FOLDER		  Near	 DGROUP:0667
_STORE_IINT_TO_STRING_DIRECT	  Near	 DGROUP:033B
_STORE_IINT_TO_STRING_END	  Near	 DGROUP:036D
_STORE_IINT_TO_STRING_INVERSE	  Near	 DGROUP:0357
_STORE_IINT_TO_STRING_INVERSE_LO  Near	 DGROUP:035E
OP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:0357
NG_END
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:034A
NG_LOOP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:0348
NG_START

Macro Name

BREAK_POINT
EXIT
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
Turbo Assembler	 Version 4.1	    12/23/19 15:32:04	    Page 34
Symbol Table



PRINT_RANGE
PUSH_FRAGMENT
RESTORE
SET_DTA

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0AB0 Word	  Public  CODE
