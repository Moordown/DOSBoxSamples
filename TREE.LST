Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 1
tree.ASM



      1					 include tmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 2
tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
     80
     81	    0000			 model tiny
     82					 .386
     83	    0000			 .code
     84					 org 100h
     85	    0100			 start:
     86	    0100  E8 0096		     call save_cwd
     87	    0103  B8 0000		     mov ax, 0
     88	    0106  50			     push ax
     89	    0107  50			     push ax
     90	    0108  E8 1E0D		     call set_dword
     91					     set_dta dta
1    92	    010B  BA 2682r		     lea dx, dta
1    93	    010E  33 C0			     xor ax, ax
1    94	    0110  B4 1A			     mov ah, 1Ah
1    95	    0112  CD 21			     int 21h
     96	    0114  E8 1D0E		     call parse_command_line
     97					     ;
     98					     ;	 start tree
     99					     ;
    100	    0117  B8 2578r		     mov ax, offset root_folder
    101	    011A  B9 0000		     mov cx, 0
    102	    011D  51			     push cx
    103	    011E  50			     push ax
    104	    011F  E8 2276		     call list_subfiles_recursive_from
    105					     ;
    106					     ;	 cd to start folder
    107					     ;
    108	    0122  B8 01B7r		     mov ax, offset working_folder
    109	    0125  50			     push ax
    110	    0126  E8 0043		     call cd
    111					     exit
1   112	    0129  B4 00			     mov ah, 00h
1   113	    012B  CD 21			     int 21h
    114
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 3
tree.ASM



    115					 include dtafunc.asm
1   116
1   117					 include filefunc.asm
2   118	    012D			 find_first_file:
2   119	    012D  5B			     pop bx
2   120	    012E  5A			     pop dx		; filename spec
2   121	    012F  B9 000F		     mov cx, 0fh	 ; include files
2   122	    0132  53			     push bx
2   123
2   124	    0133  33 C0			     xor ax, ax
2   125	    0135  B4 4E			     mov ah, 4Eh
2   126	    0137  CD 21			     int 21h
2   127	    0139  C3			     ret
2   128
2   129	    013A			 find_first_folder:
2   130	    013A  5B			     pop bx
2   131	    013B  5A			     pop dx		 ; filename spec
2   132	    013C  B9 0010		     mov cx, 10h	 ; include directories
2   133	    013F  53			     push bx
2   134
2   135	    0140  33 C0			     xor ax, ax
2   136	    0142  B4 4E			     mov ah, 4Eh
2   137	    0144  CD 21			     int 21h
2   138	    0146  C3			     ret
2   139
2   140	    0147			 find_next:
2   141	    0147  B4 4F			     mov ah, 4Fh
2   142	    0149  CD 21			     int 21h
2   143
2   144	    014B  C3			     ret
2   145
2   146	    014C			 is_folder:
2   147	    014C  5B			     pop bx
2   148	    014D  59			     pop cx
2   149	    014E  58			     pop ax ; dta address
2   150	    014F  53			     push bx
2   151
2   152	    0150  05 0015		     add ax, 15h
2   153	    0153  8B D8			     mov bx, ax
2   154	    0155  8A 1F			     mov bl, byte ptr [bx]
2   155	    0157  80 E3	10		     and bl, 10h
2   156	    015A  80 FB	10		     cmp bl, 10h
2   157	    015D  74 02			     je	_is_folder_true
2   158	    015F  75 05			     jne _is_folder_false
2   159	    0161			 _is_folder_true:
2   160	    0161  B8 0001		     mov ax, 1
2   161	    0164  EB 05			     jmp _is_folder_end
2   162	    0166			 _is_folder_false:
2   163	    0166  B8 0000		     mov ax, 0
2   164	    0169  EB 00			     jmp _is_folder_end
2   165	    016B			 _is_folder_end:
2   166	    016B  C3			     ret
2   167
2   168	    016C			 cd:
2   169	    016C  5B			     pop bx ; ret addr
2   170	    016D  5A			     pop dx ; root address
2   171	    016E  53			     push bx ; ret addr
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 4
tree.ASM



2   172
2   173					     load <dx>
4   174	    016F  52				 push dx
2   175	    0170  33 C0			     xor ax, ax
2   176	    0172  B4 3B			     mov ah, 3Bh
2   177	    0174  CD 21			     int 21h
2   178
2   179	    0176  72 02			     jc	cd_error
2   180					     restore <dx>
4   181	    0178  5A				 pop dx
2   182	    0179  C3			     ret
2   183	    017A			 cd_error:
2   184					     print_range <cd_fails, newline>
4   185						 print <offset cd_fails>
5   186	    017A  B4 09				 mov ah, 09h
5   187	    017C  BA 01F7r			 mov dx, offset	cd_fails
5   188	    017F  CD 21				 int 21h
4   189						 print <offset newline>
5   190	    0181  B4 09				 mov ah, 09h
5   191	    0183  BA 020Fr			 mov dx, offset	newline
5   192	    0186  CD 21				 int 21h
2   193					     restore <dx>
4   194	    0188  5A				 pop dx
2   195
2   196	    0189  B4 09				 mov ah, 09h
2   197	    018B  CD 21			     int 21h
2   198
2   199					     print_range <newline>
4   200						 print <offset newline>
5   201	    018D  B4 09				 mov ah, 09h
5   202	    018F  BA 020Fr			 mov dx, offset	newline
5   203	    0192  CD 21				 int 21h
2   204					     exit
3   205	    0194  B4 00			     mov ah, 00h
3   206	    0196  CD 21			     int 21h
2   207	    0198  C3			     ret
2   208
2   209	    0199			 save_cwd:
2   210	    0199  BE 01B7r		     mov si, offset working_folder
2   211
2   212					     ;
2   213					     ; save driver
2   214					     ;
2   215	    019C  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
2   216	    019E  CD 21			     int 21h
2   217	    01A0  8A D0			     mov dl, al
2   218	    01A2  80 C2	41		     add dl, 41h
2   219	    01A5  88 14			     mov byte ptr [si],	dl
2   220	    01A7  46			     inc si
2   221	    01A8  C6 04	3A		     mov byte ptr [si],	':'
2   222	    01AB  46			     inc si
2   223	    01AC  C6 04	5C		     mov byte ptr [si],	'\'
2   224	    01AF  46			     inc si
2   225
2   226					     ;
2   227					     ; save folder
2   228					     ;
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 5
tree.ASM



2   229	    01B0  32 D2			     xor dl, dl			 ; Actual drive
2   230	    01B2  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
2   231	    01B4  CD 21			     int 21h
2   232	    01B6  C3			     ret
2   233
2   234
2   235	    01B7  40*(00)		 working_folder	db 64 dup(00h)
2   236	    01F7  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    237		  64 69	72 65 63 74 6F+
    238		  72 79	20 66 61 69 6C+
    239		  73 2E	24
2   240	    020F  0A 24			 newline db 0Ah, '$'
1   241					 include clfunc.asm
2   242					 include pgraph.asm
3   243
3   244	    0211			 print_pseudographic_prefix:
3   245	    0211  5B			     pop bx
3   246	    0212  59			     pop cx	 ; deep	level
3   247	    0213  58			     pop ax	 ; entity count
3   248	    0214  53			     push bx
3   249
3   250	    0215  83 F9	00		     cmp cx, 0
3   251	    0218  74 0C			     je	_print_pseudographic_prefix_zero_level
3   252					     load <cx, ax>
5   253	    021A  51				 push cx
5   254	    021B  50				 push ax
3   255	    021C  B8 0290r		     mov ax, offset level_shift
3   256
3   257	    021F  51			     push cx
3   258	    0220  50			     push ax
3   259	    0221  E8 0054		     call print_string_with_length
3   260					     restore <ax, cx>
5   261	    0224  58				 pop ax
5   262	    0225  59				 pop cx
3   263	    0226			 _print_pseudographic_prefix_zero_level:
3   264
3   265	    0226  8B 1E	2702r		     mov bx, word ptr [current_max_entities]
3   266	    022A  3A C3			     cmp al, bl
3   267	    022C  74 1E			     je	_print_pseudographic_prefix_zero_level_end
3   268	    022E  3D 0001		     cmp ax, 1
3   269	    0231  75 10			     jne _print_pseudographic_prefix_zero_level_middle
3   270	    0233  83 F9	00		     cmp cx, 0
3   271	    0236  74 02			     je	_print_pseudographic_prefix_zero_level_first
3   272	    0238  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
3   273	    023A			 _print_pseudographic_prefix_zero_level_first:
3   274					     print_range <first_file_char>
5   275						 print <offset first_file_char>
6   276	    023A  B4 09				 mov ah, 09h
6   277	    023C  BA 02ACr			 mov dx, offset	first_file_char
6   278	    023F  CD 21				 int 21h
3   279	    0241  EB 12			     jmp _print_pseudographic_prefix_end
3   280	    0243			 _print_pseudographic_prefix_zero_level_middle:
3   281					     print_range <middle_file_char>
5   282						 print <offset middle_file_char>
6   283	    0243  B4 09				 mov ah, 09h
6   284	    0245  BA 02AEr			 mov dx, offset	middle_file_char
6   285	    0248  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 6
tree.ASM



3   286	    024A  EB 09			     jmp _print_pseudographic_prefix_end
3   287	    024C			 _print_pseudographic_prefix_zero_level_end:
3   288					     print_range <end_file_char>
5   289						 print <offset end_file_char>
6   290	    024C  B4 09				 mov ah, 09h
6   291	    024E  BA 02B0r			 mov dx, offset	end_file_char
6   292	    0251  CD 21				 int 21h
3   293	    0253  EB 00			     jmp _print_pseudographic_prefix_end
3   294	    0255			 _print_pseudographic_prefix_end:
3   295	    0255  C3			     ret
3   296
3   297	    0256			 set_level_shift:
3   298	    0256  5B			     pop bx
3   299	    0257  59			     pop cx  ; line level
3   300	    0258  53			     push bx
3   301
3   302	    0259  BB 0290r		     lea bx, level_shift
3   303	    025C  03 D9			     add bx, cx
3   304	    025E  A0 02A5r		     mov al, byte ptr [space]
3   305	    0261  88 07			     mov byte ptr [bx],	al
3   306
3   307	    0263  B8 0001		     mov ax, 1
3   308
3   309	    0266  C3			     ret
3   310
3   311	    0267			 reset_level_shift:
3   312	    0267  5B			     pop bx
3   313	    0268  59			     pop cx  ; line level
3   314	    0269  53			     push bx
3   315
3   316	    026A  BB 0290r		     lea bx, level_shift
3   317	    026D  03 D9			     add bx, cx
3   318	    026F  A0 028Er		     mov al, byte ptr [old_level_shift]
3   319	    0272  88 07			     mov byte ptr [bx],	al
3   320
3   321	    0274  B8 0001		     mov ax, 1
3   322
3   323	    0277  C3			     ret
3   324
3   325	    0278			 print_string_with_length:
3   326	    0278  5B			     pop bx ; ret address
3   327	    0279  5E			     pop si ; string offset
3   328	    027A  59			     pop cx ; string length
3   329	    027B  53			     push bx; ret address
3   330	    027C  33 C0			     xor ax, ax
3   331	    027E			 _print_string_with_length_loop:
3   332	    027E  B4 02			     mov ah, 02h
3   333	    0280  8A 14			     mov dl, byte ptr [si]
3   334	    0282  CD 21			     int 21h
3   335	    0284  49			     dec cx
3   336	    0285  46			     inc si
3   337	    0286  83 F9	00		     cmp cx, 00h
3   338	    0289  74 02			     je	_print_string_with_length_end
3   339	    028B  EB F1			     jmp _print_string_with_length_loop
3   340	    028D			 _print_string_with_length_end:
3   341	    028D  C3			     ret
3   342
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 7
tree.ASM



3   343					 ;
3   344					 ;   pseudographic
3   345					 ;
3   346	    028E  B3 24			 old_level_shift db 179, '$'
3   347	    0290  14*(B3) 24		 level_shift db	20 dup(179), '$'
3   348	    02A5  ?? 20	24		 space db, 32, '$'
3   349
3   350	    02A8  C3 24			 zero_first_file db 195, '$'
3   351	    02AA  C0 24			 zero_end_file db 192, '$'
3   352
3   353	    02AC  C2 24			 first_file_char db 194, '$'
3   354	    02AE  C3 24			 middle_file_char db 195, '$'
3   355	    02B0  C0 24			 end_file_char db 192, '$'
3   356
2   357					 include parser.asm
3   358					 include macro.asm
4   359					 load macro args
4   360					     irp d,<args>
4   361						 push d
4   362					     endm
4   363					 endm
4   364
4   365					 restore macro args
4   366					     irp d,<args>
4   367						 pop d
4   368					     endm
4   369					 endm
4   370
4   371					 exit macro
4   372					     mov ah, 00h
4   373					     int 21h
4   374					 endm
4   375
4   376					 print macro buf
4   377						 mov ah, 09h
4   378						 mov dx, buf
4   379						 int 21h
4   380					 endm
4   381
4   382					 print_range macro args
4   383					     irp d,<args>
4   384						 print <offset d>
4   385					     endm
4   386					 endm
4   387
4   388					 push_fragment macro buf, length
4   389					     local l1
4   390					     lea di, buf
4   391					     mov cx, length
4   392					     xor bx, bx
4   393					 l1:
4   394					     mov bl, byte ptr [di]
4   395					     push bx
4   396					     inc di
4   397					     dec cx
4   398					     cmp cx, 0
4   399					     jne l1
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 8
tree.ASM



4   400					 endm
4   401
4   402					 pop_fragment macro buf, length
4   403					     local l1
4   404					     lea di, buf
4   405					     mov cx, length
4   406					     add di, cx
4   407					     dec di
4   408					     xor bx, bx
4   409					 l1:
4   410					     pop bx
4   411					     mov byte ptr [di],	bl
4   412					     dec di
4   413					     dec cx
4   414					     cmp cx, 0
4   415					     jne l1
4   416					 endm
4   417
4   418					 set_dta macro dta
4   419					     lea dx, dta
4   420					     xor ax, ax
4   421					     mov ah, 1Ah
4   422					     int 21h
4   423					 endm
4   424
4   425					 break_point macro arg
4   426					     load <arg>
4   427					     xor arg, arg
4   428					     xor arg, arg
4   429					     xor arg, arg
4   430					     xor arg, arg
4   431					     xor arg, arg
4   432					     xor arg, arg
4   433					     xor arg, arg
4   434					     xor arg, arg
4   435					     restore <arg>
4   436					 endm
4   437
4   438					 get_offset macro state
4   439					     xor dx, dx
4   440					     xor ax, ax
4   441					     mov al, state
4   442					     shl ax, 8
4   443					 endm get_offset
4   444
4   445					 to_non_space macro addr
4   446					     local l1, l2
4   447					     mov si, addr
4   448					 l1:
4   449					     mov byte ptr al, [si]
4   450					     cmp al, 20h
4   451					     je	l2
4   452					     cmp al, 0
4   453					     je	l2
4   454					     inc si
4   455					     jmp l1
4   456					 l2:
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 9
tree.ASM



4   457					     inc si
4   458					     mov ax, si
4   459					 endm
4   460
4   461					 set_transition	macro buf, from, to, char
4   462					     load<bx, dx>
4   463					     get_offset	from
4   464
4   465					     add ax, offset buf
4   466					     add ax, char
4   467
4   468					     mov bx, ax
4   469					     mov byte ptr [bx],	to
4   470					     restore<dx, bx>
4   471					 endm
4   472
4   473					 set_transition_length_from_start macro	buf, from, to, start, iterations
4   474					     local l1, end
4   475					     mov bx, start
4   476					     mov cx, iterations
4   477					 l1:
4   478					     cmp cx, 0
4   479					     je	end
4   480
4   481					     load <bx,cx>
4   482					     set_transition buf	from to	bx
4   483					     restore <cx,bx>
4   484
4   485					     inc bx
4   486					     dec cx
4   487					     jmp l1
4   488					 end:
4   489					 endm
4   490
4   491					 set_zero macro	state
4   492					     mov al, 0
4   493					     mov byte ptr [state], al
4   494					 endm
4   495
4   496					 set_transition_for_all	macro buf, from, to
4   497					     set_transition_length_from_start buf, from, to, 0,	255
4   498					 endm
4   499
4   500					 set_transition_for_digits macro buf, from, to
4   501					     set_transition_length_from_start buf, from, to, 30, 10
4   502					 endm
4   503
4   504					 set_transition_for_letters macro buf, from, to
4   505					     set_transition_length_from_start buf, from, to, 97, 26
4   506					     set_transition_length_from_start buf, from, to, 65, 26
4   507					 endm
4   508
4   509					 get_transition	macro buf, from, char
4   510					     load <dx>
4   511					     get_offset	from
4   512					     restore <dx>
4   513
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 10
tree.ASM



4   514					     add ax, offset buf
4   515					     add ax, char
4   516
4   517					     mov bx, ax
4   518					     xor ax, ax
4   519					     mov al, byte ptr [bx]
4   520					 endm
4   521
4   522					 put macro from, to, position
4   523					     xor dx, dx
4   524					     xor bx, bx
4   525
4   526					     mov dx, offset to
4   527					     mov bl, byte ptr [position]
4   528					     add dx, bx
4   529
4   530					     mov bl, byte ptr [from]
4   531					     mov byte ptr [edx], bl
4   532					     inc [position]
4   533					 endm
4   534
4   535					 clear_mes macro mes, lastidx
4   536					     local l1, end
4   537					     mov bx, offset mes
4   538					     mov cl, byte ptr [lastidx]
4   539					     inc cl
4   540					 l1:
4   541					     cmp cl, 0
4   542					     je	end
4   543					     mov byte ptr [bx],	'$'
4   544					     inc bx
4   545					     dec cl
4   546					     jmp l1
4   547					 end:
4   548					     mov bl, 0
4   549					     mov byte ptr [lastidx], bl
4   550					 endm
3   551					 include ffile.asm
4   552	    02B2			 read_from_file:
4   553	    02B2  58			     pop ax
4   554	    02B3  5B			     pop bx ; file handler
4   555	    02B4  59			     pop cx ; read count
4   556	    02B5  5A			     pop dx ; buffer for writing
4   557	    02B6  50			     push ax
4   558
4   559	    02B7  B4 3F			     mov ah, 3fh
4   560	    02B9  CD 21			     int 21h
4   561	    02BB  73 2C			     jnc _read_form_file_end
4   562	    02BD  3D 0005		     cmp ax, 5
4   563	    02C0  74 07			     je	ll5
4   564	    02C2  3D 0006		     cmp ax, 6
4   565	    02C5  74 12			     je	ll6
4   566	    02C7  EB 20			     jmp _read_form_file_end
4   567	    02C9			 ll5:
4   568					     print_range <read_err_5, file_newline>
6   569						 print <offset read_err_5>
7   570	    02C9  B4 09				 mov ah, 09h
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 11
tree.ASM



7   571	    02CB  BA 0408r			 mov dx, offset	read_err_5
7   572	    02CE  CD 21				 int 21h
6   573						 print <offset file_newline>
7   574	    02D0  B4 09				 mov ah, 09h
7   575	    02D2  BA 0425r			 mov dx, offset	file_newline
7   576	    02D5  CD 21				 int 21h
4   577	    02D7  EB 10			     jmp _read_form_file_end
4   578	    02D9			 ll6:
4   579					     print_range <read_err_6, file_newline>
6   580						 print <offset read_err_6>
7   581	    02D9  B4 09				 mov ah, 09h
7   582	    02DB  BA 0416r			 mov dx, offset	read_err_6
7   583	    02DE  CD 21				 int 21h
6   584						 print <offset file_newline>
7   585	    02E0  B4 09				 mov ah, 09h
7   586	    02E2  BA 0425r			 mov dx, offset	file_newline
7   587	    02E5  CD 21				 int 21h
4   588	    02E7  EB 00			     jmp _read_form_file_end
4   589	    02E9			 _read_form_file_end:
4   590	    02E9  C3			     ret
4   591
4   592	    02EA			 close_file:
4   593	    02EA  58			     pop ax
4   594	    02EB  5B			     pop bx ; file handler
4   595	    02EC  50			     push ax
4   596	    02ED  B4 3E			     mov ah, 3eh
4   597	    02EF  CD 21			     int 21h
4   598	    02F1  73 0E			     jnc _close_file_end
4   599					     print_range <close_err_6, file_newline>
6   600						 print <offset close_err_6>
7   601	    02F3  B4 09				 mov ah, 09h
7   602	    02F5  BA 03F9r			 mov dx, offset	close_err_6
7   603	    02F8  CD 21				 int 21h
6   604						 print <offset file_newline>
7   605	    02FA  B4 09				 mov ah, 09h
7   606	    02FC  BA 0425r			 mov dx, offset	file_newline
7   607	    02FF  CD 21				 int 21h
4   608	    0301			 _close_file_end:
4   609	    0301  C3			     ret
4   610
4   611	    0302			 open_read:
4   612	    0302  5B			     pop bx
4   613	    0303  5A			     pop dx ; filename pointer
4   614	    0304  53			     push bx
4   615	    0305  B4 3D			     mov ah, 3Dh
4   616	    0307  B0 00			     mov al, 0
4   617	    0309  CD 21			     int 21h
4   618	    030B  0F 83	0080		     jnc _open_read_end
4   619	    030F  3D 0001		     cmp ax, 1
4   620	    0312  74 1B			     je	l1
4   621	    0314  3D 0002		     cmp ax, 2
4   622	    0317  74 26			     je	l2
4   623	    0319  3D 0003		     cmp ax, 3
4   624	    031C  74 31			     je	l3
4   625	    031E  3D 0004		     cmp ax, 4
4   626	    0321  74 3C			     je	l4
4   627	    0323  3D 0005		     cmp ax, 5
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 12
tree.ASM



4   628	    0326  74 47			     je	l5
4   629	    0328  3D 000C		     cmp ax, 12
4   630	    032B  74 52			     je	l12
4   631	    032D  EB 60			     jmp _open_read_end
4   632	    032F			 l1:
4   633					     print_range <open_err_1, file_newline>
6   634						 print <offset open_err_1>
7   635	    032F  B4 09				 mov ah, 09h
7   636	    0331  BA 0390r			 mov dx, offset	open_err_1
7   637	    0334  CD 21				 int 21h
6   638						 print <offset file_newline>
7   639	    0336  B4 09				 mov ah, 09h
7   640	    0338  BA 0425r			 mov dx, offset	file_newline
7   641	    033B  CD 21				 int 21h
4   642	    033D  EB 50			     jmp _open_read_end
4   643	    033F			 l2:
4   644					     print_range <open_err_2, file_newline>
6   645						 print <offset open_err_2>
7   646	    033F  B4 09				 mov ah, 09h
7   647	    0341  BA 03A8r			 mov dx, offset	open_err_2
7   648	    0344  CD 21				 int 21h
6   649						 print <offset file_newline>
7   650	    0346  B4 09				 mov ah, 09h
7   651	    0348  BA 0425r			 mov dx, offset	file_newline
7   652	    034B  CD 21				 int 21h
4   653	    034D  EB 40			     jmp _open_read_end
4   654	    034F			 l3:
4   655					     print_range <open_err_3, file_newline>
6   656						 print <offset open_err_3>
7   657	    034F  B4 09				 mov ah, 09h
7   658	    0351  BA 03B7r			 mov dx, offset	open_err_3
7   659	    0354  CD 21				 int 21h
6   660						 print <offset file_newline>
7   661	    0356  B4 09				 mov ah, 09h
7   662	    0358  BA 0425r			 mov dx, offset	file_newline
7   663	    035B  CD 21				 int 21h
4   664	    035D  EB 30			     jmp _open_read_end
4   665	    035F			 l4:
4   666					     print_range <open_err_4, file_newline>
6   667						 print <offset open_err_4>
7   668	    035F  B4 09				 mov ah, 09h
7   669	    0361  BA 03C6r			 mov dx, offset	open_err_4
7   670	    0364  CD 21				 int 21h
6   671						 print <offset file_newline>
7   672	    0366  B4 09				 mov ah, 09h
7   673	    0368  BA 0425r			 mov dx, offset	file_newline
7   674	    036B  CD 21				 int 21h
4   675	    036D  EB 20			     jmp _open_read_end
4   676	    036F			 l5:
4   677					     print_range <open_err_5, file_newline>
6   678						 print <offset open_err_5>
7   679	    036F  B4 09				 mov ah, 09h
7   680	    0371  BA 03D9r			 mov dx, offset	open_err_5
7   681	    0374  CD 21				 int 21h
6   682						 print <offset file_newline>
7   683	    0376  B4 09				 mov ah, 09h
7   684	    0378  BA 0425r			 mov dx, offset	file_newline
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 13
tree.ASM



7   685	    037B  CD 21				 int 21h
4   686	    037D  EB 10			     jmp _open_read_end
4   687	    037F			 l12:
4   688					     print_range <open_err_12, file_newline>
6   689						 print <offset open_err_12>
7   690	    037F  B4 09				 mov ah, 09h
7   691	    0381  BA 03E7r			 mov dx, offset	open_err_12
7   692	    0384  CD 21				 int 21h
6   693						 print <offset file_newline>
7   694	    0386  B4 09				 mov ah, 09h
7   695	    0388  BA 0425r			 mov dx, offset	file_newline
7   696	    038B  CD 21				 int 21h
4   697	    038D  EB 00			     jmp _open_read_end
4   698
4   699	    038F			 _open_read_end:
4   700	    038F  C3			     ret
4   701					 ;
4   702					 ; error codes
4   703					 ;
4   704	    0390  66 75	6E 63 74 69 6F+	 open_err_1 db 'function number	invalid$'
    705		  6E 20	6E 75 6D 62 65+
    706		  72 20	69 6E 76 61 6C+
    707		  69 64	24
4   708	    03A8  66 69	6C 65 20 6E 6F+	 open_err_2 db 'file not found$'
    709		  74 20	66 6F 75 6E 64+
    710		  24
4   711	    03B7  70 61	74 68 20 6E 6F+	 open_err_3 db 'path not found$'
    712		  74 20	66 6F 75 6E 64+
    713		  24
4   714	    03C6  6E 6F	20 68 61 6E 64+	 open_err_4 db 'no handle avaiable$'
    715		  6C 65	20 61 76 61 69+
    716		  61 62	6C 65 24
4   717	    03D9  61 63	63 65 73 73 20+	 open_err_5 db 'access denied$'
    718		  64 65	6E 69 65 64 24
4   719	    03E7  6F 70	65 6E 20 6D 6F+	 open_err_12 db	'open mode invalid$'
    720		  64 65	20 69 6E 76 61+
    721		  6C 69	64 24
4   722
4   723	    03F9  69 6E	76 61 6C 69 64+	 close_err_6 db	'invalid handle$'
    724		  20 68	61 6E 64 6C 65+
    725		  24
4   726
4   727	    0408  61 63	63 65 73 73 20+	 read_err_5 db 'access denied$'
    728		  64 65	6E 69 65 64 24
4   729	    0416  69 6E	76 61 6C 69 64+	 read_err_6 db 'invalid	handle$'
    730		  20 68	61 6E 64 6C 65+
    731		  24
4   732					 ;
4   733					 ; constants
4   734					 ;
4   735	    0425  0A 24			 file_newline db 0ah, '$'
3   736
3   737	    0427			 parse_file_from:
3   738	    0427  E8 00C7		     call create_first_transition_table
3   739	    042A  E8 014F		     call create_middle_transition_table
3   740	    042D  E8 01D7		     call create_last_transition_table
3   741	    0430  E8 025F		     call create_level_shift_transition_table
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 14
tree.ASM



3   742	    0433  E8 02E7		     call create_space_transition_table
3   743
3   744	    0436  5B			     pop bx  ; ret address
3   745	    0437  5A			     pop dx  ; filename	pointer
3   746	    0438  53			     push bx
3   747	    0439  52			     push dx
3   748	    043A  E8 FEC5		     call open_read
3   749	    043D  72 0C			     jc	ext
3   750					     load <ax>
5   751	    043F  50				 push ax
3   752	    0440  50			     push ax
3   753	    0441  E8 0008		     call parse_file
3   754					     restore <ax>
5   755	    0444  58				 pop ax
3   756	    0445  50			     push ax
3   757	    0446  E8 FEA1		     call close_file
3   758	    0449  72 00			     jc	ext
3   759	    044B			 ext:
3   760	    044B  C3			     ret
3   761
3   762	    044C			 parse_file:
3   763	    044C  5B			     pop bx
3   764	    044D  58			     pop ax ; file handler
3   765	    044E  53			     push bx
3   766
3   767					     load <ax>
5   768	    044F  50				 push ax
3   769	    0450			 _parse_file_loop:
3   770	    0450  B9 0001		     mov cx, 1
3   771	    0453  BA 081Ar		     lea dx, buf
3   772					     restore <ax>
5   773	    0456  58				 pop ax
3   774					     load <ax>
5   775	    0457  50				 push ax
3   776	    0458  52			     push dx
3   777	    0459  51			     push cx
3   778	    045A  50			     push ax
3   779	    045B  E8 FE54		     call read_from_file
3   780	    045E  0F 82	008D		     jc	_parse_file_ext
3   781	    0462  3D 0000		     cmp ax, 0
3   782	    0465  0F 84	0086		     je	_parse_file_ext
3   783	    0469  33 D2			     xor dx, dx
3   784	    046B  8A 16	081Ar		     mov dl, byte ptr [buf]
3   785	    046F  8A 1E	0819r		     mov bl, byte ptr [state]
3   786					     get_transition transition_table, bl, dx
4   787					     load <dx>
6   788	    0473  52				 push dx
4   789					     get_offset	bl
5   790	    0474  33 D2			     xor dx, dx
5   791	    0476  33 C0			     xor ax, ax
5   792	    0478  8A C3			     mov al, bl
5   793	    047A  C1 E0	08		     shl ax, 8
4   794					     restore <dx>
6   795	    047D  5A				 pop dx
4   796	    047E  05 081Cr		     add ax, offset transition_table
4   797	    0481  03 C2			     add ax, dx
4   798	    0483  8B D8			     mov bx, ax
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 15
tree.ASM



4   799	    0485  33 C0			     xor ax, ax
4   800	    0487  8A 07			     mov al, byte ptr [bx]
3   801	    0489  80 FA	00		     cmp dl, 0
3   802	    048C  75 14			     jne _parse_file_next
3   803	    048E  3C 00			     cmp al, 0
3   804	    0490  75 10			     jne _parse_file_next
3   805					     print_range <parse_error, parse_newline>
5   806						 print <offset parse_error>
6   807	    0492  B4 09				 mov ah, 09h
6   808	    0494  BA 07A8r			 mov dx, offset	parse_error
6   809	    0497  CD 21				 int 21h
5   810						 print <offset parse_newline>
6   811	    0499  B4 09				 mov ah, 09h
6   812	    049B  BA 080Dr			 mov dx, offset	parse_newline
6   813	    049E  CD 21				 int 21h
3   814	    04A0  EB 4D			     jmp _parse_file_ext
3   815	    04A2			 _parse_file_next:
3   816	    04A2  A2 0819r		     mov byte ptr [state], al
3   817	    04A5  3A 06	07C6r		     cmp al, byte ptr [first_terminal]
3   818	    04A9  75 08			     jne _parse_file_next_terminal_1
3   819	    04AB  A0 081Ar		     mov al, byte ptr [buf]
3   820	    04AE  A2 080Fr		     mov byte ptr [fp],	al
3   821					     ; print_range <first_parsed, buf, open_newline>
3   822	    04B1  EB 9D			     jmp _parse_file_loop
3   823	    04B3			 _parse_file_next_terminal_1:
3   824	    04B3  3A 06	07C7r		     cmp al, byte ptr [middle_terminal]
3   825	    04B7  75 08			     jne _parse_file_next_terminal_2
3   826	    04B9  A0 081Ar		     mov al, byte ptr [buf]
3   827	    04BC  A2 0811r		     mov byte ptr [mp],	al
3   828					     ; print_range <middle_parsed, buf,	open_newline>
3   829	    04BF  EB 8F			     jmp _parse_file_loop
3   830	    04C1			 _parse_file_next_terminal_2:
3   831	    04C1  3A 06	07C8r		     cmp al, byte ptr [last_terminal]
3   832	    04C5  75 08			     jne _parse_file_next_terminal_3
3   833	    04C7  A0 081Ar		     mov al, byte ptr [buf]
3   834	    04CA  A2 0813r		     mov byte ptr [lp],	al
3   835					     ; print_range <last_parsed, buf, open_newline>
3   836	    04CD  EB 81			     jmp _parse_file_loop
3   837	    04CF			 _parse_file_next_terminal_3:
3   838	    04CF  3A 06	07C9r		     cmp al, byte ptr [level_shift_terminal]
3   839	    04D3  75 09			     jne _parse_file_next_terminal_4
3   840	    04D5  A0 081Ar		     mov al, byte ptr [buf]
3   841	    04D8  A2 0815r		     mov byte ptr [lhp], al
3   842					     ; print_range <last_parsed, buf, open_newline>
3   843	    04DB  E9 FF72		     jmp _parse_file_loop
3   844	    04DE			 _parse_file_next_terminal_4:
3   845	    04DE  3A 06	07CAr		     cmp al, byte ptr [space_terminal]
3   846	    04E2  0F 85	FF6A		     jne _parse_file_loop
3   847	    04E6  A0 081Ar		     mov al, byte ptr [buf]
3   848	    04E9  A2 0817r		     mov byte ptr [spac], al
3   849					     ; print_range <last_parsed, buf, open_newline>
3   850	    04EC  E9 FF61		     jmp _parse_file_loop
3   851
3   852	    04EF			 _parse_file_ext:
3   853					     restore <bx>
5   854	    04EF  5B				 pop bx
3   855	    04F0  C3			     ret
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 16
tree.ASM



3   856
3   857	    04F1			 create_first_transition_table:
3   858					     set_transition transition_table 0 1 'f'
4   859					     load<bx, dx>
6   860	    04F1  53				 push bx
6   861	    04F2  52				 push dx
4   862					     get_offset	0
5   863	    04F3  33 D2			     xor dx, dx
5   864	    04F5  33 C0			     xor ax, ax
5   865	    04F7  B0 00			     mov al, 0
5   866	    04F9  C1 E0	08		     shl ax, 8
4   867	    04FC  05 081Cr		     add ax, offset transition_table
4   868	    04FF  05 0066		     add ax, 'f'
4   869	    0502  8B D8			     mov bx, ax
4   870	    0504  C6 07	01		     mov byte ptr [bx],	1
4   871					     restore<dx, bx>
6   872	    0507  5A				 pop dx
6   873	    0508  5B				 pop bx
3   874					     set_transition transition_table 1 2 ':'
4   875					     load<bx, dx>
6   876	    0509  53				 push bx
6   877	    050A  52				 push dx
4   878					     get_offset	1
5   879	    050B  33 D2			     xor dx, dx
5   880	    050D  33 C0			     xor ax, ax
5   881	    050F  B0 01			     mov al, 1
5   882	    0511  C1 E0	08		     shl ax, 8
4   883	    0514  05 081Cr		     add ax, offset transition_table
4   884	    0517  05 003A		     add ax, ':'
4   885	    051A  8B D8			     mov bx, ax
4   886	    051C  C6 07	02		     mov byte ptr [bx],	2
4   887					     restore<dx, bx>
6   888	    051F  5A				 pop dx
6   889	    0520  5B				 pop bx
3   890					     set_transition transition_table 2 3 ' '
4   891					     load<bx, dx>
6   892	    0521  53				 push bx
6   893	    0522  52				 push dx
4   894					     get_offset	2
5   895	    0523  33 D2			     xor dx, dx
5   896	    0525  33 C0			     xor ax, ax
5   897	    0527  B0 02			     mov al, 2
5   898	    0529  C1 E0	08		     shl ax, 8
4   899	    052C  05 081Cr		     add ax, offset transition_table
4   900	    052F  05 0020		     add ax, ' '
4   901	    0532  8B D8			     mov bx, ax
4   902	    0534  C6 07	03		     mov byte ptr [bx],	3
4   903					     restore<dx, bx>
6   904	    0537  5A				 pop dx
6   905	    0538  5B				 pop bx
3   906					     set_transition_for_all transition_table 3 4
4   907					     set_transition_length_from_start transition_table,	3, 4, 0, 255
5   908	    0539  BB 0000		     mov bx, 0
5   909	    053C  B9 00FF		     mov cx, 255
5   910	    053F			 ??0000:
5   911	    053F  83 F9	00		     cmp cx, 0
5   912	    0542  74 1F			     je	??0001
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 17
tree.ASM



5   913					     load <bx,cx>
7   914	    0544  53				 push bx
7   915	    0545  51				 push cx
5   916					     set_transition transition_table 3 4 bx
6   917					     load<bx, dx>
8   918	    0546  53				 push bx
8   919	    0547  52				 push dx
6   920					     get_offset	3
7   921	    0548  33 D2			     xor dx, dx
7   922	    054A  33 C0			     xor ax, ax
7   923	    054C  B0 03			     mov al, 3
7   924	    054E  C1 E0	08		     shl ax, 8
6   925	    0551  05 081Cr		     add ax, offset transition_table
6   926	    0554  03 C3			     add ax, bx
6   927	    0556  8B D8			     mov bx, ax
6   928	    0558  C6 07	04		     mov byte ptr [bx],	4
6   929					     restore<dx, bx>
8   930	    055B  5A				 pop dx
8   931	    055C  5B				 pop bx
5   932					     restore <cx,bx>
7   933	    055D  59				 pop cx
7   934	    055E  5B				 pop bx
5   935	    055F  43			     inc bx
5   936	    0560  49			     dec cx
5   937	    0561  EB DC			     jmp ??0000
5   938	    0563			 ??0001:
3   939					     set_transition transition_table 4 0 0ah
4   940					     load<bx, dx>
6   941	    0563  53				 push bx
6   942	    0564  52				 push dx
4   943					     get_offset	4
5   944	    0565  33 D2			     xor dx, dx
5   945	    0567  33 C0			     xor ax, ax
5   946	    0569  B0 04			     mov al, 4
5   947	    056B  C1 E0	08		     shl ax, 8
4   948	    056E  05 081Cr		     add ax, offset transition_table
4   949	    0571  05 000A		     add ax, 0ah
4   950	    0574  8B D8			     mov bx, ax
4   951	    0576  C6 07	00		     mov byte ptr [bx],	0
4   952					     restore<dx, bx>
6   953	    0579  5A				 pop dx
6   954	    057A  5B				 pop bx
3   955	    057B  C3			     ret
3   956
3   957	    057C			 create_middle_transition_table:
3   958					     set_transition transition_table 0 5 'm'
4   959					     load<bx, dx>
6   960	    057C  53				 push bx
6   961	    057D  52				 push dx
4   962					     get_offset	0
5   963	    057E  33 D2			     xor dx, dx
5   964	    0580  33 C0			     xor ax, ax
5   965	    0582  B0 00			     mov al, 0
5   966	    0584  C1 E0	08		     shl ax, 8
4   967	    0587  05 081Cr		     add ax, offset transition_table
4   968	    058A  05 006D		     add ax, 'm'
4   969	    058D  8B D8			     mov bx, ax
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 18
tree.ASM



4   970	    058F  C6 07	05		     mov byte ptr [bx],	5
4   971					     restore<dx, bx>
6   972	    0592  5A				 pop dx
6   973	    0593  5B				 pop bx
3   974					     set_transition transition_table 5 6 ':'
4   975					     load<bx, dx>
6   976	    0594  53				 push bx
6   977	    0595  52				 push dx
4   978					     get_offset	5
5   979	    0596  33 D2			     xor dx, dx
5   980	    0598  33 C0			     xor ax, ax
5   981	    059A  B0 05			     mov al, 5
5   982	    059C  C1 E0	08		     shl ax, 8
4   983	    059F  05 081Cr		     add ax, offset transition_table
4   984	    05A2  05 003A		     add ax, ':'
4   985	    05A5  8B D8			     mov bx, ax
4   986	    05A7  C6 07	06		     mov byte ptr [bx],	6
4   987					     restore<dx, bx>
6   988	    05AA  5A				 pop dx
6   989	    05AB  5B				 pop bx
3   990					     set_transition transition_table 6 7 ' '
4   991					     load<bx, dx>
6   992	    05AC  53				 push bx
6   993	    05AD  52				 push dx
4   994					     get_offset	6
5   995	    05AE  33 D2			     xor dx, dx
5   996	    05B0  33 C0			     xor ax, ax
5   997	    05B2  B0 06			     mov al, 6
5   998	    05B4  C1 E0	08		     shl ax, 8
4   999	    05B7  05 081Cr		     add ax, offset transition_table
4  1000	    05BA  05 0020		     add ax, ' '
4  1001	    05BD  8B D8			     mov bx, ax
4  1002	    05BF  C6 07	07		     mov byte ptr [bx],	7
4  1003					     restore<dx, bx>
6  1004	    05C2  5A				 pop dx
6  1005	    05C3  5B				 pop bx
3  1006					     set_transition_for_all transition_table 7 8
4  1007					     set_transition_length_from_start transition_table,	7, 8, 0, 255
5  1008	    05C4  BB 0000		     mov bx, 0
5  1009	    05C7  B9 00FF		     mov cx, 255
5  1010	    05CA			 ??0002:
5  1011	    05CA  83 F9	00		     cmp cx, 0
5  1012	    05CD  74 1F			     je	??0003
5  1013					     load <bx,cx>
7  1014	    05CF  53				 push bx
7  1015	    05D0  51				 push cx
5  1016					     set_transition transition_table 7 8 bx
6  1017					     load<bx, dx>
8  1018	    05D1  53				 push bx
8  1019	    05D2  52				 push dx
6  1020					     get_offset	7
7  1021	    05D3  33 D2			     xor dx, dx
7  1022	    05D5  33 C0			     xor ax, ax
7  1023	    05D7  B0 07			     mov al, 7
7  1024	    05D9  C1 E0	08		     shl ax, 8
6  1025	    05DC  05 081Cr		     add ax, offset transition_table
6  1026	    05DF  03 C3			     add ax, bx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 19
tree.ASM



6  1027	    05E1  8B D8			     mov bx, ax
6  1028	    05E3  C6 07	08		     mov byte ptr [bx],	8
6  1029					     restore<dx, bx>
8  1030	    05E6  5A				 pop dx
8  1031	    05E7  5B				 pop bx
5  1032					     restore <cx,bx>
7  1033	    05E8  59				 pop cx
7  1034	    05E9  5B				 pop bx
5  1035	    05EA  43			     inc bx
5  1036	    05EB  49			     dec cx
5  1037	    05EC  EB DC			     jmp ??0002
5  1038	    05EE			 ??0003:
3  1039					     set_transition transition_table 8 0 0ah
4  1040					     load<bx, dx>
6  1041	    05EE  53				 push bx
6  1042	    05EF  52				 push dx
4  1043					     get_offset	8
5  1044	    05F0  33 D2			     xor dx, dx
5  1045	    05F2  33 C0			     xor ax, ax
5  1046	    05F4  B0 08			     mov al, 8
5  1047	    05F6  C1 E0	08		     shl ax, 8
4  1048	    05F9  05 081Cr		     add ax, offset transition_table
4  1049	    05FC  05 000A		     add ax, 0ah
4  1050	    05FF  8B D8			     mov bx, ax
4  1051	    0601  C6 07	00		     mov byte ptr [bx],	0
4  1052					     restore<dx, bx>
6  1053	    0604  5A				 pop dx
6  1054	    0605  5B				 pop bx
3  1055	    0606  C3			     ret
3  1056
3  1057	    0607			 create_last_transition_table:
3  1058					     set_transition transition_table 0 9 'l'
4  1059					     load<bx, dx>
6  1060	    0607  53				 push bx
6  1061	    0608  52				 push dx
4  1062					     get_offset	0
5  1063	    0609  33 D2			     xor dx, dx
5  1064	    060B  33 C0			     xor ax, ax
5  1065	    060D  B0 00			     mov al, 0
5  1066	    060F  C1 E0	08		     shl ax, 8
4  1067	    0612  05 081Cr		     add ax, offset transition_table
4  1068	    0615  05 006C		     add ax, 'l'
4  1069	    0618  8B D8			     mov bx, ax
4  1070	    061A  C6 07	09		     mov byte ptr [bx],	9
4  1071					     restore<dx, bx>
6  1072	    061D  5A				 pop dx
6  1073	    061E  5B				 pop bx
3  1074					     set_transition transition_table 9 10 ':'
4  1075					     load<bx, dx>
6  1076	    061F  53				 push bx
6  1077	    0620  52				 push dx
4  1078					     get_offset	9
5  1079	    0621  33 D2			     xor dx, dx
5  1080	    0623  33 C0			     xor ax, ax
5  1081	    0625  B0 09			     mov al, 9
5  1082	    0627  C1 E0	08		     shl ax, 8
4  1083	    062A  05 081Cr		     add ax, offset transition_table
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 20
tree.ASM



4  1084	    062D  05 003A		     add ax, ':'
4  1085	    0630  8B D8			     mov bx, ax
4  1086	    0632  C6 07	0A		     mov byte ptr [bx],	10
4  1087					     restore<dx, bx>
6  1088	    0635  5A				 pop dx
6  1089	    0636  5B				 pop bx
3  1090					     set_transition transition_table 10	11 ' '
4  1091					     load<bx, dx>
6  1092	    0637  53				 push bx
6  1093	    0638  52				 push dx
4  1094					     get_offset	10
5  1095	    0639  33 D2			     xor dx, dx
5  1096	    063B  33 C0			     xor ax, ax
5  1097	    063D  B0 0A			     mov al, 10
5  1098	    063F  C1 E0	08		     shl ax, 8
4  1099	    0642  05 081Cr		     add ax, offset transition_table
4  1100	    0645  05 0020		     add ax, ' '
4  1101	    0648  8B D8			     mov bx, ax
4  1102	    064A  C6 07	0B		     mov byte ptr [bx],	11
4  1103					     restore<dx, bx>
6  1104	    064D  5A				 pop dx
6  1105	    064E  5B				 pop bx
3  1106					     set_transition_for_all transition_table 11	12
4  1107					     set_transition_length_from_start transition_table,	11, 12,	0, 255
5  1108	    064F  BB 0000		     mov bx, 0
5  1109	    0652  B9 00FF		     mov cx, 255
5  1110	    0655			 ??0004:
5  1111	    0655  83 F9	00		     cmp cx, 0
5  1112	    0658  74 1F			     je	??0005
5  1113					     load <bx,cx>
7  1114	    065A  53				 push bx
7  1115	    065B  51				 push cx
5  1116					     set_transition transition_table 11	12 bx
6  1117					     load<bx, dx>
8  1118	    065C  53				 push bx
8  1119	    065D  52				 push dx
6  1120					     get_offset	11
7  1121	    065E  33 D2			     xor dx, dx
7  1122	    0660  33 C0			     xor ax, ax
7  1123	    0662  B0 0B			     mov al, 11
7  1124	    0664  C1 E0	08		     shl ax, 8
6  1125	    0667  05 081Cr		     add ax, offset transition_table
6  1126	    066A  03 C3			     add ax, bx
6  1127	    066C  8B D8			     mov bx, ax
6  1128	    066E  C6 07	0C		     mov byte ptr [bx],	12
6  1129					     restore<dx, bx>
8  1130	    0671  5A				 pop dx
8  1131	    0672  5B				 pop bx
5  1132					     restore <cx,bx>
7  1133	    0673  59				 pop cx
7  1134	    0674  5B				 pop bx
5  1135	    0675  43			     inc bx
5  1136	    0676  49			     dec cx
5  1137	    0677  EB DC			     jmp ??0004
5  1138	    0679			 ??0005:
3  1139					     set_transition transition_table 12	0 0ah
4  1140					     load<bx, dx>
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 21
tree.ASM



6  1141	    0679  53				 push bx
6  1142	    067A  52				 push dx
4  1143					     get_offset	12
5  1144	    067B  33 D2			     xor dx, dx
5  1145	    067D  33 C0			     xor ax, ax
5  1146	    067F  B0 0C			     mov al, 12
5  1147	    0681  C1 E0	08		     shl ax, 8
4  1148	    0684  05 081Cr		     add ax, offset transition_table
4  1149	    0687  05 000A		     add ax, 0ah
4  1150	    068A  8B D8			     mov bx, ax
4  1151	    068C  C6 07	00		     mov byte ptr [bx],	0
4  1152					     restore<dx, bx>
6  1153	    068F  5A				 pop dx
6  1154	    0690  5B				 pop bx
3  1155	    0691  C3			     ret
3  1156
3  1157	    0692			 create_level_shift_transition_table:
3  1158					     set_transition transition_table 9 14 'h'
4  1159					     load<bx, dx>
6  1160	    0692  53				 push bx
6  1161	    0693  52				 push dx
4  1162					     get_offset	9
5  1163	    0694  33 D2			     xor dx, dx
5  1164	    0696  33 C0			     xor ax, ax
5  1165	    0698  B0 09			     mov al, 9
5  1166	    069A  C1 E0	08		     shl ax, 8
4  1167	    069D  05 081Cr		     add ax, offset transition_table
4  1168	    06A0  05 0068		     add ax, 'h'
4  1169	    06A3  8B D8			     mov bx, ax
4  1170	    06A5  C6 07	0E		     mov byte ptr [bx],	14
4  1171					     restore<dx, bx>
6  1172	    06A8  5A				 pop dx
6  1173	    06A9  5B				 pop bx
3  1174					     set_transition transition_table 14	15 ':'
4  1175					     load<bx, dx>
6  1176	    06AA  53				 push bx
6  1177	    06AB  52				 push dx
4  1178					     get_offset	14
5  1179	    06AC  33 D2			     xor dx, dx
5  1180	    06AE  33 C0			     xor ax, ax
5  1181	    06B0  B0 0E			     mov al, 14
5  1182	    06B2  C1 E0	08		     shl ax, 8
4  1183	    06B5  05 081Cr		     add ax, offset transition_table
4  1184	    06B8  05 003A		     add ax, ':'
4  1185	    06BB  8B D8			     mov bx, ax
4  1186	    06BD  C6 07	0F		     mov byte ptr [bx],	15
4  1187					     restore<dx, bx>
6  1188	    06C0  5A				 pop dx
6  1189	    06C1  5B				 pop bx
3  1190					     set_transition transition_table 15	16 ' '
4  1191					     load<bx, dx>
6  1192	    06C2  53				 push bx
6  1193	    06C3  52				 push dx
4  1194					     get_offset	15
5  1195	    06C4  33 D2			     xor dx, dx
5  1196	    06C6  33 C0			     xor ax, ax
5  1197	    06C8  B0 0F			     mov al, 15
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 22
tree.ASM



5  1198	    06CA  C1 E0	08		     shl ax, 8
4  1199	    06CD  05 081Cr		     add ax, offset transition_table
4  1200	    06D0  05 0020		     add ax, ' '
4  1201	    06D3  8B D8			     mov bx, ax
4  1202	    06D5  C6 07	10		     mov byte ptr [bx],	16
4  1203					     restore<dx, bx>
6  1204	    06D8  5A				 pop dx
6  1205	    06D9  5B				 pop bx
3  1206					     set_transition_for_all transition_table 16	17
4  1207					     set_transition_length_from_start transition_table,	16, 17,	0, 255
5  1208	    06DA  BB 0000		     mov bx, 0
5  1209	    06DD  B9 00FF		     mov cx, 255
5  1210	    06E0			 ??0006:
5  1211	    06E0  83 F9	00		     cmp cx, 0
5  1212	    06E3  74 1F			     je	??0007
5  1213					     load <bx,cx>
7  1214	    06E5  53				 push bx
7  1215	    06E6  51				 push cx
5  1216					     set_transition transition_table 16	17 bx
6  1217					     load<bx, dx>
8  1218	    06E7  53				 push bx
8  1219	    06E8  52				 push dx
6  1220					     get_offset	16
7  1221	    06E9  33 D2			     xor dx, dx
7  1222	    06EB  33 C0			     xor ax, ax
7  1223	    06ED  B0 10			     mov al, 16
7  1224	    06EF  C1 E0	08		     shl ax, 8
6  1225	    06F2  05 081Cr		     add ax, offset transition_table
6  1226	    06F5  03 C3			     add ax, bx
6  1227	    06F7  8B D8			     mov bx, ax
6  1228	    06F9  C6 07	11		     mov byte ptr [bx],	17
6  1229					     restore<dx, bx>
8  1230	    06FC  5A				 pop dx
8  1231	    06FD  5B				 pop bx
5  1232					     restore <cx,bx>
7  1233	    06FE  59				 pop cx
7  1234	    06FF  5B				 pop bx
5  1235	    0700  43			     inc bx
5  1236	    0701  49			     dec cx
5  1237	    0702  EB DC			     jmp ??0006
5  1238	    0704			 ??0007:
3  1239					     set_transition transition_table 17	0 0ah
4  1240					     load<bx, dx>
6  1241	    0704  53				 push bx
6  1242	    0705  52				 push dx
4  1243					     get_offset	17
5  1244	    0706  33 D2			     xor dx, dx
5  1245	    0708  33 C0			     xor ax, ax
5  1246	    070A  B0 11			     mov al, 17
5  1247	    070C  C1 E0	08		     shl ax, 8
4  1248	    070F  05 081Cr		     add ax, offset transition_table
4  1249	    0712  05 000A		     add ax, 0ah
4  1250	    0715  8B D8			     mov bx, ax
4  1251	    0717  C6 07	00		     mov byte ptr [bx],	0
4  1252					     restore<dx, bx>
6  1253	    071A  5A				 pop dx
6  1254	    071B  5B				 pop bx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 23
tree.ASM



3  1255	    071C  C3			     ret
3  1256
3  1257	    071D			 create_space_transition_table:
3  1258					     set_transition transition_table 0 18 's'
4  1259					     load<bx, dx>
6  1260	    071D  53				 push bx
6  1261	    071E  52				 push dx
4  1262					     get_offset	0
5  1263	    071F  33 D2			     xor dx, dx
5  1264	    0721  33 C0			     xor ax, ax
5  1265	    0723  B0 00			     mov al, 0
5  1266	    0725  C1 E0	08		     shl ax, 8
4  1267	    0728  05 081Cr		     add ax, offset transition_table
4  1268	    072B  05 0073		     add ax, 's'
4  1269	    072E  8B D8			     mov bx, ax
4  1270	    0730  C6 07	12		     mov byte ptr [bx],	18
4  1271					     restore<dx, bx>
6  1272	    0733  5A				 pop dx
6  1273	    0734  5B				 pop bx
3  1274					     set_transition transition_table 18	19 ':'
4  1275					     load<bx, dx>
6  1276	    0735  53				 push bx
6  1277	    0736  52				 push dx
4  1278					     get_offset	18
5  1279	    0737  33 D2			     xor dx, dx
5  1280	    0739  33 C0			     xor ax, ax
5  1281	    073B  B0 12			     mov al, 18
5  1282	    073D  C1 E0	08		     shl ax, 8
4  1283	    0740  05 081Cr		     add ax, offset transition_table
4  1284	    0743  05 003A		     add ax, ':'
4  1285	    0746  8B D8			     mov bx, ax
4  1286	    0748  C6 07	13		     mov byte ptr [bx],	19
4  1287					     restore<dx, bx>
6  1288	    074B  5A				 pop dx
6  1289	    074C  5B				 pop bx
3  1290					     set_transition transition_table 19	20 ' '
4  1291					     load<bx, dx>
6  1292	    074D  53				 push bx
6  1293	    074E  52				 push dx
4  1294					     get_offset	19
5  1295	    074F  33 D2			     xor dx, dx
5  1296	    0751  33 C0			     xor ax, ax
5  1297	    0753  B0 13			     mov al, 19
5  1298	    0755  C1 E0	08		     shl ax, 8
4  1299	    0758  05 081Cr		     add ax, offset transition_table
4  1300	    075B  05 0020		     add ax, ' '
4  1301	    075E  8B D8			     mov bx, ax
4  1302	    0760  C6 07	14		     mov byte ptr [bx],	20
4  1303					     restore<dx, bx>
6  1304	    0763  5A				 pop dx
6  1305	    0764  5B				 pop bx
3  1306					     set_transition_for_all transition_table 20	21
4  1307					     set_transition_length_from_start transition_table,	20, 21,	0, 255
5  1308	    0765  BB 0000		     mov bx, 0
5  1309	    0768  B9 00FF		     mov cx, 255
5  1310	    076B			 ??0008:
5  1311	    076B  83 F9	00		     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 24
tree.ASM



5  1312	    076E  74 1F			     je	??0009
5  1313					     load <bx,cx>
7  1314	    0770  53				 push bx
7  1315	    0771  51				 push cx
5  1316					     set_transition transition_table 20	21 bx
6  1317					     load<bx, dx>
8  1318	    0772  53				 push bx
8  1319	    0773  52				 push dx
6  1320					     get_offset	20
7  1321	    0774  33 D2			     xor dx, dx
7  1322	    0776  33 C0			     xor ax, ax
7  1323	    0778  B0 14			     mov al, 20
7  1324	    077A  C1 E0	08		     shl ax, 8
6  1325	    077D  05 081Cr		     add ax, offset transition_table
6  1326	    0780  03 C3			     add ax, bx
6  1327	    0782  8B D8			     mov bx, ax
6  1328	    0784  C6 07	15		     mov byte ptr [bx],	21
6  1329					     restore<dx, bx>
8  1330	    0787  5A				 pop dx
8  1331	    0788  5B				 pop bx
5  1332					     restore <cx,bx>
7  1333	    0789  59				 pop cx
7  1334	    078A  5B				 pop bx
5  1335	    078B  43			     inc bx
5  1336	    078C  49			     dec cx
5  1337	    078D  EB DC			     jmp ??0008
5  1338	    078F			 ??0009:
3  1339					     set_transition transition_table 21	0 0ah
4  1340					     load<bx, dx>
6  1341	    078F  53				 push bx
6  1342	    0790  52				 push dx
4  1343					     get_offset	21
5  1344	    0791  33 D2			     xor dx, dx
5  1345	    0793  33 C0			     xor ax, ax
5  1346	    0795  B0 15			     mov al, 21
5  1347	    0797  C1 E0	08		     shl ax, 8
4  1348	    079A  05 081Cr		     add ax, offset transition_table
4  1349	    079D  05 000A		     add ax, 0ah
4  1350	    07A0  8B D8			     mov bx, ax
4  1351	    07A2  C6 07	00		     mov byte ptr [bx],	0
4  1352					     restore<dx, bx>
6  1353	    07A5  5A				 pop dx
6  1354	    07A6  5B				 pop bx
3  1355	    07A7  C3			     ret
3  1356
3  1357
3  1358
3  1359
3  1360					 ;
3  1361					 ; errors
3  1362					 ;
3  1363	    07A8  70 61	72 73 65 20 65+	 parse_error db	'parse error: incorrect	format$'
   1364		  72 72	6F 72 3A 20 69+
   1365		  6E 63	6F 72 72 65 63+
   1366		  74 20	66 6F 72 6D 61+
   1367		  74 24
3  1368
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 25
tree.ASM



3  1369					 ;
3  1370					 ; terminal states
3  1371					 ;
3  1372	    07C6  04			 first_terminal	db 4
3  1373	    07C7  08			 middle_terminal db 8
3  1374	    07C8  0C			 last_terminal db 12
3  1375	    07C9  11			 level_shift_terminal db 17
3  1376	    07CA  15			 space_terminal	db 21
3  1377
3  1378					 ;
3  1379					 ; info	messages
3  1380					 ;
3  1381	    07CB  66 69	72 73 74 20 70+	 first_parsed db 'first	parsed:	$'
   1382		  61 72	73 65 64 3A 20+
   1383		  24
3  1384	    07DA  6D 69	64 64 6C 65 20+	 middle_parsed db 'middle parsed: $'
   1385		  70 61	72 73 65 64 3A+
   1386		  20 24
3  1387	    07EA  6C 61	73 74 20 70 61+	 last_parsed db	'last parsed: $'
   1388		  72 73	65 64 3A 20 24
3  1389	    07F8  6C 65	76 65 6C 20 73+	 level_shift_parsed db 'level shift parsed: $'
   1390		  68 69	66 74 20 70 61+
   1391		  72 73	65 64 3A 20 24
3  1392	    080D  0A 24			 parse_newline db 0ah, '$'
3  1393
3  1394					 ;
3  1395					 ; parsed symbols
3  1396					 ;
3  1397	    080F  C2 24			 fp db 194, '$'
3  1398	    0811  C3 24			 mp db 195, '$'
3  1399	    0813  C0 24			 lp db 192, '$'
3  1400	    0815  B3 24			 lhp db	179, '$'
3  1401	    0817  20 24			 spac db 32, '$'
3  1402
3  1403	    0819  00			 state db 0
3  1404	    081A  24 24			 buf db	'$$'
3  1405	    081C  15EA*(00)		 transition_table db 5610 dup(0)
2  1406
2  1407	    1E06			 count_no_space_no_zero_letters:
2  1408	    1E06  5B			     pop bx ; ret address
2  1409	    1E07  5E			     pop si ; string offset
2  1410	    1E08  59			     pop cx ; string length
2  1411	    1E09  53			     push bx ; ret address
2  1412	    1E0A  B8 0000		     mov ax, 0
2  1413	    1E0D			 _count_non_space_symbols_loop:
2  1414	    1E0D  80 3C	20		     cmp byte ptr [si],	20h
2  1415	    1E10  74 12			     je	_count_non_space_symbols_end
2  1416	    1E12  80 3C	0D		     cmp byte ptr [si],	0Dh
2  1417	    1E15  74 0D			     je	_count_non_space_symbols_end
2  1418	    1E17  80 3C	00		     cmp byte ptr [si],	00h
2  1419	    1E1A  74 08			     je	_count_non_space_symbols_end
2  1420	    1E1C  3B C1			     cmp ax, cx
2  1421	    1E1E  74 04			     je	_count_non_space_symbols_end
2  1422	    1E20  40			     inc ax
2  1423	    1E21  46			     inc si
2  1424	    1E22  EB E9			     jmp _count_non_space_symbols_loop
2  1425	    1E24			 _count_non_space_symbols_end:
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 26
tree.ASM



2  1426	    1E24  C3			     ret
2  1427
2  1428	    1E25			 parse_command_line:
2  1429					     ;
2  1430					     ; prepare root folder
2  1431					     ;
2  1432	    1E25  BE 0082		     mov si, 82h
2  1433	    1E28  B9 0040		     mov cx, 64
2  1434	    1E2B  51			     push cx
2  1435	    1E2C  56			     push si
2  1436	    1E2D  E8 FFD6		     call count_no_space_no_zero_letters
2  1437	    1E30  8B C8			     mov cx, ax
2  1438	    1E32  BE 0082		     mov si, 82h
2  1439	    1E35  BF 2578r		     mov di, offset root_folder
2  1440	    1E38  F3> A4		     rep movsb
2  1441
2  1442	    1E3A			 parse_args:
2  1443	    1E3A  46			     inc si
2  1444	    1E3B  46			     inc si
2  1445	    1E3C  80 3C	64		     cmp byte ptr [si],	'd'
2  1446	    1E3F  74 16			     je	parse_d
2  1447	    1E41  80 3C	66		     cmp byte ptr [si],	'f'
2  1448	    1E44  74 1F			     je	parse_f
2  1449	    1E46  80 3C	73		     cmp byte ptr [si],	's'
2  1450	    1E49  74 26			     je	parse_s
2  1451	    1E4B  80 3C	74		     cmp byte ptr [si],	't'
2  1452	    1E4E  74 2A			     je	parse_t
2  1453	    1E50  80 3C	6F		     cmp byte ptr [si],	'o'
2  1454	    1E53  74 2E			     je	parse_o
2  1455	    1E55  EB 71			     jmp parse_end
2  1456	    1E57			 parse_d:
2  1457					     ;
2  1458					     ; parse_deep level
2  1459					     ;
2  1460	    1E57  46			     inc si
2  1461	    1E58  46			     inc si
2  1462	    1E59  8A 1C			     mov bl, byte ptr [si]
2  1463	    1E5B  80 EB	30		     sub bl, 30h	     ; to number
2  1464	    1E5E  88 1E	1F0Br		     mov byte ptr [deep_level],	bl
2  1465	    1E62  46			     inc si
2  1466	    1E63  EB D5			     jmp parse_args
2  1467	    1E65			 parse_f:
2  1468					     ;
2  1469					     ; parse file extension
2  1470					     ;
2  1471	    1E65  46			     inc si
2  1472	    1E66  46			     inc si
2  1473	    1E67  BF 1F0Dr		     mov di, offset file_ext
2  1474	    1E6A  B9 0004		     mov cx, 4
2  1475	    1E6D  F3> A4		     rep movsb
2  1476	    1E6F  EB C9			     jmp parse_args
2  1477	    1E71			 parse_s:
2  1478					     ;
2  1479					     ; print storage
2  1480					     ;
2  1481	    1E71  B3 01			     mov bl, 1
2  1482	    1E73  88 1E	1F09r		     mov byte ptr [use_storage], bl
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 27
tree.ASM



2  1483	    1E77  46			     inc si
2  1484	    1E78  EB C0			     jmp parse_args
2  1485	    1E7A			 parse_t:
2  1486					     ;
2  1487					     ; print time
2  1488					     ;
2  1489	    1E7A  B3 01			     mov bl, 1
2  1490	    1E7C  88 1E	1F0Ar		     mov byte ptr [use_time], bl
2  1491	    1E80  46			     inc si
2  1492	    1E81  EB B7			     jmp parse_args
2  1493	    1E83			 parse_o:
2  1494					     ;
2  1495					     ; use file	for specifying pseudographic
2  1496					     ;
2  1497	    1E83  46			     inc si
2  1498	    1E84  46			     inc si
2  1499					     load <si>
4  1500	    1E85  56				 push si
2  1501	    1E86  B9 0040		     mov cx, 64
2  1502	    1E89  51			     push cx
2  1503	    1E8A  56			     push si
2  1504	    1E8B  E8 FF78		     call count_no_space_no_zero_letters
2  1505					     restore <si>
4  1506	    1E8E  5E				 pop si
2  1507	    1E8F  8B C8			     mov cx, ax
2  1508	    1E91  BF 1EC9r		     lea di, filename
2  1509	    1E94  FC			     cld
2  1510	    1E95  F3> A4		     rep movsb
2  1511
2  1512	    1E97  BA 1EC9r		     lea dx, filename
2  1513	    1E9A  52			     push dx
2  1514	    1E9B  E8 E589		     call parse_file_from
2  1515	    1E9E  A0 080Fr		     mov al, byte ptr [fp]
2  1516	    1EA1  A2 02ACr		     mov byte ptr [first_file_char], al
2  1517	    1EA4  A0 0811r		     mov al, byte ptr [mp]
2  1518	    1EA7  A2 02AEr		     mov byte ptr [middle_file_char], al
2  1519	    1EAA  A0 0813r		     mov al, byte ptr [lp]
2  1520	    1EAD  A2 02B0r		     mov byte ptr [end_file_char], al
2  1521	    1EB0  A0 0815r		     mov al, byte ptr [lhp]
2  1522	    1EB3  A2 028Er		     mov byte ptr [old_level_shift], al
2  1523
2  1524	    1EB6  BF 0290r		     lea di, level_shift
2  1525	    1EB9  B9 000A		     mov cx, 10
2  1526	    1EBC  FC			     cld
2  1527	    1EBD  F3> AA		     rep stosb
2  1528
2  1529	    1EBF  A0 0817r		     mov al, byte ptr [spac]
2  1530	    1EC2  A2 02A5r		     mov byte ptr [space], al
2  1531
2  1532	    1EC5  E9 FF72		     jmp parse_args
2  1533
2  1534
2  1535	    1EC8			 parse_end:
2  1536	    1EC8  C3			     ret
2  1537
2  1538					 ;
2  1539					 ;   parse arguments
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 28
tree.ASM



2  1540					 ;
2  1541	    1EC9  40*(00)		 filename db 64	dup(0)
2  1542	    1F09  00			 use_storage db	0
2  1543	    1F0A  00			 use_time db 0
2  1544	    1F0B  01			 deep_level db 1
2  1545	    1F0C  2A			 file_mask db '*'
2  1546	    1F0D  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
2  1547	    1F12  2A 00			 folder_mask db	'*', 00h
2  1548	    1F14  2A 2E	2A 00		 all_files db '*.*', 00h
1  1549					 include tmacro.asm
2  1550					 load macro args
2  1551					     irp d,<args>
2  1552						 push d
2  1553					     endm
2  1554					 endm
2  1555
2  1556					 restore macro args
2  1557					     irp d,<args>
2  1558						 pop d
2  1559					     endm
2  1560					 endm
2  1561
2  1562					 exit macro
2  1563					     mov ah, 00h
2  1564					     int 21h
2  1565					 endm
2  1566
2  1567					 print macro buf
2  1568						 mov ah, 09h
2  1569						 mov dx, buf
2  1570						 int 21h
2  1571					 endm
2  1572
2  1573					 print_range macro args
2  1574					     irp d,<args>
2  1575						 print <offset d>
2  1576					     endm
2  1577					 endm
2  1578
2  1579					 push_fragment macro buf, length
2  1580					     local l1
2  1581					     lea di, buf
2  1582					     mov cx, length
2  1583					     xor bx, bx
2  1584					 l1:
2  1585					     mov bl, byte ptr [di]
2  1586					     push bx
2  1587					     inc di
2  1588					     dec cx
2  1589					     cmp cx, 0
2  1590					     jne l1
2  1591					 endm
2  1592
2  1593					 pop_fragment macro buf, length
2  1594					     local l1
2  1595					     lea di, buf
2  1596					     mov cx, length
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 29
tree.ASM



2  1597					     add di, cx
2  1598					     dec di
2  1599					     xor bx, bx
2  1600					 l1:
2  1601					     pop bx
2  1602					     mov byte ptr [di],	bl
2  1603					     dec di
2  1604					     dec cx
2  1605					     cmp cx, 0
2  1606					     jne l1
2  1607					 endm
2  1608
2  1609					 set_dta macro dta
2  1610					     lea dx, dta
2  1611					     xor ax, ax
2  1612					     mov ah, 1Ah
2  1613					     int 21h
2  1614					 endm
2  1615
2  1616					 break_point macro arg
2  1617					     load <arg>
2  1618					     xor arg, arg
2  1619					     xor arg, arg
2  1620					     xor arg, arg
2  1621					     xor arg, arg
2  1622					     xor arg, arg
2  1623					     xor arg, arg
2  1624					     xor arg, arg
2  1625					     xor arg, arg
2  1626					     restore <arg>
2  1627					 endm
1  1628					 include time.asm
2  1629					 include bmacro.asm
3  1630					 load macro args
3  1631					     irp d,<args>
3  1632						 push d
3  1633					     endm
3  1634					 endm
3  1635
3  1636					 restore macro args
3  1637					     irp d,<args>
3  1638						 pop d
3  1639					     endm
3  1640					 endm
3  1641
3  1642					 exit macro
3  1643					     mov ah, 00h
3  1644					     int 21h
3  1645					 endm
3  1646
3  1647					 print macro buf
3  1648						 mov ah, 09h
3  1649						 mov dx, buf
3  1650						 int 21h
3  1651					 endm
3  1652
3  1653					 print_range macro args
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 30
tree.ASM



3  1654					     irp d,<args>
3  1655						 print <offset d>
3  1656					     endm
3  1657					 endm
3  1658
3  1659					 break_point macro arg
3  1660					     load <arg>
3  1661					     xor arg, arg
3  1662					     xor arg, arg
3  1663					     xor arg, arg
3  1664					     xor arg, arg
3  1665					     xor arg, arg
3  1666					     xor arg, arg
3  1667					     xor arg, arg
3  1668					     xor arg, arg
3  1669					     restore <arg>
3  1670					 endm
3  1671
3  1672					 parse_byte_to_str macro from, to, length
3  1673					     mov ax, length
3  1674					     push ax
3  1675					     mov ax, to
3  1676					     push ax
3  1677					     xor ax, ax
3  1678					     mov al, from
3  1679					     push ax
3  1680					     call store_iint_to_string
3  1681					 endm
3  1682
3  1683					 parse_word_to_str macro from, to, length
3  1684					     mov ax, length
3  1685					     push ax
3  1686					     mov ax, to
3  1687					     push ax
3  1688					     xor ax, ax
3  1689					     mov ax, from
3  1690					     push ax
3  1691					     call store_iint_to_string
3  1692					 endm
2  1693					 include pnum.asm
3  1694					 include fdwcalc.asm
4  1695	    1F18			 set_dword:
4  1696	    1F18  59			     pop cx ; ret address
4  1697	    1F19  58			     pop ax ; word ptr [l16]
4  1698	    1F1A  5A			     pop dx ; word ptr [h16]
4  1699
4  1700	    1F1B  51			     push cx
4  1701	    1F1C  A3 1F93r		     mov word ptr [doubleword],	ax
4  1702	    1F1F  89 16	1F95r		     mov word ptr [doubleword +	2], dx
4  1703
4  1704	    1F23  C3			     ret
4  1705
4  1706	    1F24			 get_dword:
4  1707	    1F24  59			     pop cx ; ret address
4  1708
4  1709	    1F25  A1 1F93r		     mov ax, word ptr [doubleword]
4  1710	    1F28  8B 16	1F95r		     mov dx, word ptr [doubleword + 2]
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 31
tree.ASM



4  1711
4  1712	    1F2C  52			     push dx
4  1713	    1F2D  50			     push ax
4  1714	    1F2E  51			     push cx
4  1715
4  1716	    1F2F  C3			     ret
4  1717
4  1718	    1F30			 get_dword_addr:
4  1719	    1F30  5B			     pop bx
4  1720	    1F31  B8 1F93r		     lea ax, doubleword
4  1721	    1F34  53			     push bx
4  1722
4  1723	    1F35  C3			     ret
4  1724
4  1725	    1F36			 set_dword_from:
4  1726	    1F36  5A			     pop dx
4  1727	    1F37  5B			     pop bx ; address from
4  1728	    1F38  52			     push dx
4  1729	    1F39  8B 57	02		     mov dx, word ptr [bx + 2]
4  1730	    1F3C  52			     push dx
4  1731	    1F3D  8B 17			     mov dx, word ptr [bx]
4  1732	    1F3F  52			     push dx
4  1733	    1F40  E8 FFD5		     call set_dword
4  1734	    1F43  C3			     ret
4  1735
4  1736	    1F44			 dadd_from:
4  1737	    1F44  5A			     pop dx
4  1738	    1F45  5B			     pop bx ; address from
4  1739	    1F46  52			     push dx
4  1740	    1F47  8B 47	02		     mov ax, word ptr [bx + 2]
4  1741	    1F4A  50			     push ax
4  1742	    1F4B  8B 07			     mov ax, word ptr [bx]
4  1743	    1F4D  50			     push ax
4  1744	    1F4E  E8 0001		     call dadd
4  1745	    1F51  C3			     ret
4  1746
4  1747	    1F52			 dadd:
4  1748	    1F52  5E			     pop si
4  1749					     ;
4  1750					     ; on stack	lay pair (l,h) of one dword, then we load second
4  1751					     ;
4  1752	    1F53  E8 FFCE		     call get_dword
4  1753
4  1754	    1F56  58			     pop ax ; our low
4  1755	    1F57  5B			     pop bx ; our hight
4  1756	    1F58  59			     pop cx ; their low
4  1757	    1F59  5A			     pop dx ; their hight
4  1758
4  1759	    1F5A  13 C1			     adc ax, cx
4  1760	    1F5C  72 02			     jc	_dadd_add_one
4  1761	    1F5E  EB 01			     jmp _dadd_no_add_one
4  1762	    1F60			 _dadd_add_one:
4  1763	    1F60  43			     inc bx
4  1764	    1F61			 _dadd_no_add_one:
4  1765	    1F61  03 DA			     add bx, dx
4  1766	    1F63  53			     push bx
4  1767	    1F64  50			     push ax
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 32
tree.ASM



4  1768	    1F65  E8 FFB0		     call set_dword
4  1769	    1F68  56			     push si
4  1770	    1F69  C3			     ret
4  1771
4  1772	    1F6A			 ddiv10:
4  1773	    1F6A  E8 FFB7		     call get_dword
4  1774	    1F6D  E8 0008		     call _ddiv10
4  1775	    1F70  89 16	1F91r		     mov word ptr [remainder], dx
4  1776	    1F74  E8 FFA1		     call set_dword
4  1777
4  1778	    1F77  C3			     ret
4  1779
4  1780	    1F78			 _ddiv10:
4  1781	    1F78  59			     pop cx ; ret address
4  1782	    1F79  58			     pop ax ; word ptr [l16]
4  1783	    1F7A  5A			     pop dx ; word ptr [h16]
4  1784
4  1785					     load <ax>
6  1786	    1F7B  50				 push ax
4  1787	    1F7C  8B C2			     mov ax, dx
4  1788	    1F7E  33 D2			     xor dx, dx
4  1789	    1F80  BB 000A		     mov bx, 10
4  1790	    1F83  F7 F3			     div bx
4  1791	    1F85  8B D8			     mov bx, ax	; word ptr [h16]
4  1792					     restore <ax>
6  1793	    1F87  58				 pop ax
4  1794	    1F88  53			     push bx
4  1795
4  1796	    1F89  BB 000A		     mov bx, 10
4  1797	    1F8C  F7 F3			     div bx
4  1798	    1F8E  50			     push ax ; word ptr	[l15]
4  1799
4  1800	    1F8F  51			     push cx
4  1801	    1F90  C3			     ret
4  1802
4  1803	    1F91  0000			 remainder dw 0
4  1804	    1F93  00000000		 doubleword dd 0
3  1805
3  1806	    1F97			 store_iint_to_string:
3  1807	    1F97  5B			     pop bx
3  1808	    1F98  58			     pop ax ; dword integer address
3  1809	    1F99  5E			     pop si ; memory for storing integer
3  1810	    1F9A  5F			     pop di ; integer min length
3  1811	    1F9B  53			     push bx
3  1812
3  1813	    1F9C  B9 0000		     mov cx, 0
3  1814	    1F9F  BB 000A		     mov bx, 10
3  1815	    1FA2			 _store_iint_to_string_direct:
3  1816	    1FA2  3D 0000		     cmp ax, 0
3  1817	    1FA5  74 08			     je	_store_iint_to_string_zero_padding_start
3  1818
3  1819	    1FA7  33 D2			     xor dx, dx
3  1820	    1FA9  F7 F3			     div bx
3  1821	    1FAB  52			     push dx
3  1822	    1FAC  41			     inc cx
3  1823
3  1824	    1FAD  EB F3			     jmp _store_iint_to_string_direct
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 33
tree.ASM



3  1825
3  1826	    1FAF			 _store_iint_to_string_zero_padding_start:
3  1827	    1FAF  2B F9			     sub di, cx
3  1828	    1FB1			 _store_iint_to_string_zero_padding_loop:
3  1829	    1FB1  83 FF	00		     cmp di, 0
3  1830	    1FB4  7E 08			     jle _store_iint_to_string_zero_padding_end
3  1831	    1FB6  BB 0000		     mov bx, 0
3  1832	    1FB9  53			     push bx
3  1833	    1FBA  4F			     dec di
3  1834	    1FBB  41			     inc cx
3  1835	    1FBC  EB F3			     jmp _store_iint_to_string_zero_padding_loop
3  1836	    1FBE			 _store_iint_to_string_zero_padding_end:
3  1837	    1FBE			 _store_iint_to_string_inverse:
3  1838					     load <si>
5  1839	    1FBE  56				 push si
3  1840	    1FBF  03 F1			     add si, cx
3  1841	    1FC1  C6 04	24		     mov byte ptr [si],	'$'
3  1842					     restore <si>
5  1843	    1FC4  5E				 pop si
3  1844	    1FC5			 _store_iint_to_string_inverse_loop:
3  1845	    1FC5  83 F9	00		     cmp cx, 0
3  1846	    1FC8  74 0A			     je	_store_iint_to_string_end
3  1847
3  1848	    1FCA  5A			     pop dx
3  1849	    1FCB  80 C2	30		     add dl, 30h
3  1850	    1FCE  88 14			     mov byte ptr [si],	dl
3  1851	    1FD0  46			     inc si
3  1852	    1FD1  49			     dec cx
3  1853
3  1854	    1FD2  EB F1			     jmp _store_iint_to_string_inverse_loop
3  1855
3  1856	    1FD4			 _store_iint_to_string_end:
3  1857	    1FD4  C3			     ret
3  1858
3  1859
3  1860	    1FD5			 store_dword_to_string:
3  1861	    1FD5  5B			     pop bx
3  1862	    1FD6  58			     pop ax ; dword integer address
3  1863	    1FD7  5E			     pop si ; memory for storing integer
3  1864	    1FD8  5F			     pop di ; integer min length
3  1865	    1FD9  53			     push bx
3  1866
3  1867	    1FDA  50			     push ax
3  1868	    1FDB  E8 FF58		     call set_dword_from
3  1869
3  1870	    1FDE  B9 0000		     mov cx, 0
3  1871	    1FE1			 _store_dword_to_string_direct:
3  1872					     load <cx>
5  1873	    1FE1  51				 push cx
3  1874	    1FE2  E8 FF3F		     call get_dword
3  1875	    1FE5  58			     pop ax
3  1876	    1FE6  5B			     pop bx
3  1877					     restore <cx>
5  1878	    1FE7  59				 pop cx
3  1879	    1FE8  3D 0000		     cmp ax, 0
3  1880	    1FEB  75 07			     jne _store_dword_to_string_direct_next_loop
3  1881	    1FED  83 FB	00		     cmp bx, 0
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 34
tree.ASM



3  1882	    1FF0  75 02			     jne _store_dword_to_string_direct_next_loop
3  1883	    1FF2  EB 11			     jmp _store_dword_to_string_zero_padding_start
3  1884
3  1885	    1FF4			 _store_dword_to_string_direct_next_loop:
3  1886					     load <cx, si, di>
5  1887	    1FF4  51				 push cx
5  1888	    1FF5  56				 push si
5  1889	    1FF6  57				 push di
3  1890	    1FF7  E8 FF70		     call ddiv10
3  1891					     restore <di, si, cx>
5  1892	    1FFA  5F				 pop di
5  1893	    1FFB  5E				 pop si
5  1894	    1FFC  59				 pop cx
3  1895	    1FFD  8B 16	1F91r		     mov dx, word ptr [remainder]
3  1896	    2001  52			     push dx
3  1897	    2002  41			     inc cx
3  1898
3  1899	    2003  EB DC			     jmp _store_dword_to_string_direct
3  1900
3  1901	    2005			 _store_dword_to_string_zero_padding_start:
3  1902	    2005  2B F9			     sub di, cx
3  1903	    2007			 _store_dword_to_string_zero_padding_loop:
3  1904	    2007  83 FF	00		     cmp di, 0
3  1905	    200A  7E 08			     jle _store_dword_to_string_zero_padding_end
3  1906	    200C  BB 0000		     mov bx, 0
3  1907	    200F  53			     push bx
3  1908	    2010  4F			     dec di
3  1909	    2011  41			     inc cx
3  1910	    2012  EB F3			     jmp _store_dword_to_string_zero_padding_loop
3  1911	    2014			 _store_dword_to_string_zero_padding_end:
3  1912	    2014			 _store_dword_to_string_inverse:
3  1913					     load <si>
5  1914	    2014  56				 push si
3  1915	    2015  03 F1			     add si, cx
3  1916	    2017  C6 04	24		     mov byte ptr [si],	'$'
3  1917					     restore <si>
5  1918	    201A  5E				 pop si
3  1919	    201B			 _store_dword_to_string_inverse_loop:
3  1920	    201B  83 F9	00		     cmp cx, 0
3  1921	    201E  74 0A			     je	_store_dword_to_string_end
3  1922
3  1923	    2020  5A			     pop dx
3  1924	    2021  80 C2	30		     add dl, 30h
3  1925	    2024  88 14			     mov byte ptr [si],	dl
3  1926	    2026  46			     inc si
3  1927	    2027  49			     dec cx
3  1928
3  1929	    2028  EB F1			     jmp _store_dword_to_string_inverse_loop
3  1930
3  1931	    202A			 _store_dword_to_string_end:
3  1932	    202A  C3			     ret
2  1933
2  1934	    202B			 print_datetimestamp:
2  1935	    202B  5B			     pop bx
2  1936	    202C  59			     pop cx ; time
2  1937	    202D  5A			     pop dx ; date
2  1938	    202E  53			     push bx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 35
tree.ASM



2  1939
2  1940	    202F  BE 2131r		     lea si, datetime
2  1941
2  1942					     ;
2  1943					     ; date format
2  1944					     ;
2  1945					     load <cx, dx, si>
4  1946	    2032  51				 push cx
4  1947	    2033  52				 push dx
4  1948	    2034  56				 push si
2  1949	    2035  C1 FA	09		     sar dx, 9
2  1950	    2038  81 C2	07BC		     add dx, 1980
2  1951					     parse_word_to_str dx, si, 4
3  1952	    203C  B8 0004		     mov ax, 4
3  1953	    203F  50			     push ax
3  1954	    2040  8B C6			     mov ax, si
3  1955	    2042  50			     push ax
3  1956	    2043  33 C0			     xor ax, ax
3  1957	    2045  8B C2			     mov ax, dx
3  1958	    2047  50			     push ax
3  1959	    2048  E8 FF4C		     call store_iint_to_string
2  1960					     restore <si, dx, cx>
4  1961	    204B  5E				 pop si
4  1962	    204C  5A				 pop dx
4  1963	    204D  59				 pop cx
2  1964					     break_point ax
3  1965					     load <ax>
5  1966	    204E  50				 push ax
3  1967	    204F  33 C0			     xor ax, ax
3  1968	    2051  33 C0			     xor ax, ax
3  1969	    2053  33 C0			     xor ax, ax
3  1970	    2055  33 C0			     xor ax, ax
3  1971	    2057  33 C0			     xor ax, ax
3  1972	    2059  33 C0			     xor ax, ax
3  1973	    205B  33 C0			     xor ax, ax
3  1974	    205D  33 C0			     xor ax, ax
3  1975					     restore <ax>
5  1976	    205F  58				 pop ax
2  1977	    2060  83 C6	04		     add si, 4
2  1978	    2063  C6 04	2E		     mov byte ptr [si],	'.'
2  1979	    2066  46			     inc si
2  1980
2  1981					     load <cx, dx, si>
4  1982	    2067  51				 push cx
4  1983	    2068  52				 push dx
4  1984	    2069  56				 push si
2  1985	    206A  81 E2	01E0		     and dx, 32	+ 64 + 128 + 256
2  1986	    206E  C1 FA	05		     sar dx, 5
2  1987					     parse_byte_to_str dl, si, 2
3  1988	    2071  B8 0002		     mov ax, 2
3  1989	    2074  50			     push ax
3  1990	    2075  8B C6			     mov ax, si
3  1991	    2077  50			     push ax
3  1992	    2078  33 C0			     xor ax, ax
3  1993	    207A  8A C2			     mov al, dl
3  1994	    207C  50			     push ax
3  1995	    207D  E8 FF17		     call store_iint_to_string
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 36
tree.ASM



2  1996					     restore <si, dx, cx>
4  1997	    2080  5E				 pop si
4  1998	    2081  5A				 pop dx
4  1999	    2082  59				 pop cx
2  2000	    2083  83 C6	02		     add si, 2
2  2001	    2086  C6 04	2E		     mov byte ptr [si],	'.'
2  2002	    2089  46			     inc si
2  2003
2  2004					     load <cx, dx, si>
4  2005	    208A  51				 push cx
4  2006	    208B  52				 push dx
4  2007	    208C  56				 push si
2  2008	    208D  80 E2	1F		     and dl, 1 + 2 + 4 + 8 + 16
2  2009					     parse_byte_to_str dl, si, 2
3  2010	    2090  B8 0002		     mov ax, 2
3  2011	    2093  50			     push ax
3  2012	    2094  8B C6			     mov ax, si
3  2013	    2096  50			     push ax
3  2014	    2097  33 C0			     xor ax, ax
3  2015	    2099  8A C2			     mov al, dl
3  2016	    209B  50			     push ax
3  2017	    209C  E8 FEF8		     call store_iint_to_string
2  2018					     restore <si, dx, cx>
4  2019	    209F  5E				 pop si
4  2020	    20A0  5A				 pop dx
4  2021	    20A1  59				 pop cx
2  2022	    20A2  83 C6	02		     add si, 2
2  2023	    20A5  C6 04	20		     mov byte ptr [si],	' '
2  2024	    20A8  46			     inc si
2  2025
2  2026					     ;
2  2027					     ; time format
2  2028					     ;
2  2029					     load <cx, dx, si>
4  2030	    20A9  51				 push cx
4  2031	    20AA  52				 push dx
4  2032	    20AB  56				 push si
2  2033	    20AC  C1 F9	0B		     sar cx, 11
2  2034					     parse_byte_to_str cl, si, 2
3  2035	    20AF  B8 0002		     mov ax, 2
3  2036	    20B2  50			     push ax
3  2037	    20B3  8B C6			     mov ax, si
3  2038	    20B5  50			     push ax
3  2039	    20B6  33 C0			     xor ax, ax
3  2040	    20B8  8A C1			     mov al, cl
3  2041	    20BA  50			     push ax
3  2042	    20BB  E8 FED9		     call store_iint_to_string
2  2043					     restore <si, dx, cx>
4  2044	    20BE  5E				 pop si
4  2045	    20BF  5A				 pop dx
4  2046	    20C0  59				 pop cx
2  2047	    20C1  83 C6	02		     add si, 2
2  2048	    20C4  C6 04	3A		     mov byte ptr [si],	':'
2  2049	    20C7  46			     inc si
2  2050
2  2051					     load <cx, dx, si>
4  2052	    20C8  51				 push cx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 37
tree.ASM



4  2053	    20C9  52				 push dx
4  2054	    20CA  56				 push si
2  2055	    20CB  81 E1	07E0		     and cx, 2016
2  2056	    20CF  C1 F9	05		     sar cx, 5
2  2057					     parse_byte_to_str cl, si, 2
3  2058	    20D2  B8 0002		     mov ax, 2
3  2059	    20D5  50			     push ax
3  2060	    20D6  8B C6			     mov ax, si
3  2061	    20D8  50			     push ax
3  2062	    20D9  33 C0			     xor ax, ax
3  2063	    20DB  8A C1			     mov al, cl
3  2064	    20DD  50			     push ax
3  2065	    20DE  E8 FEB6		     call store_iint_to_string
2  2066					     restore <si, dx, cx>
4  2067	    20E1  5E				 pop si
4  2068	    20E2  5A				 pop dx
4  2069	    20E3  59				 pop cx
2  2070	    20E4  83 C6	02		     add si, 2
2  2071	    20E7  C6 04	3A		     mov byte ptr [si],	':'
2  2072	    20EA  46			     inc si
2  2073
2  2074					     load <cx, dx, si>
4  2075	    20EB  51				 push cx
4  2076	    20EC  52				 push dx
4  2077	    20ED  56				 push si
2  2078	    20EE  80 E1	0F		     and cl, 15
2  2079	    20F1  D0 E1			     sal cl, 1
2  2080					     parse_byte_to_str cl, si, 2
3  2081	    20F3  B8 0002		     mov ax, 2
3  2082	    20F6  50			     push ax
3  2083	    20F7  8B C6			     mov ax, si
3  2084	    20F9  50			     push ax
3  2085	    20FA  33 C0			     xor ax, ax
3  2086	    20FC  8A C1			     mov al, cl
3  2087	    20FE  50			     push ax
3  2088	    20FF  E8 FE95		     call store_iint_to_string
2  2089					     restore <si, dx, cx>
4  2090	    2102  5E				 pop si
4  2091	    2103  5A				 pop dx
4  2092	    2104  59				 pop cx
2  2093	    2105  83 C6	02		     add si, 2
2  2094	    2108  C6 04	24		     mov byte ptr [si],	'$'
2  2095	    210B  46			     inc si
2  2096
2  2097	    210C  C3			     ret
2  2098
2  2099	    210D  43 75	72 72 65 6E 74+	 hello_time db 'Current	time is: $'
   2100		  20 74	69 6D 65 20 69+
   2101		  73 3A	20 24
2  2102	    211F  43 75	72 72 65 6E 74+	 hello_date db 'Current	date is: $'
   2103		  20 64	61 74 65 20 69+
   2104		  73 3A	20 24
2  2105	    2131  14*(24)		 datetime db 20	dup('$')
2  2106	    2145  3A 24			 time_semicolon	db ':',	'$'
2  2107	    2147  20 24			 time_space db ' ', '$'
2  2108	    2149  0A 24			 time_newline db 0Ah, '$'
2  2109	    214B  80*(24)		 num db	128 dup('$')
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 38
tree.ASM



1  2110
1  2111	    21CB			 count_subfiles_here:
1  2112	    21CB  B8 1F0Cr		     lea ax, file_mask
1  2113	    21CE  BE 012Dr		     lea si, find_first_file
1  2114
1  2115	    21D1  50			     push ax
1  2116	    21D2  56			     push si
1  2117	    21D3  E8 0017		     call count_subfiles_here_by_mask
1  2118					     load <ax>
3  2119	    21D6  50				 push ax
1  2120	    21D7  B8 1F12r		     mov ax, offset folder_mask
1  2121	    21DA  BE 013Ar		     mov si, offset find_first_folder
1  2122
1  2123	    21DD  50			     push ax
1  2124	    21DE  56			     push si
1  2125	    21DF  E8 000B		     call count_subfiles_here_by_mask
1  2126	    21E2  8B D8			     mov bx, ax
1  2127					     restore <ax>
3  2128	    21E4  58				 pop ax
1  2129	    21E5  03 D8			     add bx, ax
1  2130	    21E7  8B C3			     mov ax, bx
1  2131	    21E9  A3 2702r		     mov word ptr [current_max_entities], ax
1  2132	    21EC  C3			     ret
1  2133
1  2134	    21ED			 count_subfiles_here_by_mask:
1  2135	    21ED  5B			     pop bx
1  2136	    21EE  5E			     pop si		 ; find_first address
1  2137	    21EF  58			     pop ax		 ; mask	address
1  2138	    21F0  53			     push bx
1  2139
1  2140					     load <ax, si>
3  2141	    21F1  50				 push ax
3  2142	    21F2  56				 push si
1  2143					     set_dta count_dta
2  2144	    21F3  BA 2602r		     lea dx, count_dta
2  2145	    21F6  33 C0			     xor ax, ax
2  2146	    21F8  B4 1A			     mov ah, 1Ah
2  2147	    21FA  CD 21			     int 21h
1  2148					     restore <si, ax>
3  2149	    21FC  5E				 pop si
3  2150	    21FD  58				 pop ax
1  2151
1  2152	    21FE  B9 0000		     mov cx, 0
1  2153					     load <cx>
3  2154	    2201  51				 push cx
1  2155	    2202  50			     push ax
1  2156	    2203  FF D6			     call si
1  2157	    2205  72 17			     jc	_count_subfiles_from_end
1  2158	    2207			 _count_subfiles_from_loop:
1  2159	    2207  B8 2602r		     lea ax, count_dta
1  2160	    220A  05 001E		     add ax, 1Eh
1  2161	    220D  8B D8			     mov bx, ax
1  2162	    220F  80 3F	2E		     cmp byte ptr [bx],	'.'
1  2163	    2212  74 03			     je	_count_subfiles_from_loop_next
1  2164
1  2165					     restore <cx>
3  2166	    2214  59				 pop cx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 39
tree.ASM



1  2167	    2215  41			     inc cx
1  2168					     load <cx>
3  2169	    2216  51				 push cx
1  2170	    2217			 _count_subfiles_from_loop_next:
1  2171	    2217  E8 DF2D		     call find_next
1  2172	    221A  72 02			     jc	_count_subfiles_from_end
1  2173
1  2174	    221C  EB E9			     jmp _count_subfiles_from_loop
1  2175	    221E			 _count_subfiles_from_end:
1  2176					     restore <cx>
3  2177	    221E  59				 pop cx
1  2178	    221F  8B C1			     mov ax, cx
1  2179	    2221  C3			     ret
1  2180
1  2181	    2222			 show_filename_from_dta:
1  2182					     ;
1  2183					     ; returns file storage
1  2184					     ;
1  2185	    2222  5B			     pop bx
1  2186	    2223  59			     pop cx  ; deep level
1  2187	    2224  58			     pop ax  ; entity count
1  2188	    2225  53			     push bx
1  2189
1  2190	    2226			 _show_filename_from_dta_valid_name:
1  2191					     ;
1  2192					     ;	 pseudo	graphic	prefix
1  2193					     ;
1  2194					     load <ax>
3  2195	    2226  50				 push ax
1  2196	    2227  B8 2682r		     lea ax, dta
1  2197
1  2198	    222A  05 001E		     add ax, 1Eh
1  2199	    222D  8B D8			     mov bx, ax
1  2200					     restore <ax>
3  2201	    222F  58				 pop ax
1  2202
1  2203					     load <cx, bx>
3  2204	    2230  51				 push cx
3  2205	    2231  53				 push bx
1  2206	    2232  50			     push ax	 ; entity count
1  2207	    2233  51			     push cx	 ; deep	level
1  2208	    2234  E8 DFDA		     call print_pseudographic_prefix
1  2209					     restore <bx, cx>
3  2210	    2237  5B				 pop bx
3  2211	    2238  59				 pop cx
1  2212
1  2213					     load <bx>
3  2214	    2239  53				 push bx
1  2215	    223A  B9 000D		     mov cx, 13
1  2216	    223D  51			     push cx
1  2217	    223E  53			     push bx
1  2218	    223F  E8 FBC4		     call count_no_space_no_zero_letters
1  2219	    2242  8B C8			     mov cx, ax
1  2220					     restore <bx>
3  2221	    2244  5B				 pop bx
1  2222	    2245  51			     push cx
1  2223	    2246  53			     push bx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 40
tree.ASM



1  2224	    2247  E8 E02E		     call print_string_with_length
1  2225
1  2226	    224A			 _show_filename_from_dta_datetime:
1  2227	    224A  B0 01			     mov al, 1
1  2228	    224C  38 06	1F0Ar		     cmp byte ptr [use_time], al
1  2229	    2250  75 05			     jne _show_filename_from_dta_storage
1  2230	    2252  E8 001A		     call show_datetime
1  2231	    2255  EB 00			     jmp _show_filename_from_dta_storage
1  2232
1  2233	    2257			 _show_filename_from_dta_storage:
1  2234	    2257  B0 01			     mov al, 1
1  2235	    2259  38 06	1F09r		     cmp byte ptr [use_storage], al
1  2236	    225D  75 05			     jne _show_filename_from_dta_end
1  2237	    225F  E8 0031		     call show_storage
1  2238	    2262  EB 00			     jmp _show_filename_from_dta_end
1  2239
1  2240	    2264			  _show_filename_from_dta_end:
1  2241					     print_range <newline>
3  2242						 print <offset newline>
4  2243	    2264  B4 09				 mov ah, 09h
4  2244	    2266  BA 020Fr			 mov dx, offset	newline
4  2245	    2269  CD 21				 int 21h
1  2246	    226B  B8 0001		     mov ax, 1
1  2247	    226E  C3			     ret
1  2248
1  2249	    226F			 show_datetime:
1  2250	    226F  BB 2682r		     lea bx, dta
1  2251	    2272  8B 4F	16		     mov cx, word ptr [bx + 16h]
1  2252	    2275  8B 57	18		     mov dx, word ptr [bx + 18h]
1  2253	    2278  52			     push dx
1  2254	    2279  51			     push cx
1  2255	    227A  E8 FDAE		     call print_datetimestamp
1  2256					     print_range <time_space, datetime,	time_space>
3  2257						 print <offset time_space>
4  2258	    227D  B4 09				 mov ah, 09h
4  2259	    227F  BA 2147r			 mov dx, offset	time_space
4  2260	    2282  CD 21				 int 21h
3  2261						 print <offset datetime>
4  2262	    2284  B4 09				 mov ah, 09h
4  2263	    2286  BA 2131r			 mov dx, offset	datetime
4  2264	    2289  CD 21				 int 21h
3  2265						 print <offset time_space>
4  2266	    228B  B4 09				 mov ah, 09h
4  2267	    228D  BA 2147r			 mov dx, offset	time_space
4  2268	    2290  CD 21				 int 21h
1  2269	    2292  C3			     ret
1  2270
1  2271	    2293			 show_storage:
1  2272					     ;
1  2273					     ; print without padding
1  2274					     ;
1  2275	    2293  BA 0001		     mov dx, 1
1  2276	    2296  52			     push dx
1  2277
1  2278					     ;
1  2279					     ; memory for storing integer
1  2280					     ;
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 41
tree.ASM



1  2281	    2297  BA 25C2r		     lea dx, storage
1  2282	    229A  52			     push dx
1  2283
1  2284					     ;
1  2285					     ; move low	16 bit as integer to printing integer
1  2286					     ;
1  2287	    229B  A1 25BAr		     mov ax, word ptr [is_file]
1  2288	    229E  3D 0000		     cmp ax, 0
1  2289	    22A1  74 09			     je	_show_storage_folder
1  2290	    22A3			 _show_storage_file:
1  2291	    22A3  BB 2682r		     lea bx, dta
1  2292	    22A6  83 C3	1A		     add bx, 1Ah
1  2293	    22A9  53			     push bx
1  2294	    22AA  EB 06			     jmp _print_storage
1  2295	    22AC			 _show_storage_folder:
1  2296	    22AC  B8 25BEr		     lea ax, accumulative_storage
1  2297	    22AF  50			     push ax
1  2298	    22B0  EB 00			     jmp _print_storage
1  2299	    22B2			 _print_storage:
1  2300	    22B2  E8 FD20		     call store_dword_to_string
1  2301					     print_range <time_space, storage, time_space>
3  2302						 print <offset time_space>
4  2303	    22B5  B4 09				 mov ah, 09h
4  2304	    22B7  BA 2147r			 mov dx, offset	time_space
4  2305	    22BA  CD 21				 int 21h
3  2306						 print <offset storage>
4  2307	    22BC  B4 09				 mov ah, 09h
4  2308	    22BE  BA 25C2r			 mov dx, offset	storage
4  2309	    22C1  CD 21				 int 21h
3  2310						 print <offset time_space>
4  2311	    22C3  B4 09				 mov ah, 09h
4  2312	    22C5  BA 2147r			 mov dx, offset	time_space
4  2313	    22C8  CD 21				 int 21h
1  2314	    22CA  C3			     ret
1  2315
1  2316	    22CB			 is_valid_name:
1  2317	    22CB  5B			     pop bx
1  2318	    22CC  59			     pop cx	 ; deep	level
1  2319	    22CD  53			     push bx
1  2320
1  2321	    22CE  B8 2682r		     lea ax, dta
1  2322	    22D1  05 001E		     add ax, 1Eh
1  2323	    22D4  8B D8			     mov bx, ax
1  2324	    22D6  B8 0001		     mov ax, 1
1  2325	    22D9  80 3F	2E		     cmp byte ptr [bx],	'.'
1  2326	    22DC  75 03			     jne _is_valid_name_end
1  2327	    22DE  B8 0000		     mov ax, 0
1  2328	    22E1			 _is_valid_name_end:
1  2329	    22E1  C3			     ret
1  2330
1  2331	    22E2			 add_accumulative_storage_from_dta:
1  2332	    22E2  BB 2682r		     lea bx, dta
1  2333	    22E5  83 C3	1A		     add bx, 1Ah
1  2334	    22E8  53			     push bx
1  2335	    22E9  E8 FC58		     call dadd_from
1  2336	    22EC  E8 FC35		     call get_dword
1  2337	    22EF  BB 25BEr		     lea bx, accumulative_storage
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 42
tree.ASM



1  2338	    22F2  5A			     pop dx
1  2339	    22F3  89 17			     mov word ptr [bx],	dx
1  2340	    22F5  5A			     pop dx
1  2341	    22F6  89 57	02		     mov word ptr [bx +	2], dx
1  2342
1  2343	    22F9  C3			     ret
1  2344
1  2345	    22FA			 zeros_accumulative_storage:
1  2346	    22FA  B8 0000		     mov ax, 0
1  2347	    22FD  A3 25BEr		     mov word ptr [accumulative_storage], ax
1  2348	    2300  A3 25C0r		     mov word ptr [accumulative_storage	+ 2], ax
1  2349	    2303  C3			     ret
1  2350
1  2351	    2304			 zeros_dword:
1  2352	    2304  B8 0000		     mov ax, 0
1  2353	    2307  50			     push ax
1  2354	    2308  50			     push ax
1  2355	    2309  E8 FC0C		     call set_dword
1  2356	    230C  C3			     ret
1  2357
1  2358	    230D			 set_accumulative_storage_from_dir:
1  2359					     ;
1  2360					     ; this function suppose that we count subfiles sizes from current directory
1  2361					     ;
1  2362	    230D  E8 FFF4		     call zeros_dword
1  2363	    2310  E8 FFE7		     call zeros_accumulative_storage
1  2364	    2313  BB 0001		     mov bx, 1
1  2365	    2316  89 1E	25B8r		     mov word ptr [is_silent], bx
1  2366	    231A  89 1E	25BCr		     mov word ptr [skip_storage_accumulating], bx
1  2367					     ;
1  2368					     ;	 save dta
1  2369					     ;
1  2370					     push_fragment dta,	128
2  2371	    231E  BF 2682r		     lea di, dta
2  2372	    2321  B9 0080		     mov cx, 128
2  2373	    2324  33 DB			     xor bx, bx
2  2374	    2326			 ??000A:
2  2375	    2326  8A 1D			     mov bl, byte ptr [di]
2  2376	    2328  53			     push bx
2  2377	    2329  47			     inc di
2  2378	    232A  49			     dec cx
2  2379	    232B  83 F9	00		     cmp cx, 0
2  2380	    232E  75 F6			     jne ??000A
1  2381					     ;
1  2382					     ; start new search
1  2383					     ;
1  2384	    2330  A1 2702r		     mov ax, word ptr [current_max_entities]
1  2385					     load <ax>
3  2386	    2333  50				 push ax
1  2387					     ;
1  2388					     ;	 cd to subfolder
1  2389					     ;
1  2390	    2334  B8 2682r		     lea ax, dta
1  2391	    2337  05 001E		     add ax, 1Eh
1  2392
1  2393	    233A  50			     push ax
1  2394	    233B  E8 DE2E		     call cd
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 43
tree.ASM



1  2395					     ;
1  2396					     ;	 list subfiles from subfolder
1  2397					     ;
1  2398	    233E  BB 0000		     mov bx, 0
1  2399	    2341  B9 0000		     mov cx, 0
1  2400	    2344  B8 1F0Cr		     mov ax, offset file_mask
1  2401	    2347  BE 012Dr		     mov si, offset find_first_file
1  2402
1  2403	    234A  56			     push si
1  2404	    234B  53			     push bx
1  2405	    234C  50			     push ax
1  2406	    234D  51			     push cx
1  2407	    234E  E8 0075		     call list_subfiles_recursive
1  2408					     ;
1  2409					     ;	 list subfolders from subfolder
1  2410					     ;
1  2411	    2351  B9 0000		     mov cx, 0
1  2412	    2354  8B D8			     mov bx, ax
1  2413	    2356  B8 1F12r		     mov ax, offset folder_mask
1  2414	    2359  BE 013Ar		     mov si, offset find_first_folder
1  2415
1  2416	    235C  56			     push si
1  2417	    235D  53			     push bx
1  2418	    235E  50			     push ax
1  2419	    235F  51			     push cx
1  2420	    2360  E8 0063		     call list_subfiles_recursive
1  2421					     ;
1  2422					     ;	 cd back to this function
1  2423					     ;
1  2424	    2363  B8 2573r		     mov ax, offset parent_folder
1  2425	    2366  50			     push ax
1  2426	    2367  E8 DE02		     call cd
1  2427
1  2428					     restore<ax>
3  2429	    236A  58				 pop ax
1  2430	    236B  A3 2702r		     mov word ptr [current_max_entities], ax
1  2431					     ;
1  2432					     ;	 restore dta
1  2433					     ;
1  2434					     pop_fragment dta, 128
2  2435	    236E  BF 2682r		     lea di, dta
2  2436	    2371  B9 0080		     mov cx, 128
2  2437	    2374  03 F9			     add di, cx
2  2438	    2376  4F			     dec di
2  2439	    2377  33 DB			     xor bx, bx
2  2440	    2379			 ??000B:
2  2441	    2379  5B			     pop bx
2  2442	    237A  88 1D			     mov byte ptr [di],	bl
2  2443	    237C  4F			     dec di
2  2444	    237D  49			     dec cx
2  2445	    237E  83 F9	00		     cmp cx, 0
2  2446	    2381  75 F6			     jne ??000B
1  2447					     set_dta dta
2  2448	    2383  BA 2682r		     lea dx, dta
2  2449	    2386  33 C0			     xor ax, ax
2  2450	    2388  B4 1A			     mov ah, 1Ah
2  2451	    238A  CD 21			     int 21h
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 44
tree.ASM



1  2452
1  2453	    238C  BB 0000		     mov bx, 0
1  2454	    238F  89 1E	25B8r		     mov word ptr [is_silent], bx
1  2455	    2393  89 1E	25BCr		     mov word ptr [skip_storage_accumulating], bx
1  2456	    2397  C3			     ret
1  2457
1  2458	    2398			 list_subfiles_recursive_from:
1  2459	    2398  5B			     pop bx	 ; ret address
1  2460	    2399  58			     pop ax	 ; deep	level
1  2461	    239A  59			     pop cx	 ; root	folder offset
1  2462	    239B  53			     push bx
1  2463					     load <cx>
3  2464	    239C  51				 push cx
1  2465	    239D  50			     push ax
1  2466	    239E  E8 DDCB		     call cd
1  2467					     restore <cx>
3  2468	    23A1  59				 pop cx
1  2469					     ;
1  2470					     ; list subfolder
1  2471					     ;
1  2472	    23A2  BE 013Ar		     mov si, offset find_first_folder
1  2473	    23A5  BB 0000		     mov bx, 0
1  2474	    23A8  B8 1F12r		     mov ax, offset folder_mask
1  2475					     load <cx>
3  2476	    23AB  51				 push cx
1  2477	    23AC  56			     push si
1  2478	    23AD  53			     push bx
1  2479	    23AE  50			     push ax
1  2480	    23AF  51			     push cx
1  2481	    23B0  E8 0013		     call list_subfiles_recursive
1  2482					     restore <cx>
3  2483	    23B3  59				 pop cx
1  2484					     ;
1  2485					     ; list files
1  2486					     ;
1  2487	    23B4  BE 012Dr		     mov si, offset find_first_file
1  2488	    23B7  8B D8			     mov bx, ax
1  2489	    23B9  B8 1F0Cr		     mov ax, offset file_mask
1  2490					     load <cx>
3  2491	    23BC  51				 push cx
1  2492	    23BD  56			     push si
1  2493	    23BE  53			     push bx
1  2494	    23BF  50			     push ax
1  2495	    23C0  51			     push cx
1  2496	    23C1  E8 0002		     call list_subfiles_recursive
1  2497					     restore <cx>
3  2498	    23C4  59				 pop cx
1  2499	    23C5  C3			     ret
1  2500
1  2501	    23C6			 list_subfiles_recursive:
1  2502					     ;
1  2503					     ;	 save current files count
1  2504					     ;
1  2505	    23C6  E8 FE02		     call count_subfiles_here
1  2506	    23C9  A3 2702r		     mov word ptr [current_max_entities], ax
1  2507
1  2508	    23CC  5A			     pop dx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 45
tree.ASM



1  2509	    23CD  59			     pop cx ; deep level
1  2510	    23CE  58			     pop ax ; filemask offset
1  2511	    23CF  5B			     pop bx ; current index
1  2512	    23D0  5E			     pop si ; search address
1  2513	    23D1  52			     push dx
1  2514
1  2515					     load <cx, ax, bx, si>
3  2516	    23D2  51				 push cx
3  2517	    23D3  50				 push ax
3  2518	    23D4  53				 push bx
3  2519	    23D5  56				 push si
1  2520					     set_dta dta
2  2521	    23D6  BA 2682r		     lea dx, dta
2  2522	    23D9  33 C0			     xor ax, ax
2  2523	    23DB  B4 1A			     mov ah, 1Ah
2  2524	    23DD  CD 21			     int 21h
1  2525					     restore <si, bx, ax, cx>
3  2526	    23DF  5E				 pop si
3  2527	    23E0  5B				 pop bx
3  2528	    23E1  58				 pop ax
3  2529	    23E2  59				 pop cx
1  2530
1  2531					     load <bx, cx>
3  2532	    23E3  53				 push bx
3  2533	    23E4  51				 push cx
1  2534	    23E5  50			     push ax
1  2535	    23E6  FF D6			     call si
1  2536	    23E8  73 03			     jnc _list_subfiles_recursive_loop
1  2537	    23EA  E9 0126		     jmp _list_subfiles_recursive_end
1  2538	    23ED			 _list_subfiles_recursive_loop:
1  2539					     restore <cx>
3  2540	    23ED  59				 pop cx
1  2541	    23EE  51			     push cx
1  2542	    23EF  E8 FED9		     call is_valid_name
1  2543					     load <cx>
3  2544	    23F2  51				 push cx
1  2545	    23F3  3D 0001		     cmp ax, 1
1  2546	    23F6  0F 85	010C		     jne _list_subfiles_recursive_next
1  2547					     ;
1  2548					     ;	 increment current index in subfiles
1  2549					     ;
1  2550					     restore <cx, bx>
3  2551	    23FA  59				 pop cx
3  2552	    23FB  5B				 pop bx
1  2553	    23FC  43			     inc bx
1  2554					     load <bx, cx>
3  2555	    23FD  53				 push bx
3  2556	    23FE  51				 push cx
1  2557					     ;
1  2558					     ;	 check if folder
1  2559					     ;
1  2560					     restore <cx>
3  2561	    23FF  59				 pop cx
1  2562					     load <cx>
3  2563	    2400  51				 push cx
1  2564	    2401  B8 2682r		     lea ax, dta
1  2565	    2404  50			     push ax
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 46
tree.ASM



1  2566	    2405  51			     push cx
1  2567	    2406  E8 DD43		     call is_folder
1  2568	    2409  3D 0001		     cmp ax, 1
1  2569	    240C  74 27			     je	_list_subfiles_recursive_folder
1  2570
1  2571	    240E  E8 FED1		     call add_accumulative_storage_from_dta
1  2572
1  2573	    2411  A1 25B8r		     mov ax, word ptr [is_silent]
1  2574	    2414  3D 0001		     cmp ax, 1
1  2575	    2417  0F 84	00EB		     je	_list_subfiles_recursive_next
1  2576
1  2577	    241B  BB 0001		     mov bx, 1
1  2578	    241E  89 1E	25BAr		     mov word ptr [is_file], bx
1  2579					     ;
1  2580					     ;	 show filename
1  2581					     ;
1  2582					     restore <cx, bx>
3  2583	    2422  59				 pop cx
3  2584	    2423  5B				 pop bx
1  2585					     load <bx, cx>
3  2586	    2424  53				 push bx
3  2587	    2425  51				 push cx
1  2588	    2426  53			     push bx
1  2589	    2427  51			     push cx
1  2590	    2428  E8 FDF7		     call show_filename_from_dta
1  2591
1  2592	    242B  BB 0000		     mov bx, 0
1  2593	    242E  89 1E	25BAr		     mov word ptr [is_file], bx
1  2594
1  2595	    2432  E9 00D1		     jmp _list_subfiles_recursive_next
1  2596	    2435			 _list_subfiles_recursive_folder:
1  2597	    2435  A1 25BCr		     mov ax, word ptr [skip_storage_accumulating]
1  2598	    2438  3D 0001		     cmp ax, 1
1  2599	    243B  74 03			     je	_list_subfiles_recursive_folder_check_silence
1  2600
1  2601					     ;
1  2602					     ;	 count storages
1  2603					     ;
1  2604	    243D  E8 FECD		     call set_accumulative_storage_from_dir
1  2605	    2440			 _list_subfiles_recursive_folder_check_silence:
1  2606	    2440  A1 25B8r		     mov ax, word ptr [is_silent]
1  2607	    2443  3D 0001		     cmp ax, 1
1  2608	    2446  74 0F			     je	_list_subfiles_recursive_folder_serach_logic
1  2609
1  2610					     ;
1  2611					     ;	 show folder name
1  2612					     ;
1  2613					     restore <cx, bx>
3  2614	    2448  59				 pop cx
3  2615	    2449  5B				 pop bx
1  2616					     load <bx, cx>
3  2617	    244A  53				 push bx
3  2618	    244B  51				 push cx
1  2619	    244C  53			     push bx
1  2620	    244D  51			     push cx
1  2621	    244E  E8 FDD1		     call show_filename_from_dta
1  2622
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 47
tree.ASM



1  2623	    2451  E8 FEB0		     call zeros_dword
1  2624	    2454  E8 FEA3		     call zeros_accumulative_storage
1  2625
1  2626	    2457			 _list_subfiles_recursive_folder_serach_logic:
1  2627
1  2628					     ;
1  2629					     ;	 check deep level
1  2630					     ;
1  2631					     restore <cx>
3  2632	    2457  59				 pop cx
1  2633					     load <cx>
3  2634	    2458  51				 push cx
1  2635	    2459  33 DB			     xor bx, bx
1  2636	    245B  8A 1E	1F0Br		     mov bl, byte ptr [deep_level]
1  2637	    245F  3B CB			     cmp cx, bx
1  2638	    2461  0F 8D	00A1		     jge _list_subfiles_recursive_next
1  2639
1  2640					     restore <cx, bx>
3  2641	    2465  59				 pop cx
3  2642	    2466  5B				 pop bx
1  2643					     load <bx, cx>
3  2644	    2467  53				 push bx
3  2645	    2468  51				 push cx
1  2646
1  2647	    2469  A1 25B8r		     mov ax, word ptr [is_silent]
1  2648	    246C  3D 0001		     cmp ax, 1
1  2649	    246F  74 10			     je	_list_subfiles_recursive_loop_pseudographic_hack_end
1  2650					     ;
1  2651					     ;	 pseudographic hack
1  2652					     ;
1  2653	    2471  3B 1E	2702r		     cmp bx, word ptr [current_max_entities]
1  2654	    2475  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack_end
1  2655					     load <ax, bx, cx>
3  2656	    2477  50				 push ax
3  2657	    2478  53				 push bx
3  2658	    2479  51				 push cx
1  2659	    247A  51			     push cx
1  2660	    247B  E8 DDD8		     call set_level_shift
1  2661					     restore <cx, bx, ax>
3  2662	    247E  59				 pop cx
3  2663	    247F  5B				 pop bx
3  2664	    2480  58				 pop ax
1  2665
1  2666	    2481			 _list_subfiles_recursive_loop_pseudographic_hack_end:
1  2667	    2481  8B C1			     mov ax, cx
1  2668					     ;
1  2669					     ;	 save dta
1  2670					     ;
1  2671					     push_fragment dta,	128
2  2672	    2483  BF 2682r		     lea di, dta
2  2673	    2486  B9 0080		     mov cx, 128
2  2674	    2489  33 DB			     xor bx, bx
2  2675	    248B			 ??000C:
2  2676	    248B  8A 1D			     mov bl, byte ptr [di]
2  2677	    248D  53			     push bx
2  2678	    248E  47			     inc di
2  2679	    248F  49			     dec cx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 48
tree.ASM



2  2680	    2490  83 F9	00		     cmp cx, 0
2  2681	    2493  75 F6			     jne ??000C
1  2682	    2495  8B C8			     mov cx, ax
1  2683					     ;
1  2684					     ; start new search
1  2685					     ;
1  2686	    2497  A1 2702r		     mov ax, word ptr [current_max_entities]
1  2687					     load <ax>
3  2688	    249A  50				 push ax
1  2689
1  2690					     load <cx>
3  2691	    249B  51				 push cx
1  2692					     ;
1  2693					     ;	 cd to subfolder
1  2694					     ;
1  2695	    249C  B8 2682r		     lea ax, dta
1  2696	    249F  05 001E		     add ax, 1Eh
1  2697
1  2698	    24A2  50			     push ax
1  2699	    24A3  E8 DCC6		     call cd
1  2700					     restore <cx>
3  2701	    24A6  59				 pop cx
1  2702
1  2703	    24A7  41			     inc cx
1  2704					     ;
1  2705					     ;	 list subfiles from subfolder
1  2706					     ;
1  2707					     load <cx>
3  2708	    24A8  51				 push cx
1  2709	    24A9  BB 0000		     mov bx, 0
1  2710	    24AC  B8 1F0Cr		     mov ax, offset file_mask
1  2711	    24AF  BE 012Dr		     mov si, offset find_first_file
1  2712
1  2713	    24B2  56			     push si
1  2714	    24B3  53			     push bx
1  2715	    24B4  50			     push ax
1  2716	    24B5  51			     push cx
1  2717	    24B6  E8 FF0D		     call list_subfiles_recursive
1  2718					     restore <cx>
3  2719	    24B9  59				 pop cx
1  2720					     ;
1  2721					     ;	 list subfolders from subfolder
1  2722					     ;
1  2723					     load <cx>
3  2724	    24BA  51				 push cx
1  2725	    24BB  8B D8			     mov bx, ax
1  2726	    24BD  B8 1F12r		     mov ax, offset folder_mask
1  2727	    24C0  BE 013Ar		     mov si, offset find_first_folder
1  2728
1  2729	    24C3  56			     push si
1  2730	    24C4  53			     push bx
1  2731	    24C5  50			     push ax
1  2732	    24C6  51			     push cx
1  2733	    24C7  E8 FEFC		     call list_subfiles_recursive
1  2734					     restore <cx>
3  2735	    24CA  59				 pop cx
1  2736
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 49
tree.ASM



1  2737	    24CB  A1 25B8r		     mov ax, word ptr [is_silent]
1  2738	    24CE  3D 0001		     cmp ax, 1
1  2739	    24D1  74 0A			     je	list_subfiles_recursive_loop_cd_back
1  2740					     ;
1  2741					     ;	 reverse pseudographic hack
1  2742					     ;
1  2743					     load <ax, bx, cx>
3  2744	    24D3  50				 push ax
3  2745	    24D4  53				 push bx
3  2746	    24D5  51				 push cx
1  2747	    24D6  51			     push cx
1  2748	    24D7  E8 DD8D		     call reset_level_shift
1  2749					     restore <cx, bx, ax>
3  2750	    24DA  59				 pop cx
3  2751	    24DB  5B				 pop bx
3  2752	    24DC  58				 pop ax
1  2753
1  2754	    24DD			 list_subfiles_recursive_loop_cd_back:
1  2755					     ;
1  2756					     ;	 cd back to this function
1  2757					     ;
1  2758	    24DD  B8 2573r		     mov ax, offset parent_folder
1  2759	    24E0  50			     push ax
1  2760	    24E1  E8 DC88		     call cd
1  2761
1  2762					     restore <ax>
3  2763	    24E4  58				 pop ax
1  2764	    24E5  A3 2702r		     mov word ptr [current_max_entities], ax
1  2765					     ;
1  2766					     ;	 restore dta
1  2767					     ;
1  2768					     pop_fragment dta, 128
2  2769	    24E8  BF 2682r		     lea di, dta
2  2770	    24EB  B9 0080		     mov cx, 128
2  2771	    24EE  03 F9			     add di, cx
2  2772	    24F0  4F			     dec di
2  2773	    24F1  33 DB			     xor bx, bx
2  2774	    24F3			 ??000D:
2  2775	    24F3  5B			     pop bx
2  2776	    24F4  88 1D			     mov byte ptr [di],	bl
2  2777	    24F6  4F			     dec di
2  2778	    24F7  49			     dec cx
2  2779	    24F8  83 F9	00		     cmp cx, 0
2  2780	    24FB  75 F6			     jne ??000D
1  2781					     set_dta dta
2  2782	    24FD  BA 2682r		     lea dx, dta
2  2783	    2500  33 C0			     xor ax, ax
2  2784	    2502  B4 1A			     mov ah, 1Ah
2  2785	    2504  CD 21			     int 21h
1  2786	    2506			 _list_subfiles_recursive_next:
1  2787	    2506  E8 DC3E		     call find_next
1  2788	    2509  0F 83	FEE0		     jnc _list_subfiles_recursive_loop
1  2789	    250D  3A 06	2539r		     cmp al, byte ptr [no_more_files]
1  2790	    2511  75 14			     jne find_next_error
1  2791	    2513			 _list_subfiles_recursive_end:
1  2792					     restore <cx, bx>
3  2793	    2513  59				 pop cx
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 50
tree.ASM



3  2794	    2514  5B				 pop bx
1  2795	    2515  8B C3			     mov ax, bx
1  2796	    2517  C3			     ret
1  2797	    2518			 find_first_error:
1  2798					     print_range <find_first_fails, newline>
3  2799						 print <offset find_first_fails>
4  2800	    2518  B4 09				 mov ah, 09h
4  2801	    251A  BA 253Ar			 mov dx, offset	find_first_fails
4  2802	    251D  CD 21				 int 21h
3  2803						 print <offset newline>
4  2804	    251F  B4 09				 mov ah, 09h
4  2805	    2521  BA 020Fr			 mov dx, offset	newline
4  2806	    2524  CD 21				 int 21h
1  2807	    2526  C3			     ret
1  2808	    2527			 find_next_error:
1  2809					     print_range <find_next_fails, newline>
3  2810						 print <offset find_next_fails>
4  2811	    2527  B4 09				 mov ah, 09h
4  2812	    2529  BA 2556r			 mov dx, offset	find_next_fails
4  2813	    252C  CD 21				 int 21h
3  2814						 print <offset newline>
4  2815	    252E  B4 09				 mov ah, 09h
4  2816	    2530  BA 020Fr			 mov dx, offset	newline
4  2817	    2533  CD 21				 int 21h
1  2818					     exit
2  2819	    2535  B4 00			     mov ah, 00h
2  2820	    2537  CD 21			     int 21h
1  2821
1  2822					 ;
1  2823					 ; error codes
1  2824					 ;
1  2825	    2539  12			 no_more_files db 18
1  2826
1  2827					 ;
1  2828					 ; error messages
1  2829					 ;
1  2830	    253A  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
   2831		  72 73	74 20 66 69 6C+
   2832		  65 6E	61 6D 65 73 20+
   2833		  66 61	69 6C 73 2E 24
1  2834	    2556  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
   2835		  78 74	20 66 69 6C 65+
   2836		  6E 61	6D 65 73 20 66+
   2837		  61 69	6C 73 2E 24
1  2838
1  2839					 ;
1  2840					 ; int variables
1  2841					 ;
1  2842	    2571  0000			 current_id_entity dw 0
1  2843
1  2844					 ;
1  2845					 ; strings
1  2846					 ;
1  2847	    2573  2E 2E	00		 parent_folder db '..',	00h
1  2848	    2576  2E 00			 current_folder	db '.',	00h
1  2849	    2578  40*(00)		 root_folder db	64 dup(00h)
1  2850
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 51
tree.ASM



1  2851					 ;
1  2852					 ; mode	variables
1  2853					 ;
1  2854	    25B8  0000			 is_silent dw 0
1  2855	    25BA  0000			 is_file dw 0
1  2856	    25BC  0000			 skip_storage_accumulating dw 0
1  2857
1  2858					 ;
1  2859					 ; storages
1  2860					 ;
1  2861	    25BE  00000000		 accumulative_storage dd 0
1  2862	    25C2  40*(24)		 storage db 64 dup('$')
1  2863	    2602  80*(00)		 count_dta db 128 dup(0)
1  2864	    2682  80*(00)		 dta db	128 dup(0)
1  2865	    2702  ????			 current_max_entities dw
*Warning* dtafunc.asm(569) Missing operand - trailing ?	assumed
1  2866
   2867
   2868					 end start
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 52
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:053F
??0001				  Near	 DGROUP:0563
??0002				  Near	 DGROUP:05CA
??0003				  Near	 DGROUP:05EE
??0004				  Near	 DGROUP:0655
??0005				  Near	 DGROUP:0679
??0006				  Near	 DGROUP:06E0
??0007				  Near	 DGROUP:0704
??0008				  Near	 DGROUP:076B
??0009				  Near	 DGROUP:078F
??000A				  Near	 DGROUP:2326
??000B				  Near	 DGROUP:2379
??000C				  Near	 DGROUP:248B
??000D				  Near	 DGROUP:24F3
??DATE				  Text	 "12/24/19"
??FILENAME			  Text	 "tree	  "
??TIME				  Text	 "01:37:57"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACCUMULATIVE_STORAGE		  Dword	 DGROUP:25BE
ADD_ACCUMULATIVE_STORAGE_FROM_DT  Near	 DGROUP:22E2
A
ALL_FILES			  Byte	 DGROUP:1F14
BUF				  Byte	 DGROUP:081A
CD				  Near	 DGROUP:016C
CD_ERROR			  Near	 DGROUP:017A
CD_FAILS			  Byte	 DGROUP:01F7
CLOSE_ERR_6			  Byte	 DGROUP:03F9
CLOSE_FILE			  Near	 DGROUP:02EA
COUNT_DTA			  Byte	 DGROUP:2602
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:1E06
COUNT_SUBFILES_HERE		  Near	 DGROUP:21CB
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:21ED
CREATE_FIRST_TRANSITION_TABLE	  Near	 DGROUP:04F1
CREATE_LAST_TRANSITION_TABLE	  Near	 DGROUP:0607
CREATE_LEVEL_SHIFT_TRANSITION_TA  Near	 DGROUP:0692
BLE
CREATE_MIDDLE_TRANSITION_TABLE	  Near	 DGROUP:057C
CREATE_SPACE_TRANSITION_TABLE	  Near	 DGROUP:071D
CURRENT_FOLDER			  Byte	 DGROUP:2576
CURRENT_ID_ENTITY		  Word	 DGROUP:2571
CURRENT_MAX_ENTITIES		  Word	 DGROUP:2702
DADD				  Near	 DGROUP:1F52
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 53
Symbol Table



DADD_FROM			  Near	 DGROUP:1F44
DATETIME			  Byte	 DGROUP:2131
DDIV10				  Near	 DGROUP:1F6A
DEEP_LEVEL			  Byte	 DGROUP:1F0B
DOUBLEWORD			  Dword	 DGROUP:1F93
DTA				  Byte	 DGROUP:2682
END_FILE_CHAR			  Byte	 DGROUP:02B0
EXT				  Near	 DGROUP:044B
FILENAME			  Byte	 DGROUP:1EC9
FILE_EXT			  Byte	 DGROUP:1F0D
FILE_MASK			  Byte	 DGROUP:1F0C
FILE_NEWLINE			  Byte	 DGROUP:0425
FIND_FIRST_ERROR		  Near	 DGROUP:2518
FIND_FIRST_FAILS		  Byte	 DGROUP:253A
FIND_FIRST_FILE			  Near	 DGROUP:012D
FIND_FIRST_FOLDER		  Near	 DGROUP:013A
FIND_NEXT			  Near	 DGROUP:0147
FIND_NEXT_ERROR			  Near	 DGROUP:2527
FIND_NEXT_FAILS			  Byte	 DGROUP:2556
FIRST_FILE_CHAR			  Byte	 DGROUP:02AC
FIRST_PARSED			  Byte	 DGROUP:07CB
FIRST_TERMINAL			  Byte	 DGROUP:07C6
FOLDER_MASK			  Byte	 DGROUP:1F12
FP				  Byte	 DGROUP:080F
GET_DWORD			  Near	 DGROUP:1F24
GET_DWORD_ADDR			  Near	 DGROUP:1F30
HELLO_DATE			  Byte	 DGROUP:211F
HELLO_TIME			  Byte	 DGROUP:210D
IS_FILE				  Word	 DGROUP:25BA
IS_FOLDER			  Near	 DGROUP:014C
IS_SILENT			  Word	 DGROUP:25B8
IS_VALID_NAME			  Near	 DGROUP:22CB
L1				  Near	 DGROUP:032F
L12				  Near	 DGROUP:037F
L2				  Near	 DGROUP:033F
L3				  Near	 DGROUP:034F
L4				  Near	 DGROUP:035F
L5				  Near	 DGROUP:036F
LAST_PARSED			  Byte	 DGROUP:07EA
LAST_TERMINAL			  Byte	 DGROUP:07C8
LEVEL_SHIFT			  Byte	 DGROUP:0290
LEVEL_SHIFT_PARSED		  Byte	 DGROUP:07F8
LEVEL_SHIFT_TERMINAL		  Byte	 DGROUP:07C9
LHP				  Byte	 DGROUP:0815
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:23C6
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:2398
LIST_SUBFILES_RECURSIVE_LOOP_CD_  Near	 DGROUP:24DD
BACK
LL5				  Near	 DGROUP:02C9
LL6				  Near	 DGROUP:02D9
LP				  Byte	 DGROUP:0813
MIDDLE_FILE_CHAR		  Byte	 DGROUP:02AE
MIDDLE_PARSED			  Byte	 DGROUP:07DA
MIDDLE_TERMINAL			  Byte	 DGROUP:07C7
MP				  Byte	 DGROUP:0811
NEWLINE				  Byte	 DGROUP:020F
NO_MORE_FILES			  Byte	 DGROUP:2539
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 54
Symbol Table



NUM				  Byte	 DGROUP:214B
OLD_LEVEL_SHIFT			  Byte	 DGROUP:028E
OPEN_ERR_1			  Byte	 DGROUP:0390
OPEN_ERR_12			  Byte	 DGROUP:03E7
OPEN_ERR_2			  Byte	 DGROUP:03A8
OPEN_ERR_3			  Byte	 DGROUP:03B7
OPEN_ERR_4			  Byte	 DGROUP:03C6
OPEN_ERR_5			  Byte	 DGROUP:03D9
OPEN_READ			  Near	 DGROUP:0302
PARENT_FOLDER			  Byte	 DGROUP:2573
PARSE_ARGS			  Near	 DGROUP:1E3A
PARSE_COMMAND_LINE		  Near	 DGROUP:1E25
PARSE_D				  Near	 DGROUP:1E57
PARSE_END			  Near	 DGROUP:1EC8
PARSE_ERROR			  Byte	 DGROUP:07A8
PARSE_F				  Near	 DGROUP:1E65
PARSE_FILE			  Near	 DGROUP:044C
PARSE_FILE_FROM			  Near	 DGROUP:0427
PARSE_NEWLINE			  Byte	 DGROUP:080D
PARSE_O				  Near	 DGROUP:1E83
PARSE_S				  Near	 DGROUP:1E71
PARSE_T				  Near	 DGROUP:1E7A
PRINT_DATETIMESTAMP		  Near	 DGROUP:202B
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0211
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0278
READ_ERR_5			  Byte	 DGROUP:0408
READ_ERR_6			  Byte	 DGROUP:0416
READ_FROM_FILE			  Near	 DGROUP:02B2
REMAINDER			  Word	 DGROUP:1F91
RESET_LEVEL_SHIFT		  Near	 DGROUP:0267
ROOT_FOLDER			  Byte	 DGROUP:2578
SAVE_CWD			  Near	 DGROUP:0199
SET_ACCUMULATIVE_STORAGE_FROM_DI  Near	 DGROUP:230D
R
SET_DWORD			  Near	 DGROUP:1F18
SET_DWORD_FROM			  Near	 DGROUP:1F36
SET_LEVEL_SHIFT			  Near	 DGROUP:0256
SHOW_DATETIME			  Near	 DGROUP:226F
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:2222
SHOW_STORAGE			  Near	 DGROUP:2293
SKIP_STORAGE_ACCUMULATING	  Word	 DGROUP:25BC
SPAC				  Byte	 DGROUP:0817
SPACE				  Byte	 DGROUP:02A5
SPACE_TERMINAL			  Byte	 DGROUP:07CA
START				  Near	 DGROUP:0100
STATE				  Byte	 DGROUP:0819
STORAGE				  Byte	 DGROUP:25C2
STORE_DWORD_TO_STRING		  Near	 DGROUP:1FD5
STORE_IINT_TO_STRING		  Near	 DGROUP:1F97
TIME_NEWLINE			  Byte	 DGROUP:2149
TIME_SEMICOLON			  Byte	 DGROUP:2145
TIME_SPACE			  Byte	 DGROUP:2147
TRANSITION_TABLE		  Byte	 DGROUP:081C
USE_STORAGE			  Byte	 DGROUP:1F09
USE_TIME			  Byte	 DGROUP:1F0A
WORKING_FOLDER			  Byte	 DGROUP:01B7
ZEROS_ACCUMULATIVE_STORAGE	  Near	 DGROUP:22FA
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 55
Symbol Table



ZEROS_DWORD			  Near	 DGROUP:2304
ZERO_END_FILE			  Byte	 DGROUP:02AA
ZERO_FIRST_FILE			  Byte	 DGROUP:02A8
_CLOSE_FILE_END			  Near	 DGROUP:0301
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:1E24
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:1E0D
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:221E
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:2207
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:2217
_DADD_ADD_ONE			  Near	 DGROUP:1F60
_DADD_NO_ADD_ONE		  Near	 DGROUP:1F61
_DDIV10				  Near	 DGROUP:1F78
_IS_FOLDER_END			  Near	 DGROUP:016B
_IS_FOLDER_FALSE		  Near	 DGROUP:0166
_IS_FOLDER_TRUE			  Near	 DGROUP:0161
_IS_VALID_NAME_END		  Near	 DGROUP:22E1
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:2513
_LIST_SUBFILES_RECURSIVE_FOLDER	  Near	 DGROUP:2435
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:2440
CHECK_SILENCE
_LIST_SUBFILES_RECURSIVE_FOLDER_  Near	 DGROUP:2457
SERACH_LOGIC
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:23ED
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:2481
EUDOGRAPHIC_HACK_END
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:2506
_OPEN_READ_END			  Near	 DGROUP:038F
_PARSE_FILE_EXT			  Near	 DGROUP:04EF
_PARSE_FILE_LOOP		  Near	 DGROUP:0450
_PARSE_FILE_NEXT		  Near	 DGROUP:04A2
_PARSE_FILE_NEXT_TERMINAL_1	  Near	 DGROUP:04B3
_PARSE_FILE_NEXT_TERMINAL_2	  Near	 DGROUP:04C1
_PARSE_FILE_NEXT_TERMINAL_3	  Near	 DGROUP:04CF
_PARSE_FILE_NEXT_TERMINAL_4	  Near	 DGROUP:04DE
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0255
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0226
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:024C
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:023A
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0243
_LEVEL_MIDDLE
_PRINT_STORAGE			  Near	 DGROUP:22B2
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:028D
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:027E
_READ_FORM_FILE_END		  Near	 DGROUP:02E9
_SHOW_FILENAME_FROM_DTA_DATETIME  Near	 DGROUP:224A
_SHOW_FILENAME_FROM_DTA_END	  Near	 DGROUP:2264
_SHOW_FILENAME_FROM_DTA_STORAGE	  Near	 DGROUP:2257
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:2226
ME
_SHOW_STORAGE_FILE		  Near	 DGROUP:22A3
_SHOW_STORAGE_FOLDER		  Near	 DGROUP:22AC
_STORE_DWORD_TO_STRING_DIRECT	  Near	 DGROUP:1FE1
_STORE_DWORD_TO_STRING_DIRECT_NE  Near	 DGROUP:1FF4
XT_LOOP
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 56
Symbol Table



_STORE_DWORD_TO_STRING_END	  Near	 DGROUP:202A
_STORE_DWORD_TO_STRING_INVERSE	  Near	 DGROUP:2014
_STORE_DWORD_TO_STRING_INVERSE_L  Near	 DGROUP:201B
OOP
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:2014
ING_END
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:2007
ING_LOOP
_STORE_DWORD_TO_STRING_ZERO_PADD  Near	 DGROUP:2005
ING_START
_STORE_IINT_TO_STRING_DIRECT	  Near	 DGROUP:1FA2
_STORE_IINT_TO_STRING_END	  Near	 DGROUP:1FD4
_STORE_IINT_TO_STRING_INVERSE	  Near	 DGROUP:1FBE
_STORE_IINT_TO_STRING_INVERSE_LO  Near	 DGROUP:1FC5
OP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:1FBE
NG_END
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:1FB1
NG_LOOP
_STORE_IINT_TO_STRING_ZERO_PADDI  Near	 DGROUP:1FAF
NG_START

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
PUT
RESTORE
SET_DTA
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  2704 Word	  Public  CODE
Turbo Assembler	 Version 4.1	    12/24/19 01:38:02	    Page 57
Error Summary



*Warning* dtafunc.asm(569) Missing operand - trailing ?	assumed
