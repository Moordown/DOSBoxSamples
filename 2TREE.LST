Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 get_offset macro state
1    45					     xor dx, dx
1    46					     xor ax, ax
1    47					     mov al, state
1    48					     shl ax, 8
1    49					 endm get_offset
1    50
1    51					 to_non_space macro addr
1    52					     local l1, l2
1    53					     mov si, addr
1    54					 l1:
1    55					     mov byte ptr al, [si]
1    56					     cmp al, 20h
1    57					     je	l2
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 2
2tree.ASM



1    58					     cmp al, 0
1    59					     je	l2
1    60					     inc si
1    61					     jmp l1
1    62					 l2:
1    63					     inc si
1    64					     mov ax, si
1    65					 endm
1    66
1    67					 set_transition	macro buf, from, to, char
1    68					     load<bx, dx>
1    69					     get_offset	from
1    70
1    71					     add ax, offset buf
1    72					     add ax, char
1    73
1    74					     mov bx, ax
1    75					     mov byte ptr [bx],	to
1    76					     restore<dx, bx>
1    77					 endm
1    78
1    79					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    80					     local l1, end
1    81					     mov bx, start
1    82					     mov cx, iterations
1    83					 l1:
1    84					     cmp cx, 0
1    85					     je	end
1    86
1    87					     load <bx,cx>
1    88					     set_transition buf	from to	bx
1    89					     restore <cx,bx>
1    90
1    91					     inc bx
1    92					     dec cx
1    93					     jmp l1
1    94					 end:
1    95					 endm
1    96
1    97					 set_zero macro	state
1    98					     mov al, 0
1    99					     mov byte ptr [state], al
1   100					 endm
1   101
1   102					 set_transition_for_all	macro buf, from, to
1   103					     set_transition_length_from_start buf, from, to, 0,	255
1   104					 endm
1   105
1   106					 set_transition_for_digits macro buf, from, to
1   107					     set_transition_length_from_start buf, from, to, 30, 10
1   108					 endm
1   109
1   110					 set_transition_for_letters macro buf, from, to
1   111					     set_transition_length_from_start buf, from, to, 97, 26
1   112					     set_transition_length_from_start buf, from, to, 65, 26
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 3
2tree.ASM



1   115					 get_transition	macro buf, from, char
1   116					     load <dx>
1   117					     get_offset	from
1   118					     restore <dx>
1   119
1   120					     add ax, offset buf
1   121					     add ax, char
1   122
1   123					     mov bx, ax
1   124					     xor ax, ax
1   125					     mov al, byte ptr [bx]
1   126					 endm
1   127
1   128					 put macro from, to, position
1   129					     xor dx, dx
1   130					     xor bx, bx
1   131
1   132					     mov dx, offset to
1   133					     mov bl, byte ptr [position]
1   134					     add dx, bx
1   135
1   136					     mov bl, byte ptr [from]
1   137					     mov byte ptr [edx], bl
1   138					     inc [position]
1   139					 endm
1   140
1   141					 clear_mes macro mes, lastidx
1   142					     local l1, end
1   143					     mov bx, offset mes
1   144					     mov cl, byte ptr [lastidx]
1   145					     inc cl
1   146					 l1:
1   147					     cmp cl, 0
1   148					     je	end
1   149					     mov byte ptr [bx],	'$'
1   150					     inc bx
1   151					     dec cl
1   152					     jmp l1
1   153					 end:
1   154					     mov bl, 0
1   155					     mov byte ptr [lastidx], bl
1   156					 endm
    157
    158	    0000			 model tiny
    159					 .386
    160	    0000			 .code
    161					 org 100h
    162	    0100			 start:
    163	    0100  E8 02D7		     call save_cwd
    164	    0103  B9 0000		     mov cx, 0
    165	    0106  51			     push cx
    166	    0107  E8 02B8		     call set_dta
    167	    010A  E8 019A		     call parse_command_line
    168
    169					     ;
    170					     ;	 start tree
    171					     ;
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 4
2tree.ASM



    172	    010D  B8 0545r		     mov ax, offset root_folder
    173	    0110  B9 0000		     mov cx, 0
    174	    0113  51			     push cx
    175	    0114  50			     push ax
    176	    0115  E8 001D		     call list_subfiles_recursive_from
    177
    178					     ;
    179					     ;	 cd to start folder
    180					     ;
    181	    0118  B8 0505r		     mov ax, offset working_folder
    182	    011B  50			     push ax
    183					     break_point <ax>
1   184					     load <ax>
3   185	    011C  50				 push ax
1   186	    011D  33 C0			     xor ax, ax
1   187	    011F  33 C0			     xor ax, ax
1   188	    0121  33 C0			     xor ax, ax
1   189	    0123  33 C0			     xor ax, ax
1   190	    0125  33 C0			     xor ax, ax
1   191	    0127  33 C0			     xor ax, ax
1   192	    0129  33 C0			     xor ax, ax
1   193	    012B  33 C0			     xor ax, ax
1   194					     restore <ax>
3   195	    012D  58				 pop ax
    196	    012E  E8 0264		     call cd
    197					     exit
1   198	    0131  B4 00			     mov ah, 00h
1   199	    0133  CD 21			     int 21h
    200
    201	    0135			 list_subfiles_recursive_from:
    202	    0135  5B			     pop bx	 ; ret address
    203	    0136  58			     pop ax	 ; deep	level
    204	    0137  59			     pop cx	 ; root	folder offset
    205	    0138  53			     push bx
    206					     load <cx>
2   207	    0139  51				 push cx
    208	    013A  50			     push ax
    209	    013B  E8 0257		     call cd
    210					     restore <cx>
2   211	    013E  59				 pop cx
    212
    213					     ;
    214					     ; list subfolder
    215					     ;
    216	    013F  BE 02F7r		     mov si, offset find_first_folder
    217	    0142  BB 0000		     mov bx, 0
    218	    0145  B8 04E2r		     mov ax, offset folder_mask
    219					     load <cx>
2   220	    0148  51				 push cx
    221	    0149  56			     push si
    222	    014A  53			     push bx
    223	    014B  50			     push ax
    224	    014C  51			     push cx
    225	    014D  E8 0013		     call list_subfiles_recursive
    226					     restore <cx>
2   227	    0150  59				 pop cx
    228
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 5
2tree.ASM



    229					     ;
    230					     ; list files
    231					     ;
    232	    0151  BE 02EAr		     mov si, offset find_first_file
    233	    0154  8B D8			     mov bx, ax
    234	    0156  B8 04DCr		     mov ax, offset file_mask
    235					     load <cx>
2   236	    0159  51				 push cx
    237	    015A  56			     push si
    238	    015B  53			     push bx
    239	    015C  50			     push ax
    240	    015D  51			     push cx
    241	    015E  E8 0002		     call list_subfiles_recursive
    242					     restore <cx>
2   243	    0161  59				 pop cx
    244	    0162  C3			     ret
    245
    246	    0163			 list_subfiles_recursive:
    247					     ;
    248					     ;	 save current files
    249					     ;
    250	    0163  E8 02C7		     call count_subfiles_here
    251	    0166  A3 04D7r		     mov word ptr [current_max_entities], ax
    252
    253	    0169  5A			     pop dx
    254	    016A  59			     pop cx ; deep level
    255	    016B  58			     pop ax ; filemask offset
    256	    016C  5B			     pop bx ; current index
    257	    016D  5E			     pop si ; search address
    258	    016E  52			     push dx
    259
    260					     load <cx, ax, bx, si>
2   261	    016F  51				 push cx
2   262	    0170  50				 push ax
2   263	    0171  53				 push bx
2   264	    0172  56				 push si
    265	    0173  51			     push cx
    266	    0174  E8 024B		     call set_dta
    267					     restore <si, bx, ax, cx>
2   268	    0177  5E				 pop si
2   269	    0178  5B				 pop bx
2   270	    0179  58				 pop ax
2   271	    017A  59				 pop cx
    272
    273					     load <bx, cx>
2   274	    017B  53				 push bx
2   275	    017C  51				 push cx
    276	    017D  50			     push ax
    277	    017E  FF D6			     call si
    278	    0180  73 03			     jnc _list_subfiles_recursive_loop
    279	    0182  E9 00C7		     jmp _list_subfiles_recursive_end
    280	    0185			 _list_subfiles_recursive_loop:
    281					     restore <cx>
2   282	    0185  59				 pop cx
    283	    0186  51			     push cx
    284	    0187  E8 017A		     call is_valid_name
    285					     load <cx>
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 6
2tree.ASM



2   286	    018A  51				 push cx
    287	    018B  3D 0001		     cmp ax, 1
    288	    018E  0F 85	00AD		     jne _list_subfiles_recursive_next
    289
    290					     ;
    291					     ;	 increment current index in subfiles
    292					     ;
    293					     restore <cx, bx>
2   294	    0192  59				 pop cx
2   295	    0193  5B				 pop bx
    296	    0194  43			     inc bx
    297					     load <bx, cx>
2   298	    0195  53				 push bx
2   299	    0196  51				 push cx
    300	    0197  53			     push bx
    301	    0198  51			     push cx
    302	    0199  E8 0180		     call show_filename_from_dta
    303
    304					     ;
    305					     ;	 check if folder
    306					     ;
    307					     restore <cx>
2   308	    019C  59				 pop cx
    309					     load <cx>
2   310	    019D  51				 push cx
    311	    019E  51			     push cx
    312	    019F  E8 00C1		     call is_folder
    313	    01A2  3D 0001		     cmp ax, 1
    314	    01A5  0F 85	0096		     jne _list_subfiles_recursive_next
    315
    316					     ;
    317					     ;	 check deep level
    318					     ;
    319					     restore <cx>
2   320	    01A9  59				 pop cx
    321					     load <cx>
2   322	    01AA  51				 push cx
    323	    01AB  33 DB			     xor bx, bx
    324	    01AD  8A 1E	04DBr		     mov bl, byte ptr [deep_level]
    325	    01B1  3B CB			     cmp cx, bx
    326	    01B3  0F 8D	0088		     jge _list_subfiles_recursive_next
    327
    328					     ;
    329					     ;	 pseudographic hack
    330					     ;
    331					     restore <cx, bx>
2   332	    01B7  59				 pop cx
2   333	    01B8  5B				 pop bx
    334					     load <bx, cx>
2   335	    01B9  53				 push bx
2   336	    01BA  51				 push cx
    337
    338	    01BB  3B 1E	04D7r		     cmp bx, word ptr [current_max_entities]
    339	    01BF  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack
    340	    01C1  BB 04EAr		     mov bx, offset level_shift
    341	    01C4  03 D9			     add bx, cx
    342	    01C6  A0 04F5r		     mov al, byte ptr [space]
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 7
2tree.ASM



    343	    01C9  88 07			     mov byte ptr [bx],	al
    344	    01CB			 _list_subfiles_recursive_loop_pseudographic_hack:
    345
    346					     ;
    347					     ; start new search
    348					     ;
    349	    01CB  A1 04D7r		     mov ax, word ptr [current_max_entities]
    350					     load <ax>
2   351	    01CE  50				 push ax
    352
    353					     ;
    354					     ;	 cd to subfolder
    355					     ;
    356					     load <cx>
2   357	    01CF  51				 push cx
    358	    01D0  51			     push cx
    359	    01D1  E8 007D		     call move_dta
    360	    01D4  05 001E		     add ax, 1Eh
    361
    362	    01D7  50			     push ax
    363					     break_point <bx>
1   364					     load <bx>
3   365	    01D8  53				 push bx
1   366	    01D9  33 DB			     xor bx, bx
1   367	    01DB  33 DB			     xor bx, bx
1   368	    01DD  33 DB			     xor bx, bx
1   369	    01DF  33 DB			     xor bx, bx
1   370	    01E1  33 DB			     xor bx, bx
1   371	    01E3  33 DB			     xor bx, bx
1   372	    01E5  33 DB			     xor bx, bx
1   373	    01E7  33 DB			     xor bx, bx
1   374					     restore <bx>
3   375	    01E9  5B				 pop bx
    376	    01EA  E8 01A8		     call cd
    377					     restore <cx>
2   378	    01ED  59				 pop cx
    379
    380	    01EE  41			     inc cx
    381					     ;
    382					     ;	 list subfiles from subfolder
    383					     ;
    384					     load <cx>
2   385	    01EF  51				 push cx
    386	    01F0  BB 0000		     mov bx, 0
    387	    01F3  B8 04E2r		     mov ax, offset folder_mask
    388	    01F6  BE 02F7r		     mov si, offset find_first_folder
    389
    390	    01F9  56			     push si
    391	    01FA  53			     push bx
    392	    01FB  50			     push ax
    393	    01FC  51			     push cx
    394	    01FD  E8 FF63		     call list_subfiles_recursive
    395					     restore <cx>
2   396	    0200  59				 pop cx
    397
    398
    399					     ;
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 8
2tree.ASM



    400					     ;	 list subfolders from subfolder
    401					     ;
    402					     load <cx>
2   403	    0201  51				 push cx
    404	    0202  8B D8			     mov bx, ax
    405	    0204  B8 04DCr		     mov ax, offset file_mask
    406	    0207  BE 02EAr		     mov si, offset find_first_file
    407
    408	    020A  56			     push si
    409	    020B  53			     push bx
    410	    020C  50			     push ax
    411	    020D  51			     push cx
    412	    020E  E8 FF52		     call list_subfiles_recursive
    413					     restore <cx>
2   414	    0211  59				 pop cx
    415
    416					     ;
    417					     ;	 reverse pseudographic hack
    418					     ;
    419	    0212  BB 04EAr		     mov bx, offset level_shift
    420	    0215  03 D9			     add bx, cx
    421					     ; mov byte	ptr [bx], 179
    422	    0217  A0 04E8r		     mov al, byte ptr [old_level_shift]
    423	    021A  88 07			     mov byte ptr [bx],	al
    424
    425					     ;
    426					     ;	 cd back to this function
    427					     ;
    428	    021C  B8 0502r		     mov ax, offset parent_folder
    429	    021F  50			     push ax
    430					     break_point <cx>
1   431					     load <cx>
3   432	    0220  51				 push cx
1   433	    0221  33 C9			     xor cx, cx
1   434	    0223  33 C9			     xor cx, cx
1   435	    0225  33 C9			     xor cx, cx
1   436	    0227  33 C9			     xor cx, cx
1   437	    0229  33 C9			     xor cx, cx
1   438	    022B  33 C9			     xor cx, cx
1   439	    022D  33 C9			     xor cx, cx
1   440	    022F  33 C9			     xor cx, cx
1   441					     restore <cx>
3   442	    0231  59				 pop cx
    443	    0232  E8 0160		     call cd
    444
    445					     restore <ax>
2   446	    0235  58				 pop ax
    447	    0236  A3 04D7r		     mov word ptr [current_max_entities], ax
    448
    449					     restore <cx>
2   450	    0239  59				 pop cx
    451					     load <cx>
2   452	    023A  51				 push cx
    453	    023B  51			     push cx
    454	    023C  E8 0183		     call set_dta
    455	    023F			 _list_subfiles_recursive_next:
    456	    023F  E8 00A3		     call find_next
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 9
2tree.ASM



    457	    0242  0F 83	FF3F		     jnc _list_subfiles_recursive_loop
    458	    0246  3A 06	0486r		     cmp al, byte ptr [no_more_files]
    459	    024A  75 49			     jne find_next_error
    460	    024C			 _list_subfiles_recursive_end:
    461					     restore <cx, bx>
2   462	    024C  59				 pop cx
2   463	    024D  5B				 pop bx
    464	    024E  8B C3			     mov ax, bx
    465	    0250  C3			     ret
    466	    0251			 move_dta:
    467	    0251  5B			     pop bx
    468	    0252  59			     pop cx
    469	    0253  53			     push bx
    470
    471	    0254  33 C0			     xor ax, ax
    472	    0256  A0 0487r		     mov al, byte ptr [dta_len]
    473	    0259  F7 E1			     mul cx
    474
    475	    025B  BB 05C7r		     mov bx, offset dta
    476	    025E  03 D8			     add bx, ax
    477	    0260  8B C3			     mov ax, bx
    478	    0262  C3			     ret
    479	    0263			 is_folder:
    480	    0263  5B			     pop bx
    481	    0264  59			     pop cx
    482	    0265  53			     push bx
    483
    484	    0266  51			     push cx
    485	    0267  E8 FFE7		     call move_dta
    486
    487	    026A  05 0015		     add ax, 15h
    488	    026D  8B D8			     mov bx, ax
    489	    026F  8A 1F			     mov bl, byte ptr [bx]
    490	    0271  80 E3	10		     and bl, 10h
    491	    0274  80 FB	10		     cmp bl, 10h
    492	    0277  74 02			     je	_is_folder_true
    493	    0279  75 05			     jne _is_folder_false
    494	    027B			 _is_folder_true:
    495	    027B  B8 0001		     mov ax, 1
    496	    027E  EB 05			     jmp _is_folder_end
    497	    0280			 _is_folder_false:
    498	    0280  B8 0000		     mov ax, 0
    499	    0283  EB 00			     jmp _is_folder_end
    500	    0285			 _is_folder_end:
    501	    0285  C3			     ret
    502
    503	    0286			 find_first_error:
    504					     print_range <find_first_fails, newline>
2   505						 print <offset find_first_fails>
3   506	    0286  B4 09				 mov ah, 09h
3   507	    0288  BA 04A0r			 mov dx, offset	find_first_fails
3   508	    028B  CD 21				 int 21h
2   509						 print <offset newline>
3   510	    028D  B4 09				 mov ah, 09h
3   511	    028F  BA 05C5r			 mov dx, offset	newline
3   512	    0292  CD 21				 int 21h
    513	    0294  C3			     ret
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 10
2tree.ASM



    514	    0295			 find_next_error:
    515					     print_range <find_next_fails, newline>
2   516						 print <offset find_next_fails>
3   517	    0295  B4 09				 mov ah, 09h
3   518	    0297  BA 04BCr			 mov dx, offset	find_next_fails
3   519	    029A  CD 21				 int 21h
2   520						 print <offset newline>
3   521	    029C  B4 09				 mov ah, 09h
3   522	    029E  BA 05C5r			 mov dx, offset	newline
3   523	    02A1  CD 21				 int 21h
    524					     exit
1   525	    02A3  B4 00			     mov ah, 00h
1   526	    02A5  CD 21			     int 21h
    527
    528	    02A7			 parse_command_line:
    529					     ;
    530					     ; prepare root folder
    531					     ;
    532	    02A7  BE 0082		     mov si, 82h
    533	    02AA  B9 0040		     mov cx, 64
    534	    02AD  51			     push cx
    535	    02AE  56			     push si
    536	    02AF  E8 015C		     call count_no_space_no_zero_letters
    537	    02B2  8B C8			     mov cx, ax
    538	    02B4  BE 0082		     mov si, 82h
    539	    02B7  BF 0545r		     mov di, offset root_folder
    540	    02BA  F3> A4		     rep movsb
    541
    542	    02BC			 parse_args:
    543	    02BC  46			     inc si
    544	    02BD  46			     inc si
    545	    02BE  80 3C	64		     cmp byte ptr [si],	'd'
    546	    02C1  74 07			     je	parse_d
    547	    02C3  80 3C	66		     cmp byte ptr [si],	'f'
    548	    02C6  74 10			     je	parse_f
    549	    02C8  EB 1A			     jmp parse_end
    550	    02CA			 parse_d:
    551					     ;
    552					     ; parse_deep level
    553					     ;
    554	    02CA  46			     inc si
    555	    02CB  46			     inc si
    556	    02CC  8A 1C			     mov bl, byte ptr [si]
    557	    02CE  80 EB	30		     sub bl, 30h	     ; to number
    558	    02D1  88 1E	04DBr		     mov byte ptr [deep_level],	bl
    559	    02D5  46			     inc si
    560	    02D6  EB E4			     jmp parse_args
    561	    02D8			 parse_f:
    562					     ;
    563					     ; parse file extension
    564					     ;
    565	    02D8  46			     inc si
    566	    02D9  46			     inc si
    567	    02DA  BF 04DDr		     mov di, offset file_ext
    568	    02DD  B9 0004		     mov cx, 4
    569	    02E0  F3> A4		     rep movsb
    570	    02E2  EB D8			     jmp parse_args
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 11
2tree.ASM



    571	    02E4			 parse_end:
    572	    02E4  C3			     ret
    573	    02E5			 find_next:
    574	    02E5  B4 4F			     mov ah, 4Fh
    575	    02E7  CD 21			     int 21h
    576
    577	    02E9  C3			     ret
    578
    579	    02EA			 find_first_file:
    580	    02EA  5B			     pop bx
    581	    02EB  5A			     pop dx		; filename spec
    582	    02EC  B9 000F		     mov cx, 0fh	 ; include files
    583	    02EF  53			     push bx
    584
    585	    02F0  33 C0			     xor ax, ax
    586	    02F2  B4 4E			     mov ah, 4Eh
    587	    02F4  CD 21			     int 21h
    588	    02F6  C3			     ret
    589
    590	    02F7			 find_first_folder:
    591	    02F7  5B			     pop bx
    592	    02F8  5A			     pop dx		 ; filename spec
    593	    02F9  B9 0010		     mov cx, 10h	 ; include directories
    594	    02FC  53			     push bx
    595
    596	    02FD  33 C0			     xor ax, ax
    597	    02FF  B4 4E			     mov ah, 4Eh
    598	    0301  CD 21			     int 21h
    599	    0303  C3			     ret
    600
    601	    0304			 is_valid_name:
    602	    0304  5B			     pop bx
    603	    0305  59			     pop cx	 ; deep	level
    604	    0306  53			     push bx
    605
    606	    0307  51			     push cx
    607	    0308  E8 FF46		     call move_dta
    608
    609	    030B  05 001E		     add ax, 1Eh
    610	    030E  8B D8			     mov bx, ax
    611	    0310  B8 0001		     mov ax, 1
    612	    0313  80 3F	2E		     cmp byte ptr [bx],	'.'
    613	    0316  75 03			     jne _is_valid_name_end
    614	    0318  B8 0000		     mov ax, 0
    615	    031B			 _is_valid_name_end:
    616	    031B  C3			     ret
    617
    618	    031C			 show_filename_from_dta:
    619	    031C  5B			     pop bx
    620	    031D  59			     pop cx  ; deep level
    621	    031E  58			     pop ax  ; entity count
    622	    031F  53			     push bx
    623
    624	    0320			 _show_filename_from_dta_valid_name:
    625					     ;
    626					     ;	 pseudo	graphic	prefix
    627					     ;
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 12
2tree.ASM



    628					     load <ax>
2   629	    0320  50				 push ax
    630	    0321  51			     push cx
    631	    0322  E8 FF2C		     call move_dta
    632
    633	    0325  05 001E		     add ax, 1Eh
    634	    0328  8B D8			     mov bx, ax
    635					     restore <ax>
2   636	    032A  58				 pop ax
    637
    638					     load <cx, bx>
2   639	    032B  51				 push cx
2   640	    032C  53				 push bx
    641	    032D  50			     push ax	 ; entity count
    642	    032E  51			     push cx	 ; deep	level
    643	    032F  E8 001E		     call print_pseudographic_prefix
    644					     restore <bx, cx>
2   645	    0332  5B				 pop bx
2   646	    0333  59				 pop cx
    647
    648					     load <bx>
2   649	    0334  53				 push bx
    650	    0335  B9 000D		     mov cx, 13
    651	    0338  51			     push cx
    652	    0339  53			     push bx
    653	    033A  E8 00D1		     call count_no_space_no_zero_letters
    654	    033D  8B C8			     mov cx, ax
    655					     restore <bx>
2   656	    033F  5B				 pop bx
    657	    0340  51			     push cx
    658	    0341  53			     push bx
    659	    0342  E8 00B3		     call print_string_with_length
    660					     print_range <newline>
2   661						 print <offset newline>
3   662	    0345  B4 09				 mov ah, 09h
3   663	    0347  BA 05C5r			 mov dx, offset	newline
3   664	    034A  CD 21				 int 21h
    665	    034C  B8 0001		     mov ax, 1
    666	    034F  C3			     ret
    667	    0350			 print_pseudographic_prefix:
    668	    0350  5B			     pop bx
    669	    0351  59			     pop cx	 ; deep	level
    670	    0352  58			     pop ax	 ; entity count
    671	    0353  53			     push bx
    672
    673	    0354  83 F9	00		     cmp cx, 0
    674	    0357  74 0C			     je	_print_pseudographic_prefix_zero_level
    675					     load <cx, ax>
2   676	    0359  51				 push cx
2   677	    035A  50				 push ax
    678	    035B  B8 04EAr		     mov ax, offset level_shift
    679
    680	    035E  51			     push cx
    681	    035F  50			     push ax
    682	    0360  E8 0095		     call print_string_with_length
    683					     restore <ax, cx>
2   684	    0363  58				 pop ax
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 13
2tree.ASM



2   685	    0364  59				 pop cx
    686					 ; _print_pseudographic_prefix_loop:
    687					 ;     print_range <level_shift>
    688					 ;     dec cx
    689					 ;     cmp cx, 0
    690					 ;     jne _print_pseudographic_prefix_loop
    691	    0365			 _print_pseudographic_prefix_zero_level:
    692
    693	    0365  8B 1E	04D7r		     mov bx, word ptr [current_max_entities]
    694	    0369  3A C3			     cmp al, bl
    695	    036B  74 1E			     je	_print_pseudographic_prefix_zero_level_end
    696	    036D  3D 0001		     cmp ax, 1
    697	    0370  75 10			     jne _print_pseudographic_prefix_zero_level_middle
    698	    0372  83 F9	00		     cmp cx, 0
    699	    0375  74 02			     je	_print_pseudographic_prefix_zero_level_first
    700	    0377  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
    701	    0379			 _print_pseudographic_prefix_zero_level_first:
    702					     print_range <first_file_char>
2   703						 print <offset first_file_char>
3   704	    0379  B4 09				 mov ah, 09h
3   705	    037B  BA 04FCr			 mov dx, offset	first_file_char
3   706	    037E  CD 21				 int 21h
    707	    0380  EB 12			     jmp _print_pseudographic_prefix_end
    708	    0382			 _print_pseudographic_prefix_zero_level_middle:
    709					     print_range <middle_file_char>
2   710						 print <offset middle_file_char>
3   711	    0382  B4 09				 mov ah, 09h
3   712	    0384  BA 04FEr			 mov dx, offset	middle_file_char
3   713	    0387  CD 21				 int 21h
    714	    0389  EB 09			     jmp _print_pseudographic_prefix_end
    715	    038B			 _print_pseudographic_prefix_zero_level_end:
    716					     print_range <end_file_char>
2   717						 print <offset end_file_char>
3   718	    038B  B4 09				 mov ah, 09h
3   719	    038D  BA 0500r			 mov dx, offset	end_file_char
3   720	    0390  CD 21				 int 21h
    721	    0392  EB 00			     jmp _print_pseudographic_prefix_end
    722	    0394			 _print_pseudographic_prefix_end:
    723	    0394  C3			     ret
    724	    0395			 cd:
    725	    0395  5B			     pop bx ; ret addr
    726	    0396  5A			     pop dx ; root address
    727	    0397  53			     push bx ; ret addr
    728
    729					     load <dx>
2   730	    0398  52				 push dx
    731	    0399  33 C0			     xor ax, ax
    732	    039B  B4 3B			     mov ah, 3Bh
    733	    039D  CD 21			     int 21h
    734
    735	    039F  72 02			     jc	cd_error
    736					     restore <dx>
2   737	    03A1  5A				 pop dx
    738	    03A2  C3			     ret
    739	    03A3			 cd_error:
    740					     print_range <cd_fails, newline>
2   741						 print <offset cd_fails>
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 14
2tree.ASM



3   742	    03A3  B4 09				 mov ah, 09h
3   743	    03A5  BA 0488r			 mov dx, offset	cd_fails
3   744	    03A8  CD 21				 int 21h
2   745						 print <offset newline>
3   746	    03AA  B4 09				 mov ah, 09h
3   747	    03AC  BA 05C5r			 mov dx, offset	newline
3   748	    03AF  CD 21				 int 21h
    749					     restore <dx>
2   750	    03B1  5A				 pop dx
    751
    752	    03B2  B4 09				 mov ah, 09h
    753	    03B4  CD 21			     int 21h
    754
    755					     print_range <newline>
2   756						 print <offset newline>
3   757	    03B6  B4 09				 mov ah, 09h
3   758	    03B8  BA 05C5r			 mov dx, offset	newline
3   759	    03BB  CD 21				 int 21h
    760					     exit
1   761	    03BD  B4 00			     mov ah, 00h
1   762	    03BF  CD 21			     int 21h
    763	    03C1  C3			     ret
    764
    765	    03C2			 set_dta:
    766	    03C2  5B			     pop bx
    767	    03C3  59			     pop cx			 ; deep	level
    768	    03C4  53			     push bx
    769
    770	    03C5  BA 05C7r		     mov dx, offset dta
    771					     load <dx>
2   772	    03C8  52				 push dx
    773	    03C9  33 C0			     xor ax, ax
    774	    03CB  A0 0487r		     mov al, byte ptr [dta_len]
    775	    03CE  F7 E1			     mul cx
    776
    777					     restore <dx>
2   778	    03D0  5A				 pop dx
    779	    03D1  03 D0			     add dx, ax
    780
    781	    03D3  33 C0			     xor ax, ax
    782	    03D5  B4 1A			     mov ah, 1Ah
    783	    03D7  CD 21			     int 21h
    784
    785	    03D9  C3			     ret
    786
    787	    03DA			 save_cwd:
    788	    03DA  BE 0505r		     mov si, offset working_folder
    789
    790					     ;
    791					     ; save driver
    792					     ;
    793	    03DD  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    794	    03DF  CD 21			     int 21h
    795	    03E1  8A D0			     mov dl, al
    796	    03E3  80 C2	41		     add dl, 41h
    797	    03E6  88 14			     mov byte ptr [si],	dl
    798	    03E8  46			     inc si
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 15
2tree.ASM



    799	    03E9  C6 04	3A		     mov byte ptr [si],	':'
    800	    03EC  46			     inc si
    801	    03ED  C6 04	5C		     mov byte ptr [si],	'\'
    802	    03F0  46			     inc si
    803
    804					     ;
    805					     ; save folder
    806					     ;
    807	    03F1  32 D2			     xor dl, dl			 ; Actual drive
    808	    03F3  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    809	    03F5  CD 21			     int 21h
    810	    03F7  C3			     ret
    811	    03F8			 print_string_with_length:
    812	    03F8  5B			     pop bx ; ret address
    813	    03F9  5E			     pop si ; string offset
    814	    03FA  59			     pop cx ; string length
    815	    03FB  53			     push bx; ret address
    816	    03FC  33 C0			     xor ax, ax
    817	    03FE			 _print_string_with_length_loop:
    818	    03FE  B4 02			     mov ah, 02h
    819	    0400  8A 14			     mov dl, byte ptr [si]
    820	    0402  CD 21			     int 21h
    821	    0404  49			     dec cx
    822	    0405  46			     inc si
    823	    0406  83 F9	00		     cmp cx, 00h
    824	    0409  74 02			     je	_print_string_with_length_end
    825	    040B  EB F1			     jmp _print_string_with_length_loop
    826	    040D			 _print_string_with_length_end:
    827	    040D  C3			     ret
    828	    040E			 count_no_space_no_zero_letters:
    829	    040E  5B			     pop bx ; ret address
    830	    040F  5E			     pop si ; string offset
    831	    0410  59			     pop cx ; string length
    832	    0411  53			     push bx ; ret address
    833	    0412  B8 0000		     mov ax, 0
    834	    0415			 _count_non_space_symbols_loop:
    835	    0415  80 3C	20		     cmp byte ptr [si],	20h
    836	    0418  74 12			     je	_count_non_space_symbols_end
    837	    041A  80 3C	0D		     cmp byte ptr [si],	0Dh
    838	    041D  74 0D			     je	_count_non_space_symbols_end
    839	    041F  80 3C	00		     cmp byte ptr [si],	00h
    840	    0422  74 08			     je	_count_non_space_symbols_end
    841	    0424  3B C1			     cmp ax, cx
    842	    0426  74 04			     je	_count_non_space_symbols_end
    843	    0428  40			     inc ax
    844	    0429  46			     inc si
    845	    042A  EB E9			     jmp _count_non_space_symbols_loop
    846	    042C			 _count_non_space_symbols_end:
    847	    042C  C3			     ret
    848	    042D			 count_subfiles_here:
    849	    042D  B8 04DCr		     mov ax, offset file_mask
    850	    0430  BE 02EAr		     mov si, offset find_first_file
    851
    852	    0433  50			     push ax
    853	    0434  56			     push si
    854	    0435  E8 0017		     call count_subfiles_here_by_mask
    855					     load <ax>
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 16
2tree.ASM



2   856	    0438  50				 push ax
    857	    0439  B8 04E2r		     mov ax, offset folder_mask
    858	    043C  BE 02F7r		     mov si, offset find_first_folder
    859
    860	    043F  50			     push ax
    861	    0440  56			     push si
    862	    0441  E8 000B		     call count_subfiles_here_by_mask
    863	    0444  8B D8			     mov bx, ax
    864					     restore <ax>
2   865	    0446  58				 pop ax
    866	    0447  03 D8			     add bx, ax
    867	    0449  8B C3			     mov ax, bx
    868	    044B  A3 04D7r		     mov word ptr [current_max_entities], ax
    869	    044E  C3			     ret
    870	    044F			 count_subfiles_here_by_mask:
    871	    044F  5B			     pop bx
    872	    0450  5E			     pop si		 ; find_first address
    873	    0451  58			     pop ax		 ; mask	address
    874	    0452  53			     push bx
    875
    876					     load <ax, si>
2   877	    0453  50				 push ax
2   878	    0454  56				 push si
    879	    0455  B9 000B		     mov cx, 11		 ; set pointer to count_dta
    880	    0458  51			     push cx
    881	    0459  E8 FF66		     call set_dta
    882					     restore <si, ax>
2   883	    045C  5E				 pop si
2   884	    045D  58				 pop ax
    885
    886	    045E  B9 0000		     mov cx, 0
    887					     load <cx>
2   888	    0461  51				 push cx
    889	    0462  50			     push ax
    890	    0463  FF D6			     call si
    891	    0465  72 1B			     jc	_count_subfiles_from_end
    892	    0467			 _count_subfiles_from_loop:
    893	    0467  B9 000B		     mov cx, 11
    894	    046A  51			     push cx
    895	    046B  E8 FDE3		     call move_dta
    896	    046E  05 001E		     add ax, 1Eh
    897	    0471  8B D8			     mov bx, ax
    898	    0473  80 3F	2E		     cmp byte ptr [bx],	'.'
    899	    0476  74 03			     je	_count_subfiles_from_loop_next
    900
    901					     restore <cx>
2   902	    0478  59				 pop cx
    903	    0479  41			     inc cx
    904					     load <cx>
2   905	    047A  51				 push cx
    906	    047B			 _count_subfiles_from_loop_next:
    907	    047B  E8 FE67		     call find_next
    908	    047E  72 02			     jc	_count_subfiles_from_end
    909
    910	    0480  EB E5			     jmp _count_subfiles_from_loop
    911	    0482			 _count_subfiles_from_end:
    912					     restore <cx>
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 17
2tree.ASM



2   913	    0482  59				 pop cx
    914	    0483  8B C1			     mov ax, cx
    915	    0485  C3			     ret
    916					 ;
    917					 ; error codes
    918					 ;
    919	    0486  12			 no_more_files db 18
    920	    0487  2B			 dta_len db 2bh
    921
    922					 ;
    923					 ; error messages
    924					 ;
    925	    0488  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    926		  64 69	72 65 63 74 6F+
    927		  72 79	20 66 61 69 6C+
    928		  73 2E	24
    929	    04A0  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    930		  72 73	74 20 66 69 6C+
    931		  65 6E	61 6D 65 73 20+
    932		  66 61	69 6C 73 2E 24
    933	    04BC  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    934		  78 74	20 66 69 6C 65+
    935		  6E 61	6D 65 73 20 66+
    936		  61 69	6C 73 2E 24
    937
    938					 ;
    939					 ; int variables
    940					 ;
    941	    04D7  0000			 current_max_entities dw 0
    942	    04D9  0000			 current_id_entity dw 0
    943
    944					 ;
    945					 ;   parse arguments
    946					 ;
    947	    04DB  01			 deep_level db 1
    948	    04DC  2A			 file_mask db '*'
    949	    04DD  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    950	    04E2  2A 00			 folder_mask db	'*', 00h
    951	    04E4  2A 2E	2A 00		 all_files db '*.*', 00h
    952
    953					 ;
    954					 ;   pseudographic
    955					 ;
    956	    04E8  B3 24			 old_level_shift db 179, '$'
    957	    04EA  0A*(B3) 24		 level_shift db	10 dup(179), '$'
    958	    04F5  ?? 20	24		 space db, 32, '$'
    959
    960	    04F8  C3 24			 zero_first_file db 195, '$'
    961	    04FA  C0 24			 zero_end_file db 192, '$'
    962
    963	    04FC  C2 24			 first_file_char db 194, '$'
    964	    04FE  C3 24			 middle_file_char db 195, '$'
    965	    0500  C0 24			 end_file_char db 192, '$'
    966
    967					 ;
    968					 ; strings
    969					 ;
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 18
2tree.ASM



    970	    0502  2E 2E	00		 parent_folder db '..',	00h
    971	    0505  40*(00)		 working_folder	db 64 dup(00h)
    972	    0545  40*(00)		 root_folder db	64 dup(00h)
    973	    0585  40*(00)		 start_mask db 64 dup(00h)
    974	    05C5  0A 24			 newline db 0Ah, '$'
    975	    05C7  10CC*(00)		 dta db	4300 dup(0)
    976	    1693  2B*(00)		 count_dta db 43 dup(0)
    977					 end start
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 19
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/10/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "01:12:44"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:04E4
CD				  Near	 DGROUP:0395
CD_ERROR			  Near	 DGROUP:03A3
CD_FAILS			  Byte	 DGROUP:0488
COUNT_DTA			  Byte	 DGROUP:1693
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:040E
COUNT_SUBFILES_HERE		  Near	 DGROUP:042D
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:044F
CURRENT_ID_ENTITY		  Word	 DGROUP:04D9
CURRENT_MAX_ENTITIES		  Word	 DGROUP:04D7
DEEP_LEVEL			  Byte	 DGROUP:04DB
DTA				  Byte	 DGROUP:05C7
DTA_LEN				  Byte	 DGROUP:0487
END_FILE_CHAR			  Byte	 DGROUP:0500
FILE_EXT			  Byte	 DGROUP:04DD
FILE_MASK			  Byte	 DGROUP:04DC
FIND_FIRST_ERROR		  Near	 DGROUP:0286
FIND_FIRST_FAILS		  Byte	 DGROUP:04A0
FIND_FIRST_FILE			  Near	 DGROUP:02EA
FIND_FIRST_FOLDER		  Near	 DGROUP:02F7
FIND_NEXT			  Near	 DGROUP:02E5
FIND_NEXT_ERROR			  Near	 DGROUP:0295
FIND_NEXT_FAILS			  Byte	 DGROUP:04BC
FIRST_FILE_CHAR			  Byte	 DGROUP:04FC
FOLDER_MASK			  Byte	 DGROUP:04E2
IS_FOLDER			  Near	 DGROUP:0263
IS_VALID_NAME			  Near	 DGROUP:0304
LEVEL_SHIFT			  Byte	 DGROUP:04EA
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0163
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0135
MIDDLE_FILE_CHAR		  Byte	 DGROUP:04FE
MOVE_DTA			  Near	 DGROUP:0251
NEWLINE				  Byte	 DGROUP:05C5
NO_MORE_FILES			  Byte	 DGROUP:0486
OLD_LEVEL_SHIFT			  Byte	 DGROUP:04E8
PARENT_FOLDER			  Byte	 DGROUP:0502
PARSE_ARGS			  Near	 DGROUP:02BC
PARSE_COMMAND_LINE		  Near	 DGROUP:02A7
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 20
Symbol Table



PARSE_D				  Near	 DGROUP:02CA
PARSE_END			  Near	 DGROUP:02E4
PARSE_F				  Near	 DGROUP:02D8
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:0350
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:03F8
ROOT_FOLDER			  Byte	 DGROUP:0545
SAVE_CWD			  Near	 DGROUP:03DA
SET_DTA				  Near	 DGROUP:03C2
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:031C
SPACE				  Byte	 DGROUP:04F5
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0585
WORKING_FOLDER			  Byte	 DGROUP:0505
ZERO_END_FILE			  Byte	 DGROUP:04FA
ZERO_FIRST_FILE			  Byte	 DGROUP:04F8
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:042C
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:0415
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0482
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:0467
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:047B
_IS_FOLDER_END			  Near	 DGROUP:0285
_IS_FOLDER_FALSE		  Near	 DGROUP:0280
_IS_FOLDER_TRUE			  Near	 DGROUP:027B
_IS_VALID_NAME_END		  Near	 DGROUP:031B
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:024C
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0185
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:01CB
EUDOGRAPHIC_HACK
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:023F
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0394
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0365
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:038B
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0379
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0382
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:040D
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:03FE
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:0320
ME

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
Turbo Assembler	 Version 4.1	    12/10/19 01:12:45	    Page 21
Symbol Table



SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  16BE Word	  Public  CODE
