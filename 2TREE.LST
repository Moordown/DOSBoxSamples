Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 0164		     call save_cwd
    151	    0103  B8 03D6r		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  E8 0153		     call set_dta
    154	    010A  E8 00BD		     call parse_command_line
    155
    156					     ;
    157					     ;	 start tree
    158					     ;
    159	    010D  B8 0356r		     mov ax, offset root_folder
    160	    0110  B9 0000		     mov cx, 0
    161	    0113  51			     push cx
    162	    0114  50			     push ax
    163	    0115  E8 000B		     call list_subfiles_recursive_from
    164
    165					     ;
    166					     ;	 cd to start folder
    167					     ;
    168	    0118  B8 0316r		     mov ax, offset working_folder
    169	    011B  50			     push ax
    170	    011C  E8 0123		     call cd
    171					     exit
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 4
2tree.ASM



1   172	    011F  B4 00			     mov ah, 00h
1   173	    0121  CD 21			     int 21h
    174
    175	    0123			 list_subfiles_recursive_from:
    176	    0123  5B			     pop bx	 ; ret address
    177	    0124  58			     pop ax	 ; deep	level
    178	    0125  59			     pop cx	 ; root	folder offset
    179	    0126  53			     push bx
    180					     load <cx>
2   181	    0127  51				 push cx
    182	    0128  50			     push ax
    183	    0129  E8 0116		     call cd
    184					     restore <cx>
2   185	    012C  59				 pop cx
    186
    187					     ;
    188					     ; list subfiles
    189					     ;
    190	    012D  B8 0311r		     mov ax, offset folder_mask
    191					     load <cx>
2   192	    0130  51				 push cx
    193	    0131  50			     push ax
    194	    0132  51			     push cx
    195	    0133  E8 000C		     call list_subfiles_recursive
    196					     restore <cx>
2   197	    0136  59				 pop cx
    198
    199					     ;
    200					     ; list files
    201					     ;
    202	    0137  B8 030Br		     mov ax, offset file_mask
    203					     load <cx>
2   204	    013A  51				 push cx
    205	    013B  50			     push ax
    206	    013C  51			     push cx
    207	    013D  E8 0002		     call list_subfiles_recursive
    208					     restore <cx>
2   209	    0140  59				 pop cx
    210	    0141  C3			     ret
    211
    212	    0142			 list_subfiles_recursive:
    213	    0142  5B			     pop bx
    214	    0143  59			     pop cx ; deep level
    215	    0144  58			     pop ax ; filemask offset
    216	    0145  53			     push bx
    217					     ; mov ax, offset file_mask
    218					     load <cx>
2   219	    0146  51				 push cx
    220	    0147  50			     push ax
    221	    0148  E8 00C1		     call find_first
    222	    014B  72 59			     jc	find_first_error
    223	    014D			 _list_subfiles_recursive_loop:
    224	    014D  E8 00C9		     call show_filename_from_dta
    225	    0150  3D 0001		     cmp ax, 1
    226	    0153  75 2D			     jne _list_subfiles_recursive_next
    227
    228					     ;
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 5
2tree.ASM



    229					     ;	 check if folder
    230					     ;
    231	    0155  E8 0037		     call is_folder
    232	    0158  3D 0001		     cmp ax, 1
    233	    015B  75 25			     jne _list_subfiles_recursive_next
    234
    235					     ;
    236					     ;	 check deep level
    237					     ;
    238					     restore <cx>
2   239	    015D  59				 pop cx
    240					     load <cx>
2   241	    015E  51				 push cx
    242	    015F  33 DB			     xor bx, bx
    243	    0161  8A 1E	030Ar		     mov bl, byte ptr [deep_level]
    244	    0165  3B CB			     cmp cx, bx
    245	    0167  7D 19			     jge _list_subfiles_recursive_next
    246
    247					     ;
    248					     ; start new search
    249					     ;
    250
    251					     ;
    252					     ;	 cd to subfolder
    253					     ;
    254					     load <cx>
2   255	    0169  51				 push cx
    256	    016A  B8 03F4r		     mov ax, offset dta	+ 1Eh
    257	    016D  50			     push ax
    258	    016E  E8 00D1		     call cd
    259					     restore <cx>
2   260	    0171  59				 pop cx
    261
    262					     ;
    263					     ;	 list subfiles from subfolder
    264					     ;
    265	    0172  41			     inc cx
    266	    0173  B8 030Br		     mov ax, offset file_mask
    267	    0176  50			     push ax
    268	    0177  51			     push cx
    269	    0178  E8 FFC7		     call list_subfiles_recursive
    270
    271					     ;
    272					     ;	 cd to this function
    273					     ;
    274	    017B  B8 0313r		     mov ax, offset parent_folder
    275	    017E  50			     push ax
    276	    017F  E8 00C0		     call cd
    277
    278	    0182			 _list_subfiles_recursive_next:
    279	    0182  E8 0082		     call find_next
    280	    0185  73 C6			     jnc _list_subfiles_recursive_loop
    281	    0187  3A 06	02BAr		     cmp al, byte ptr [no_more_files]
    282	    018B  75 2B			     jne find_next_error
    283	    018D			 _list_subfiles_recursive_end:
    284					     restore <cx>
2   285	    018D  59				 pop cx
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 6
2tree.ASM



    286	    018E  C3			     ret
    287
    288	    018F			 is_folder:
    289	    018F  BB 03EBr		     mov bx, offset dta	+ 15h
    290	    0192  8A 1F			     mov bl, byte ptr [bx]
    291	    0194  80 FB	10		     cmp bl, 10h
    292	    0197  74 02			     je	_is_folder_true
    293	    0199  75 05			     jne _is_folder_false
    294	    019B			 _is_folder_true:
    295	    019B  B8 0001		     mov ax, 1
    296	    019E  EB 05			     jmp _is_folder_end
    297	    01A0			 _is_folder_false:
    298	    01A0  B8 0000		     mov ax, 0
    299	    01A3  EB 00			     jmp _is_folder_end
    300	    01A5			 _is_folder_end:
    301	    01A5  C3			     ret
    302
    303
    304
    305	    01A6			 find_first_error:
    306					     print_range <find_first_fails, newline>
2   307						 print <offset find_first_fails>
3   308	    01A6  B4 09				 mov ah, 09h
3   309	    01A8  BA 02D3r			 mov dx, offset	find_first_fails
3   310	    01AB  CD 21				 int 21h
2   311						 print <offset newline>
3   312	    01AD  B4 09				 mov ah, 09h
3   313	    01AF  BA 0401r			 mov dx, offset	newline
3   314	    01B2  CD 21				 int 21h
    315					     exit
1   316	    01B4  B4 00			     mov ah, 00h
1   317	    01B6  CD 21			     int 21h
    318	    01B8			 find_next_error:
    319					     print_range <find_next_fails, newline>
2   320						 print <offset find_next_fails>
3   321	    01B8  B4 09				 mov ah, 09h
3   322	    01BA  BA 02EFr			 mov dx, offset	find_next_fails
3   323	    01BD  CD 21				 int 21h
2   324						 print <offset newline>
3   325	    01BF  B4 09				 mov ah, 09h
3   326	    01C1  BA 0401r			 mov dx, offset	newline
3   327	    01C4  CD 21				 int 21h
    328					     exit
1   329	    01C6  B4 00			     mov ah, 00h
1   330	    01C8  CD 21			     int 21h
    331
    332	    01CA			 parse_command_line:
    333					     ;
    334					     ; prepare root folder
    335					     ;
    336	    01CA  BE 0082		     mov si, 82h
    337	    01CD  B9 0040		     mov cx, 64
    338	    01D0  51			     push cx
    339	    01D1  56			     push si
    340	    01D2  E8 00C6		     call count_no_space_no_zero_letters
    341	    01D5  8B C8			     mov cx, ax
    342	    01D7  BE 0082		     mov si, 82h
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 7
2tree.ASM



    343	    01DA  BF 0356r		     mov di, offset root_folder
    344	    01DD  F3> A4		     rep movsb
    345
    346	    01DF			 parse_args:
    347	    01DF  46			     inc si
    348	    01E0  46			     inc si
    349	    01E1  80 3C	64		     cmp byte ptr [si],	'd'
    350	    01E4  74 07			     je	parse_d
    351	    01E6  80 3C	66		     cmp byte ptr [si],	'f'
    352	    01E9  74 0F			     je	parse_f
    353	    01EB  EB 19			     jmp parse_end
    354	    01ED			 parse_d:
    355					     ;
    356					     ; parse_deep level
    357					     ;
    358	    01ED  46			     inc si
    359	    01EE  46			     inc si
    360	    01EF  8A 1C			     mov bl, byte ptr [si]
    361	    01F1  80 EB	30		     sub bl, 30h	     ; to number
    362	    01F4  88 1E	030Ar		     mov byte ptr [deep_level],	bl
    363	    01F8  EB E5			     jmp parse_args
    364	    01FA			 parse_f:
    365	    01FA  46			     inc si
    366	    01FB  46			     inc si
    367	    01FC  BF 030Cr		     mov di, offset file_ext
    368	    01FF  B9 0004		     mov cx, 4
    369	    0202  F3> A4		     rep movsb
    370	    0204  EB D9			     jmp parse_args
    371					     ;
    372					     ; parse file extension
    373					     ;
    374	    0206			 parse_end:
    375	    0206  C3			     ret
    376	    0207			 find_next:
    377	    0207  B4 4F			     mov ah, 4Fh
    378	    0209  CD 21			     int 21h
    379
    380	    020B  C3			     ret
    381
    382	    020C			 find_first:
    383	    020C  5B			     pop bx
    384	    020D  5A			     pop dx		 ; filename spec
    385	    020E  B9 0010		     mov cx, 10h	 ; include directories
    386	    0211  53			     push bx
    387
    388	    0212  33 C0			     xor ax, ax
    389	    0214  B4 4E			     mov ah, 4Eh
    390	    0216  CD 21			     int 21h
    391	    0218  C3			     ret
    392	    0219			 show_filename_from_dta:
    393	    0219  BB 03F4r		     mov bx, offset dta	+ 1Eh
    394	    021C  80 3F	2E		     cmp byte ptr [bx],	'.'
    395	    021F  75 04			     jne show_filename_from_dta_valid_name
    396	    0221  B8 0000		     mov ax, 0
    397	    0224  C3			     ret
    398	    0225			 show_filename_from_dta_valid_name:
    399	    0225  B9 000D		     mov cx, 13
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 8
2tree.ASM



    400	    0228  51			     push cx
    401	    0229  53			     push bx
    402	    022A  E8 006E		     call count_no_space_no_zero_letters
    403	    022D  8B C8			     mov cx, ax
    404	    022F  B8 03F4r		     mov ax, offset dta	+ 1Eh
    405	    0232  51			     push cx
    406	    0233  50			     push ax
    407	    0234  E8 004E		     call print_string_with_length
    408					     print_range <newline>
2   409						 print <offset newline>
3   410	    0237  B4 09				 mov ah, 09h
3   411	    0239  BA 0401r			 mov dx, offset	newline
3   412	    023C  CD 21				 int 21h
    413	    023E  B8 0001		     mov ax, 1
    414	    0241  C3			     ret
    415	    0242			 cd:
    416	    0242  5B			     pop bx ; ret addr
    417	    0243  5A			     pop dx ; root address
    418	    0244  53			     push bx ; ret addr
    419
    420	    0245  33 C0			     xor ax, ax
    421	    0247  B4 3B			     mov ah, 3Bh
    422	    0249  CD 21			     int 21h
    423
    424	    024B  72 01			     jc	cd_error
    425	    024D  C3			     ret
    426	    024E			 cd_error:
    427					     print_range <cd_fails, newline>
2   428						 print <offset cd_fails>
3   429	    024E  B4 09				 mov ah, 09h
3   430	    0250  BA 02BBr			 mov dx, offset	cd_fails
3   431	    0253  CD 21				 int 21h
2   432						 print <offset newline>
3   433	    0255  B4 09				 mov ah, 09h
3   434	    0257  BA 0401r			 mov dx, offset	newline
3   435	    025A  CD 21				 int 21h
    436	    025C  C3			     ret
    437
    438	    025D			 set_dta:
    439	    025D  5B			     pop bx
    440	    025E  5A			     pop dx			 ; dta address offset
    441	    025F  53			     push bx
    442
    443	    0260  33 C0			     xor ax, ax
    444	    0262  B4 1A			     mov ah, 1Ah
    445	    0264  CD 21			     int 21h
    446
    447	    0266  C3			     ret
    448
    449	    0267			 save_cwd:
    450	    0267  BE 0316r		     mov si, offset working_folder
    451
    452					     ;
    453					     ; save driver
    454					     ;
    455	    026A  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    456	    026C  CD 21			     int 21h
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 9
2tree.ASM



    457	    026E  8A D0			     mov dl, al
    458	    0270  80 C2	41		     add dl, 41h
    459	    0273  88 14			     mov byte ptr [si],	dl
    460	    0275  46			     inc si
    461	    0276  C6 04	3A		     mov byte ptr [si],	':'
    462	    0279  46			     inc si
    463	    027A  C6 04	5C		     mov byte ptr [si],	'\'
    464	    027D  46			     inc si
    465
    466					     ;
    467					     ; save folder
    468					     ;
    469	    027E  32 D2			     xor dl, dl			 ; Actual drive
    470	    0280  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    471	    0282  CD 21			     int 21h
    472	    0284  C3			     ret
    473	    0285			 print_string_with_length:
    474	    0285  5B			     pop bx ; ret address
    475	    0286  5E			     pop si ; string offset
    476	    0287  59			     pop cx ; string length
    477	    0288  53			     push bx; ret address
    478	    0289  33 C0			     xor ax, ax
    479	    028B			 _print_string_with_length_loop:
    480	    028B  B4 02			     mov ah, 02h
    481	    028D  8A 14			     mov dl, byte ptr [si]
    482	    028F  CD 21			     int 21h
    483	    0291  49			     dec cx
    484	    0292  46			     inc si
    485	    0293  83 F9	00		     cmp cx, 00h
    486	    0296  74 02			     je	_print_string_with_length_end
    487	    0298  EB F1			     jmp _print_string_with_length_loop
    488	    029A			 _print_string_with_length_end:
    489	    029A  C3			     ret
    490	    029B			 count_no_space_no_zero_letters:
    491	    029B  5B			     pop bx ; ret address
    492	    029C  5E			     pop si ; string offset
    493	    029D  59			     pop cx ; string length
    494	    029E  53			     push bx ; ret address
    495	    029F  B8 0000		     mov ax, 0
    496	    02A2			 _count_non_space_symbols_loop:
    497	    02A2  80 3C	20		     cmp byte ptr [si],	20h
    498	    02A5  74 12			     je	_count_non_space_symbols_end
    499	    02A7  80 3C	0D		     cmp byte ptr [si],	0Dh
    500	    02AA  74 0D			     je	_count_non_space_symbols_end
    501	    02AC  80 3C	00		     cmp byte ptr [si],	00h
    502	    02AF  74 08			     je	_count_non_space_symbols_end
    503	    02B1  3B C1			     cmp ax, cx
    504	    02B3  74 04			     je	_count_non_space_symbols_end
    505	    02B5  40			     inc ax
    506	    02B6  46			     inc si
    507	    02B7  EB E9			     jmp _count_non_space_symbols_loop
    508	    02B9			 _count_non_space_symbols_end:
    509	    02B9  C3			     ret
    510					 ;
    511					 ; error codes
    512					 ;
    513	    02BA  12			 no_more_files db 18
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 10
2tree.ASM



    514					 ;
    515					 ; error messages
    516					 ;
    517	    02BB  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    518		  64 69	72 65 63 74 6F+
    519		  72 79	20 66 61 69 6C+
    520		  73 2E	24
    521	    02D3  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    522		  72 73	74 20 66 69 6C+
    523		  65 6E	61 6D 65 73 20+
    524		  66 61	69 6C 73 2E 24
    525	    02EF  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    526		  78 74	20 66 69 6C 65+
    527		  6E 61	6D 65 73 20 66+
    528		  61 69	6C 73 2E 24
    529					 ;
    530					 ;   parse arguments
    531					 ;
    532	    030A  01			 deep_level db 1
    533	    030B  2A			 file_mask db '*'
    534	    030C  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    535	    0311  2A 00			 folder_mask db	'*', 00h
    536					 ;
    537					 ; strings
    538					 ;
    539	    0313  2E 2E	00		 parent_folder db '..',	00h
    540	    0316  40*(00)		 working_folder	db 64 dup(00h)
    541	    0356  40*(00)		 root_folder db	64 dup(00h)
    542	    0396  40*(00)		 start_mask db 64 dup(00h)
    543	    03D6  2B*(00)		 dta db	43 dup(0)
    544	    0401  0A 24			 newline db 0Ah, '$'
    545					 end start
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/07/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "18:50:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0242
CD_ERROR			  Near	 DGROUP:024E
CD_FAILS			  Byte	 DGROUP:02BB
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:029B
DEEP_LEVEL			  Byte	 DGROUP:030A
DTA				  Byte	 DGROUP:03D6
FILE_EXT			  Byte	 DGROUP:030C
FILE_MASK			  Byte	 DGROUP:030B
FIND_FIRST			  Near	 DGROUP:020C
FIND_FIRST_ERROR		  Near	 DGROUP:01A6
FIND_FIRST_FAILS		  Byte	 DGROUP:02D3
FIND_NEXT			  Near	 DGROUP:0207
FIND_NEXT_ERROR			  Near	 DGROUP:01B8
FIND_NEXT_FAILS			  Byte	 DGROUP:02EF
FOLDER_MASK			  Byte	 DGROUP:0311
IS_FOLDER			  Near	 DGROUP:018F
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0142
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0123
NEWLINE				  Byte	 DGROUP:0401
NO_MORE_FILES			  Byte	 DGROUP:02BA
PARENT_FOLDER			  Byte	 DGROUP:0313
PARSE_ARGS			  Near	 DGROUP:01DF
PARSE_COMMAND_LINE		  Near	 DGROUP:01CA
PARSE_D				  Near	 DGROUP:01ED
PARSE_END			  Near	 DGROUP:0206
PARSE_F				  Near	 DGROUP:01FA
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0285
ROOT_FOLDER			  Byte	 DGROUP:0356
SAVE_CWD			  Near	 DGROUP:0267
SET_DTA				  Near	 DGROUP:025D
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0219
SHOW_FILENAME_FROM_DTA_VALID_NAM  Near	 DGROUP:0225
E
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0396
WORKING_FOLDER			  Byte	 DGROUP:0316
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:02B9
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02A2
Turbo Assembler	 Version 4.1	    12/07/19 18:50:19	    Page 12
Symbol Table



_IS_FOLDER_END			  Near	 DGROUP:01A5
_IS_FOLDER_FALSE		  Near	 DGROUP:01A0
_IS_FOLDER_TRUE			  Near	 DGROUP:019B
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:018D
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:014D
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0182
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:029A
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:028B

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0403 Word	  Public  CODE
