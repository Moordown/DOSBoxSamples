Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 get_offset macro state
1    45					     xor dx, dx
1    46					     xor ax, ax
1    47					     mov al, state
1    48					     shl ax, 8
1    49					 endm get_offset
1    50
1    51					 to_non_space macro addr
1    52					     local l1, l2
1    53					     mov si, addr
1    54					 l1:
1    55					     mov byte ptr al, [si]
1    56					     cmp al, 20h
1    57					     je	l2
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 2
2tree.ASM



1    58					     cmp al, 0
1    59					     je	l2
1    60					     inc si
1    61					     jmp l1
1    62					 l2:
1    63					     inc si
1    64					     mov ax, si
1    65					 endm
1    66
1    67					 set_transition	macro buf, from, to, char
1    68					     load<bx, dx>
1    69					     get_offset	from
1    70
1    71					     add ax, offset buf
1    72					     add ax, char
1    73
1    74					     mov bx, ax
1    75					     mov byte ptr [bx],	to
1    76					     restore<dx, bx>
1    77					 endm
1    78
1    79					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    80					     local l1, end
1    81					     mov bx, start
1    82					     mov cx, iterations
1    83					 l1:
1    84					     cmp cx, 0
1    85					     je	end
1    86
1    87					     load <bx,cx>
1    88					     set_transition buf	from to	bx
1    89					     restore <cx,bx>
1    90
1    91					     inc bx
1    92					     dec cx
1    93					     jmp l1
1    94					 end:
1    95					 endm
1    96
1    97					 set_zero macro	state
1    98					     mov al, 0
1    99					     mov byte ptr [state], al
1   100					 endm
1   101
1   102					 set_transition_for_all	macro buf, from, to
1   103					     set_transition_length_from_start buf, from, to, 0,	255
1   104					 endm
1   105
1   106					 set_transition_for_digits macro buf, from, to
1   107					     set_transition_length_from_start buf, from, to, 30, 10
1   108					 endm
1   109
1   110					 set_transition_for_letters macro buf, from, to
1   111					     set_transition_length_from_start buf, from, to, 97, 26
1   112					     set_transition_length_from_start buf, from, to, 65, 26
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 3
2tree.ASM



1   115					 get_transition	macro buf, from, char
1   116					     load <dx>
1   117					     get_offset	from
1   118					     restore <dx>
1   119
1   120					     add ax, offset buf
1   121					     add ax, char
1   122
1   123					     mov bx, ax
1   124					     xor ax, ax
1   125					     mov al, byte ptr [bx]
1   126					 endm
1   127
1   128					 put macro from, to, position
1   129					     xor dx, dx
1   130					     xor bx, bx
1   131
1   132					     mov dx, offset to
1   133					     mov bl, byte ptr [position]
1   134					     add dx, bx
1   135
1   136					     mov bl, byte ptr [from]
1   137					     mov byte ptr [edx], bl
1   138					     inc [position]
1   139					 endm
1   140
1   141					 clear_mes macro mes, lastidx
1   142					     local l1, end
1   143					     mov bx, offset mes
1   144					     mov cl, byte ptr [lastidx]
1   145					     inc cl
1   146					 l1:
1   147					     cmp cl, 0
1   148					     je	end
1   149					     mov byte ptr [bx],	'$'
1   150					     inc bx
1   151					     dec cl
1   152					     jmp l1
1   153					 end:
1   154					     mov bl, 0
1   155					     mov byte ptr [lastidx], bl
1   156					 endm
    157
    158	    0000			 model tiny
    159					 .386
    160	    0000			 .code
    161					 org 100h
    162	    0100			 start:
    163	    0100  E8 02D6		     call save_cwd
    164	    0103  B9 0000		     mov cx, 0
    165	    0106  51			     push cx
    166	    0107  E8 02B7		     call set_dta
    167	    010A  E8 019A		     call parse_command_line
    168
    169					     ;
    170					     ;	 start tree
    171					     ;
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 4
2tree.ASM



    172	    010D  B8 0544r		     mov ax, offset root_folder
    173	    0110  B9 0000		     mov cx, 0
    174	    0113  51			     push cx
    175	    0114  50			     push ax
    176	    0115  E8 001D		     call list_subfiles_recursive_from
    177
    178					     ;
    179					     ;	 cd to start folder
    180					     ;
    181	    0118  B8 0504r		     mov ax, offset working_folder
    182	    011B  50			     push ax
    183					     break_point <ax>
1   184					     load <ax>
3   185	    011C  50				 push ax
1   186	    011D  33 C0			     xor ax, ax
1   187	    011F  33 C0			     xor ax, ax
1   188	    0121  33 C0			     xor ax, ax
1   189	    0123  33 C0			     xor ax, ax
1   190	    0125  33 C0			     xor ax, ax
1   191	    0127  33 C0			     xor ax, ax
1   192	    0129  33 C0			     xor ax, ax
1   193	    012B  33 C0			     xor ax, ax
1   194					     restore <ax>
3   195	    012D  58				 pop ax
    196	    012E  E8 0263		     call cd
    197					     exit
1   198	    0131  B4 00			     mov ah, 00h
1   199	    0133  CD 21			     int 21h
    200
    201	    0135			 list_subfiles_recursive_from:
    202	    0135  5B			     pop bx	 ; ret address
    203	    0136  58			     pop ax	 ; deep	level
    204	    0137  59			     pop cx	 ; root	folder offset
    205	    0138  53			     push bx
    206					     load <cx>
2   207	    0139  51				 push cx
    208	    013A  50			     push ax
    209	    013B  E8 0256		     call cd
    210					     restore <cx>
2   211	    013E  59				 pop cx
    212
    213					     ;
    214					     ; list subfolder
    215					     ;
    216	    013F  BE 02F6r		     mov si, offset find_first_folder
    217	    0142  BB 0000		     mov bx, 0
    218	    0145  B8 04E1r		     mov ax, offset folder_mask
    219					     load <cx>
2   220	    0148  51				 push cx
    221	    0149  56			     push si
    222	    014A  53			     push bx
    223	    014B  50			     push ax
    224	    014C  51			     push cx
    225	    014D  E8 0013		     call list_subfiles_recursive
    226					     restore <cx>
2   227	    0150  59				 pop cx
    228
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 5
2tree.ASM



    229					     ;
    230					     ; list files
    231					     ;
    232	    0151  BE 02E9r		     mov si, offset find_first_file
    233	    0154  8B D8			     mov bx, ax
    234	    0156  B8 04DBr		     mov ax, offset file_mask
    235					     load <cx>
2   236	    0159  51				 push cx
    237	    015A  56			     push si
    238	    015B  53			     push bx
    239	    015C  50			     push ax
    240	    015D  51			     push cx
    241	    015E  E8 0002		     call list_subfiles_recursive
    242					     restore <cx>
2   243	    0161  59				 pop cx
    244	    0162  C3			     ret
    245
    246	    0163			 list_subfiles_recursive:
    247					     ;
    248					     ;	 save current files
    249					     ;
    250	    0163  E8 02C6		     call count_subfiles_here
    251	    0166  A3 04D6r		     mov word ptr [current_max_entities], ax
    252
    253	    0169  5A			     pop dx
    254	    016A  59			     pop cx ; deep level
    255	    016B  58			     pop ax ; filemask offset
    256	    016C  5B			     pop bx ; current index
    257	    016D  5E			     pop si ; search address
    258	    016E  52			     push dx
    259
    260					     load <cx, ax, bx, si>
2   261	    016F  51				 push cx
2   262	    0170  50				 push ax
2   263	    0171  53				 push bx
2   264	    0172  56				 push si
    265	    0173  51			     push cx
    266	    0174  E8 024A		     call set_dta
    267					     restore <si, bx, ax, cx>
2   268	    0177  5E				 pop si
2   269	    0178  5B				 pop bx
2   270	    0179  58				 pop ax
2   271	    017A  59				 pop cx
    272
    273					     load <bx, cx>
2   274	    017B  53				 push bx
2   275	    017C  51				 push cx
    276	    017D  50			     push ax
    277	    017E  FF D6			     call si
    278	    0180  73 03			     jnc _list_subfiles_recursive_loop
    279	    0182  E9 00C7		     jmp _list_subfiles_recursive_end
    280	    0185			 _list_subfiles_recursive_loop:
    281					     restore <cx>
2   282	    0185  59				 pop cx
    283	    0186  51			     push cx
    284	    0187  E8 0179		     call is_valid_name
    285					     load <cx>
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 6
2tree.ASM



2   286	    018A  51				 push cx
    287	    018B  3D 0001		     cmp ax, 1
    288	    018E  0F 85	00AD		     jne _list_subfiles_recursive_next
    289
    290					     ;
    291					     ;	 increment current index in subfiles
    292					     ;
    293					     restore <cx, bx>
2   294	    0192  59				 pop cx
2   295	    0193  5B				 pop bx
    296	    0194  43			     inc bx
    297					     load <bx, cx>
2   298	    0195  53				 push bx
2   299	    0196  51				 push cx
    300	    0197  53			     push bx
    301	    0198  51			     push cx
    302	    0199  E8 017F		     call show_filename_from_dta
    303
    304					     ;
    305					     ;	 check if folder
    306					     ;
    307					     restore <cx>
2   308	    019C  59				 pop cx
    309					     load <cx>
2   310	    019D  51				 push cx
    311	    019E  51			     push cx
    312	    019F  E8 00C1		     call is_folder
    313	    01A2  3D 0001		     cmp ax, 1
    314	    01A5  0F 85	0096		     jne _list_subfiles_recursive_next
    315
    316					     ;
    317					     ;	 check deep level
    318					     ;
    319					     restore <cx>
2   320	    01A9  59				 pop cx
    321					     load <cx>
2   322	    01AA  51				 push cx
    323	    01AB  33 DB			     xor bx, bx
    324	    01AD  8A 1E	04DAr		     mov bl, byte ptr [deep_level]
    325	    01B1  3B CB			     cmp cx, bx
    326	    01B3  0F 8D	0088		     jge _list_subfiles_recursive_next
    327
    328					     ;
    329					     ;	 pseudographic hack
    330					     ;
    331					     restore <cx, bx>
2   332	    01B7  59				 pop cx
2   333	    01B8  5B				 pop bx
    334					     load <bx, cx>
2   335	    01B9  53				 push bx
2   336	    01BA  51				 push cx
    337
    338	    01BB  3B 1E	04D6r		     cmp bx, word ptr [current_max_entities]
    339	    01BF  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack
    340	    01C1  BB 04E9r		     mov bx, offset level_shift
    341	    01C4  03 D9			     add bx, cx
    342	    01C6  A0 04F4r		     mov al, byte ptr [space]
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 7
2tree.ASM



    343	    01C9  88 07			     mov byte ptr [bx],	al
    344	    01CB			 _list_subfiles_recursive_loop_pseudographic_hack:
    345
    346					     ;
    347					     ; start new search
    348					     ;
    349	    01CB  A1 04D6r		     mov ax, word ptr [current_max_entities]
    350					     load <ax>
2   351	    01CE  50				 push ax
    352
    353					     ;
    354					     ;	 cd to subfolder
    355					     ;
    356					     load <cx>
2   357	    01CF  51				 push cx
    358	    01D0  51			     push cx
    359	    01D1  E8 007D		     call move_dta
    360	    01D4  05 001E		     add ax, 1Eh
    361
    362	    01D7  50			     push ax
    363					     break_point <bx>
1   364					     load <bx>
3   365	    01D8  53				 push bx
1   366	    01D9  33 DB			     xor bx, bx
1   367	    01DB  33 DB			     xor bx, bx
1   368	    01DD  33 DB			     xor bx, bx
1   369	    01DF  33 DB			     xor bx, bx
1   370	    01E1  33 DB			     xor bx, bx
1   371	    01E3  33 DB			     xor bx, bx
1   372	    01E5  33 DB			     xor bx, bx
1   373	    01E7  33 DB			     xor bx, bx
1   374					     restore <bx>
3   375	    01E9  5B				 pop bx
    376	    01EA  E8 01A7		     call cd
    377					     restore <cx>
2   378	    01ED  59				 pop cx
    379
    380	    01EE  41			     inc cx
    381					     ;
    382					     ;	 list subfiles from subfolder
    383					     ;
    384					     load <cx>
2   385	    01EF  51				 push cx
    386	    01F0  BB 0000		     mov bx, 0
    387	    01F3  B8 04E1r		     mov ax, offset folder_mask
    388	    01F6  BE 02F6r		     mov si, offset find_first_folder
    389
    390	    01F9  56			     push si
    391	    01FA  53			     push bx
    392	    01FB  50			     push ax
    393	    01FC  51			     push cx
    394	    01FD  E8 FF63		     call list_subfiles_recursive
    395					     restore <cx>
2   396	    0200  59				 pop cx
    397
    398
    399					     ;
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 8
2tree.ASM



    400					     ;	 list subfolders from subfolder
    401					     ;
    402					     load <cx>
2   403	    0201  51				 push cx
    404	    0202  8B D8			     mov bx, ax
    405	    0204  B8 04DBr		     mov ax, offset file_mask
    406	    0207  BE 02E9r		     mov si, offset find_first_file
    407
    408	    020A  56			     push si
    409	    020B  53			     push bx
    410	    020C  50			     push ax
    411	    020D  51			     push cx
    412	    020E  E8 FF52		     call list_subfiles_recursive
    413					     restore <cx>
2   414	    0211  59				 pop cx
    415
    416					     ;
    417					     ;	 reverse pseudographic hack
    418					     ;
    419	    0212  BB 04E9r		     mov bx, offset level_shift
    420	    0215  03 D9			     add bx, cx
    421					     ; mov byte	ptr [bx], 179
    422	    0217  A0 04E7r		     mov al, byte ptr [old_level_shift]
    423	    021A  88 07			     mov byte ptr [bx],	al
    424
    425					     ;
    426					     ;	 cd back to this function
    427					     ;
    428	    021C  B8 0501r		     mov ax, offset parent_folder
    429	    021F  50			     push ax
    430					     break_point <cx>
1   431					     load <cx>
3   432	    0220  51				 push cx
1   433	    0221  33 C9			     xor cx, cx
1   434	    0223  33 C9			     xor cx, cx
1   435	    0225  33 C9			     xor cx, cx
1   436	    0227  33 C9			     xor cx, cx
1   437	    0229  33 C9			     xor cx, cx
1   438	    022B  33 C9			     xor cx, cx
1   439	    022D  33 C9			     xor cx, cx
1   440	    022F  33 C9			     xor cx, cx
1   441					     restore <cx>
3   442	    0231  59				 pop cx
    443	    0232  E8 015F		     call cd
    444
    445					     restore <ax>
2   446	    0235  58				 pop ax
    447	    0236  A3 04D6r		     mov word ptr [current_max_entities], ax
    448
    449					     restore <cx>
2   450	    0239  59				 pop cx
    451					     load <cx>
2   452	    023A  51				 push cx
    453	    023B  51			     push cx
    454	    023C  E8 0182		     call set_dta
    455	    023F			 _list_subfiles_recursive_next:
    456	    023F  E8 00A2		     call find_next
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 9
2tree.ASM



    457	    0242  0F 83	FF3F		     jnc _list_subfiles_recursive_loop
    458	    0246  3A 06	0485r		     cmp al, byte ptr [no_more_files]
    459	    024A  75 49			     jne find_next_error
    460	    024C			 _list_subfiles_recursive_end:
    461					     restore <cx, bx>
2   462	    024C  59				 pop cx
2   463	    024D  5B				 pop bx
    464	    024E  8B C3			     mov ax, bx
    465	    0250  C3			     ret
    466	    0251			 move_dta:
    467	    0251  5B			     pop bx
    468	    0252  59			     pop cx
    469	    0253  53			     push bx
    470
    471	    0254  33 C0			     xor ax, ax
    472	    0256  A0 0486r		     mov al, byte ptr [dta_len]
    473	    0259  F7 E1			     mul cx
    474
    475	    025B  BB 05C6r		     mov bx, offset dta
    476	    025E  03 D8			     add bx, ax
    477	    0260  8B C3			     mov ax, bx
    478	    0262  C3			     ret
    479	    0263			 is_folder:
    480	    0263  5B			     pop bx
    481	    0264  59			     pop cx
    482	    0265  53			     push bx
    483
    484	    0266  51			     push cx
    485	    0267  E8 FFE7		     call move_dta
    486
    487	    026A  05 0015		     add ax, 15h
    488	    026D  8B D8			     mov bx, ax
    489	    026F  8A 1F			     mov bl, byte ptr [bx]
    490	    0271  80 E3	10		     and bl, 10h
    491	    0274  80 FB	10		     cmp bl, 10h
    492	    0277  74 02			     je	_is_folder_true
    493	    0279  75 05			     jne _is_folder_false
    494	    027B			 _is_folder_true:
    495	    027B  B8 0001		     mov ax, 1
    496	    027E  EB 05			     jmp _is_folder_end
    497	    0280			 _is_folder_false:
    498	    0280  B8 0000		     mov ax, 0
    499	    0283  EB 00			     jmp _is_folder_end
    500	    0285			 _is_folder_end:
    501	    0285  C3			     ret
    502
    503	    0286			 find_first_error:
    504					     print_range <find_first_fails, newline>
2   505						 print <offset find_first_fails>
3   506	    0286  B4 09				 mov ah, 09h
3   507	    0288  BA 049Fr			 mov dx, offset	find_first_fails
3   508	    028B  CD 21				 int 21h
2   509						 print <offset newline>
3   510	    028D  B4 09				 mov ah, 09h
3   511	    028F  BA 05C4r			 mov dx, offset	newline
3   512	    0292  CD 21				 int 21h
    513	    0294  C3			     ret
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 10
2tree.ASM



    514	    0295			 find_next_error:
    515					     print_range <find_next_fails, newline>
2   516						 print <offset find_next_fails>
3   517	    0295  B4 09				 mov ah, 09h
3   518	    0297  BA 04BBr			 mov dx, offset	find_next_fails
3   519	    029A  CD 21				 int 21h
2   520						 print <offset newline>
3   521	    029C  B4 09				 mov ah, 09h
3   522	    029E  BA 05C4r			 mov dx, offset	newline
3   523	    02A1  CD 21				 int 21h
    524					     exit
1   525	    02A3  B4 00			     mov ah, 00h
1   526	    02A5  CD 21			     int 21h
    527
    528	    02A7			 parse_command_line:
    529					     ;
    530					     ; prepare root folder
    531					     ;
    532	    02A7  BE 0082		     mov si, 82h
    533	    02AA  B9 0040		     mov cx, 64
    534	    02AD  51			     push cx
    535	    02AE  56			     push si
    536	    02AF  E8 015B		     call count_no_space_no_zero_letters
    537	    02B2  8B C8			     mov cx, ax
    538	    02B4  BE 0082		     mov si, 82h
    539	    02B7  BF 0544r		     mov di, offset root_folder
    540	    02BA  F3> A4		     rep movsb
    541
    542	    02BC			 parse_args:
    543	    02BC  46			     inc si
    544	    02BD  46			     inc si
    545	    02BE  80 3C	64		     cmp byte ptr [si],	'd'
    546	    02C1  74 07			     je	parse_d
    547	    02C3  80 3C	66		     cmp byte ptr [si],	'f'
    548	    02C6  74 0F			     je	parse_f
    549	    02C8  EB 19			     jmp parse_end
    550	    02CA			 parse_d:
    551					     ;
    552					     ; parse_deep level
    553					     ;
    554	    02CA  46			     inc si
    555	    02CB  46			     inc si
    556	    02CC  8A 1C			     mov bl, byte ptr [si]
    557	    02CE  80 EB	30		     sub bl, 30h	     ; to number
    558	    02D1  88 1E	04DAr		     mov byte ptr [deep_level],	bl
    559	    02D5  EB E5			     jmp parse_args
    560	    02D7			 parse_f:
    561					     ;
    562					     ; parse file extension
    563					     ;
    564	    02D7  46			     inc si
    565	    02D8  46			     inc si
    566	    02D9  BF 04DCr		     mov di, offset file_ext
    567	    02DC  B9 0004		     mov cx, 4
    568	    02DF  F3> A4		     rep movsb
    569	    02E1  EB D9			     jmp parse_args
    570	    02E3			 parse_end:
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 11
2tree.ASM



    571	    02E3  C3			     ret
    572	    02E4			 find_next:
    573	    02E4  B4 4F			     mov ah, 4Fh
    574	    02E6  CD 21			     int 21h
    575
    576	    02E8  C3			     ret
    577
    578	    02E9			 find_first_file:
    579	    02E9  5B			     pop bx
    580	    02EA  5A			     pop dx		; filename spec
    581	    02EB  B9 000F		     mov cx, 0fh	 ; include files
    582	    02EE  53			     push bx
    583
    584	    02EF  33 C0			     xor ax, ax
    585	    02F1  B4 4E			     mov ah, 4Eh
    586	    02F3  CD 21			     int 21h
    587	    02F5  C3			     ret
    588
    589	    02F6			 find_first_folder:
    590	    02F6  5B			     pop bx
    591	    02F7  5A			     pop dx		 ; filename spec
    592	    02F8  B9 0010		     mov cx, 10h	 ; include directories
    593	    02FB  53			     push bx
    594
    595	    02FC  33 C0			     xor ax, ax
    596	    02FE  B4 4E			     mov ah, 4Eh
    597	    0300  CD 21			     int 21h
    598	    0302  C3			     ret
    599
    600	    0303			 is_valid_name:
    601	    0303  5B			     pop bx
    602	    0304  59			     pop cx	 ; deep	level
    603	    0305  53			     push bx
    604
    605	    0306  51			     push cx
    606	    0307  E8 FF47		     call move_dta
    607
    608	    030A  05 001E		     add ax, 1Eh
    609	    030D  8B D8			     mov bx, ax
    610	    030F  B8 0001		     mov ax, 1
    611	    0312  80 3F	2E		     cmp byte ptr [bx],	'.'
    612	    0315  75 03			     jne _is_valid_name_end
    613	    0317  B8 0000		     mov ax, 0
    614	    031A			 _is_valid_name_end:
    615	    031A  C3			     ret
    616
    617	    031B			 show_filename_from_dta:
    618	    031B  5B			     pop bx
    619	    031C  59			     pop cx  ; deep level
    620	    031D  58			     pop ax  ; entity count
    621	    031E  53			     push bx
    622
    623	    031F			 _show_filename_from_dta_valid_name:
    624					     ;
    625					     ;	 pseudo	graphic	prefix
    626					     ;
    627					     load <ax>
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 12
2tree.ASM



2   628	    031F  50				 push ax
    629	    0320  51			     push cx
    630	    0321  E8 FF2D		     call move_dta
    631
    632	    0324  05 001E		     add ax, 1Eh
    633	    0327  8B D8			     mov bx, ax
    634					     restore <ax>
2   635	    0329  58				 pop ax
    636
    637					     load <cx, bx>
2   638	    032A  51				 push cx
2   639	    032B  53				 push bx
    640	    032C  50			     push ax	 ; entity count
    641	    032D  51			     push cx	 ; deep	level
    642	    032E  E8 001E		     call print_pseudographic_prefix
    643					     restore <bx, cx>
2   644	    0331  5B				 pop bx
2   645	    0332  59				 pop cx
    646
    647					     load <bx>
2   648	    0333  53				 push bx
    649	    0334  B9 000D		     mov cx, 13
    650	    0337  51			     push cx
    651	    0338  53			     push bx
    652	    0339  E8 00D1		     call count_no_space_no_zero_letters
    653	    033C  8B C8			     mov cx, ax
    654					     restore <bx>
2   655	    033E  5B				 pop bx
    656	    033F  51			     push cx
    657	    0340  53			     push bx
    658	    0341  E8 00B3		     call print_string_with_length
    659					     print_range <newline>
2   660						 print <offset newline>
3   661	    0344  B4 09				 mov ah, 09h
3   662	    0346  BA 05C4r			 mov dx, offset	newline
3   663	    0349  CD 21				 int 21h
    664	    034B  B8 0001		     mov ax, 1
    665	    034E  C3			     ret
    666	    034F			 print_pseudographic_prefix:
    667	    034F  5B			     pop bx
    668	    0350  59			     pop cx	 ; deep	level
    669	    0351  58			     pop ax	 ; entity count
    670	    0352  53			     push bx
    671
    672	    0353  83 F9	00		     cmp cx, 0
    673	    0356  74 0C			     je	_print_pseudographic_prefix_zero_level
    674					     load <cx, ax>
2   675	    0358  51				 push cx
2   676	    0359  50				 push ax
    677	    035A  B8 04E9r		     mov ax, offset level_shift
    678
    679	    035D  51			     push cx
    680	    035E  50			     push ax
    681	    035F  E8 0095		     call print_string_with_length
    682					     restore <ax, cx>
2   683	    0362  58				 pop ax
2   684	    0363  59				 pop cx
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 13
2tree.ASM



    685					 ; _print_pseudographic_prefix_loop:
    686					 ;     print_range <level_shift>
    687					 ;     dec cx
    688					 ;     cmp cx, 0
    689					 ;     jne _print_pseudographic_prefix_loop
    690	    0364			 _print_pseudographic_prefix_zero_level:
    691
    692	    0364  8B 1E	04D6r		     mov bx, word ptr [current_max_entities]
    693	    0368  3A C3			     cmp al, bl
    694	    036A  74 1E			     je	_print_pseudographic_prefix_zero_level_end
    695	    036C  3D 0001		     cmp ax, 1
    696	    036F  75 10			     jne _print_pseudographic_prefix_zero_level_middle
    697	    0371  83 F9	00		     cmp cx, 0
    698	    0374  74 02			     je	_print_pseudographic_prefix_zero_level_first
    699	    0376  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
    700	    0378			 _print_pseudographic_prefix_zero_level_first:
    701					     print_range <first_file_char>
2   702						 print <offset first_file_char>
3   703	    0378  B4 09				 mov ah, 09h
3   704	    037A  BA 04FBr			 mov dx, offset	first_file_char
3   705	    037D  CD 21				 int 21h
    706	    037F  EB 12			     jmp _print_pseudographic_prefix_end
    707	    0381			 _print_pseudographic_prefix_zero_level_middle:
    708					     print_range <middle_file_char>
2   709						 print <offset middle_file_char>
3   710	    0381  B4 09				 mov ah, 09h
3   711	    0383  BA 04FDr			 mov dx, offset	middle_file_char
3   712	    0386  CD 21				 int 21h
    713	    0388  EB 09			     jmp _print_pseudographic_prefix_end
    714	    038A			 _print_pseudographic_prefix_zero_level_end:
    715					     print_range <end_file_char>
2   716						 print <offset end_file_char>
3   717	    038A  B4 09				 mov ah, 09h
3   718	    038C  BA 04FFr			 mov dx, offset	end_file_char
3   719	    038F  CD 21				 int 21h
    720	    0391  EB 00			     jmp _print_pseudographic_prefix_end
    721	    0393			 _print_pseudographic_prefix_end:
    722	    0393  C3			     ret
    723	    0394			 cd:
    724	    0394  5B			     pop bx ; ret addr
    725	    0395  5A			     pop dx ; root address
    726	    0396  53			     push bx ; ret addr
    727
    728					     load <dx>
2   729	    0397  52				 push dx
    730	    0398  33 C0			     xor ax, ax
    731	    039A  B4 3B			     mov ah, 3Bh
    732	    039C  CD 21			     int 21h
    733
    734	    039E  72 02			     jc	cd_error
    735					     restore <dx>
2   736	    03A0  5A				 pop dx
    737	    03A1  C3			     ret
    738	    03A2			 cd_error:
    739					     print_range <cd_fails, newline>
2   740						 print <offset cd_fails>
3   741	    03A2  B4 09				 mov ah, 09h
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 14
2tree.ASM



3   742	    03A4  BA 0487r			 mov dx, offset	cd_fails
3   743	    03A7  CD 21				 int 21h
2   744						 print <offset newline>
3   745	    03A9  B4 09				 mov ah, 09h
3   746	    03AB  BA 05C4r			 mov dx, offset	newline
3   747	    03AE  CD 21				 int 21h
    748					     restore <dx>
2   749	    03B0  5A				 pop dx
    750
    751	    03B1  B4 09				 mov ah, 09h
    752	    03B3  CD 21			     int 21h
    753
    754					     print_range <newline>
2   755						 print <offset newline>
3   756	    03B5  B4 09				 mov ah, 09h
3   757	    03B7  BA 05C4r			 mov dx, offset	newline
3   758	    03BA  CD 21				 int 21h
    759					     exit
1   760	    03BC  B4 00			     mov ah, 00h
1   761	    03BE  CD 21			     int 21h
    762	    03C0  C3			     ret
    763
    764	    03C1			 set_dta:
    765	    03C1  5B			     pop bx
    766	    03C2  59			     pop cx			 ; deep	level
    767	    03C3  53			     push bx
    768
    769	    03C4  BA 05C6r		     mov dx, offset dta
    770					     load <dx>
2   771	    03C7  52				 push dx
    772	    03C8  33 C0			     xor ax, ax
    773	    03CA  A0 0486r		     mov al, byte ptr [dta_len]
    774	    03CD  F7 E1			     mul cx
    775
    776					     restore <dx>
2   777	    03CF  5A				 pop dx
    778	    03D0  03 D0			     add dx, ax
    779
    780	    03D2  33 C0			     xor ax, ax
    781	    03D4  B4 1A			     mov ah, 1Ah
    782	    03D6  CD 21			     int 21h
    783
    784	    03D8  C3			     ret
    785
    786	    03D9			 save_cwd:
    787	    03D9  BE 0504r		     mov si, offset working_folder
    788
    789					     ;
    790					     ; save driver
    791					     ;
    792	    03DC  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    793	    03DE  CD 21			     int 21h
    794	    03E0  8A D0			     mov dl, al
    795	    03E2  80 C2	41		     add dl, 41h
    796	    03E5  88 14			     mov byte ptr [si],	dl
    797	    03E7  46			     inc si
    798	    03E8  C6 04	3A		     mov byte ptr [si],	':'
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 15
2tree.ASM



    799	    03EB  46			     inc si
    800	    03EC  C6 04	5C		     mov byte ptr [si],	'\'
    801	    03EF  46			     inc si
    802
    803					     ;
    804					     ; save folder
    805					     ;
    806	    03F0  32 D2			     xor dl, dl			 ; Actual drive
    807	    03F2  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    808	    03F4  CD 21			     int 21h
    809	    03F6  C3			     ret
    810	    03F7			 print_string_with_length:
    811	    03F7  5B			     pop bx ; ret address
    812	    03F8  5E			     pop si ; string offset
    813	    03F9  59			     pop cx ; string length
    814	    03FA  53			     push bx; ret address
    815	    03FB  33 C0			     xor ax, ax
    816	    03FD			 _print_string_with_length_loop:
    817	    03FD  B4 02			     mov ah, 02h
    818	    03FF  8A 14			     mov dl, byte ptr [si]
    819	    0401  CD 21			     int 21h
    820	    0403  49			     dec cx
    821	    0404  46			     inc si
    822	    0405  83 F9	00		     cmp cx, 00h
    823	    0408  74 02			     je	_print_string_with_length_end
    824	    040A  EB F1			     jmp _print_string_with_length_loop
    825	    040C			 _print_string_with_length_end:
    826	    040C  C3			     ret
    827	    040D			 count_no_space_no_zero_letters:
    828	    040D  5B			     pop bx ; ret address
    829	    040E  5E			     pop si ; string offset
    830	    040F  59			     pop cx ; string length
    831	    0410  53			     push bx ; ret address
    832	    0411  B8 0000		     mov ax, 0
    833	    0414			 _count_non_space_symbols_loop:
    834	    0414  80 3C	20		     cmp byte ptr [si],	20h
    835	    0417  74 12			     je	_count_non_space_symbols_end
    836	    0419  80 3C	0D		     cmp byte ptr [si],	0Dh
    837	    041C  74 0D			     je	_count_non_space_symbols_end
    838	    041E  80 3C	00		     cmp byte ptr [si],	00h
    839	    0421  74 08			     je	_count_non_space_symbols_end
    840	    0423  3B C1			     cmp ax, cx
    841	    0425  74 04			     je	_count_non_space_symbols_end
    842	    0427  40			     inc ax
    843	    0428  46			     inc si
    844	    0429  EB E9			     jmp _count_non_space_symbols_loop
    845	    042B			 _count_non_space_symbols_end:
    846	    042B  C3			     ret
    847	    042C			 count_subfiles_here:
    848	    042C  B8 04DBr		     mov ax, offset file_mask
    849	    042F  BE 02E9r		     mov si, offset find_first_file
    850
    851	    0432  50			     push ax
    852	    0433  56			     push si
    853	    0434  E8 0017		     call count_subfiles_here_by_mask
    854					     load <ax>
2   855	    0437  50				 push ax
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 16
2tree.ASM



    856	    0438  B8 04E1r		     mov ax, offset folder_mask
    857	    043B  BE 02F6r		     mov si, offset find_first_folder
    858
    859	    043E  50			     push ax
    860	    043F  56			     push si
    861	    0440  E8 000B		     call count_subfiles_here_by_mask
    862	    0443  8B D8			     mov bx, ax
    863					     restore <ax>
2   864	    0445  58				 pop ax
    865	    0446  03 D8			     add bx, ax
    866	    0448  8B C3			     mov ax, bx
    867	    044A  A3 04D6r		     mov word ptr [current_max_entities], ax
    868	    044D  C3			     ret
    869	    044E			 count_subfiles_here_by_mask:
    870	    044E  5B			     pop bx
    871	    044F  5E			     pop si		 ; find_first address
    872	    0450  58			     pop ax		 ; mask	address
    873	    0451  53			     push bx
    874
    875					     load <ax, si>
2   876	    0452  50				 push ax
2   877	    0453  56				 push si
    878	    0454  B9 000B		     mov cx, 11		 ; set pointer to count_dta
    879	    0457  51			     push cx
    880	    0458  E8 FF66		     call set_dta
    881					     restore <si, ax>
2   882	    045B  5E				 pop si
2   883	    045C  58				 pop ax
    884
    885	    045D  B9 0000		     mov cx, 0
    886					     load <cx>
2   887	    0460  51				 push cx
    888	    0461  50			     push ax
    889	    0462  FF D6			     call si
    890	    0464  72 1B			     jc	_count_subfiles_from_end
    891	    0466			 _count_subfiles_from_loop:
    892	    0466  B9 000B		     mov cx, 11
    893	    0469  51			     push cx
    894	    046A  E8 FDE4		     call move_dta
    895	    046D  05 001E		     add ax, 1Eh
    896	    0470  8B D8			     mov bx, ax
    897	    0472  80 3F	2E		     cmp byte ptr [bx],	'.'
    898	    0475  74 03			     je	_count_subfiles_from_loop_next
    899
    900					     restore <cx>
2   901	    0477  59				 pop cx
    902	    0478  41			     inc cx
    903					     load <cx>
2   904	    0479  51				 push cx
    905	    047A			 _count_subfiles_from_loop_next:
    906	    047A  E8 FE67		     call find_next
    907	    047D  72 02			     jc	_count_subfiles_from_end
    908
    909	    047F  EB E5			     jmp _count_subfiles_from_loop
    910	    0481			 _count_subfiles_from_end:
    911					     restore <cx>
2   912	    0481  59				 pop cx
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 17
2tree.ASM



    913	    0482  8B C1			     mov ax, cx
    914	    0484  C3			     ret
    915					 ;
    916					 ; error codes
    917					 ;
    918	    0485  12			 no_more_files db 18
    919	    0486  2B			 dta_len db 2bh
    920
    921					 ;
    922					 ; error messages
    923					 ;
    924	    0487  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    925		  64 69	72 65 63 74 6F+
    926		  72 79	20 66 61 69 6C+
    927		  73 2E	24
    928	    049F  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    929		  72 73	74 20 66 69 6C+
    930		  65 6E	61 6D 65 73 20+
    931		  66 61	69 6C 73 2E 24
    932	    04BB  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    933		  78 74	20 66 69 6C 65+
    934		  6E 61	6D 65 73 20 66+
    935		  61 69	6C 73 2E 24
    936
    937					 ;
    938					 ; int variables
    939					 ;
    940	    04D6  0000			 current_max_entities dw 0
    941	    04D8  0000			 current_id_entity dw 0
    942
    943					 ;
    944					 ;   parse arguments
    945					 ;
    946	    04DA  01			 deep_level db 1
    947	    04DB  2A			 file_mask db '*'
    948	    04DC  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    949	    04E1  2A 00			 folder_mask db	'*', 00h
    950	    04E3  2A 2E	2A 00		 all_files db '*.*', 00h
    951
    952					 ;
    953					 ;   pseudographic
    954					 ;
    955	    04E7  B3 24			 old_level_shift db 179, '$'
    956	    04E9  0A*(B3) 24		 level_shift db	10 dup(179), '$'
    957	    04F4  ?? 20	24		 space db, 32, '$'
    958
    959	    04F7  C3 24			 zero_first_file db 195, '$'
    960	    04F9  C0 24			 zero_end_file db 192, '$'
    961
    962	    04FB  C2 24			 first_file_char db 194, '$'
    963	    04FD  C3 24			 middle_file_char db 195, '$'
    964	    04FF  C0 24			 end_file_char db 192, '$'
    965
    966					 ;
    967					 ; strings
    968					 ;
    969	    0501  2E 2E	00		 parent_folder db '..',	00h
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 18
2tree.ASM



    970	    0504  40*(00)		 working_folder	db 64 dup(00h)
    971	    0544  40*(00)		 root_folder db	64 dup(00h)
    972	    0584  40*(00)		 start_mask db 64 dup(00h)
    973	    05C4  0A 24			 newline db 0Ah, '$'
    974	    05C6  10CC*(00)		 dta db	4300 dup(0)
    975	    1692  2B*(00)		 count_dta db 43 dup(0)
    976					 end start
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 19
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/10/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "01:08:29"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:04E3
CD				  Near	 DGROUP:0394
CD_ERROR			  Near	 DGROUP:03A2
CD_FAILS			  Byte	 DGROUP:0487
COUNT_DTA			  Byte	 DGROUP:1692
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:040D
COUNT_SUBFILES_HERE		  Near	 DGROUP:042C
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:044E
CURRENT_ID_ENTITY		  Word	 DGROUP:04D8
CURRENT_MAX_ENTITIES		  Word	 DGROUP:04D6
DEEP_LEVEL			  Byte	 DGROUP:04DA
DTA				  Byte	 DGROUP:05C6
DTA_LEN				  Byte	 DGROUP:0486
END_FILE_CHAR			  Byte	 DGROUP:04FF
FILE_EXT			  Byte	 DGROUP:04DC
FILE_MASK			  Byte	 DGROUP:04DB
FIND_FIRST_ERROR		  Near	 DGROUP:0286
FIND_FIRST_FAILS		  Byte	 DGROUP:049F
FIND_FIRST_FILE			  Near	 DGROUP:02E9
FIND_FIRST_FOLDER		  Near	 DGROUP:02F6
FIND_NEXT			  Near	 DGROUP:02E4
FIND_NEXT_ERROR			  Near	 DGROUP:0295
FIND_NEXT_FAILS			  Byte	 DGROUP:04BB
FIRST_FILE_CHAR			  Byte	 DGROUP:04FB
FOLDER_MASK			  Byte	 DGROUP:04E1
IS_FOLDER			  Near	 DGROUP:0263
IS_VALID_NAME			  Near	 DGROUP:0303
LEVEL_SHIFT			  Byte	 DGROUP:04E9
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0163
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0135
MIDDLE_FILE_CHAR		  Byte	 DGROUP:04FD
MOVE_DTA			  Near	 DGROUP:0251
NEWLINE				  Byte	 DGROUP:05C4
NO_MORE_FILES			  Byte	 DGROUP:0485
OLD_LEVEL_SHIFT			  Byte	 DGROUP:04E7
PARENT_FOLDER			  Byte	 DGROUP:0501
PARSE_ARGS			  Near	 DGROUP:02BC
PARSE_COMMAND_LINE		  Near	 DGROUP:02A7
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 20
Symbol Table



PARSE_D				  Near	 DGROUP:02CA
PARSE_END			  Near	 DGROUP:02E3
PARSE_F				  Near	 DGROUP:02D7
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:034F
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:03F7
ROOT_FOLDER			  Byte	 DGROUP:0544
SAVE_CWD			  Near	 DGROUP:03D9
SET_DTA				  Near	 DGROUP:03C1
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:031B
SPACE				  Byte	 DGROUP:04F4
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0584
WORKING_FOLDER			  Byte	 DGROUP:0504
ZERO_END_FILE			  Byte	 DGROUP:04F9
ZERO_FIRST_FILE			  Byte	 DGROUP:04F7
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:042B
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:0414
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0481
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:0466
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:047A
_IS_FOLDER_END			  Near	 DGROUP:0285
_IS_FOLDER_FALSE		  Near	 DGROUP:0280
_IS_FOLDER_TRUE			  Near	 DGROUP:027B
_IS_VALID_NAME_END		  Near	 DGROUP:031A
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:024C
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0185
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:01CB
EUDOGRAPHIC_HACK
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:023F
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0393
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0364
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:038A
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0378
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0381
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:040C
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:03FD
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:031F
ME

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
Turbo Assembler	 Version 4.1	    12/10/19 01:08:30	    Page 21
Symbol Table



SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  16BD Word	  Public  CODE
