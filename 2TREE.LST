Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 0188		     call save_cwd
    151	    0103  B8 03FCr		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  B9 0000		     mov cx, 0
    154	    010A  51			     push cx
    155	    010B  E8 0169		     call set_dta
    156	    010E  E8 00D3		     call parse_command_line
    157
    158					     ;
    159					     ;	 start tree
    160					     ;
    161	    0111  B8 037Ar		     mov ax, offset root_folder
    162	    0114  B9 0000		     mov cx, 0
    163	    0117  51			     push cx
    164	    0118  50			     push ax
    165	    0119  E8 000B		     call list_subfiles_recursive_from
    166
    167					     ;
    168					     ;	 cd to start folder
    169					     ;
    170	    011C  B8 033Ar		     mov ax, offset working_folder
    171	    011F  50			     push ax
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 4
2tree.ASM



    172	    0120  E8 0139		     call cd
    173					     exit
1   174	    0123  B4 00			     mov ah, 00h
1   175	    0125  CD 21			     int 21h
    176
    177	    0127			 list_subfiles_recursive_from:
    178	    0127  5B			     pop bx	 ; ret address
    179	    0128  58			     pop ax	 ; deep	level
    180	    0129  59			     pop cx	 ; root	folder offset
    181	    012A  53			     push bx
    182					     load <cx>
2   183	    012B  51				 push cx
    184	    012C  50			     push ax
    185	    012D  E8 012C		     call cd
    186					     restore <cx>
2   187	    0130  59				 pop cx
    188
    189					     ;
    190					     ; list subfolder
    191					     ;
    192	    0131  B8 0335r		     mov ax, offset folder_mask
    193					     load <cx>
2   194	    0134  51				 push cx
    195	    0135  50			     push ax
    196	    0136  51			     push cx
    197	    0137  E8 000C		     call list_subfiles_recursive
    198					     restore <cx>
2   199	    013A  59				 pop cx
    200
    201					     ;
    202					     ; list files
    203					     ;
    204	    013B  B8 032Fr		     mov ax, offset file_mask
    205					     load <cx>
2   206	    013E  51				 push cx
    207	    013F  50			     push ax
    208	    0140  51			     push cx
    209	    0141  E8 0002		     call list_subfiles_recursive
    210					     restore <cx>
2   211	    0144  59				 pop cx
    212	    0145  C3			     ret
    213
    214	    0146			 list_subfiles_recursive:
    215	    0146  5B			     pop bx
    216	    0147  59			     pop cx ; deep level
    217	    0148  58			     pop ax ; filemask offset
    218	    0149  53			     push bx
    219					     ; mov ax, offset file_mask
    220
    221					     ; load <cx, ax>
    222					     ; mov ax, offset dta
    223					     ; push ax
    224					     ; push cx
    225					     ; call set_dta
    226					     ; restore <ax, cx>
    227
    228					     load <cx>
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 5
2tree.ASM



2   229	    014A  51				 push cx
    230	    014B  50			     push ax
    231	    014C  E8 00D7		     call find_first
    232	    014F  72 6F			     jc	find_first_error
    233	    0151			 _list_subfiles_recursive_loop:
    234	    0151  E8 00DF		     call show_filename_from_dta
    235	    0154  3D 0001		     cmp ax, 1
    236	    0157  75 39			     jne _list_subfiles_recursive_next
    237
    238					     ;
    239					     ;	 check if folder
    240					     ;
    241	    0159  E8 004D		     call is_folder
    242	    015C  3D 0001		     cmp ax, 1
    243	    015F  75 31			     jne _list_subfiles_recursive_next
    244
    245					     ;
    246					     ;	 check deep level
    247					     ;
    248					     restore <cx>
2   249	    0161  59				 pop cx
    250					     load <cx>
2   251	    0162  51				 push cx
    252	    0163  33 DB			     xor bx, bx
    253	    0165  8A 1E	032Er		     mov bl, byte ptr [deep_level]
    254	    0169  3B CB			     cmp cx, bx
    255	    016B  7D 25			     jge _list_subfiles_recursive_next
    256
    257					     ;
    258					     ; start new search
    259					     ;
    260
    261					     ;
    262					     ;	 cd to subfolder
    263					     ;
    264					     load <cx>
2   265	    016D  51				 push cx
    266	    016E  B8 041Ar		     mov ax, offset dta	+ 1Eh
    267	    0171  50			     push ax
    268	    0172  E8 00E7		     call cd
    269					     restore <cx>
2   270	    0175  59				 pop cx
    271
    272	    0176  41			     inc cx
    273					     ;
    274					     ;	 list subfiles from subfolder
    275					     ;
    276					     load <cx>
2   277	    0177  51				 push cx
    278	    0178  B8 032Fr		     mov ax, offset file_mask
    279	    017B  50			     push ax
    280	    017C  51			     push cx
    281	    017D  E8 FFC6		     call list_subfiles_recursive
    282					     restore <cx>
2   283	    0180  59				 pop cx
    284
    285
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 6
2tree.ASM



    286					     ;
    287					     ;	 list subfolders from subfolder
    288					     ;
    289					     load <cx>
2   290	    0181  51				 push cx
    291	    0182  B8 0335r		     mov ax, offset folder_mask
    292	    0185  50			     push ax
    293	    0186  51			     push cx
    294	    0187  E8 FFBC		     call list_subfiles_recursive
    295					     restore <cx>
2   296	    018A  59				 pop cx
    297
    298
    299					     ;
    300					     ;	 cd to this function
    301					     ;
    302	    018B  B8 0337r		     mov ax, offset parent_folder
    303	    018E  50			     push ax
    304	    018F  E8 00CA		     call cd
    305	    0192			 _list_subfiles_recursive_next:
    306	    0192  E8 008C		     call find_next
    307	    0195  73 BA			     jnc _list_subfiles_recursive_loop
    308	    0197  3A 06	02DEr		     cmp al, byte ptr [no_more_files]
    309	    019B  75 35			     jne find_next_error
    310	    019D			 _list_subfiles_recursive_end:
    311					     restore <cx>
2   312	    019D  59				 pop cx
    313	    019E  C3			     ret
    314	    019F			 zeros:
    315	    019F  5B			     pop bx
    316	    01A0  59			     pop cx ; length
    317	    01A1  5F			     pop di ; address
    318	    01A2  53			     push bx
    319	    01A3  B0 00			     mov al, 0
    320	    01A5  FC			     cld
    321	    01A6  F3> AA		     rep stosb
    322	    01A8  C3			     ret
    323	    01A9			 is_folder:
    324	    01A9  BB 0411r		     mov bx, offset dta	+ 15h
    325	    01AC  8A 1F			     mov bl, byte ptr [bx]
    326	    01AE  80 FB	10		     cmp bl, 10h
    327	    01B1  74 02			     je	_is_folder_true
    328	    01B3  75 05			     jne _is_folder_false
    329	    01B5			 _is_folder_true:
    330	    01B5  B8 0001		     mov ax, 1
    331	    01B8  EB 05			     jmp _is_folder_end
    332	    01BA			 _is_folder_false:
    333	    01BA  B8 0000		     mov ax, 0
    334	    01BD  EB 00			     jmp _is_folder_end
    335	    01BF			 _is_folder_end:
    336	    01BF  C3			     ret
    337
    338
    339
    340	    01C0			 find_first_error:
    341					     print_range <find_first_fails, newline>
2   342						 print <offset find_first_fails>
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 7
2tree.ASM



3   343	    01C0  B4 09				 mov ah, 09h
3   344	    01C2  BA 02F7r			 mov dx, offset	find_first_fails
3   345	    01C5  CD 21				 int 21h
2   346						 print <offset newline>
3   347	    01C7  B4 09				 mov ah, 09h
3   348	    01C9  BA 03FAr			 mov dx, offset	newline
3   349	    01CC  CD 21				 int 21h
    350					     exit
1   351	    01CE  B4 00			     mov ah, 00h
1   352	    01D0  CD 21			     int 21h
    353	    01D2			 find_next_error:
    354					     print_range <find_next_fails, newline>
2   355						 print <offset find_next_fails>
3   356	    01D2  B4 09				 mov ah, 09h
3   357	    01D4  BA 0313r			 mov dx, offset	find_next_fails
3   358	    01D7  CD 21				 int 21h
2   359						 print <offset newline>
3   360	    01D9  B4 09				 mov ah, 09h
3   361	    01DB  BA 03FAr			 mov dx, offset	newline
3   362	    01DE  CD 21				 int 21h
    363					     exit
1   364	    01E0  B4 00			     mov ah, 00h
1   365	    01E2  CD 21			     int 21h
    366
    367	    01E4			 parse_command_line:
    368					     ;
    369					     ; prepare root folder
    370					     ;
    371	    01E4  BE 0082		     mov si, 82h
    372	    01E7  B9 0040		     mov cx, 64
    373	    01EA  51			     push cx
    374	    01EB  56			     push si
    375	    01EC  E8 00D0		     call count_no_space_no_zero_letters
    376	    01EF  8B C8			     mov cx, ax
    377	    01F1  BE 0082		     mov si, 82h
    378	    01F4  BF 037Ar		     mov di, offset root_folder
    379	    01F7  F3> A4		     rep movsb
    380
    381	    01F9			 parse_args:
    382	    01F9  46			     inc si
    383	    01FA  46			     inc si
    384	    01FB  80 3C	64		     cmp byte ptr [si],	'd'
    385	    01FE  74 07			     je	parse_d
    386	    0200  80 3C	66		     cmp byte ptr [si],	'f'
    387	    0203  74 0F			     je	parse_f
    388	    0205  EB 19			     jmp parse_end
    389	    0207			 parse_d:
    390					     ;
    391					     ; parse_deep level
    392					     ;
    393	    0207  46			     inc si
    394	    0208  46			     inc si
    395	    0209  8A 1C			     mov bl, byte ptr [si]
    396	    020B  80 EB	30		     sub bl, 30h	     ; to number
    397	    020E  88 1E	032Er		     mov byte ptr [deep_level],	bl
    398	    0212  EB E5			     jmp parse_args
    399	    0214			 parse_f:
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 8
2tree.ASM



    400	    0214  46			     inc si
    401	    0215  46			     inc si
    402	    0216  BF 0330r		     mov di, offset file_ext
    403	    0219  B9 0004		     mov cx, 4
    404	    021C  F3> A4		     rep movsb
    405	    021E  EB D9			     jmp parse_args
    406					     ;
    407					     ; parse file extension
    408					     ;
    409	    0220			 parse_end:
    410	    0220  C3			     ret
    411	    0221			 find_next:
    412	    0221  B4 4F			     mov ah, 4Fh
    413	    0223  CD 21			     int 21h
    414
    415	    0225  C3			     ret
    416
    417	    0226			 find_first:
    418	    0226  5B			     pop bx
    419	    0227  5A			     pop dx		 ; filename spec
    420	    0228  B9 0010		     mov cx, 10h	 ; include directories
    421	    022B  53			     push bx
    422
    423	    022C  33 C0			     xor ax, ax
    424	    022E  B4 4E			     mov ah, 4Eh
    425	    0230  CD 21			     int 21h
    426	    0232  C3			     ret
    427	    0233			 show_filename_from_dta:
    428	    0233  BB 041Ar		     mov bx, offset dta	+ 1Eh
    429	    0236  80 3F	2E		     cmp byte ptr [bx],	'.'
    430	    0239  75 04			     jne show_filename_from_dta_valid_name
    431	    023B  B8 0000		     mov ax, 0
    432	    023E  C3			     ret
    433	    023F			 show_filename_from_dta_valid_name:
    434	    023F  B9 000D		     mov cx, 13
    435	    0242  51			     push cx
    436	    0243  53			     push bx
    437	    0244  E8 0078		     call count_no_space_no_zero_letters
    438	    0247  8B C8			     mov cx, ax
    439	    0249  B8 041Ar		     mov ax, offset dta	+ 1Eh
    440	    024C  51			     push cx
    441	    024D  50			     push ax
    442	    024E  E8 0058		     call print_string_with_length
    443					     print_range <newline>
2   444						 print <offset newline>
3   445	    0251  B4 09				 mov ah, 09h
3   446	    0253  BA 03FAr			 mov dx, offset	newline
3   447	    0256  CD 21				 int 21h
    448	    0258  B8 0001		     mov ax, 1
    449	    025B  C3			     ret
    450	    025C			 cd:
    451	    025C  5B			     pop bx ; ret addr
    452	    025D  5A			     pop dx ; root address
    453	    025E  53			     push bx ; ret addr
    454
    455	    025F  33 C0			     xor ax, ax
    456	    0261  B4 3B			     mov ah, 3Bh
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 9
2tree.ASM



    457	    0263  CD 21			     int 21h
    458
    459	    0265  72 01			     jc	cd_error
    460	    0267  C3			     ret
    461	    0268			 cd_error:
    462					     print_range <cd_fails, newline>
2   463						 print <offset cd_fails>
3   464	    0268  B4 09				 mov ah, 09h
3   465	    026A  BA 02DFr			 mov dx, offset	cd_fails
3   466	    026D  CD 21				 int 21h
2   467						 print <offset newline>
3   468	    026F  B4 09				 mov ah, 09h
3   469	    0271  BA 03FAr			 mov dx, offset	newline
3   470	    0274  CD 21				 int 21h
    471	    0276  C3			     ret
    472
    473	    0277			 set_dta:
    474	    0277  5B			     pop bx
    475	    0278  59			     pop cx			 ; deep	level
    476	    0279  5A			     pop dx			 ; dta address offset
    477	    027A  53			     push bx
    478
    479					     ; shift to	current	dta
    480					     ; mov cx, 0
    481	    027B  B8 002B		     mov ax, 43
    482					     load <dx>
2   483	    027E  52				 push dx
    484	    027F  F7 E1			     mul cx
    485					     restore <dx>
2   486	    0281  5A				 pop dx
    487	    0282  03 D0			     add dx, ax
    488
    489	    0284  33 C0			     xor ax, ax
    490	    0286  B4 1A			     mov ah, 1Ah
    491	    0288  CD 21			     int 21h
    492
    493	    028A  C3			     ret
    494
    495	    028B			 save_cwd:
    496	    028B  BE 033Ar		     mov si, offset working_folder
    497
    498					     ;
    499					     ; save driver
    500					     ;
    501	    028E  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    502	    0290  CD 21			     int 21h
    503	    0292  8A D0			     mov dl, al
    504	    0294  80 C2	41		     add dl, 41h
    505	    0297  88 14			     mov byte ptr [si],	dl
    506	    0299  46			     inc si
    507	    029A  C6 04	3A		     mov byte ptr [si],	':'
    508	    029D  46			     inc si
    509	    029E  C6 04	5C		     mov byte ptr [si],	'\'
    510	    02A1  46			     inc si
    511
    512					     ;
    513					     ; save folder
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 10
2tree.ASM



    514					     ;
    515	    02A2  32 D2			     xor dl, dl			 ; Actual drive
    516	    02A4  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    517	    02A6  CD 21			     int 21h
    518	    02A8  C3			     ret
    519	    02A9			 print_string_with_length:
    520	    02A9  5B			     pop bx ; ret address
    521	    02AA  5E			     pop si ; string offset
    522	    02AB  59			     pop cx ; string length
    523	    02AC  53			     push bx; ret address
    524	    02AD  33 C0			     xor ax, ax
    525	    02AF			 _print_string_with_length_loop:
    526	    02AF  B4 02			     mov ah, 02h
    527	    02B1  8A 14			     mov dl, byte ptr [si]
    528	    02B3  CD 21			     int 21h
    529	    02B5  49			     dec cx
    530	    02B6  46			     inc si
    531	    02B7  83 F9	00		     cmp cx, 00h
    532	    02BA  74 02			     je	_print_string_with_length_end
    533	    02BC  EB F1			     jmp _print_string_with_length_loop
    534	    02BE			 _print_string_with_length_end:
    535	    02BE  C3			     ret
    536	    02BF			 count_no_space_no_zero_letters:
    537	    02BF  5B			     pop bx ; ret address
    538	    02C0  5E			     pop si ; string offset
    539	    02C1  59			     pop cx ; string length
    540	    02C2  53			     push bx ; ret address
    541	    02C3  B8 0000		     mov ax, 0
    542	    02C6			 _count_non_space_symbols_loop:
    543	    02C6  80 3C	20		     cmp byte ptr [si],	20h
    544	    02C9  74 12			     je	_count_non_space_symbols_end
    545	    02CB  80 3C	0D		     cmp byte ptr [si],	0Dh
    546	    02CE  74 0D			     je	_count_non_space_symbols_end
    547	    02D0  80 3C	00		     cmp byte ptr [si],	00h
    548	    02D3  74 08			     je	_count_non_space_symbols_end
    549	    02D5  3B C1			     cmp ax, cx
    550	    02D7  74 04			     je	_count_non_space_symbols_end
    551	    02D9  40			     inc ax
    552	    02DA  46			     inc si
    553	    02DB  EB E9			     jmp _count_non_space_symbols_loop
    554	    02DD			 _count_non_space_symbols_end:
    555	    02DD  C3			     ret
    556					 ;
    557					 ; error codes
    558					 ;
    559	    02DE  12			 no_more_files db 18
    560					 ;
    561					 ; error messages
    562					 ;
    563	    02DF  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    564		  64 69	72 65 63 74 6F+
    565		  72 79	20 66 61 69 6C+
    566		  73 2E	24
    567	    02F7  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    568		  72 73	74 20 66 69 6C+
    569		  65 6E	61 6D 65 73 20+
    570		  66 61	69 6C 73 2E 24
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 11
2tree.ASM



    571	    0313  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    572		  78 74	20 66 69 6C 65+
    573		  6E 61	6D 65 73 20 66+
    574		  61 69	6C 73 2E 24
    575					 ;
    576					 ;   parse arguments
    577					 ;
    578	    032E  01			 deep_level db 1
    579	    032F  2A			 file_mask db '*'
    580	    0330  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    581	    0335  2A 00			 folder_mask db	'*', 00h
    582					 ;
    583					 ; strings
    584					 ;
    585	    0337  2E 2E	00		 parent_folder db '..',	00h
    586	    033A  40*(00)		 working_folder	db 64 dup(00h)
    587	    037A  40*(00)		 root_folder db	64 dup(00h)
    588	    03BA  40*(00)		 start_mask db 64 dup(00h)
    589	    03FA  0A 24			 newline db 0Ah, '$'
    590	    03FC  2B*(00)		 dta db	43 dup(0)
    591					 end start
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "13:55:05"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:025C
CD_ERROR			  Near	 DGROUP:0268
CD_FAILS			  Byte	 DGROUP:02DF
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02BF
DEEP_LEVEL			  Byte	 DGROUP:032E
DTA				  Byte	 DGROUP:03FC
FILE_EXT			  Byte	 DGROUP:0330
FILE_MASK			  Byte	 DGROUP:032F
FIND_FIRST			  Near	 DGROUP:0226
FIND_FIRST_ERROR		  Near	 DGROUP:01C0
FIND_FIRST_FAILS		  Byte	 DGROUP:02F7
FIND_NEXT			  Near	 DGROUP:0221
FIND_NEXT_ERROR			  Near	 DGROUP:01D2
FIND_NEXT_FAILS			  Byte	 DGROUP:0313
FOLDER_MASK			  Byte	 DGROUP:0335
IS_FOLDER			  Near	 DGROUP:01A9
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0146
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0127
NEWLINE				  Byte	 DGROUP:03FA
NO_MORE_FILES			  Byte	 DGROUP:02DE
PARENT_FOLDER			  Byte	 DGROUP:0337
PARSE_ARGS			  Near	 DGROUP:01F9
PARSE_COMMAND_LINE		  Near	 DGROUP:01E4
PARSE_D				  Near	 DGROUP:0207
PARSE_END			  Near	 DGROUP:0220
PARSE_F				  Near	 DGROUP:0214
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:02A9
ROOT_FOLDER			  Byte	 DGROUP:037A
SAVE_CWD			  Near	 DGROUP:028B
SET_DTA				  Near	 DGROUP:0277
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0233
SHOW_FILENAME_FROM_DTA_VALID_NAM  Near	 DGROUP:023F
E
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03BA
WORKING_FOLDER			  Byte	 DGROUP:033A
ZEROS				  Near	 DGROUP:019F
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:02DD
Turbo Assembler	 Version 4.1	    12/08/19 13:55:05	    Page 13
Symbol Table



_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02C6
_IS_FOLDER_END			  Near	 DGROUP:01BF
_IS_FOLDER_FALSE		  Near	 DGROUP:01BA
_IS_FOLDER_TRUE			  Near	 DGROUP:01B5
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:019D
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0151
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0192
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02BE
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:02AF

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0427 Word	  Public  CODE
