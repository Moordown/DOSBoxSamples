Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 01C1		     call save_cwd
    151	    0103  B9 0000		     mov cx, 0
    152	    0106  51			     push cx
    153	    0107  E8 01A2		     call set_dta
    154	    010A  E8 00FC		     call parse_command_line
    155
    156					     ;
    157					     ;	 start tree
    158					     ;
    159	    010D  B8 03BAr		     mov ax, offset root_folder
    160	    0110  B9 0000		     mov cx, 0
    161	    0113  51			     push cx
    162	    0114  50			     push ax
    163	    0115  E8 000B		     call list_subfiles_recursive_from
    164
    165					     ;
    166					     ;	 cd to start folder
    167					     ;
    168	    0118  B8 037Ar		     mov ax, offset working_folder
    169	    011B  50			     push ax
    170	    011C  E8 0172		     call cd
    171					     exit
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 4
2tree.ASM



1   172	    011F  B4 00			     mov ah, 00h
1   173	    0121  CD 21			     int 21h
    174
    175	    0123			 list_subfiles_recursive_from:
    176	    0123  5B			     pop bx	 ; ret address
    177	    0124  58			     pop ax	 ; deep	level
    178	    0125  59			     pop cx	 ; root	folder offset
    179	    0126  53			     push bx
    180					     load <cx>
2   181	    0127  51				 push cx
    182	    0128  50			     push ax
    183	    0129  E8 0165		     call cd
    184					     restore <cx>
2   185	    012C  59				 pop cx
    186
    187					     ;
    188					     ; list subfolder
    189					     ;
    190	    012D  B8 036Fr		     mov ax, offset folder_mask
    191					     load <cx>
2   192	    0130  51				 push cx
    193	    0131  50			     push ax
    194	    0132  51			     push cx
    195	    0133  E8 000C		     call list_subfiles_recursive
    196					     restore <cx>
2   197	    0136  59				 pop cx
    198
    199					     ;
    200					     ; list files
    201					     ;
    202	    0137  B8 0369r		     mov ax, offset file_mask
    203					     load <cx>
2   204	    013A  51				 push cx
    205	    013B  50			     push ax
    206	    013C  51			     push cx
    207	    013D  E8 0002		     call list_subfiles_recursive
    208					     restore <cx>
2   209	    0140  59				 pop cx
    210	    0141  C3			     ret
    211
    212	    0142			 list_subfiles_recursive:
    213	    0142  5B			     pop bx
    214	    0143  59			     pop cx ; deep level
    215	    0144  58			     pop ax ; filemask offset
    216	    0145  53			     push bx
    217
    218					     load <cx, ax>
2   219	    0146  51				 push cx
2   220	    0147  50				 push ax
    221	    0148  51			     push cx
    222	    0149  E8 0160		     call set_dta
    223					     restore <ax, cx>
2   224	    014C  58				 pop ax
2   225	    014D  59				 pop cx
    226
    227					     load <cx>
2   228	    014E  51				 push cx
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 5
2tree.ASM



    229	    014F  50			     push ax
    230	    0150  E8 00F8		     call find_first
    231	    0153  73 05			     jnc _list_subfiles_recursive_loop
    232	    0155  E8 0090		     call find_first_error
    233	    0158  EB 59			     jmp _list_subfiles_recursive_end
    234	    015A			 _list_subfiles_recursive_loop:
    235					     restore <cx>
2   236	    015A  59				 pop cx
    237					     load <cx>
2   238	    015B  51				 push cx
    239	    015C  51			     push cx
    240	    015D  E8 00F8		     call show_filename_from_dta
    241	    0160  3D 0001		     cmp ax, 1
    242	    0163  75 43			     jne _list_subfiles_recursive_next
    243
    244					     ;
    245					     ;	 check if folder
    246					     ;
    247	    0165  E8 0069		     call is_folder
    248	    0168  3D 0001		     cmp ax, 1
    249	    016B  75 3B			     jne _list_subfiles_recursive_next
    250
    251					     ;
    252					     ;	 check deep level
    253					     ;
    254					     restore <cx>
2   255	    016D  59				 pop cx
    256					     load <cx>
2   257	    016E  51				 push cx
    258	    016F  33 DB			     xor bx, bx
    259	    0171  8A 1E	0368r		     mov bl, byte ptr [deep_level]
    260	    0175  3B CB			     cmp cx, bx
    261	    0177  7D 2F			     jge _list_subfiles_recursive_next
    262
    263					     ;
    264					     ; start new search
    265					     ;
    266
    267					     ;
    268					     ;	 cd to subfolder
    269					     ;
    270					     load <cx>
2   271	    0179  51				 push cx
    272	    017A  51			     push cx
    273	    017B  E8 0037		     call move_dta
    274	    017E  05 001E		     add ax, 1Eh
    275
    276	    0181  50			     push ax
    277	    0182  E8 010C		     call cd
    278					     restore <cx>
2   279	    0185  59				 pop cx
    280
    281	    0186  41			     inc cx
    282					     ;
    283					     ;	 list subfiles from subfolder
    284					     ;
    285					     load <cx>
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 6
2tree.ASM



2   286	    0187  51				 push cx
    287	    0188  B8 036Fr		     mov ax, offset folder_mask
    288	    018B  50			     push ax
    289	    018C  51			     push cx
    290	    018D  E8 FFB2		     call list_subfiles_recursive
    291					     restore <cx>
2   292	    0190  59				 pop cx
    293
    294
    295					     ;
    296					     ;	 list subfolders from subfolder
    297					     ;
    298					     load <cx>
2   299	    0191  51				 push cx
    300	    0192  B8 0369r		     mov ax, offset file_mask
    301	    0195  50			     push ax
    302	    0196  51			     push cx
    303	    0197  E8 FFA8		     call list_subfiles_recursive
    304					     restore <cx>
2   305	    019A  59				 pop cx
    306
    307
    308					     ;
    309					     ;	 cd back to this function
    310					     ;
    311	    019B  B8 0377r		     mov ax, offset parent_folder
    312	    019E  50			     push ax
    313	    019F  E8 00EF		     call cd
    314
    315					     restore <cx>
2   316	    01A2  59				 pop cx
    317					     load <cx>
2   318	    01A3  51				 push cx
    319	    01A4  51			     push cx
    320	    01A5  E8 0104		     call set_dta
    321	    01A8			 _list_subfiles_recursive_next:
    322	    01A8  E8 009B		     call find_next
    323	    01AB  73 AD			     jnc _list_subfiles_recursive_loop
    324	    01AD  3A 06	0317r		     cmp al, byte ptr [no_more_files]
    325	    01B1  75 44			     jne find_next_error
    326	    01B3			 _list_subfiles_recursive_end:
    327					     restore <cx>
2   328	    01B3  59				 pop cx
    329	    01B4  C3			     ret
    330	    01B5			 move_dta:
    331	    01B5  5B			     pop bx
    332	    01B6  59			     pop cx
    333	    01B7  53			     push bx
    334
    335	    01B8  33 C0			     xor ax, ax
    336	    01BA  A0 0318r		     mov al, byte ptr [dta_len]
    337	    01BD  F7 E1			     mul cx
    338
    339	    01BF  BB 043Cr		     mov bx, offset dta
    340	    01C2  03 D8			     add bx, ax
    341	    01C4  8B C3			     mov ax, bx
    342	    01C6  C3			     ret
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 7
2tree.ASM



    343	    01C7			 zeros:
    344	    01C7  5B			     pop bx
    345	    01C8  59			     pop cx ; length
    346	    01C9  5F			     pop di ; address
    347	    01CA  53			     push bx
    348	    01CB  B0 00			     mov al, 0
    349	    01CD  FC			     cld
    350	    01CE  F3> AA		     rep stosb
    351	    01D0  C3			     ret
    352	    01D1			 is_folder:
    353	    01D1  BB 0451r		     mov bx, offset dta	+ 15h
    354	    01D4  8A 1F			     mov bl, byte ptr [bx]
    355	    01D6  80 FB	10		     cmp bl, 10h
    356	    01D9  74 02			     je	_is_folder_true
    357	    01DB  75 05			     jne _is_folder_false
    358	    01DD			 _is_folder_true:
    359	    01DD  B8 0001		     mov ax, 1
    360	    01E0  EB 05			     jmp _is_folder_end
    361	    01E2			 _is_folder_false:
    362	    01E2  B8 0000		     mov ax, 0
    363	    01E5  EB 00			     jmp _is_folder_end
    364	    01E7			 _is_folder_end:
    365	    01E7  C3			     ret
    366
    367
    368
    369	    01E8			 find_first_error:
    370					     print_range <find_first_fails, newline>
2   371						 print <offset find_first_fails>
3   372	    01E8  B4 09				 mov ah, 09h
3   373	    01EA  BA 0331r			 mov dx, offset	find_first_fails
3   374	    01ED  CD 21				 int 21h
2   375						 print <offset newline>
3   376	    01EF  B4 09				 mov ah, 09h
3   377	    01F1  BA 043Ar			 mov dx, offset	newline
3   378	    01F4  CD 21				 int 21h
    379	    01F6  C3			     ret
    380	    01F7			 find_next_error:
    381					     print_range <find_next_fails, newline>
2   382						 print <offset find_next_fails>
3   383	    01F7  B4 09				 mov ah, 09h
3   384	    01F9  BA 034Dr			 mov dx, offset	find_next_fails
3   385	    01FC  CD 21				 int 21h
2   386						 print <offset newline>
3   387	    01FE  B4 09				 mov ah, 09h
3   388	    0200  BA 043Ar			 mov dx, offset	newline
3   389	    0203  CD 21				 int 21h
    390					     exit
1   391	    0205  B4 00			     mov ah, 00h
1   392	    0207  CD 21			     int 21h
    393
    394	    0209			 parse_command_line:
    395					     ;
    396					     ; prepare root folder
    397					     ;
    398	    0209  BE 0082		     mov si, 82h
    399	    020C  B9 0040		     mov cx, 64
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 8
2tree.ASM



    400	    020F  51			     push cx
    401	    0210  56			     push si
    402	    0211  E8 00E4		     call count_no_space_no_zero_letters
    403	    0214  8B C8			     mov cx, ax
    404	    0216  BE 0082		     mov si, 82h
    405	    0219  BF 03BAr		     mov di, offset root_folder
    406	    021C  F3> A4		     rep movsb
    407
    408	    021E			 parse_args:
    409	    021E  46			     inc si
    410	    021F  46			     inc si
    411	    0220  80 3C	64		     cmp byte ptr [si],	'd'
    412	    0223  74 07			     je	parse_d
    413	    0225  80 3C	66		     cmp byte ptr [si],	'f'
    414	    0228  74 0F			     je	parse_f
    415	    022A  EB 19			     jmp parse_end
    416	    022C			 parse_d:
    417					     ;
    418					     ; parse_deep level
    419					     ;
    420	    022C  46			     inc si
    421	    022D  46			     inc si
    422	    022E  8A 1C			     mov bl, byte ptr [si]
    423	    0230  80 EB	30		     sub bl, 30h	     ; to number
    424	    0233  88 1E	0368r		     mov byte ptr [deep_level],	bl
    425	    0237  EB E5			     jmp parse_args
    426	    0239			 parse_f:
    427	    0239  46			     inc si
    428	    023A  46			     inc si
    429	    023B  BF 036Ar		     mov di, offset file_ext
    430	    023E  B9 0004		     mov cx, 4
    431	    0241  F3> A4		     rep movsb
    432	    0243  EB D9			     jmp parse_args
    433					     ;
    434					     ; parse file extension
    435					     ;
    436	    0245			 parse_end:
    437	    0245  C3			     ret
    438	    0246			 find_next:
    439	    0246  B4 4F			     mov ah, 4Fh
    440	    0248  CD 21			     int 21h
    441
    442	    024A  C3			     ret
    443
    444	    024B			 find_first:
    445	    024B  5B			     pop bx
    446	    024C  5A			     pop dx		 ; filename spec
    447	    024D  B9 0010		     mov cx, 10h	 ; include directories
    448	    0250  53			     push bx
    449
    450	    0251  33 C0			     xor ax, ax
    451	    0253  B4 4E			     mov ah, 4Eh
    452	    0255  CD 21			     int 21h
    453	    0257  C3			     ret
    454	    0258			 show_filename_from_dta:
    455	    0258  5B			     pop bx
    456	    0259  59			     pop cx  ; deep level
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 9
2tree.ASM



    457	    025A  53			     push bx
    458
    459					     load <cx>
2   460	    025B  51				 push cx
    461	    025C  51			     push cx
    462	    025D  E8 FF55		     call move_dta
    463					     restore <cx>
2   464	    0260  59				 pop cx
    465
    466	    0261  05 001E		     add ax, 1Eh
    467					     ; xor ax, ax
    468					     ; mov al, byte ptr	[dta_len]
    469					     ; mul cx
    470					     ; mov bx, offset dta + 1Eh
    471					     ; add bx, ax
    472
    473	    0264  8B D8			     mov bx, ax
    474					     load <bx, cx>
2   475	    0266  53				 push bx
2   476	    0267  51				 push cx
    477	    0268  80 3F	2E		     cmp byte ptr [bx],	'.'
    478	    026B  75 06			     jne _show_filename_from_dta_valid_name
    479	    026D  B8 0000		     mov ax, 0
    480					     restore <cx, bx>
2   481	    0270  59				 pop cx
2   482	    0271  5B				 pop bx
    483	    0272  C3			     ret
    484	    0273			 _show_filename_from_dta_valid_name:
    485					     ;
    486					     ;	 pseudo	graphic	prefix
    487					     ;
    488					     restore <cx, bx>
2   489	    0273  59				 pop cx
2   490	    0274  5B				 pop bx
    491					     load <bx>
2   492	    0275  53				 push bx
    493	    0276  B9 000D		     mov cx, 13
    494	    0279  51			     push cx
    495	    027A  53			     push bx
    496	    027B  E8 007A		     call count_no_space_no_zero_letters
    497	    027E  8B C8			     mov cx, ax
    498					     restore <bx>
2   499	    0280  5B				 pop bx
    500					     ; mov ax, offset dta + 1Eh
    501	    0281  51			     push cx
    502	    0282  53			     push bx
    503	    0283  E8 005C		     call print_string_with_length
    504					     print_range <newline>
2   505						 print <offset newline>
3   506	    0286  B4 09				 mov ah, 09h
3   507	    0288  BA 043Ar			 mov dx, offset	newline
3   508	    028B  CD 21				 int 21h
    509	    028D  B8 0001		     mov ax, 1
    510	    0290  C3			     ret
    511	    0291			 cd:
    512	    0291  5B			     pop bx ; ret addr
    513	    0292  5A			     pop dx ; root address
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 10
2tree.ASM



    514	    0293  53			     push bx ; ret addr
    515
    516	    0294  33 C0			     xor ax, ax
    517	    0296  B4 3B			     mov ah, 3Bh
    518	    0298  CD 21			     int 21h
    519
    520	    029A  72 01			     jc	cd_error
    521	    029C  C3			     ret
    522	    029D			 cd_error:
    523					     print_range <cd_fails, newline>
2   524						 print <offset cd_fails>
3   525	    029D  B4 09				 mov ah, 09h
3   526	    029F  BA 0319r			 mov dx, offset	cd_fails
3   527	    02A2  CD 21				 int 21h
2   528						 print <offset newline>
3   529	    02A4  B4 09				 mov ah, 09h
3   530	    02A6  BA 043Ar			 mov dx, offset	newline
3   531	    02A9  CD 21				 int 21h
    532	    02AB  C3			     ret
    533
    534	    02AC			 set_dta:
    535	    02AC  5B			     pop bx
    536	    02AD  59			     pop cx			 ; deep	level
    537	    02AE  53			     push bx
    538
    539	    02AF  BA 043Cr		     mov dx, offset dta
    540					     load <dx>
2   541	    02B2  52				 push dx
    542	    02B3  33 C0			     xor ax, ax
    543	    02B5  A0 0318r		     mov al, byte ptr [dta_len]
    544	    02B8  F7 E1			     mul cx
    545					     restore <dx>
2   546	    02BA  5A				 pop dx
    547	    02BB  03 D0			     add dx, ax
    548
    549	    02BD  33 C0			     xor ax, ax
    550	    02BF  B4 1A			     mov ah, 1Ah
    551	    02C1  CD 21			     int 21h
    552
    553	    02C3  C3			     ret
    554
    555	    02C4			 save_cwd:
    556	    02C4  BE 037Ar		     mov si, offset working_folder
    557
    558					     ;
    559					     ; save driver
    560					     ;
    561	    02C7  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    562	    02C9  CD 21			     int 21h
    563	    02CB  8A D0			     mov dl, al
    564	    02CD  80 C2	41		     add dl, 41h
    565	    02D0  88 14			     mov byte ptr [si],	dl
    566	    02D2  46			     inc si
    567	    02D3  C6 04	3A		     mov byte ptr [si],	':'
    568	    02D6  46			     inc si
    569	    02D7  C6 04	5C		     mov byte ptr [si],	'\'
    570	    02DA  46			     inc si
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 11
2tree.ASM



    571
    572					     ;
    573					     ; save folder
    574					     ;
    575	    02DB  32 D2			     xor dl, dl			 ; Actual drive
    576	    02DD  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    577	    02DF  CD 21			     int 21h
    578	    02E1  C3			     ret
    579	    02E2			 print_string_with_length:
    580	    02E2  5B			     pop bx ; ret address
    581	    02E3  5E			     pop si ; string offset
    582	    02E4  59			     pop cx ; string length
    583	    02E5  53			     push bx; ret address
    584	    02E6  33 C0			     xor ax, ax
    585	    02E8			 _print_string_with_length_loop:
    586	    02E8  B4 02			     mov ah, 02h
    587	    02EA  8A 14			     mov dl, byte ptr [si]
    588	    02EC  CD 21			     int 21h
    589	    02EE  49			     dec cx
    590	    02EF  46			     inc si
    591	    02F0  83 F9	00		     cmp cx, 00h
    592	    02F3  74 02			     je	_print_string_with_length_end
    593	    02F5  EB F1			     jmp _print_string_with_length_loop
    594	    02F7			 _print_string_with_length_end:
    595	    02F7  C3			     ret
    596	    02F8			 count_no_space_no_zero_letters:
    597	    02F8  5B			     pop bx ; ret address
    598	    02F9  5E			     pop si ; string offset
    599	    02FA  59			     pop cx ; string length
    600	    02FB  53			     push bx ; ret address
    601	    02FC  B8 0000		     mov ax, 0
    602	    02FF			 _count_non_space_symbols_loop:
    603	    02FF  80 3C	20		     cmp byte ptr [si],	20h
    604	    0302  74 12			     je	_count_non_space_symbols_end
    605	    0304  80 3C	0D		     cmp byte ptr [si],	0Dh
    606	    0307  74 0D			     je	_count_non_space_symbols_end
    607	    0309  80 3C	00		     cmp byte ptr [si],	00h
    608	    030C  74 08			     je	_count_non_space_symbols_end
    609	    030E  3B C1			     cmp ax, cx
    610	    0310  74 04			     je	_count_non_space_symbols_end
    611	    0312  40			     inc ax
    612	    0313  46			     inc si
    613	    0314  EB E9			     jmp _count_non_space_symbols_loop
    614	    0316			 _count_non_space_symbols_end:
    615	    0316  C3			     ret
    616					 ;
    617					 ; error codes
    618					 ;
    619	    0317  12			 no_more_files db 18
    620	    0318  2B			 dta_len db 2bh
    621					 ;
    622					 ; error messages
    623					 ;
    624	    0319  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    625		  64 69	72 65 63 74 6F+
    626		  72 79	20 66 61 69 6C+
    627		  73 2E	24
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 12
2tree.ASM



    628	    0331  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    629		  72 73	74 20 66 69 6C+
    630		  65 6E	61 6D 65 73 20+
    631		  66 61	69 6C 73 2E 24
    632	    034D  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    633		  78 74	20 66 69 6C 65+
    634		  6E 61	6D 65 73 20 66+
    635		  61 69	6C 73 2E 24
    636					 ;
    637					 ;   parse arguments
    638					 ;
    639	    0368  01			 deep_level db 1
    640	    0369  2A			 file_mask db '*'
    641	    036A  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    642	    036F  2A 00			 folder_mask db	'*', 00h
    643					 ;
    644					 ;   pseudographic
    645					 ;
    646	    0371  E2 94	9C		 zero_level_folder db '├'
    647	    0374  E2 94	AC		 no_zero_level_folder db '┬'
    648					 ;
    649					 ; strings
    650					 ;
    651	    0377  2E 2E	00		 parent_folder db '..',	00h
    652	    037A  40*(00)		 working_folder	db 64 dup(00h)
    653	    03BA  40*(00)		 root_folder db	64 dup(00h)
    654	    03FA  40*(00)		 start_mask db 64 dup(00h)
    655	    043A  0A 24			 newline db 0Ah, '$'
    656	    043C  2B*(00)		 dta db	43 dup(0)
    657					 end start
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "22:31:35"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0291
CD_ERROR			  Near	 DGROUP:029D
CD_FAILS			  Byte	 DGROUP:0319
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02F8
DEEP_LEVEL			  Byte	 DGROUP:0368
DTA				  Byte	 DGROUP:043C
DTA_LEN				  Byte	 DGROUP:0318
FILE_EXT			  Byte	 DGROUP:036A
FILE_MASK			  Byte	 DGROUP:0369
FIND_FIRST			  Near	 DGROUP:024B
FIND_FIRST_ERROR		  Near	 DGROUP:01E8
FIND_FIRST_FAILS		  Byte	 DGROUP:0331
FIND_NEXT			  Near	 DGROUP:0246
FIND_NEXT_ERROR			  Near	 DGROUP:01F7
FIND_NEXT_FAILS			  Byte	 DGROUP:034D
FOLDER_MASK			  Byte	 DGROUP:036F
IS_FOLDER			  Near	 DGROUP:01D1
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0142
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0123
MOVE_DTA			  Near	 DGROUP:01B5
NEWLINE				  Byte	 DGROUP:043A
NO_MORE_FILES			  Byte	 DGROUP:0317
NO_ZERO_LEVEL_FOLDER		  Byte	 DGROUP:0374
PARENT_FOLDER			  Byte	 DGROUP:0377
PARSE_ARGS			  Near	 DGROUP:021E
PARSE_COMMAND_LINE		  Near	 DGROUP:0209
PARSE_D				  Near	 DGROUP:022C
PARSE_END			  Near	 DGROUP:0245
PARSE_F				  Near	 DGROUP:0239
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:02E2
ROOT_FOLDER			  Byte	 DGROUP:03BA
SAVE_CWD			  Near	 DGROUP:02C4
SET_DTA				  Near	 DGROUP:02AC
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0258
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03FA
WORKING_FOLDER			  Byte	 DGROUP:037A
ZEROS				  Near	 DGROUP:01C7
Turbo Assembler	 Version 4.1	    12/08/19 22:31:36	    Page 14
Symbol Table



ZERO_LEVEL_FOLDER		  Byte	 DGROUP:0371
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0316
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02FF
_IS_FOLDER_END			  Near	 DGROUP:01E7
_IS_FOLDER_FALSE		  Near	 DGROUP:01E2
_IS_FOLDER_TRUE			  Near	 DGROUP:01DD
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:01B3
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:015A
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:01A8
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02F7
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:02E8
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:0273
ME

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0467 Word	  Public  CODE
