Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  B8 0311r		     mov ax, offset dta
    151	    0103  50			     push ax
    152	    0104  E8 00A9		     call set_dta
    153	    0107  E8 0046		     call parse_command_line
    154	    010A  B8 0287r		     mov ax, offset root_folder
    155	    010D  50			     push ax
    156	    010E  E8 0084		     call cd
    157					     ; call copy_root_from_comand_line
    158	    0111  B8 0309r		     mov ax, offset file_mask
    159	    0114  50			     push ax
    160	    0115  E8 0053		     call find_first
    161	    0118  72 12			     jc	find_first_error
    162	    011A			 find_loop:
    163	    011A  E8 005B		     call show_filename_from_dta
    164	    011D  E8 0046		     call find_next
    165	    0120  73 F8			     jnc find_loop
    166	    0122  3A 06	0237r		     cmp al, byte ptr [no_more_files]
    167	    0126  75 16			     jne find_next_error
    168					     exit
1   169	    0128  B4 00			     mov ah, 00h
1   170	    012A  CD 21			     int 21h
    171
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 4
2tree.ASM



    172	    012C			 find_first_error:
    173					     print_range <find_first_fails, newline>
2   174						 print <offset find_first_fails>
3   175	    012C  B4 09				 mov ah, 09h
3   176	    012E  BA 0250r			 mov dx, offset	find_first_fails
3   177	    0131  CD 21				 int 21h
2   178						 print <offset newline>
3   179	    0133  B4 09				 mov ah, 09h
3   180	    0135  BA 030Fr			 mov dx, offset	newline
3   181	    0138  CD 21				 int 21h
    182					     exit
1   183	    013A  B4 00			     mov ah, 00h
1   184	    013C  CD 21			     int 21h
    185	    013E			 find_next_error:
    186					     print_range <find_next_fails, newline>
2   187						 print <offset find_next_fails>
3   188	    013E  B4 09				 mov ah, 09h
3   189	    0140  BA 026Cr			 mov dx, offset	find_next_fails
3   190	    0143  CD 21				 int 21h
2   191						 print <offset newline>
3   192	    0145  B4 09				 mov ah, 09h
3   193	    0147  BA 030Fr			 mov dx, offset	newline
3   194	    014A  CD 21				 int 21h
    195					     exit
1   196	    014C  B4 00			     mov ah, 00h
1   197	    014E  CD 21			     int 21h
    198	    0150			 parse_command_line:
    199					     ;
    200					     ; prepare root folder
    201					     ;
    202	    0150  BE 0082		     mov si, 82h
    203	    0153  B9 0040		     mov cx, 64
    204	    0156  51			     push cx
    205	    0157  56			     push si
    206	    0158  E8 00BD		     call count_no_space_no_zero_letters
    207	    015B  8B C8			     mov cx, ax
    208	    015D  BE 0082		     mov si, 82h
    209	    0160  BF 0287r		     mov di, offset root_folder
    210	    0163  F3> A4		     rep movsb
    211	    0165  C3			     ret
    212	    0166			 find_next:
    213	    0166  B4 4F			     mov ah, 4Fh
    214	    0168  CD 21			     int 21h
    215
    216	    016A  C3			     ret
    217
    218	    016B			 find_first:
    219	    016B  5B			     pop bx
    220	    016C  5A			     pop dx		 ; filename spec
    221	    016D  B9 0010		     mov cx, 10h	 ; include directories
    222	    0170  53			     push bx
    223
    224	    0171  33 C0			     xor ax, ax
    225	    0173  B4 4E			     mov ah, 4Eh
    226	    0175  CD 21			     int 21h
    227	    0177  C3			     ret
    228	    0178			 show_filename_from_dta:
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 5
2tree.ASM



    229	    0178  B8 032Fr		     mov ax, offset dta	+ 1Eh
    230	    017B  B9 000D		     mov cx, 13
    231	    017E  51			     push cx
    232	    017F  50			     push ax
    233	    0180  E8 0095		     call count_no_space_no_zero_letters
    234	    0183  8B C8			     mov cx, ax
    235	    0185  B8 032Fr		     mov ax, offset dta	+ 1Eh
    236	    0188  51			     push cx
    237	    0189  50			     push ax
    238	    018A  E8 0075		     call print_string_with_length
    239					     print_range <newline>
2   240						 print <offset newline>
3   241	    018D  B4 09				 mov ah, 09h
3   242	    018F  BA 030Fr			 mov dx, offset	newline
3   243	    0192  CD 21				 int 21h
    244	    0194  C3			     ret
    245	    0195			 cd:
    246	    0195  5B			     pop bx ; ret addr
    247	    0196  5A			     pop dx ; root address
    248	    0197  53			     push bx ; ret addr
    249
    250	    0198  33 C0			     xor ax, ax
    251	    019A  B4 3B			     mov ah, 3Bh
    252	    019C  CD 21			     int 21h
    253
    254	    019E  72 01			     jc	cd_error
    255	    01A0  C3			     ret
    256	    01A1			 cd_error:
    257					     print_range <cd_fails, newline>
2   258						 print <offset cd_fails>
3   259	    01A1  B4 09				 mov ah, 09h
3   260	    01A3  BA 0238r			 mov dx, offset	cd_fails
3   261	    01A6  CD 21				 int 21h
2   262						 print <offset newline>
3   263	    01A8  B4 09				 mov ah, 09h
3   264	    01AA  BA 030Fr			 mov dx, offset	newline
3   265	    01AD  CD 21				 int 21h
    266	    01AF  C3			     ret
    267
    268	    01B0			 set_dta:
    269	    01B0  5B			     pop bx
    270	    01B1  5A			     pop dx			 ; dta address offset
    271	    01B2  53			     push bx
    272
    273	    01B3  33 C0			     xor ax, ax
    274	    01B5  B4 1A			     mov ah, 1Ah
    275	    01B7  CD 21			     int 21h
    276
    277	    01B9  C3			     ret
    278
    279	    01BA			 save_cwd:
    280	    01BA  5B			     pop bx
    281	    01BB  5E			     pop si
    282	    01BC  53			     push bx
    283
    284	    01BD  32 D2			     xor dl, dl			 ; Actual drive
    285	    01BF  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 6
2tree.ASM



    286	    01C1  CD 21			     int 21h
    287	    01C3  C3			     ret
    288	    01C4			 copy_root_from_comand_line:
    289					     ;
    290					     ;	 copy root folder
    291					     ;
    292	    01C4  33 C0			     xor ax, ax
    293	    01C6  BE 0080		     mov si, 80h
    294	    01C9  8A 04			     mov al, byte ptr [si]
    295	    01CB  48			     dec ax		     ; remove last 0Dh byte
    296
    297	    01CC  BF 02C7r		     mov di, offset start_mask
    298	    01CF  BE 0082		     mov si, 82h	     ; start non space root dir
    299	    01D2  33 C9			     xor cx, cx
    300	    01D4  8A C8			     mov cl, al
    301	    01D6  FC			     cld
    302	    01D7  F3> A4		     rep movsb
    303
    304					     ;
    305					     ;	 add mask for search to	path
    306					     ;
    307	    01D9  B8 02C7r		     mov ax, offset start_mask
    308	    01DC  B9 000D		     mov cx, 13
    309	    01DF  51			     push cx
    310	    01E0  50			     push ax
    311	    01E1  E8 0034		     call count_no_space_no_zero_letters
    312	    01E4  BE 02C7r		     mov si, offset start_mask
    313	    01E7  03 F0			     add si, ax
    314	    01E9  BF 0309r		     mov di, offset file_mask
    315	    01EC  B9 0005		     mov cx, 5
    316	    01EF  F3> A4		     rep movsb
    317
    318	    01F1  C3			     ret
    319	    01F2			 skip_spaces:
    320	    01F2  33 C0			     xor ax, ax
    321	    01F4  5B			     pop bx ; ret addr
    322	    01F5  5E			     pop si ; str addr
    323	    01F6  53			     push bx ; ret addr
    324	    01F7			 _skip_spaces_loop:
    325	    01F7  80 3C	20		     cmp byte ptr [si],	20h
    326	    01FA  75 03			     jne _skip_spaces_end
    327	    01FC  46			     inc si
    328	    01FD  EB F8			     jmp _skip_spaces_loop
    329	    01FF			 _skip_spaces_end:
    330	    01FF  8B C6			     mov ax, si
    331	    0201  C3			     ret
    332	    0202			 print_string_with_length:
    333	    0202  5B			     pop bx ; ret address
    334	    0203  5E			     pop si ; string offset
    335	    0204  59			     pop cx ; string length
    336	    0205  53			     push bx; ret address
    337	    0206  33 C0			     xor ax, ax
    338	    0208			 _print_string_with_length_loop:
    339	    0208  B4 02			     mov ah, 02h
    340	    020A  8A 14			     mov dl, byte ptr [si]
    341	    020C  CD 21			     int 21h
    342	    020E  49			     dec cx
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 7
2tree.ASM



    343	    020F  46			     inc si
    344	    0210  83 F9	00		     cmp cx, 00h
    345	    0213  74 02			     je	_print_string_with_length_end
    346	    0215  EB F1			     jmp _print_string_with_length_loop
    347	    0217			 _print_string_with_length_end:
    348	    0217  C3			     ret
    349	    0218			 count_no_space_no_zero_letters:
    350	    0218  5B			     pop bx ; ret address
    351	    0219  5E			     pop si ; string offset
    352	    021A  59			     pop cx ; string length
    353	    021B  53			     push bx ; ret address
    354	    021C  B8 0000		     mov ax, 0
    355	    021F			 _count_non_space_symbols_loop:
    356	    021F  80 3C	20		     cmp byte ptr [si],	20h
    357	    0222  74 12			     je	_count_non_space_symbols_end
    358	    0224  80 3C	0D		     cmp byte ptr [si],	0Dh
    359	    0227  74 0D			     je	_count_non_space_symbols_end
    360	    0229  80 3C	00		     cmp byte ptr [si],	00h
    361	    022C  74 08			     je	_count_non_space_symbols_end
    362	    022E  3B C1			     cmp ax, cx
    363	    0230  74 04			     je	_count_non_space_symbols_end
    364	    0232  40			     inc ax
    365	    0233  46			     inc si
    366	    0234  EB E9			     jmp _count_non_space_symbols_loop
    367	    0236			 _count_non_space_symbols_end:
    368	    0236  C3			     ret
    369					 ;
    370					 ; error codes
    371					 ;
    372	    0237  12			 no_more_files db 18
    373					 ;
    374					 ; error messages
    375					 ;
    376	    0238  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    377		  64 69	72 65 63 74 6F+
    378		  72 79	20 66 61 69 6C+
    379		  73 2E	24
    380	    0250  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    381		  72 73	74 20 66 69 6C+
    382		  65 6E	61 6D 65 73 20+
    383		  66 61	69 6C 73 2E 24
    384	    026C  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    385		  78 74	20 66 69 6C 65+
    386		  6E 61	6D 65 73 20 66+
    387		  61 69	6C 73 2E 24
    388					 ;
    389					 ; strings
    390					 ;
    391	    0287  40*(00)		 root_folder db	64 dup(00h)
    392	    02C7  40*(00)		 start_mask db 64 dup(00h)
    393	    0307  2A 00			 folder_mask db	'*', 00h
    394	    0309  2A 2E			 file_mask db '*.'
    395	    030B  74 78	74 00		 file_ext db 'txt', 00h
    396
    397	    030F  0A 24			 newline db 0Ah, '$'
    398	    0311  30*(00)		 dta db	48 dup(0)
    399					 end start
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/07/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "14:56:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0195
CD_ERROR			  Near	 DGROUP:01A1
CD_FAILS			  Byte	 DGROUP:0238
COPY_ROOT_FROM_COMAND_LINE	  Near	 DGROUP:01C4
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0218
DTA				  Byte	 DGROUP:0311
FILE_EXT			  Byte	 DGROUP:030B
FILE_MASK			  Byte	 DGROUP:0309
FIND_FIRST			  Near	 DGROUP:016B
FIND_FIRST_ERROR		  Near	 DGROUP:012C
FIND_FIRST_FAILS		  Byte	 DGROUP:0250
FIND_LOOP			  Near	 DGROUP:011A
FIND_NEXT			  Near	 DGROUP:0166
FIND_NEXT_ERROR			  Near	 DGROUP:013E
FIND_NEXT_FAILS			  Byte	 DGROUP:026C
FOLDER_MASK			  Byte	 DGROUP:0307
NEWLINE				  Byte	 DGROUP:030F
NO_MORE_FILES			  Byte	 DGROUP:0237
PARSE_COMMAND_LINE		  Near	 DGROUP:0150
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0202
ROOT_FOLDER			  Byte	 DGROUP:0287
SAVE_CWD			  Near	 DGROUP:01BA
SET_DTA				  Near	 DGROUP:01B0
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0178
SKIP_SPACES			  Near	 DGROUP:01F2
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:02C7
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0236
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:021F
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:0217
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0208
_SKIP_SPACES_END		  Near	 DGROUP:01FF
_SKIP_SPACES_LOOP		  Near	 DGROUP:01F7
Turbo Assembler	 Version 4.1	    12/07/19 14:56:07	    Page 9
Symbol Table




Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0341 Word	  Public  CODE
