Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 0172		     call save_cwd
    151	    0103  B8 03E6r		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  B9 0000		     mov cx, 0
    154	    010A  51			     push cx
    155	    010B  E8 0153		     call set_dta
    156	    010E  E8 00BD		     call parse_command_line
    157
    158					     ;
    159					     ;	 start tree
    160					     ;
    161	    0111  B8 0364r		     mov ax, offset root_folder
    162	    0114  B9 0000		     mov cx, 0
    163	    0117  51			     push cx
    164	    0118  50			     push ax
    165	    0119  E8 000B		     call list_subfiles_recursive_from
    166
    167					     ;
    168					     ;	 cd to start folder
    169					     ;
    170	    011C  B8 0324r		     mov ax, offset working_folder
    171	    011F  50			     push ax
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 4
2tree.ASM



    172	    0120  E8 0123		     call cd
    173					     exit
1   174	    0123  B4 00			     mov ah, 00h
1   175	    0125  CD 21			     int 21h
    176
    177	    0127			 list_subfiles_recursive_from:
    178	    0127  5B			     pop bx	 ; ret address
    179	    0128  58			     pop ax	 ; deep	level
    180	    0129  59			     pop cx	 ; root	folder offset
    181	    012A  53			     push bx
    182					     load <cx>
2   183	    012B  51				 push cx
    184	    012C  50			     push ax
    185	    012D  E8 0116		     call cd
    186					     restore <cx>
2   187	    0130  59				 pop cx
    188
    189					     ;
    190					     ; list subfolder
    191					     ;
    192	    0131  B8 031Fr		     mov ax, offset folder_mask
    193					     load <cx>
2   194	    0134  51				 push cx
    195	    0135  50			     push ax
    196	    0136  51			     push cx
    197	    0137  E8 000C		     call list_subfiles_recursive
    198					     restore <cx>
2   199	    013A  59				 pop cx
    200
    201					     ;
    202					     ; list files
    203					     ;
    204	    013B  B8 0319r		     mov ax, offset file_mask
    205					     load <cx>
2   206	    013E  51				 push cx
    207	    013F  50			     push ax
    208	    0140  51			     push cx
    209	    0141  E8 0002		     call list_subfiles_recursive
    210					     restore <cx>
2   211	    0144  59				 pop cx
    212	    0145  C3			     ret
    213
    214	    0146			 list_subfiles_recursive:
    215	    0146  5B			     pop bx
    216	    0147  59			     pop cx ; deep level
    217	    0148  58			     pop ax ; filemask offset
    218	    0149  53			     push bx
    219					     ; mov ax, offset file_mask
    220					     load <cx>
2   221	    014A  51				 push cx
    222	    014B  50			     push ax
    223	    014C  E8 00C1		     call find_first
    224	    014F  72 59			     jc	find_first_error
    225	    0151			 _list_subfiles_recursive_loop:
    226	    0151  E8 00C9		     call show_filename_from_dta
    227	    0154  3D 0001		     cmp ax, 1
    228	    0157  75 2D			     jne _list_subfiles_recursive_next
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 5
2tree.ASM



    229
    230					     ;
    231					     ;	 check if folder
    232					     ;
    233	    0159  E8 0037		     call is_folder
    234	    015C  3D 0001		     cmp ax, 1
    235	    015F  75 25			     jne _list_subfiles_recursive_next
    236
    237					     ;
    238					     ;	 check deep level
    239					     ;
    240					     restore <cx>
2   241	    0161  59				 pop cx
    242					     load <cx>
2   243	    0162  51				 push cx
    244	    0163  33 DB			     xor bx, bx
    245	    0165  8A 1E	0318r		     mov bl, byte ptr [deep_level]
    246	    0169  3B CB			     cmp cx, bx
    247	    016B  7D 19			     jge _list_subfiles_recursive_next
    248
    249					     ;
    250					     ; start new search
    251					     ;
    252
    253					     ;
    254					     ;	 cd to subfolder
    255					     ;
    256					     load <cx>
2   257	    016D  51				 push cx
    258	    016E  B8 0404r		     mov ax, offset dta	+ 1Eh
    259	    0171  50			     push ax
    260	    0172  E8 00D1		     call cd
    261					     restore <cx>
2   262	    0175  59				 pop cx
    263
    264					     ;
    265					     ;	 list subfiles from subfolder
    266					     ;
    267	    0176  41			     inc cx
    268	    0177  B8 0319r		     mov ax, offset file_mask
    269	    017A  50			     push ax
    270	    017B  51			     push cx
    271	    017C  E8 FFC7		     call list_subfiles_recursive
    272
    273					     ;
    274					     ;	 cd to this function
    275					     ;
    276	    017F  B8 0321r		     mov ax, offset parent_folder
    277	    0182  50			     push ax
    278	    0183  E8 00C0		     call cd
    279
    280	    0186			 _list_subfiles_recursive_next:
    281	    0186  E8 0082		     call find_next
    282	    0189  73 C6			     jnc _list_subfiles_recursive_loop
    283	    018B  3A 06	02C8r		     cmp al, byte ptr [no_more_files]
    284	    018F  75 2B			     jne find_next_error
    285	    0191			 _list_subfiles_recursive_end:
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 6
2tree.ASM



    286					     restore <cx>
2   287	    0191  59				 pop cx
    288	    0192  C3			     ret
    289
    290	    0193			 is_folder:
    291	    0193  BB 03FBr		     mov bx, offset dta	+ 15h
    292	    0196  8A 1F			     mov bl, byte ptr [bx]
    293	    0198  80 FB	10		     cmp bl, 10h
    294	    019B  74 02			     je	_is_folder_true
    295	    019D  75 05			     jne _is_folder_false
    296	    019F			 _is_folder_true:
    297	    019F  B8 0001		     mov ax, 1
    298	    01A2  EB 05			     jmp _is_folder_end
    299	    01A4			 _is_folder_false:
    300	    01A4  B8 0000		     mov ax, 0
    301	    01A7  EB 00			     jmp _is_folder_end
    302	    01A9			 _is_folder_end:
    303	    01A9  C3			     ret
    304
    305
    306
    307	    01AA			 find_first_error:
    308					     print_range <find_first_fails, newline>
2   309						 print <offset find_first_fails>
3   310	    01AA  B4 09				 mov ah, 09h
3   311	    01AC  BA 02E1r			 mov dx, offset	find_first_fails
3   312	    01AF  CD 21				 int 21h
2   313						 print <offset newline>
3   314	    01B1  B4 09				 mov ah, 09h
3   315	    01B3  BA 03E4r			 mov dx, offset	newline
3   316	    01B6  CD 21				 int 21h
    317					     exit
1   318	    01B8  B4 00			     mov ah, 00h
1   319	    01BA  CD 21			     int 21h
    320	    01BC			 find_next_error:
    321					     print_range <find_next_fails, newline>
2   322						 print <offset find_next_fails>
3   323	    01BC  B4 09				 mov ah, 09h
3   324	    01BE  BA 02FDr			 mov dx, offset	find_next_fails
3   325	    01C1  CD 21				 int 21h
2   326						 print <offset newline>
3   327	    01C3  B4 09				 mov ah, 09h
3   328	    01C5  BA 03E4r			 mov dx, offset	newline
3   329	    01C8  CD 21				 int 21h
    330					     exit
1   331	    01CA  B4 00			     mov ah, 00h
1   332	    01CC  CD 21			     int 21h
    333
    334	    01CE			 parse_command_line:
    335					     ;
    336					     ; prepare root folder
    337					     ;
    338	    01CE  BE 0082		     mov si, 82h
    339	    01D1  B9 0040		     mov cx, 64
    340	    01D4  51			     push cx
    341	    01D5  56			     push si
    342	    01D6  E8 00D0		     call count_no_space_no_zero_letters
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 7
2tree.ASM



    343	    01D9  8B C8			     mov cx, ax
    344	    01DB  BE 0082		     mov si, 82h
    345	    01DE  BF 0364r		     mov di, offset root_folder
    346	    01E1  F3> A4		     rep movsb
    347
    348	    01E3			 parse_args:
    349	    01E3  46			     inc si
    350	    01E4  46			     inc si
    351	    01E5  80 3C	64		     cmp byte ptr [si],	'd'
    352	    01E8  74 07			     je	parse_d
    353	    01EA  80 3C	66		     cmp byte ptr [si],	'f'
    354	    01ED  74 0F			     je	parse_f
    355	    01EF  EB 19			     jmp parse_end
    356	    01F1			 parse_d:
    357					     ;
    358					     ; parse_deep level
    359					     ;
    360	    01F1  46			     inc si
    361	    01F2  46			     inc si
    362	    01F3  8A 1C			     mov bl, byte ptr [si]
    363	    01F5  80 EB	30		     sub bl, 30h	     ; to number
    364	    01F8  88 1E	0318r		     mov byte ptr [deep_level],	bl
    365	    01FC  EB E5			     jmp parse_args
    366	    01FE			 parse_f:
    367	    01FE  46			     inc si
    368	    01FF  46			     inc si
    369	    0200  BF 031Ar		     mov di, offset file_ext
    370	    0203  B9 0004		     mov cx, 4
    371	    0206  F3> A4		     rep movsb
    372	    0208  EB D9			     jmp parse_args
    373					     ;
    374					     ; parse file extension
    375					     ;
    376	    020A			 parse_end:
    377	    020A  C3			     ret
    378	    020B			 find_next:
    379	    020B  B4 4F			     mov ah, 4Fh
    380	    020D  CD 21			     int 21h
    381
    382	    020F  C3			     ret
    383
    384	    0210			 find_first:
    385	    0210  5B			     pop bx
    386	    0211  5A			     pop dx		 ; filename spec
    387	    0212  B9 0010		     mov cx, 10h	 ; include directories
    388	    0215  53			     push bx
    389
    390	    0216  33 C0			     xor ax, ax
    391	    0218  B4 4E			     mov ah, 4Eh
    392	    021A  CD 21			     int 21h
    393	    021C  C3			     ret
    394	    021D			 show_filename_from_dta:
    395	    021D  BB 0404r		     mov bx, offset dta	+ 1Eh
    396	    0220  80 3F	2E		     cmp byte ptr [bx],	'.'
    397	    0223  75 04			     jne show_filename_from_dta_valid_name
    398	    0225  B8 0000		     mov ax, 0
    399	    0228  C3			     ret
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 8
2tree.ASM



    400	    0229			 show_filename_from_dta_valid_name:
    401	    0229  B9 000D		     mov cx, 13
    402	    022C  51			     push cx
    403	    022D  53			     push bx
    404	    022E  E8 0078		     call count_no_space_no_zero_letters
    405	    0231  8B C8			     mov cx, ax
    406	    0233  B8 0404r		     mov ax, offset dta	+ 1Eh
    407	    0236  51			     push cx
    408	    0237  50			     push ax
    409	    0238  E8 0058		     call print_string_with_length
    410					     print_range <newline>
2   411						 print <offset newline>
3   412	    023B  B4 09				 mov ah, 09h
3   413	    023D  BA 03E4r			 mov dx, offset	newline
3   414	    0240  CD 21				 int 21h
    415	    0242  B8 0001		     mov ax, 1
    416	    0245  C3			     ret
    417	    0246			 cd:
    418	    0246  5B			     pop bx ; ret addr
    419	    0247  5A			     pop dx ; root address
    420	    0248  53			     push bx ; ret addr
    421
    422	    0249  33 C0			     xor ax, ax
    423	    024B  B4 3B			     mov ah, 3Bh
    424	    024D  CD 21			     int 21h
    425
    426	    024F  72 01			     jc	cd_error
    427	    0251  C3			     ret
    428	    0252			 cd_error:
    429					     print_range <cd_fails, newline>
2   430						 print <offset cd_fails>
3   431	    0252  B4 09				 mov ah, 09h
3   432	    0254  BA 02C9r			 mov dx, offset	cd_fails
3   433	    0257  CD 21				 int 21h
2   434						 print <offset newline>
3   435	    0259  B4 09				 mov ah, 09h
3   436	    025B  BA 03E4r			 mov dx, offset	newline
3   437	    025E  CD 21				 int 21h
    438	    0260  C3			     ret
    439
    440	    0261			 set_dta:
    441	    0261  5B			     pop bx
    442	    0262  59			     pop cx			 ; deep	level
    443	    0263  5A			     pop dx			 ; dta address offset
    444	    0264  53			     push bx
    445
    446					     ; shift to	current	dta
    447					     ; mov cx, 0
    448	    0265  B8 002B		     mov ax, 43
    449					     load <dx>
2   450	    0268  52				 push dx
    451	    0269  F7 E1			     mul cx
    452					     restore <dx>
2   453	    026B  5A				 pop dx
    454	    026C  03 D0			     add dx, ax
    455
    456	    026E  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 9
2tree.ASM



    457	    0270  B4 1A			     mov ah, 1Ah
    458	    0272  CD 21			     int 21h
    459
    460	    0274  C3			     ret
    461
    462	    0275			 save_cwd:
    463	    0275  BE 0324r		     mov si, offset working_folder
    464
    465					     ;
    466					     ; save driver
    467					     ;
    468	    0278  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    469	    027A  CD 21			     int 21h
    470	    027C  8A D0			     mov dl, al
    471	    027E  80 C2	41		     add dl, 41h
    472	    0281  88 14			     mov byte ptr [si],	dl
    473	    0283  46			     inc si
    474	    0284  C6 04	3A		     mov byte ptr [si],	':'
    475	    0287  46			     inc si
    476	    0288  C6 04	5C		     mov byte ptr [si],	'\'
    477	    028B  46			     inc si
    478
    479					     ;
    480					     ; save folder
    481					     ;
    482	    028C  32 D2			     xor dl, dl			 ; Actual drive
    483	    028E  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    484	    0290  CD 21			     int 21h
    485	    0292  C3			     ret
    486	    0293			 print_string_with_length:
    487	    0293  5B			     pop bx ; ret address
    488	    0294  5E			     pop si ; string offset
    489	    0295  59			     pop cx ; string length
    490	    0296  53			     push bx; ret address
    491	    0297  33 C0			     xor ax, ax
    492	    0299			 _print_string_with_length_loop:
    493	    0299  B4 02			     mov ah, 02h
    494	    029B  8A 14			     mov dl, byte ptr [si]
    495	    029D  CD 21			     int 21h
    496	    029F  49			     dec cx
    497	    02A0  46			     inc si
    498	    02A1  83 F9	00		     cmp cx, 00h
    499	    02A4  74 02			     je	_print_string_with_length_end
    500	    02A6  EB F1			     jmp _print_string_with_length_loop
    501	    02A8			 _print_string_with_length_end:
    502	    02A8  C3			     ret
    503	    02A9			 count_no_space_no_zero_letters:
    504	    02A9  5B			     pop bx ; ret address
    505	    02AA  5E			     pop si ; string offset
    506	    02AB  59			     pop cx ; string length
    507	    02AC  53			     push bx ; ret address
    508	    02AD  B8 0000		     mov ax, 0
    509	    02B0			 _count_non_space_symbols_loop:
    510	    02B0  80 3C	20		     cmp byte ptr [si],	20h
    511	    02B3  74 12			     je	_count_non_space_symbols_end
    512	    02B5  80 3C	0D		     cmp byte ptr [si],	0Dh
    513	    02B8  74 0D			     je	_count_non_space_symbols_end
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 10
2tree.ASM



    514	    02BA  80 3C	00		     cmp byte ptr [si],	00h
    515	    02BD  74 08			     je	_count_non_space_symbols_end
    516	    02BF  3B C1			     cmp ax, cx
    517	    02C1  74 04			     je	_count_non_space_symbols_end
    518	    02C3  40			     inc ax
    519	    02C4  46			     inc si
    520	    02C5  EB E9			     jmp _count_non_space_symbols_loop
    521	    02C7			 _count_non_space_symbols_end:
    522	    02C7  C3			     ret
    523					 ;
    524					 ; error codes
    525					 ;
    526	    02C8  12			 no_more_files db 18
    527					 ;
    528					 ; error messages
    529					 ;
    530	    02C9  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    531		  64 69	72 65 63 74 6F+
    532		  72 79	20 66 61 69 6C+
    533		  73 2E	24
    534	    02E1  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    535		  72 73	74 20 66 69 6C+
    536		  65 6E	61 6D 65 73 20+
    537		  66 61	69 6C 73 2E 24
    538	    02FD  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    539		  78 74	20 66 69 6C 65+
    540		  6E 61	6D 65 73 20 66+
    541		  61 69	6C 73 2E 24
    542					 ;
    543					 ;   parse arguments
    544					 ;
    545	    0318  01			 deep_level db 1
    546	    0319  2A			 file_mask db '*'
    547	    031A  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    548	    031F  2A 00			 folder_mask db	'*', 00h
    549					 ;
    550					 ; strings
    551					 ;
    552	    0321  2E 2E	00		 parent_folder db '..',	00h
    553	    0324  40*(00)		 working_folder	db 64 dup(00h)
    554	    0364  40*(00)		 root_folder db	64 dup(00h)
    555	    03A4  40*(00)		 start_mask db 64 dup(00h)
    556	    03E4  0A 24			 newline db 0Ah, '$'
    557	    03E6  2B*(00)		 dta db	43 dup(0)
    558					 end start
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "13:36:53"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0246
CD_ERROR			  Near	 DGROUP:0252
CD_FAILS			  Byte	 DGROUP:02C9
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02A9
DEEP_LEVEL			  Byte	 DGROUP:0318
DTA				  Byte	 DGROUP:03E6
FILE_EXT			  Byte	 DGROUP:031A
FILE_MASK			  Byte	 DGROUP:0319
FIND_FIRST			  Near	 DGROUP:0210
FIND_FIRST_ERROR		  Near	 DGROUP:01AA
FIND_FIRST_FAILS		  Byte	 DGROUP:02E1
FIND_NEXT			  Near	 DGROUP:020B
FIND_NEXT_ERROR			  Near	 DGROUP:01BC
FIND_NEXT_FAILS			  Byte	 DGROUP:02FD
FOLDER_MASK			  Byte	 DGROUP:031F
IS_FOLDER			  Near	 DGROUP:0193
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0146
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0127
NEWLINE				  Byte	 DGROUP:03E4
NO_MORE_FILES			  Byte	 DGROUP:02C8
PARENT_FOLDER			  Byte	 DGROUP:0321
PARSE_ARGS			  Near	 DGROUP:01E3
PARSE_COMMAND_LINE		  Near	 DGROUP:01CE
PARSE_D				  Near	 DGROUP:01F1
PARSE_END			  Near	 DGROUP:020A
PARSE_F				  Near	 DGROUP:01FE
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0293
ROOT_FOLDER			  Byte	 DGROUP:0364
SAVE_CWD			  Near	 DGROUP:0275
SET_DTA				  Near	 DGROUP:0261
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:021D
SHOW_FILENAME_FROM_DTA_VALID_NAM  Near	 DGROUP:0229
E
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03A4
WORKING_FOLDER			  Byte	 DGROUP:0324
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:02C7
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02B0
Turbo Assembler	 Version 4.1	    12/08/19 13:36:54	    Page 12
Symbol Table



_IS_FOLDER_END			  Near	 DGROUP:01A9
_IS_FOLDER_FALSE		  Near	 DGROUP:01A4
_IS_FOLDER_TRUE			  Near	 DGROUP:019F
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:0191
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0151
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0186
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02A8
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0299

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0411 Word	  Public  CODE
