Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 get_offset macro state
1    45					     xor dx, dx
1    46					     xor ax, ax
1    47					     mov al, state
1    48					     shl ax, 8
1    49					 endm get_offset
1    50
1    51					 to_non_space macro addr
1    52					     local l1, l2
1    53					     mov si, addr
1    54					 l1:
1    55					     mov byte ptr al, [si]
1    56					     cmp al, 20h
1    57					     je	l2
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 2
2tree.ASM



1    58					     cmp al, 0
1    59					     je	l2
1    60					     inc si
1    61					     jmp l1
1    62					 l2:
1    63					     inc si
1    64					     mov ax, si
1    65					 endm
1    66
1    67					 set_transition	macro buf, from, to, char
1    68					     load<bx, dx>
1    69					     get_offset	from
1    70
1    71					     add ax, offset buf
1    72					     add ax, char
1    73
1    74					     mov bx, ax
1    75					     mov byte ptr [bx],	to
1    76					     restore<dx, bx>
1    77					 endm
1    78
1    79					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    80					     local l1, end
1    81					     mov bx, start
1    82					     mov cx, iterations
1    83					 l1:
1    84					     cmp cx, 0
1    85					     je	end
1    86
1    87					     load <bx,cx>
1    88					     set_transition buf	from to	bx
1    89					     restore <cx,bx>
1    90
1    91					     inc bx
1    92					     dec cx
1    93					     jmp l1
1    94					 end:
1    95					 endm
1    96
1    97					 set_zero macro	state
1    98					     mov al, 0
1    99					     mov byte ptr [state], al
1   100					 endm
1   101
1   102					 set_transition_for_all	macro buf, from, to
1   103					     set_transition_length_from_start buf, from, to, 0,	255
1   104					 endm
1   105
1   106					 set_transition_for_digits macro buf, from, to
1   107					     set_transition_length_from_start buf, from, to, 30, 10
1   108					 endm
1   109
1   110					 set_transition_for_letters macro buf, from, to
1   111					     set_transition_length_from_start buf, from, to, 97, 26
1   112					     set_transition_length_from_start buf, from, to, 65, 26
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 3
2tree.ASM



1   115					 get_transition	macro buf, from, char
1   116					     load <dx>
1   117					     get_offset	from
1   118					     restore <dx>
1   119
1   120					     add ax, offset buf
1   121					     add ax, char
1   122
1   123					     mov bx, ax
1   124					     xor ax, ax
1   125					     mov al, byte ptr [bx]
1   126					 endm
1   127
1   128					 put macro from, to, position
1   129					     xor dx, dx
1   130					     xor bx, bx
1   131
1   132					     mov dx, offset to
1   133					     mov bl, byte ptr [position]
1   134					     add dx, bx
1   135
1   136					     mov bl, byte ptr [from]
1   137					     mov byte ptr [edx], bl
1   138					     inc [position]
1   139					 endm
1   140
1   141					 clear_mes macro mes, lastidx
1   142					     local l1, end
1   143					     mov bx, offset mes
1   144					     mov cl, byte ptr [lastidx]
1   145					     inc cl
1   146					 l1:
1   147					     cmp cl, 0
1   148					     je	end
1   149					     mov byte ptr [bx],	'$'
1   150					     inc bx
1   151					     dec cl
1   152					     jmp l1
1   153					 end:
1   154					     mov bl, 0
1   155					     mov byte ptr [lastidx], bl
1   156					 endm
    157
    158	    0000			 model tiny
    159					 .386
    160	    0000			 .code
    161					 org 100h
    162	    0100			 start:
    163	    0100  E8 0265		     call save_cwd
    164	    0103  B9 0000		     mov cx, 0
    165	    0106  51			     push cx
    166	    0107  E8 0246		     call set_dta
    167	    010A  E8 0130		     call parse_command_line
    168
    169					     ;
    170					     ;	 start tree
    171					     ;
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 4
2tree.ASM



    172	    010D  B8 04BCr		     mov ax, offset root_folder
    173	    0110  B9 0000		     mov cx, 0
    174	    0113  51			     push cx
    175	    0114  50			     push ax
    176	    0115  E8 000B		     call list_subfiles_recursive_from
    177
    178					     ;
    179					     ;	 cd to start folder
    180					     ;
    181	    0118  B8 047Cr		     mov ax, offset working_folder
    182	    011B  50			     push ax
    183	    011C  E8 0216		     call cd
    184					     exit
1   185	    011F  B4 00			     mov ah, 00h
1   186	    0121  CD 21			     int 21h
    187
    188	    0123			 list_subfiles_recursive_from:
    189	    0123  5B			     pop bx	 ; ret address
    190	    0124  58			     pop ax	 ; deep	level
    191	    0125  59			     pop cx	 ; root	folder offset
    192	    0126  53			     push bx
    193					     load <cx>
2   194	    0127  51				 push cx
    195	    0128  50			     push ax
    196	    0129  E8 0209		     call cd
    197					     restore <cx>
2   198	    012C  59				 pop cx
    199
    200					     ;
    201					     ; list subfolder
    202					     ;
    203	    012D  B8 0464r		     mov ax, offset folder_mask
    204					     load <cx>
2   205	    0130  51				 push cx
    206	    0131  50			     push ax
    207	    0132  51			     push cx
    208	    0133  E8 000C		     call list_subfiles_recursive
    209					     restore <cx>
2   210	    0136  59				 pop cx
    211
    212					     ;
    213					     ; list files
    214					     ;
    215	    0137  B8 045Er		     mov ax, offset file_mask
    216					     load <cx>
2   217	    013A  51				 push cx
    218	    013B  50			     push ax
    219	    013C  51			     push cx
    220	    013D  E8 0002		     call list_subfiles_recursive
    221					     restore <cx>
2   222	    0140  59				 pop cx
    223	    0141  C3			     ret
    224
    225	    0142			 list_subfiles_recursive:
    226					     ;
    227					     ;	 save current files
    228					     ;
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 5
2tree.ASM



    229	    0142  E8 0276		     call count_subfiles_here
    230					     break_point <bx>
1   231					     load <bx>
3   232	    0145  53				 push bx
1   233	    0146  33 DB			     xor bx, bx
1   234	    0148  33 DB			     xor bx, bx
1   235	    014A  33 DB			     xor bx, bx
1   236	    014C  33 DB			     xor bx, bx
1   237	    014E  33 DB			     xor bx, bx
1   238	    0150  33 DB			     xor bx, bx
1   239	    0152  33 DB			     xor bx, bx
1   240	    0154  33 DB			     xor bx, bx
1   241					     restore <bx>
3   242	    0156  5B				 pop bx
    243
    244	    0157  5B			     pop bx
    245	    0158  59			     pop cx ; deep level
    246	    0159  58			     pop ax ; filemask offset
    247	    015A  53			     push bx
    248
    249					     load <cx, ax>
2   250	    015B  51				 push cx
2   251	    015C  50				 push ax
    252	    015D  51			     push cx
    253	    015E  E8 01EF		     call set_dta
    254					     restore <ax, cx>
2   255	    0161  58				 pop ax
2   256	    0162  59				 pop cx
    257
    258	    0163  BB 0000		     mov bx, 0
    259					     load <bx, cx>
2   260	    0166  53				 push bx
2   261	    0167  51				 push cx
    262	    0168  50			     push ax
    263	    0169  E8 0113		     call find_first
    264	    016C  73 05			     jnc _list_subfiles_recursive_loop
    265	    016E  E8 00AB		     call find_first_error
    266	    0171  EB 7D			     jmp _list_subfiles_recursive_end
    267	    0173			 _list_subfiles_recursive_loop:
    268					     restore <cx>
2   269	    0173  59				 pop cx
    270	    0174  51			     push cx
    271	    0175  E8 0114		     call is_valid_name
    272					     load <cx>
2   273	    0178  51				 push cx
    274	    0179  3D 0001		     cmp ax, 1
    275	    017C  75 67			     jne _list_subfiles_recursive_next
    276
    277					     restore <cx, bx>
2   278	    017E  59				 pop cx
2   279	    017F  5B				 pop bx
    280	    0180  43			     inc bx
    281					     load <bx, cx>
2   282	    0181  53				 push bx
2   283	    0182  51				 push cx
    284	    0183  53			     push bx
    285	    0184  51			     push cx
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 6
2tree.ASM



    286	    0185  E8 011C		     call show_filename_from_dta
    287					     ; cmp ax, 1
    288					     ; jne _list_subfiles_recursive_next
    289
    290					     ;
    291					     ;	 check if folder
    292					     ;
    293	    0188  E8 007A		     call is_folder
    294	    018B  3D 0001		     cmp ax, 1
    295	    018E  75 55			     jne _list_subfiles_recursive_next
    296
    297					     ;
    298					     ;	 check deep level
    299					     ;
    300					     restore <cx>
2   301	    0190  59				 pop cx
    302					     load <cx>
2   303	    0191  51				 push cx
    304	    0192  33 DB			     xor bx, bx
    305	    0194  8A 1E	045Dr		     mov bl, byte ptr [deep_level]
    306	    0198  3B CB			     cmp cx, bx
    307	    019A  7D 49			     jge _list_subfiles_recursive_next
    308
    309					     ;
    310					     ; start new search
    311					     ;
    312	    019C  A1 045Br		     mov ax, word ptr [current_max_entities]
    313					     load <ax>
2   314	    019F  50				 push ax
    315					     ;
    316					     ;	 cd to subfolder
    317					     ;
    318					     load <cx>
2   319	    01A0  51				 push cx
    320	    01A1  51			     push cx
    321	    01A2  E8 004E		     call move_dta
    322	    01A5  05 001E		     add ax, 1Eh
    323
    324	    01A8  50			     push ax
    325	    01A9  E8 0189		     call cd
    326					     restore <cx>
2   327	    01AC  59				 pop cx
    328
    329	    01AD  41			     inc cx
    330					     ;
    331					     ;	 list subfiles from subfolder
    332					     ;
    333					     load <cx>
2   334	    01AE  51				 push cx
    335	    01AF  B8 0464r		     mov ax, offset folder_mask
    336	    01B2  50			     push ax
    337	    01B3  51			     push cx
    338	    01B4  E8 FF8B		     call list_subfiles_recursive
    339					     restore <cx>
2   340	    01B7  59				 pop cx
    341
    342
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 7
2tree.ASM



    343					     ;
    344					     ;	 list subfolders from subfolder
    345					     ;
    346					     load <cx>
2   347	    01B8  51				 push cx
    348	    01B9  B8 045Er		     mov ax, offset file_mask
    349	    01BC  50			     push ax
    350	    01BD  51			     push cx
    351	    01BE  E8 FF81		     call list_subfiles_recursive
    352					     restore <cx>
2   353	    01C1  59				 pop cx
    354
    355					     ;
    356					     ;	 cd back to this function
    357					     ;
    358	    01C2  B8 0479r		     mov ax, offset parent_folder
    359	    01C5  50			     push ax
    360	    01C6  E8 016C		     call cd
    361
    362					     break_point <ax>
1   363					     load <ax>
3   364	    01C9  50				 push ax
1   365	    01CA  33 C0			     xor ax, ax
1   366	    01CC  33 C0			     xor ax, ax
1   367	    01CE  33 C0			     xor ax, ax
1   368	    01D0  33 C0			     xor ax, ax
1   369	    01D2  33 C0			     xor ax, ax
1   370	    01D4  33 C0			     xor ax, ax
1   371	    01D6  33 C0			     xor ax, ax
1   372	    01D8  33 C0			     xor ax, ax
1   373					     restore <ax>
3   374	    01DA  58				 pop ax
    375					     restore <ax>
2   376	    01DB  58				 pop ax
    377	    01DC  A3 045Br		     mov word ptr [current_max_entities], ax
    378
    379					     restore <cx>
2   380	    01DF  59				 pop cx
    381					     load <cx>
2   382	    01E0  51				 push cx
    383	    01E1  51			     push cx
    384	    01E2  E8 016B		     call set_dta
    385	    01E5			 _list_subfiles_recursive_next:
    386	    01E5  E8 0092		     call find_next
    387	    01E8  73 89			     jnc _list_subfiles_recursive_loop
    388	    01EA  3A 06	040Ar		     cmp al, byte ptr [no_more_files]
    389	    01EE  75 3B			     jne find_next_error
    390	    01F0			 _list_subfiles_recursive_end:
    391					     restore <cx, bx>
2   392	    01F0  59				 pop cx
2   393	    01F1  5B				 pop bx
    394	    01F2  C3			     ret
    395	    01F3			 move_dta:
    396	    01F3  5B			     pop bx
    397	    01F4  59			     pop cx
    398	    01F5  53			     push bx
    399
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 8
2tree.ASM



    400	    01F6  33 C0			     xor ax, ax
    401	    01F8  A0 040Br		     mov al, byte ptr [dta_len]
    402	    01FB  F7 E1			     mul cx
    403
    404	    01FD  BB 053Er		     mov bx, offset dta
    405	    0200  03 D8			     add bx, ax
    406	    0202  8B C3			     mov ax, bx
    407	    0204  C3			     ret
    408	    0205			 is_folder:
    409	    0205  BB 0553r		     mov bx, offset dta	+ 15h
    410	    0208  8A 1F			     mov bl, byte ptr [bx]
    411	    020A  80 FB	10		     cmp bl, 10h
    412	    020D  74 02			     je	_is_folder_true
    413	    020F  75 05			     jne _is_folder_false
    414	    0211			 _is_folder_true:
    415	    0211  B8 0001		     mov ax, 1
    416	    0214  EB 05			     jmp _is_folder_end
    417	    0216			 _is_folder_false:
    418	    0216  B8 0000		     mov ax, 0
    419	    0219  EB 00			     jmp _is_folder_end
    420	    021B			 _is_folder_end:
    421	    021B  C3			     ret
    422
    423
    424
    425	    021C			 find_first_error:
    426					     print_range <find_first_fails, newline>
2   427						 print <offset find_first_fails>
3   428	    021C  B4 09				 mov ah, 09h
3   429	    021E  BA 0424r			 mov dx, offset	find_first_fails
3   430	    0221  CD 21				 int 21h
2   431						 print <offset newline>
3   432	    0223  B4 09				 mov ah, 09h
3   433	    0225  BA 053Cr			 mov dx, offset	newline
3   434	    0228  CD 21				 int 21h
    435	    022A  C3			     ret
    436	    022B			 find_next_error:
    437					     print_range <find_next_fails, newline>
2   438						 print <offset find_next_fails>
3   439	    022B  B4 09				 mov ah, 09h
3   440	    022D  BA 0440r			 mov dx, offset	find_next_fails
3   441	    0230  CD 21				 int 21h
2   442						 print <offset newline>
3   443	    0232  B4 09				 mov ah, 09h
3   444	    0234  BA 053Cr			 mov dx, offset	newline
3   445	    0237  CD 21				 int 21h
    446					     exit
1   447	    0239  B4 00			     mov ah, 00h
1   448	    023B  CD 21			     int 21h
    449
    450	    023D			 parse_command_line:
    451					     ;
    452					     ; prepare root folder
    453					     ;
    454	    023D  BE 0082		     mov si, 82h
    455	    0240  B9 0040		     mov cx, 64
    456	    0243  51			     push cx
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 9
2tree.ASM



    457	    0244  56			     push si
    458	    0245  E8 0154		     call count_no_space_no_zero_letters
    459	    0248  8B C8			     mov cx, ax
    460	    024A  BE 0082		     mov si, 82h
    461	    024D  BF 04BCr		     mov di, offset root_folder
    462	    0250  F3> A4		     rep movsb
    463
    464	    0252			 parse_args:
    465	    0252  46			     inc si
    466	    0253  46			     inc si
    467	    0254  80 3C	64		     cmp byte ptr [si],	'd'
    468	    0257  74 07			     je	parse_d
    469	    0259  80 3C	66		     cmp byte ptr [si],	'f'
    470	    025C  74 0F			     je	parse_f
    471	    025E  EB 19			     jmp parse_end
    472	    0260			 parse_d:
    473					     ;
    474					     ; parse_deep level
    475					     ;
    476	    0260  46			     inc si
    477	    0261  46			     inc si
    478	    0262  8A 1C			     mov bl, byte ptr [si]
    479	    0264  80 EB	30		     sub bl, 30h	     ; to number
    480	    0267  88 1E	045Dr		     mov byte ptr [deep_level],	bl
    481	    026B  EB E5			     jmp parse_args
    482	    026D			 parse_f:
    483					     ;
    484					     ; parse file extension
    485					     ;
    486	    026D  46			     inc si
    487	    026E  46			     inc si
    488	    026F  BF 045Fr		     mov di, offset file_ext
    489	    0272  B9 0004		     mov cx, 4
    490	    0275  F3> A4		     rep movsb
    491	    0277  EB D9			     jmp parse_args
    492	    0279			 parse_end:
    493	    0279  C3			     ret
    494	    027A			 find_next:
    495	    027A  B4 4F			     mov ah, 4Fh
    496	    027C  CD 21			     int 21h
    497
    498	    027E  C3			     ret
    499
    500	    027F			 find_first:
    501	    027F  5B			     pop bx
    502	    0280  5A			     pop dx		 ; filename spec
    503	    0281  B9 0010		     mov cx, 10h	 ; include directories
    504	    0284  53			     push bx
    505
    506	    0285  33 C0			     xor ax, ax
    507	    0287  B4 4E			     mov ah, 4Eh
    508	    0289  CD 21			     int 21h
    509	    028B  C3			     ret
    510
    511	    028C			 is_valid_name:
    512	    028C  5B			     pop bx
    513	    028D  59			     pop cx	 ; deep	level
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 10
2tree.ASM



    514	    028E  53			     push bx
    515
    516	    028F  51			     push cx
    517	    0290  E8 FF60		     call move_dta
    518
    519	    0293  05 001E		     add ax, 1Eh
    520	    0296  8B D8			     mov bx, ax
    521	    0298  B8 0001		     mov ax, 1
    522	    029B  80 3F	2E		     cmp byte ptr [bx],	'.'
    523	    029E  75 03			     jne _is_valid_name_end
    524	    02A0  B8 0000		     mov ax, 0
    525	    02A3			 _is_valid_name_end:
    526	    02A3  C3			     ret
    527
    528	    02A4			 show_filename_from_dta:
    529	    02A4  5B			     pop bx
    530	    02A5  59			     pop cx  ; deep level
    531	    02A6  58			     pop ax  ; entity count
    532	    02A7  53			     push bx
    533
    534					     ; load <ax, cx>
    535					     ; push cx
    536					     ; call is_valid_name
    537					     ; cmp ax, 1
    538					     ; je _show_filename_from_dta_valid_name
    539					     ; restore <cx, ax>
    540					     ; mov ax, 0
    541					     ; ret
    542	    02A8			 _show_filename_from_dta_valid_name:
    543					     ;
    544					     ;	 pseudo	graphic	prefix
    545					     ;
    546					     load <ax>
2   547	    02A8  50				 push ax
    548	    02A9  51			     push cx
    549	    02AA  E8 FF46		     call move_dta
    550
    551	    02AD  05 001E		     add ax, 1Eh
    552	    02B0  8B D8			     mov bx, ax
    553					     restore <ax>
2   554	    02B2  58				 pop ax
    555					     break_point <dx>
1   556					     load <dx>
3   557	    02B3  52				 push dx
1   558	    02B4  33 D2			     xor dx, dx
1   559	    02B6  33 D2			     xor dx, dx
1   560	    02B8  33 D2			     xor dx, dx
1   561	    02BA  33 D2			     xor dx, dx
1   562	    02BC  33 D2			     xor dx, dx
1   563	    02BE  33 D2			     xor dx, dx
1   564	    02C0  33 D2			     xor dx, dx
1   565	    02C2  33 D2			     xor dx, dx
1   566					     restore <dx>
3   567	    02C4  5A				 pop dx
    568					     ; restore <cx, ax>
    569
    570					     load <cx, bx>
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 11
2tree.ASM



2   571	    02C5  51				 push cx
2   572	    02C6  53				 push bx
    573	    02C7  50			     push ax	 ; entity count
    574	    02C8  51			     push cx	 ; deep	level
    575	    02C9  E8 001E		     call print_pseudographic_prefix
    576					     restore <bx, cx>
2   577	    02CC  5B				 pop bx
2   578	    02CD  59				 pop cx
    579
    580					     load <bx>
2   581	    02CE  53				 push bx
    582	    02CF  B9 000D		     mov cx, 13
    583	    02D2  51			     push cx
    584	    02D3  53			     push bx
    585	    02D4  E8 00C5		     call count_no_space_no_zero_letters
    586	    02D7  8B C8			     mov cx, ax
    587					     restore <bx>
2   588	    02D9  5B				 pop bx
    589					     ; mov ax, offset dta + 1Eh
    590	    02DA  51			     push cx
    591	    02DB  53			     push bx
    592	    02DC  E8 00A7		     call print_string_with_length
    593					     print_range <newline>
2   594						 print <offset newline>
3   595	    02DF  B4 09				 mov ah, 09h
3   596	    02E1  BA 053Cr			 mov dx, offset	newline
3   597	    02E4  CD 21				 int 21h
    598	    02E6  B8 0001		     mov ax, 1
    599	    02E9  C3			     ret
    600	    02EA			 print_pseudographic_prefix:
    601	    02EA  5B			     pop bx
    602	    02EB  59			     pop cx	 ; deep	level
    603	    02EC  58			     pop ax	 ; entity count
    604	    02ED  53			     push bx
    605
    606	    02EE  83 F9	00		     cmp cx, 0
    607	    02F1  74 19			     je	_print_pseudographic_prefix_zero_level
    608					     print_range <level_shift>
2   609						 print <offset level_shift>
3   610	    02F3  B4 09				 mov ah, 09h
3   611	    02F5  BA 046Ar			 mov dx, offset	level_shift
3   612	    02F8  CD 21				 int 21h
    613	    02FA  49			     dec cx
    614	    02FB  83 F9	00		     cmp cx, 0
    615	    02FE  74 0C			     je	_print_pseudographic_prefix_zero_level
    616	    0300			 _print_pseudographic_prefix_loop:
    617					     print_range <space>
2   618						 print <offset space>
3   619	    0300  B4 09				 mov ah, 09h
3   620	    0302  BA 046Cr			 mov dx, offset	space
3   621	    0305  CD 21				 int 21h
    622	    0307  49			     dec cx
    623	    0308  0F 85	0080		     jnz _print_string_with_length_loop
    624	    030C			 _print_pseudographic_prefix_zero_level:
    625	    030C  3B 06	045Br		     cmp ax, word ptr [current_max_entities]
    626	    0310  74 19			     je	_print_pseudographic_prefix_zero_level_end
    627	    0312  3D 0001		     cmp ax, 1
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 12
2tree.ASM



    628	    0315  74 02			     je	_print_pseudographic_prefix_zero_level_first
    629	    0317  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
    630	    0319			 _print_pseudographic_prefix_zero_level_first:
    631					     print_range <first_file_char>
2   632						 print <offset first_file_char>
3   633	    0319  B4 09				 mov ah, 09h
3   634	    031B  BA 0473r			 mov dx, offset	first_file_char
3   635	    031E  CD 21				 int 21h
    636	    0320  EB 12			     jmp _print_pseudographic_prefix_end
    637	    0322			 _print_pseudographic_prefix_zero_level_middle:
    638					     print_range <middle_file_char>
2   639						 print <offset middle_file_char>
3   640	    0322  B4 09				 mov ah, 09h
3   641	    0324  BA 0475r			 mov dx, offset	middle_file_char
3   642	    0327  CD 21				 int 21h
    643	    0329  EB 09			     jmp _print_pseudographic_prefix_end
    644	    032B			 _print_pseudographic_prefix_zero_level_end:
    645					     print_range <end_file_char>
2   646						 print <offset end_file_char>
3   647	    032B  B4 09				 mov ah, 09h
3   648	    032D  BA 0477r			 mov dx, offset	end_file_char
3   649	    0330  CD 21				 int 21h
    650	    0332  EB 00			     jmp _print_pseudographic_prefix_end
    651	    0334			 _print_pseudographic_prefix_end:
    652	    0334  C3			     ret
    653	    0335			 cd:
    654	    0335  5B			     pop bx ; ret addr
    655	    0336  5A			     pop dx ; root address
    656	    0337  53			     push bx ; ret addr
    657
    658	    0338  33 C0			     xor ax, ax
    659	    033A  B4 3B			     mov ah, 3Bh
    660	    033C  CD 21			     int 21h
    661
    662	    033E  72 01			     jc	cd_error
    663	    0340  C3			     ret
    664	    0341			 cd_error:
    665					     print_range <cd_fails, newline>
2   666						 print <offset cd_fails>
3   667	    0341  B4 09				 mov ah, 09h
3   668	    0343  BA 040Cr			 mov dx, offset	cd_fails
3   669	    0346  CD 21				 int 21h
2   670						 print <offset newline>
3   671	    0348  B4 09				 mov ah, 09h
3   672	    034A  BA 053Cr			 mov dx, offset	newline
3   673	    034D  CD 21				 int 21h
    674	    034F  C3			     ret
    675
    676	    0350			 set_dta:
    677	    0350  5B			     pop bx
    678	    0351  59			     pop cx			 ; deep	level
    679	    0352  53			     push bx
    680
    681	    0353  BA 053Er		     mov dx, offset dta
    682					     load <dx>
2   683	    0356  52				 push dx
    684	    0357  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 13
2tree.ASM



    685	    0359  A0 040Br		     mov al, byte ptr [dta_len]
    686	    035C  F7 E1			     mul cx
    687
    688					     restore <dx>
2   689	    035E  5A				 pop dx
    690	    035F  03 D0			     add dx, ax
    691
    692	    0361  33 C0			     xor ax, ax
    693	    0363  B4 1A			     mov ah, 1Ah
    694	    0365  CD 21			     int 21h
    695
    696	    0367  C3			     ret
    697
    698	    0368			 save_cwd:
    699	    0368  BE 047Cr		     mov si, offset working_folder
    700
    701					     ;
    702					     ; save driver
    703					     ;
    704	    036B  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    705	    036D  CD 21			     int 21h
    706	    036F  8A D0			     mov dl, al
    707	    0371  80 C2	41		     add dl, 41h
    708	    0374  88 14			     mov byte ptr [si],	dl
    709	    0376  46			     inc si
    710	    0377  C6 04	3A		     mov byte ptr [si],	':'
    711	    037A  46			     inc si
    712	    037B  C6 04	5C		     mov byte ptr [si],	'\'
    713	    037E  46			     inc si
    714
    715					     ;
    716					     ; save folder
    717					     ;
    718	    037F  32 D2			     xor dl, dl			 ; Actual drive
    719	    0381  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    720	    0383  CD 21			     int 21h
    721	    0385  C3			     ret
    722	    0386			 print_string_with_length:
    723	    0386  5B			     pop bx ; ret address
    724	    0387  5E			     pop si ; string offset
    725	    0388  59			     pop cx ; string length
    726	    0389  53			     push bx; ret address
    727	    038A  33 C0			     xor ax, ax
    728	    038C			 _print_string_with_length_loop:
    729	    038C  B4 02			     mov ah, 02h
    730	    038E  8A 14			     mov dl, byte ptr [si]
    731	    0390  CD 21			     int 21h
    732	    0392  49			     dec cx
    733	    0393  46			     inc si
    734	    0394  83 F9	00		     cmp cx, 00h
    735	    0397  74 02			     je	_print_string_with_length_end
    736	    0399  EB F1			     jmp _print_string_with_length_loop
    737	    039B			 _print_string_with_length_end:
    738	    039B  C3			     ret
    739	    039C			 count_no_space_no_zero_letters:
    740	    039C  5B			     pop bx ; ret address
    741	    039D  5E			     pop si ; string offset
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 14
2tree.ASM



    742	    039E  59			     pop cx ; string length
    743	    039F  53			     push bx ; ret address
    744	    03A0  B8 0000		     mov ax, 0
    745	    03A3			 _count_non_space_symbols_loop:
    746	    03A3  80 3C	20		     cmp byte ptr [si],	20h
    747	    03A6  74 12			     je	_count_non_space_symbols_end
    748	    03A8  80 3C	0D		     cmp byte ptr [si],	0Dh
    749	    03AB  74 0D			     je	_count_non_space_symbols_end
    750	    03AD  80 3C	00		     cmp byte ptr [si],	00h
    751	    03B0  74 08			     je	_count_non_space_symbols_end
    752	    03B2  3B C1			     cmp ax, cx
    753	    03B4  74 04			     je	_count_non_space_symbols_end
    754	    03B6  40			     inc ax
    755	    03B7  46			     inc si
    756	    03B8  EB E9			     jmp _count_non_space_symbols_loop
    757	    03BA			 _count_non_space_symbols_end:
    758	    03BA  C3			     ret
    759	    03BB			 count_subfiles_here:
    760	    03BB  B8 045Er		     mov ax, offset file_mask
    761	    03BE  50			     push ax
    762	    03BF  E8 0013		     call count_subfiles_here_by_mask
    763					     load <ax>
2   764	    03C2  50				 push ax
    765	    03C3  B8 0464r		     mov ax, offset folder_mask
    766	    03C6  50			     push ax
    767	    03C7  E8 000B		     call count_subfiles_here_by_mask
    768	    03CA  8B D8			     mov bx, ax
    769					     restore <ax>
2   770	    03CC  58				 pop ax
    771	    03CD  03 D8			     add bx, ax
    772	    03CF  8B C3			     mov ax, bx
    773	    03D1  A3 045Br		     mov word ptr [current_max_entities], ax
    774	    03D4  C3			     ret
    775	    03D5			 count_subfiles_here_by_mask:
    776	    03D5  5B			     pop bx
    777	    03D6  58			     pop ax		 ; mask	address
    778	    03D7  53			     push bx
    779
    780					     load <ax>
2   781	    03D8  50				 push ax
    782	    03D9  B9 000B		     mov cx, 11		 ; set pointer to count_dta
    783	    03DC  51			     push cx
    784	    03DD  E8 FF70		     call set_dta
    785					     restore <ax>
2   786	    03E0  58				 pop ax
    787
    788	    03E1  B9 0000		     mov cx, 0
    789					     load <cx>
2   790	    03E4  51				 push cx
    791	    03E5  50			     push ax
    792	    03E6  E8 FE96		     call find_first
    793	    03E9  72 1B			     jc	_count_subfiles_from_end
    794	    03EB			 _count_subfiles_from_loop:
    795	    03EB  B9 000B		     mov cx, 11
    796	    03EE  51			     push cx
    797	    03EF  E8 FE01		     call move_dta
    798	    03F2  05 001E		     add ax, 1Eh
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 15
2tree.ASM



    799	    03F5  8B D8			     mov bx, ax
    800	    03F7  80 3F	2E		     cmp byte ptr [bx],	'.'
    801	    03FA  74 03			     je	_count_subfiles_from_loop_next
    802
    803					     restore <cx>
2   804	    03FC  59				 pop cx
    805	    03FD  41			     inc cx
    806					     load <cx>
2   807	    03FE  51				 push cx
    808	    03FF			 _count_subfiles_from_loop_next:
    809	    03FF  E8 FE78		     call find_next
    810	    0402  72 02			     jc	_count_subfiles_from_end
    811
    812	    0404  EB E5			     jmp _count_subfiles_from_loop
    813	    0406			 _count_subfiles_from_end:
    814					     restore <cx>
2   815	    0406  59				 pop cx
    816	    0407  8B C1			     mov ax, cx
    817	    0409  C3			     ret
    818					 ;
    819					 ; error codes
    820					 ;
    821	    040A  12			 no_more_files db 18
    822	    040B  2B			 dta_len db 2bh
    823					 ;
    824					 ; error messages
    825					 ;
    826	    040C  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    827		  64 69	72 65 63 74 6F+
    828		  72 79	20 66 61 69 6C+
    829		  73 2E	24
    830	    0424  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    831		  72 73	74 20 66 69 6C+
    832		  65 6E	61 6D 65 73 20+
    833		  66 61	69 6C 73 2E 24
    834	    0440  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    835		  78 74	20 66 69 6C 65+
    836		  6E 61	6D 65 73 20 66+
    837		  61 69	6C 73 2E 24
    838					 ;
    839					 ; int variables
    840					 ;
    841	    045B  0000			 current_max_entities dw 0
    842					 ;
    843					 ;   parse arguments
    844					 ;
    845	    045D  01			 deep_level db 1
    846	    045E  2A			 file_mask db '*'
    847	    045F  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    848	    0464  2A 00			 folder_mask db	'*', 00h
    849	    0466  2A 2E	2A 00		 all_files db '*.*', 00h
    850					 ;
    851					 ;   pseudographic
    852					 ;
    853	    046A  7C 24			 level_shift db	'|', '$'
    854	    046C  ?? 20	24		 space db, ' ',	'$'
    855
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 16
2tree.ASM



    856	    046F  C3 24			 zero_first_file db 195, '$'
    857	    0471  C0 24			 zero_end_file db 192, '$'
    858
    859	    0473  C0 24			 first_file_char db 192, '$'
    860	    0475  C3 24			 middle_file_char db 195, '$'
    861	    0477  C2 24			 end_file_char db 194, '$'
    862					 ;
    863					 ; strings
    864					 ;
    865	    0479  2E 2E	00		 parent_folder db '..',	00h
    866	    047C  40*(00)		 working_folder	db 64 dup(00h)
    867	    04BC  40*(00)		 root_folder db	64 dup(00h)
    868	    04FC  40*(00)		 start_mask db 64 dup(00h)
    869	    053C  0A 24			 newline db 0Ah, '$'
    870	    053E  10CC*(00)		 dta db	4300 dup(0)
    871	    160A  2B*(00)		 count_dta db 43 dup(0)
    872					 end start
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 17
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/09/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "02:00:08"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:0466
CD				  Near	 DGROUP:0335
CD_ERROR			  Near	 DGROUP:0341
CD_FAILS			  Byte	 DGROUP:040C
COUNT_DTA			  Byte	 DGROUP:160A
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:039C
COUNT_SUBFILES_HERE		  Near	 DGROUP:03BB
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:03D5
CURRENT_MAX_ENTITIES		  Word	 DGROUP:045B
DEEP_LEVEL			  Byte	 DGROUP:045D
DTA				  Byte	 DGROUP:053E
DTA_LEN				  Byte	 DGROUP:040B
END_FILE_CHAR			  Byte	 DGROUP:0477
FILE_EXT			  Byte	 DGROUP:045F
FILE_MASK			  Byte	 DGROUP:045E
FIND_FIRST			  Near	 DGROUP:027F
FIND_FIRST_ERROR		  Near	 DGROUP:021C
FIND_FIRST_FAILS		  Byte	 DGROUP:0424
FIND_NEXT			  Near	 DGROUP:027A
FIND_NEXT_ERROR			  Near	 DGROUP:022B
FIND_NEXT_FAILS			  Byte	 DGROUP:0440
FIRST_FILE_CHAR			  Byte	 DGROUP:0473
FOLDER_MASK			  Byte	 DGROUP:0464
IS_FOLDER			  Near	 DGROUP:0205
IS_VALID_NAME			  Near	 DGROUP:028C
LEVEL_SHIFT			  Byte	 DGROUP:046A
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0142
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0123
MIDDLE_FILE_CHAR		  Byte	 DGROUP:0475
MOVE_DTA			  Near	 DGROUP:01F3
NEWLINE				  Byte	 DGROUP:053C
NO_MORE_FILES			  Byte	 DGROUP:040A
PARENT_FOLDER			  Byte	 DGROUP:0479
PARSE_ARGS			  Near	 DGROUP:0252
PARSE_COMMAND_LINE		  Near	 DGROUP:023D
PARSE_D				  Near	 DGROUP:0260
PARSE_END			  Near	 DGROUP:0279
PARSE_F				  Near	 DGROUP:026D
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 18
Symbol Table



PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:02EA
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0386
ROOT_FOLDER			  Byte	 DGROUP:04BC
SAVE_CWD			  Near	 DGROUP:0368
SET_DTA				  Near	 DGROUP:0350
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:02A4
SPACE				  Byte	 DGROUP:046C
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:04FC
WORKING_FOLDER			  Byte	 DGROUP:047C
ZERO_END_FILE			  Byte	 DGROUP:0471
ZERO_FIRST_FILE			  Byte	 DGROUP:046F
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:03BA
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:03A3
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0406
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:03EB
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:03FF
_IS_FOLDER_END			  Near	 DGROUP:021B
_IS_FOLDER_FALSE		  Near	 DGROUP:0216
_IS_FOLDER_TRUE			  Near	 DGROUP:0211
_IS_VALID_NAME_END		  Near	 DGROUP:02A3
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:01F0
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0173
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:01E5
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:0334
_PRINT_PSEUDOGRAPHIC_PREFIX_LOOP  Near	 DGROUP:0300
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:030C
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:032B
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0319
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0322
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:039B
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:038C
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:02A8
ME

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
Turbo Assembler	 Version 4.1	    12/09/19 02:00:09	    Page 19
Symbol Table



TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  1635 Word	  Public  CODE
