Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 push_fragment macro buf, length
1    32					     local l1
1    33					     lea di, buf
1    34					     mov cx, length
1    35					     xor bx, bx
1    36					 l1:
1    37					     mov bl, byte ptr [di]
1    38					     push bx
1    39					     inc di
1    40					     dec cx
1    41					     cmp cx, 0
1    42					     jne l1
1    43					 endm
1    44
1    45					 pop_fragment macro buf, length
1    46					     local l1
1    47					     lea di, buf
1    48					     mov cx, length
1    49					     add di, cx
1    50					     dec di
1    51					     xor bx, bx
1    52					 l1:
1    53					     pop bx
1    54					     mov byte ptr [di],	bl
1    55					     dec di
1    56					     dec cx
1    57					     cmp cx, 0
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 2
2tree.ASM



1    58					     jne l1
1    59					 endm
1    60
1    61					 set_dta macro dta
1    62					     lea dx, dta
1    63					     xor ax, ax
1    64					     mov ah, 1Ah
1    65					     int 21h
1    66					 endm
1    67
1    68					 break_point macro arg
1    69					     load <arg>
1    70					     xor arg, arg
1    71					     xor arg, arg
1    72					     xor arg, arg
1    73					     xor arg, arg
1    74					     xor arg, arg
1    75					     xor arg, arg
1    76					     xor arg, arg
1    77					     xor arg, arg
1    78					     restore <arg>
1    79					 endm
1    80
1    81					 get_offset macro state
1    82					     xor dx, dx
1    83					     xor ax, ax
1    84					     mov al, state
1    85					     shl ax, 8
1    86					 endm get_offset
1    87
1    88					 to_non_space macro addr
1    89					     local l1, l2
1    90					     mov si, addr
1    91					 l1:
1    92					     mov byte ptr al, [si]
1    93					     cmp al, 20h
1    94					     je	l2
1    95					     cmp al, 0
1    96					     je	l2
1    97					     inc si
1    98					     jmp l1
1    99					 l2:
1   100					     inc si
1   101					     mov ax, si
1   102					 endm
1   103
1   104					 set_transition	macro buf, from, to, char
1   105					     load<bx, dx>
1   106					     get_offset	from
1   107
1   108					     add ax, offset buf
1   109					     add ax, char
1   110
1   111					     mov bx, ax
1   112					     mov byte ptr [bx],	to
1   113					     restore<dx, bx>
1   114					 endm
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 3
2tree.ASM



1   115
1   116					 set_transition_length_from_start macro	buf, from, to, start, iterations
1   117					     local l1, end
1   118					     mov bx, start
1   119					     mov cx, iterations
1   120					 l1:
1   121					     cmp cx, 0
1   122					     je	end
1   123
1   124					     load <bx,cx>
1   125					     set_transition buf	from to	bx
1   126					     restore <cx,bx>
1   127
1   128					     inc bx
1   129					     dec cx
1   130					     jmp l1
1   131					 end:
1   132					 endm
1   133
1   134					 set_zero macro	state
1   135					     mov al, 0
1   136					     mov byte ptr [state], al
1   137					 endm
1   138
1   139					 set_transition_for_all	macro buf, from, to
1   140					     set_transition_length_from_start buf, from, to, 0,	255
1   141					 endm
1   142
1   143					 set_transition_for_digits macro buf, from, to
1   144					     set_transition_length_from_start buf, from, to, 30, 10
1   145					 endm
1   146
1   147					 set_transition_for_letters macro buf, from, to
1   148					     set_transition_length_from_start buf, from, to, 97, 26
1   149					     set_transition_length_from_start buf, from, to, 65, 26
1   150					 endm
1   151
1   152					 get_transition	macro buf, from, char
1   153					     load <dx>
1   154					     get_offset	from
1   155					     restore <dx>
1   156
1   157					     add ax, offset buf
1   158					     add ax, char
1   159
1   160					     mov bx, ax
1   161					     xor ax, ax
1   162					     mov al, byte ptr [bx]
1   163					 endm
1   164
1   165					 put macro from, to, position
1   166					     xor dx, dx
1   167					     xor bx, bx
1   168
1   169					     mov dx, offset to
1   170					     mov bl, byte ptr [position]
1   171					     add dx, bx
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 4
2tree.ASM



1   172
1   173					     mov bl, byte ptr [from]
1   174					     mov byte ptr [edx], bl
1   175					     inc [position]
1   176					 endm
1   177
1   178					 clear_mes macro mes, lastidx
1   179					     local l1, end
1   180					     mov bx, offset mes
1   181					     mov cl, byte ptr [lastidx]
1   182					     inc cl
1   183					 l1:
1   184					     cmp cl, 0
1   185					     je	end
1   186					     mov byte ptr [bx],	'$'
1   187					     inc bx
1   188					     dec cl
1   189					     jmp l1
1   190					 end:
1   191					     mov bl, 0
1   192					     mov byte ptr [lastidx], bl
1   193					 endm
    194
    195	    0000			 model tiny
    196					 .386
    197	    0000			 .code
    198					 org 100h
    199	    0100			 start:
    200	    0100  E8 02BA		     call save_cwd
    201					     ; mov cx, 0
    202					     ; push cx
    203					     ; call set_dta
    204					     set_dta dta
1   205	    0103  BA 05A8r		     lea dx, dta
1   206	    0106  33 C0			     xor ax, ax
1   207	    0108  B4 1A			     mov ah, 1Ah
1   208	    010A  CD 21			     int 21h
    209	    010C  E8 0195		     call parse_command_line
    210
    211					     ;
    212					     ;	 start tree
    213					     ;
    214	    010F  B8 0526r		     mov ax, offset root_folder
    215	    0112  B9 0000		     mov cx, 0
    216	    0115  51			     push cx
    217	    0116  50			     push ax
    218	    0117  E8 000B		     call list_subfiles_recursive_from
    219
    220					     ;
    221					     ;	 cd to start folder
    222					     ;
    223	    011A  B8 04E6r		     mov ax, offset working_folder
    224	    011D  50			     push ax
    225					     ; break_point <ax>
    226	    011E  E8 026F		     call cd
    227					     exit
1   228	    0121  B4 00			     mov ah, 00h
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 5
2tree.ASM



1   229	    0123  CD 21			     int 21h
    230
    231	    0125			 list_subfiles_recursive_from:
    232	    0125  5B			     pop bx	 ; ret address
    233	    0126  58			     pop ax	 ; deep	level
    234	    0127  59			     pop cx	 ; root	folder offset
    235	    0128  53			     push bx
    236					     load <cx>
2   237	    0129  51				 push cx
    238	    012A  50			     push ax
    239	    012B  E8 0262		     call cd
    240					     restore <cx>
2   241	    012E  59				 pop cx
    242
    243					     ;
    244					     ; list subfolder
    245					     ;
    246	    012F  BE 02F4r		     mov si, offset find_first_folder
    247	    0132  BB 0000		     mov bx, 0
    248	    0135  B8 04C3r		     mov ax, offset folder_mask
    249					     load <cx>
2   250	    0138  51				 push cx
    251	    0139  56			     push si
    252	    013A  53			     push bx
    253	    013B  50			     push ax
    254	    013C  51			     push cx
    255	    013D  E8 0013		     call list_subfiles_recursive
    256					     restore <cx>
2   257	    0140  59				 pop cx
    258
    259					     ;
    260					     ; list files
    261					     ;
    262	    0141  BE 02E7r		     mov si, offset find_first_file
    263	    0144  8B D8			     mov bx, ax
    264	    0146  B8 04BDr		     mov ax, offset file_mask
    265					     load <cx>
2   266	    0149  51				 push cx
    267	    014A  56			     push si
    268	    014B  53			     push bx
    269	    014C  50			     push ax
    270	    014D  51			     push cx
    271	    014E  E8 0002		     call list_subfiles_recursive
    272					     restore <cx>
2   273	    0151  59				 pop cx
    274	    0152  C3			     ret
    275
    276	    0153			 list_subfiles_recursive:
    277					     ;
    278					     ;	 save current files
    279					     ;
    280	    0153  E8 02BA		     call count_subfiles_here
    281	    0156  A3 04B8r		     mov word ptr [current_max_entities], ax
    282
    283	    0159  5A			     pop dx
    284	    015A  59			     pop cx ; deep level
    285	    015B  58			     pop ax ; filemask offset
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 6
2tree.ASM



    286	    015C  5B			     pop bx ; current index
    287	    015D  5E			     pop si ; search address
    288	    015E  52			     push dx
    289
    290					     load <cx, ax, bx, si>
2   291	    015F  51				 push cx
2   292	    0160  50				 push ax
2   293	    0161  53				 push bx
2   294	    0162  56				 push si
    295					     ; push cx
    296					     ; call set_dta
    297					     set_dta dta
1   298	    0163  BA 05A8r		     lea dx, dta
1   299	    0166  33 C0			     xor ax, ax
1   300	    0168  B4 1A			     mov ah, 1Ah
1   301	    016A  CD 21			     int 21h
    302					     restore <si, bx, ax, cx>
2   303	    016C  5E				 pop si
2   304	    016D  5B				 pop bx
2   305	    016E  58				 pop ax
2   306	    016F  59				 pop cx
    307
    308					     load <bx, cx>
2   309	    0170  53				 push bx
2   310	    0171  51				 push cx
    311	    0172  50			     push ax
    312	    0173  FF D6			     call si
    313	    0175  73 03			     jnc _list_subfiles_recursive_loop
    314	    0177  E9 00E2		     jmp _list_subfiles_recursive_end
    315	    017A			 _list_subfiles_recursive_loop:
    316					     restore <cx>
2   317	    017A  59				 pop cx
    318	    017B  51			     push cx
    319	    017C  E8 0182		     call is_valid_name
    320					     load <cx>
2   321	    017F  51				 push cx
    322	    0180  3D 0001		     cmp ax, 1
    323	    0183  0F 85	00C8		     jne _list_subfiles_recursive_next
    324
    325					     ;
    326					     ;	 increment current index in subfiles
    327					     ;
    328					     restore <cx, bx>
2   329	    0187  59				 pop cx
2   330	    0188  5B				 pop bx
    331	    0189  43			     inc bx
    332					     load <bx, cx>
2   333	    018A  53				 push bx
2   334	    018B  51				 push cx
    335	    018C  53			     push bx
    336	    018D  51			     push cx
    337	    018E  E8 0187		     call show_filename_from_dta
    338
    339					     ;
    340					     ;	 check if folder
    341					     ;
    342					     restore <cx>
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 7
2tree.ASM



2   343	    0191  59				 pop cx
    344					     load <cx>
2   345	    0192  51				 push cx
    346	    0193  51			     push cx
    347	    0194  E8 00CA		     call is_folder
    348	    0197  3D 0001		     cmp ax, 1
    349	    019A  0F 85	00B1		     jne _list_subfiles_recursive_next
    350
    351					     ;
    352					     ;	 check deep level
    353					     ;
    354					     restore <cx>
2   355	    019E  59				 pop cx
    356					     load <cx>
2   357	    019F  51				 push cx
    358	    01A0  33 DB			     xor bx, bx
    359	    01A2  8A 1E	04BCr		     mov bl, byte ptr [deep_level]
    360	    01A6  3B CB			     cmp cx, bx
    361	    01A8  0F 8D	00A3		     jge _list_subfiles_recursive_next
    362
    363					     ;
    364					     ;	 pseudographic hack
    365					     ;
    366					     restore <cx, bx>
2   367	    01AC  59				 pop cx
2   368	    01AD  5B				 pop bx
    369					     load <bx, cx>
2   370	    01AE  53				 push bx
2   371	    01AF  51				 push cx
    372
    373	    01B0  3B 1E	04B8r		     cmp bx, word ptr [current_max_entities]
    374	    01B4  75 0A			     jne _list_subfiles_recursive_loop_pseudographic_hack
    375	    01B6  BB 04CBr		     mov bx, offset level_shift
    376	    01B9  03 D9			     add bx, cx
    377	    01BB  A0 04D6r		     mov al, byte ptr [space]
    378	    01BE  88 07			     mov byte ptr [bx],	al
    379	    01C0			 _list_subfiles_recursive_loop_pseudographic_hack:
    380	    01C0  8B C1			     mov ax, cx
    381					     ;
    382					     ;	 save dta
    383					     ;
    384					     push_fragment dta,	43
1   385	    01C2  BF 05A8r		     lea di, dta
1   386	    01C5  B9 002B		     mov cx, 43
1   387	    01C8  33 DB			     xor bx, bx
1   388	    01CA			 ??0000:
1   389	    01CA  8A 1D			     mov bl, byte ptr [di]
1   390	    01CC  53			     push bx
1   391	    01CD  47			     inc di
1   392	    01CE  49			     dec cx
1   393	    01CF  83 F9	00		     cmp cx, 0
1   394	    01D2  75 F6			     jne ??0000
    395	    01D4  8B C8			     mov cx, ax
    396
    397					     ;
    398					     ; start new search
    399					     ;
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 8
2tree.ASM



    400	    01D6  A1 04B8r		     mov ax, word ptr [current_max_entities]
    401					     load <ax>
2   402	    01D9  50				 push ax
    403
    404					     load <cx>
2   405	    01DA  51				 push cx
    406					     ;
    407					     ;	 cd to subfolder
    408					     ;
    409					     ; push cx
    410					     ; call move_dta
    411	    01DB  B8 05A8r		     lea ax, dta
    412	    01DE  05 001E		     add ax, 1Eh
    413
    414	    01E1  50			     push ax
    415					     ; break_point <bx>
    416	    01E2  E8 01AB		     call cd
    417					     restore <cx>
2   418	    01E5  59				 pop cx
    419
    420	    01E6  41			     inc cx
    421					     ;
    422					     ;	 list subfiles from subfolder
    423					     ;
    424					     load <cx>
2   425	    01E7  51				 push cx
    426	    01E8  BB 0000		     mov bx, 0
    427	    01EB  B8 04BDr		     mov ax, offset file_mask
    428	    01EE  BE 02E7r		     mov si, offset find_first_file
    429
    430	    01F1  56			     push si
    431	    01F2  53			     push bx
    432	    01F3  50			     push ax
    433	    01F4  51			     push cx
    434	    01F5  E8 FF5B		     call list_subfiles_recursive
    435					     restore <cx>
2   436	    01F8  59				 pop cx
    437
    438
    439					     ;
    440					     ;	 list subfolders from subfolder
    441					     ;
    442					     load <cx>
2   443	    01F9  51				 push cx
    444	    01FA  8B D8			     mov bx, ax
    445	    01FC  B8 04C3r		     mov ax, offset folder_mask
    446	    01FF  BE 02F4r		     mov si, offset find_first_folder
    447
    448	    0202  56			     push si
    449	    0203  53			     push bx
    450	    0204  50			     push ax
    451	    0205  51			     push cx
    452	    0206  E8 FF4A		     call list_subfiles_recursive
    453					     restore <cx>
2   454	    0209  59				 pop cx
    455
    456					     ;
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 9
2tree.ASM



    457					     ;	 reverse pseudographic hack
    458					     ;
    459	    020A  BB 04CBr		     mov bx, offset level_shift
    460	    020D  03 D9			     add bx, cx
    461	    020F  A0 04C9r		     mov al, byte ptr [old_level_shift]
    462	    0212  88 07			     mov byte ptr [bx],	al
    463
    464					     ;
    465					     ;	 cd back to this function
    466					     ;
    467	    0214  B8 04E3r		     mov ax, offset parent_folder
    468	    0217  50			     push ax
    469					     ; break_point <cx>
    470	    0218  E8 0175		     call cd
    471
    472
    473					     restore <ax>
2   474	    021B  58				 pop ax
    475	    021C  A3 04B8r		     mov word ptr [current_max_entities], ax
    476
    477					     break_point <ax>
1   478					     load <ax>
3   479	    021F  50				 push ax
1   480	    0220  33 C0			     xor ax, ax
1   481	    0222  33 C0			     xor ax, ax
1   482	    0224  33 C0			     xor ax, ax
1   483	    0226  33 C0			     xor ax, ax
1   484	    0228  33 C0			     xor ax, ax
1   485	    022A  33 C0			     xor ax, ax
1   486	    022C  33 C0			     xor ax, ax
1   487	    022E  33 C0			     xor ax, ax
1   488					     restore <ax>
3   489	    0230  58				 pop ax
    490					     ;
    491					     ;	 restore dta
    492					     ;
    493					     pop_fragment dta, 43
1   494	    0231  BF 05A8r		     lea di, dta
1   495	    0234  B9 002B		     mov cx, 43
1   496	    0237  03 F9			     add di, cx
1   497	    0239  4F			     dec di
1   498	    023A  33 DB			     xor bx, bx
1   499	    023C			 ??0001:
1   500	    023C  5B			     pop bx
1   501	    023D  88 1D			     mov byte ptr [di],	bl
1   502	    023F  4F			     dec di
1   503	    0240  49			     dec cx
1   504	    0241  83 F9	00		     cmp cx, 0
1   505	    0244  75 F6			     jne ??0001
    506					     set_dta dta
1   507	    0246  BA 05A8r		     lea dx, dta
1   508	    0249  33 C0			     xor ax, ax
1   509	    024B  B4 1A			     mov ah, 1Ah
1   510	    024D  CD 21			     int 21h
    511
    512					     ; restore <cx>
    513					     ; load <cx>
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 10
2tree.ASM



    514					     ; push cx
    515					     ; call set_dta
    516	    024F			 _list_subfiles_recursive_next:
    517	    024F  E8 0090		     call find_next
    518	    0252  0F 83	FF24		     jnc _list_subfiles_recursive_loop
    519	    0256  3A 06	0467r		     cmp al, byte ptr [no_more_files]
    520	    025A  75 36			     jne find_next_error
    521	    025C			 _list_subfiles_recursive_end:
    522					     restore <cx, bx>
2   523	    025C  59				 pop cx
2   524	    025D  5B				 pop bx
    525	    025E  8B C3			     mov ax, bx
    526	    0260  C3			     ret
    527					 ; move_dta:
    528					 ;     pop bx
    529					 ;     pop cx
    530					 ;     push bx
    531					 ;     ; lea ax, dta
    532					 ;     ; ret
    533
    534					 ;     xor ax, ax
    535					 ;     mov al, byte ptr	[dta_len]
    536					 ;     mul cx
    537
    538					 ;     mov bx, offset dta
    539					 ;     add bx, ax
    540					 ;     mov ax, bx
    541					 ;     ret
    542	    0261			 is_folder:
    543	    0261  5B			     pop bx
    544	    0262  59			     pop cx
    545	    0263  53			     push bx
    546
    547	    0264  B8 05A8r		     lea ax, dta
    548					     ; push cx
    549					     ; call move_dta
    550
    551	    0267  05 0015		     add ax, 15h
    552	    026A  8B D8			     mov bx, ax
    553	    026C  8A 1F			     mov bl, byte ptr [bx]
    554	    026E  80 E3	10		     and bl, 10h
    555	    0271  80 FB	10		     cmp bl, 10h
    556	    0274  74 02			     je	_is_folder_true
    557	    0276  75 05			     jne _is_folder_false
    558	    0278			 _is_folder_true:
    559	    0278  B8 0001		     mov ax, 1
    560	    027B  EB 05			     jmp _is_folder_end
    561	    027D			 _is_folder_false:
    562	    027D  B8 0000		     mov ax, 0
    563	    0280  EB 00			     jmp _is_folder_end
    564	    0282			 _is_folder_end:
    565	    0282  C3			     ret
    566
    567	    0283			 find_first_error:
    568					     print_range <find_first_fails, newline>
2   569						 print <offset find_first_fails>
3   570	    0283  B4 09				 mov ah, 09h
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 11
2tree.ASM



3   571	    0285  BA 0481r			 mov dx, offset	find_first_fails
3   572	    0288  CD 21				 int 21h
2   573						 print <offset newline>
3   574	    028A  B4 09				 mov ah, 09h
3   575	    028C  BA 05A6r			 mov dx, offset	newline
3   576	    028F  CD 21				 int 21h
    577	    0291  C3			     ret
    578	    0292			 find_next_error:
    579					     print_range <find_next_fails, newline>
2   580						 print <offset find_next_fails>
3   581	    0292  B4 09				 mov ah, 09h
3   582	    0294  BA 049Dr			 mov dx, offset	find_next_fails
3   583	    0297  CD 21				 int 21h
2   584						 print <offset newline>
3   585	    0299  B4 09				 mov ah, 09h
3   586	    029B  BA 05A6r			 mov dx, offset	newline
3   587	    029E  CD 21				 int 21h
    588					     exit
1   589	    02A0  B4 00			     mov ah, 00h
1   590	    02A2  CD 21			     int 21h
    591
    592	    02A4			 parse_command_line:
    593					     ;
    594					     ; prepare root folder
    595					     ;
    596	    02A4  BE 0082		     mov si, 82h
    597	    02A7  B9 0040		     mov cx, 64
    598	    02AA  51			     push cx
    599	    02AB  56			     push si
    600	    02AC  E8 0142		     call count_no_space_no_zero_letters
    601	    02AF  8B C8			     mov cx, ax
    602	    02B1  BE 0082		     mov si, 82h
    603	    02B4  BF 0526r		     mov di, offset root_folder
    604	    02B7  F3> A4		     rep movsb
    605
    606	    02B9			 parse_args:
    607	    02B9  46			     inc si
    608	    02BA  46			     inc si
    609	    02BB  80 3C	64		     cmp byte ptr [si],	'd'
    610	    02BE  74 07			     je	parse_d
    611	    02C0  80 3C	66		     cmp byte ptr [si],	'f'
    612	    02C3  74 10			     je	parse_f
    613	    02C5  EB 1A			     jmp parse_end
    614	    02C7			 parse_d:
    615					     ;
    616					     ; parse_deep level
    617					     ;
    618	    02C7  46			     inc si
    619	    02C8  46			     inc si
    620	    02C9  8A 1C			     mov bl, byte ptr [si]
    621	    02CB  80 EB	30		     sub bl, 30h	     ; to number
    622	    02CE  88 1E	04BCr		     mov byte ptr [deep_level],	bl
    623	    02D2  46			     inc si
    624	    02D3  EB E4			     jmp parse_args
    625	    02D5			 parse_f:
    626					     ;
    627					     ; parse file extension
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 12
2tree.ASM



    628					     ;
    629	    02D5  46			     inc si
    630	    02D6  46			     inc si
    631	    02D7  BF 04BEr		     mov di, offset file_ext
    632	    02DA  B9 0004		     mov cx, 4
    633	    02DD  F3> A4		     rep movsb
    634	    02DF  EB D8			     jmp parse_args
    635	    02E1			 parse_end:
    636	    02E1  C3			     ret
    637	    02E2			 find_next:
    638	    02E2  B4 4F			     mov ah, 4Fh
    639	    02E4  CD 21			     int 21h
    640
    641	    02E6  C3			     ret
    642
    643	    02E7			 find_first_file:
    644	    02E7  5B			     pop bx
    645	    02E8  5A			     pop dx		; filename spec
    646	    02E9  B9 000F		     mov cx, 0fh	 ; include files
    647	    02EC  53			     push bx
    648
    649	    02ED  33 C0			     xor ax, ax
    650	    02EF  B4 4E			     mov ah, 4Eh
    651	    02F1  CD 21			     int 21h
    652	    02F3  C3			     ret
    653
    654	    02F4			 find_first_folder:
    655	    02F4  5B			     pop bx
    656	    02F5  5A			     pop dx		 ; filename spec
    657	    02F6  B9 0010		     mov cx, 10h	 ; include directories
    658	    02F9  53			     push bx
    659
    660	    02FA  33 C0			     xor ax, ax
    661	    02FC  B4 4E			     mov ah, 4Eh
    662	    02FE  CD 21			     int 21h
    663	    0300  C3			     ret
    664
    665	    0301			 is_valid_name:
    666	    0301  5B			     pop bx
    667	    0302  59			     pop cx	 ; deep	level
    668	    0303  53			     push bx
    669
    670					     ; push cx
    671					     ; call move_dta
    672	    0304  B8 05A8r		     lea ax, dta
    673	    0307  05 001E		     add ax, 1Eh
    674	    030A  8B D8			     mov bx, ax
    675	    030C  B8 0001		     mov ax, 1
    676	    030F  80 3F	2E		     cmp byte ptr [bx],	'.'
    677	    0312  75 03			     jne _is_valid_name_end
    678	    0314  B8 0000		     mov ax, 0
    679	    0317			 _is_valid_name_end:
    680	    0317  C3			     ret
    681
    682	    0318			 show_filename_from_dta:
    683	    0318  5B			     pop bx
    684	    0319  59			     pop cx  ; deep level
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 13
2tree.ASM



    685	    031A  58			     pop ax  ; entity count
    686	    031B  53			     push bx
    687
    688	    031C			 _show_filename_from_dta_valid_name:
    689					     ;
    690					     ;	 pseudo	graphic	prefix
    691					     ;
    692					     load <ax>
2   693	    031C  50				 push ax
    694					     ; push cx
    695					     ; call move_dta
    696	    031D  B8 05A8r		     lea ax, dta
    697
    698	    0320  05 001E		     add ax, 1Eh
    699	    0323  8B D8			     mov bx, ax
    700					     restore <ax>
2   701	    0325  58				 pop ax
    702
    703					     load <cx, bx>
2   704	    0326  51				 push cx
2   705	    0327  53				 push bx
    706	    0328  50			     push ax	 ; entity count
    707	    0329  51			     push cx	 ; deep	level
    708	    032A  E8 001E		     call print_pseudographic_prefix
    709					     restore <bx, cx>
2   710	    032D  5B				 pop bx
2   711	    032E  59				 pop cx
    712
    713					     load <bx>
2   714	    032F  53				 push bx
    715	    0330  B9 000D		     mov cx, 13
    716	    0333  51			     push cx
    717	    0334  53			     push bx
    718	    0335  E8 00B9		     call count_no_space_no_zero_letters
    719	    0338  8B C8			     mov cx, ax
    720					     restore <bx>
2   721	    033A  5B				 pop bx
    722	    033B  51			     push cx
    723	    033C  53			     push bx
    724	    033D  E8 009B		     call print_string_with_length
    725					     print_range <newline>
2   726						 print <offset newline>
3   727	    0340  B4 09				 mov ah, 09h
3   728	    0342  BA 05A6r			 mov dx, offset	newline
3   729	    0345  CD 21				 int 21h
    730	    0347  B8 0001		     mov ax, 1
    731	    034A  C3			     ret
    732	    034B			 print_pseudographic_prefix:
    733	    034B  5B			     pop bx
    734	    034C  59			     pop cx	 ; deep	level
    735	    034D  58			     pop ax	 ; entity count
    736	    034E  53			     push bx
    737
    738	    034F  83 F9	00		     cmp cx, 0
    739	    0352  74 0C			     je	_print_pseudographic_prefix_zero_level
    740					     load <cx, ax>
2   741	    0354  51				 push cx
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 14
2tree.ASM



2   742	    0355  50				 push ax
    743	    0356  B8 04CBr		     mov ax, offset level_shift
    744
    745	    0359  51			     push cx
    746	    035A  50			     push ax
    747	    035B  E8 007D		     call print_string_with_length
    748					     restore <ax, cx>
2   749	    035E  58				 pop ax
2   750	    035F  59				 pop cx
    751	    0360			 _print_pseudographic_prefix_zero_level:
    752
    753	    0360  8B 1E	04B8r		     mov bx, word ptr [current_max_entities]
    754	    0364  3A C3			     cmp al, bl
    755	    0366  74 1E			     je	_print_pseudographic_prefix_zero_level_end
    756	    0368  3D 0001		     cmp ax, 1
    757	    036B  75 10			     jne _print_pseudographic_prefix_zero_level_middle
    758	    036D  83 F9	00		     cmp cx, 0
    759	    0370  74 02			     je	_print_pseudographic_prefix_zero_level_first
    760	    0372  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
    761	    0374			 _print_pseudographic_prefix_zero_level_first:
    762					     print_range <first_file_char>
2   763						 print <offset first_file_char>
3   764	    0374  B4 09				 mov ah, 09h
3   765	    0376  BA 04DDr			 mov dx, offset	first_file_char
3   766	    0379  CD 21				 int 21h
    767	    037B  EB 12			     jmp _print_pseudographic_prefix_end
    768	    037D			 _print_pseudographic_prefix_zero_level_middle:
    769					     print_range <middle_file_char>
2   770						 print <offset middle_file_char>
3   771	    037D  B4 09				 mov ah, 09h
3   772	    037F  BA 04DFr			 mov dx, offset	middle_file_char
3   773	    0382  CD 21				 int 21h
    774	    0384  EB 09			     jmp _print_pseudographic_prefix_end
    775	    0386			 _print_pseudographic_prefix_zero_level_end:
    776					     print_range <end_file_char>
2   777						 print <offset end_file_char>
3   778	    0386  B4 09				 mov ah, 09h
3   779	    0388  BA 04E1r			 mov dx, offset	end_file_char
3   780	    038B  CD 21				 int 21h
    781	    038D  EB 00			     jmp _print_pseudographic_prefix_end
    782	    038F			 _print_pseudographic_prefix_end:
    783	    038F  C3			     ret
    784	    0390			 cd:
    785	    0390  5B			     pop bx ; ret addr
    786	    0391  5A			     pop dx ; root address
    787	    0392  53			     push bx ; ret addr
    788
    789					     load <dx>
2   790	    0393  52				 push dx
    791	    0394  33 C0			     xor ax, ax
    792	    0396  B4 3B			     mov ah, 3Bh
    793	    0398  CD 21			     int 21h
    794
    795	    039A  72 02			     jc	cd_error
    796					     restore <dx>
2   797	    039C  5A				 pop dx
    798	    039D  C3			     ret
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 15
2tree.ASM



    799	    039E			 cd_error:
    800					     print_range <cd_fails, newline>
2   801						 print <offset cd_fails>
3   802	    039E  B4 09				 mov ah, 09h
3   803	    03A0  BA 0469r			 mov dx, offset	cd_fails
3   804	    03A3  CD 21				 int 21h
2   805						 print <offset newline>
3   806	    03A5  B4 09				 mov ah, 09h
3   807	    03A7  BA 05A6r			 mov dx, offset	newline
3   808	    03AA  CD 21				 int 21h
    809					     restore <dx>
2   810	    03AC  5A				 pop dx
    811
    812	    03AD  B4 09				 mov ah, 09h
    813	    03AF  CD 21			     int 21h
    814
    815					     print_range <newline>
2   816						 print <offset newline>
3   817	    03B1  B4 09				 mov ah, 09h
3   818	    03B3  BA 05A6r			 mov dx, offset	newline
3   819	    03B6  CD 21				 int 21h
    820					     exit
1   821	    03B8  B4 00			     mov ah, 00h
1   822	    03BA  CD 21			     int 21h
    823	    03BC  C3			     ret
    824
    825					 ; set_dta:
    826					 ;     pop bx
    827					 ;     pop cx			   ; deep level
    828					 ;     push bx
    829
    830					 ;     mov dx, offset dta
    831					 ;     load <dx>
    832					 ;     xor ax, ax
    833					 ;     mov al, byte ptr	[dta_len]
    834					 ;     mul cx
    835
    836					 ;     restore <dx>
    837					 ;     add dx, ax
    838
    839					 ;     xor ax, ax
    840					 ;     mov ah, 1Ah
    841					 ;     int 21h
    842
    843					 ;     ret
    844
    845	    03BD			 save_cwd:
    846	    03BD  BE 04E6r		     mov si, offset working_folder
    847
    848					     ;
    849					     ; save driver
    850					     ;
    851	    03C0  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    852	    03C2  CD 21			     int 21h
    853	    03C4  8A D0			     mov dl, al
    854	    03C6  80 C2	41		     add dl, 41h
    855	    03C9  88 14			     mov byte ptr [si],	dl
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 16
2tree.ASM



    856	    03CB  46			     inc si
    857	    03CC  C6 04	3A		     mov byte ptr [si],	':'
    858	    03CF  46			     inc si
    859	    03D0  C6 04	5C		     mov byte ptr [si],	'\'
    860	    03D3  46			     inc si
    861
    862					     ;
    863					     ; save folder
    864					     ;
    865	    03D4  32 D2			     xor dl, dl			 ; Actual drive
    866	    03D6  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    867	    03D8  CD 21			     int 21h
    868	    03DA  C3			     ret
    869	    03DB			 print_string_with_length:
    870	    03DB  5B			     pop bx ; ret address
    871	    03DC  5E			     pop si ; string offset
    872	    03DD  59			     pop cx ; string length
    873	    03DE  53			     push bx; ret address
    874	    03DF  33 C0			     xor ax, ax
    875	    03E1			 _print_string_with_length_loop:
    876	    03E1  B4 02			     mov ah, 02h
    877	    03E3  8A 14			     mov dl, byte ptr [si]
    878	    03E5  CD 21			     int 21h
    879	    03E7  49			     dec cx
    880	    03E8  46			     inc si
    881	    03E9  83 F9	00		     cmp cx, 00h
    882	    03EC  74 02			     je	_print_string_with_length_end
    883	    03EE  EB F1			     jmp _print_string_with_length_loop
    884	    03F0			 _print_string_with_length_end:
    885	    03F0  C3			     ret
    886	    03F1			 count_no_space_no_zero_letters:
    887	    03F1  5B			     pop bx ; ret address
    888	    03F2  5E			     pop si ; string offset
    889	    03F3  59			     pop cx ; string length
    890	    03F4  53			     push bx ; ret address
    891	    03F5  B8 0000		     mov ax, 0
    892	    03F8			 _count_non_space_symbols_loop:
    893	    03F8  80 3C	20		     cmp byte ptr [si],	20h
    894	    03FB  74 12			     je	_count_non_space_symbols_end
    895	    03FD  80 3C	0D		     cmp byte ptr [si],	0Dh
    896	    0400  74 0D			     je	_count_non_space_symbols_end
    897	    0402  80 3C	00		     cmp byte ptr [si],	00h
    898	    0405  74 08			     je	_count_non_space_symbols_end
    899	    0407  3B C1			     cmp ax, cx
    900	    0409  74 04			     je	_count_non_space_symbols_end
    901	    040B  40			     inc ax
    902	    040C  46			     inc si
    903	    040D  EB E9			     jmp _count_non_space_symbols_loop
    904	    040F			 _count_non_space_symbols_end:
    905	    040F  C3			     ret
    906	    0410			 count_subfiles_here:
    907	    0410  B8 04BDr		     mov ax, offset file_mask
    908	    0413  BE 02E7r		     mov si, offset find_first_file
    909
    910	    0416  50			     push ax
    911	    0417  56			     push si
    912	    0418  E8 0017		     call count_subfiles_here_by_mask
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 17
2tree.ASM



    913					     load <ax>
2   914	    041B  50				 push ax
    915	    041C  B8 04C3r		     mov ax, offset folder_mask
    916	    041F  BE 02F4r		     mov si, offset find_first_folder
    917
    918	    0422  50			     push ax
    919	    0423  56			     push si
    920	    0424  E8 000B		     call count_subfiles_here_by_mask
    921	    0427  8B D8			     mov bx, ax
    922					     restore <ax>
2   923	    0429  58				 pop ax
    924	    042A  03 D8			     add bx, ax
    925	    042C  8B C3			     mov ax, bx
    926	    042E  A3 04B8r		     mov word ptr [current_max_entities], ax
    927	    0431  C3			     ret
    928	    0432			 count_subfiles_here_by_mask:
    929	    0432  5B			     pop bx
    930	    0433  5E			     pop si		 ; find_first address
    931	    0434  58			     pop ax		 ; mask	address
    932	    0435  53			     push bx
    933
    934					     load <ax, si>
2   935	    0436  50				 push ax
2   936	    0437  56				 push si
    937					     ; mov cx, 11	   ; set pointer to count_dta
    938					     ; push cx
    939					     ; call set_dta
    940					     set_dta count_dta
1   941	    0438  BA 1674r		     lea dx, count_dta
1   942	    043B  33 C0			     xor ax, ax
1   943	    043D  B4 1A			     mov ah, 1Ah
1   944	    043F  CD 21			     int 21h
    945					     restore <si, ax>
2   946	    0441  5E				 pop si
2   947	    0442  58				 pop ax
    948
    949	    0443  B9 0000		     mov cx, 0
    950					     load <cx>
2   951	    0446  51				 push cx
    952	    0447  50			     push ax
    953	    0448  FF D6			     call si
    954	    044A  72 17			     jc	_count_subfiles_from_end
    955	    044C			 _count_subfiles_from_loop:
    956					     ; mov cx, 11
    957					     ; push cx
    958					     ; call move_dta
    959	    044C  B8 1674r		     lea ax, count_dta
    960	    044F  05 001E		     add ax, 1Eh
    961	    0452  8B D8			     mov bx, ax
    962	    0454  80 3F	2E		     cmp byte ptr [bx],	'.'
    963	    0457  74 03			     je	_count_subfiles_from_loop_next
    964
    965					     restore <cx>
2   966	    0459  59				 pop cx
    967	    045A  41			     inc cx
    968					     load <cx>
2   969	    045B  51				 push cx
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 18
2tree.ASM



    970	    045C			 _count_subfiles_from_loop_next:
    971	    045C  E8 FE83		     call find_next
    972	    045F  72 02			     jc	_count_subfiles_from_end
    973
    974	    0461  EB E9			     jmp _count_subfiles_from_loop
    975	    0463			 _count_subfiles_from_end:
    976					     restore <cx>
2   977	    0463  59				 pop cx
    978	    0464  8B C1			     mov ax, cx
    979	    0466  C3			     ret
    980					 ;
    981					 ; error codes
    982					 ;
    983	    0467  12			 no_more_files db 18
    984	    0468  2B			 dta_len db 2bh
    985
    986					 ;
    987					 ; error messages
    988					 ;
    989	    0469  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    990		  64 69	72 65 63 74 6F+
    991		  72 79	20 66 61 69 6C+
    992		  73 2E	24
    993	    0481  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    994		  72 73	74 20 66 69 6C+
    995		  65 6E	61 6D 65 73 20+
    996		  66 61	69 6C 73 2E 24
    997	    049D  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    998		  78 74	20 66 69 6C 65+
    999		  6E 61	6D 65 73 20 66+
   1000		  61 69	6C 73 2E 24
   1001
   1002					 ;
   1003					 ; int variables
   1004					 ;
   1005	    04B8  0000			 current_max_entities dw 0
   1006	    04BA  0000			 current_id_entity dw 0
   1007
   1008					 ;
   1009					 ;   parse arguments
   1010					 ;
   1011	    04BC  01			 deep_level db 1
   1012	    04BD  2A			 file_mask db '*'
   1013	    04BE  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
   1014	    04C3  2A 00			 folder_mask db	'*', 00h
   1015	    04C5  2A 2E	2A 00		 all_files db '*.*', 00h
   1016
   1017					 ;
   1018					 ;   pseudographic
   1019					 ;
   1020	    04C9  B3 24			 old_level_shift db 179, '$'
   1021	    04CB  0A*(B3) 24		 level_shift db	10 dup(179), '$'
   1022	    04D6  ?? 20	24		 space db, 32, '$'
   1023
   1024	    04D9  C3 24			 zero_first_file db 195, '$'
   1025	    04DB  C0 24			 zero_end_file db 192, '$'
   1026
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 19
2tree.ASM



   1027	    04DD  C2 24			 first_file_char db 194, '$'
   1028	    04DF  C3 24			 middle_file_char db 195, '$'
   1029	    04E1  C0 24			 end_file_char db 192, '$'
   1030
   1031					 ;
   1032					 ; strings
   1033					 ;
   1034	    04E3  2E 2E	00		 parent_folder db '..',	00h
   1035	    04E6  40*(00)		 working_folder	db 64 dup(00h)
   1036	    0526  40*(00)		 root_folder db	64 dup(00h)
   1037	    0566  40*(00)		 start_mask db 64 dup(00h)
   1038	    05A6  0A 24			 newline db 0Ah, '$'
   1039	    05A8  10CC*(00)		 dta db	4300 dup(0)
   1040	    1674  2B*(00)		 count_dta db 43 dup(0)
   1041					 end start
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 20
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:01CA
??0001				  Near	 DGROUP:023C
??DATE				  Text	 "12/15/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "14:20:32"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:04C5
CD				  Near	 DGROUP:0390
CD_ERROR			  Near	 DGROUP:039E
CD_FAILS			  Byte	 DGROUP:0469
COUNT_DTA			  Byte	 DGROUP:1674
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:03F1
COUNT_SUBFILES_HERE		  Near	 DGROUP:0410
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:0432
CURRENT_ID_ENTITY		  Word	 DGROUP:04BA
CURRENT_MAX_ENTITIES		  Word	 DGROUP:04B8
DEEP_LEVEL			  Byte	 DGROUP:04BC
DTA				  Byte	 DGROUP:05A8
DTA_LEN				  Byte	 DGROUP:0468
END_FILE_CHAR			  Byte	 DGROUP:04E1
FILE_EXT			  Byte	 DGROUP:04BE
FILE_MASK			  Byte	 DGROUP:04BD
FIND_FIRST_ERROR		  Near	 DGROUP:0283
FIND_FIRST_FAILS		  Byte	 DGROUP:0481
FIND_FIRST_FILE			  Near	 DGROUP:02E7
FIND_FIRST_FOLDER		  Near	 DGROUP:02F4
FIND_NEXT			  Near	 DGROUP:02E2
FIND_NEXT_ERROR			  Near	 DGROUP:0292
FIND_NEXT_FAILS			  Byte	 DGROUP:049D
FIRST_FILE_CHAR			  Byte	 DGROUP:04DD
FOLDER_MASK			  Byte	 DGROUP:04C3
IS_FOLDER			  Near	 DGROUP:0261
IS_VALID_NAME			  Near	 DGROUP:0301
LEVEL_SHIFT			  Byte	 DGROUP:04CB
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0153
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0125
MIDDLE_FILE_CHAR		  Byte	 DGROUP:04DF
NEWLINE				  Byte	 DGROUP:05A6
NO_MORE_FILES			  Byte	 DGROUP:0467
OLD_LEVEL_SHIFT			  Byte	 DGROUP:04C9
PARENT_FOLDER			  Byte	 DGROUP:04E3
PARSE_ARGS			  Near	 DGROUP:02B9
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 21
Symbol Table



PARSE_COMMAND_LINE		  Near	 DGROUP:02A4
PARSE_D				  Near	 DGROUP:02C7
PARSE_END			  Near	 DGROUP:02E1
PARSE_F				  Near	 DGROUP:02D5
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:034B
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:03DB
ROOT_FOLDER			  Byte	 DGROUP:0526
SAVE_CWD			  Near	 DGROUP:03BD
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0318
SPACE				  Byte	 DGROUP:04D6
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0566
WORKING_FOLDER			  Byte	 DGROUP:04E6
ZERO_END_FILE			  Byte	 DGROUP:04DB
ZERO_FIRST_FILE			  Byte	 DGROUP:04D9
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:040F
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:03F8
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:0463
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:044C
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:045C
_IS_FOLDER_END			  Near	 DGROUP:0282
_IS_FOLDER_FALSE		  Near	 DGROUP:027D
_IS_FOLDER_TRUE			  Near	 DGROUP:0278
_IS_VALID_NAME_END		  Near	 DGROUP:0317
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:025C
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:017A
_LIST_SUBFILES_RECURSIVE_LOOP_PS  Near	 DGROUP:01C0
EUDOGRAPHIC_HACK
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:024F
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:038F
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0360
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0386
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0374
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:037D
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:03F0
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:03E1
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:031C
ME

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
PUT
RESTORE
Turbo Assembler	 Version 4.1	    12/15/19 14:20:33	    Page 22
Symbol Table



SET_DTA
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  169F Word	  Public  CODE
