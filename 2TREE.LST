Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 get_offset macro state
1    45					     xor dx, dx
1    46					     xor ax, ax
1    47					     mov al, state
1    48					     shl ax, 8
1    49					 endm get_offset
1    50
1    51					 to_non_space macro addr
1    52					     local l1, l2
1    53					     mov si, addr
1    54					 l1:
1    55					     mov byte ptr al, [si]
1    56					     cmp al, 20h
1    57					     je	l2
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 2
2tree.ASM



1    58					     cmp al, 0
1    59					     je	l2
1    60					     inc si
1    61					     jmp l1
1    62					 l2:
1    63					     inc si
1    64					     mov ax, si
1    65					 endm
1    66
1    67					 set_transition	macro buf, from, to, char
1    68					     load<bx, dx>
1    69					     get_offset	from
1    70
1    71					     add ax, offset buf
1    72					     add ax, char
1    73
1    74					     mov bx, ax
1    75					     mov byte ptr [bx],	to
1    76					     restore<dx, bx>
1    77					 endm
1    78
1    79					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    80					     local l1, end
1    81					     mov bx, start
1    82					     mov cx, iterations
1    83					 l1:
1    84					     cmp cx, 0
1    85					     je	end
1    86
1    87					     load <bx,cx>
1    88					     set_transition buf	from to	bx
1    89					     restore <cx,bx>
1    90
1    91					     inc bx
1    92					     dec cx
1    93					     jmp l1
1    94					 end:
1    95					 endm
1    96
1    97					 set_zero macro	state
1    98					     mov al, 0
1    99					     mov byte ptr [state], al
1   100					 endm
1   101
1   102					 set_transition_for_all	macro buf, from, to
1   103					     set_transition_length_from_start buf, from, to, 0,	255
1   104					 endm
1   105
1   106					 set_transition_for_digits macro buf, from, to
1   107					     set_transition_length_from_start buf, from, to, 30, 10
1   108					 endm
1   109
1   110					 set_transition_for_letters macro buf, from, to
1   111					     set_transition_length_from_start buf, from, to, 97, 26
1   112					     set_transition_length_from_start buf, from, to, 65, 26
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 3
2tree.ASM



1   115					 get_transition	macro buf, from, char
1   116					     load <dx>
1   117					     get_offset	from
1   118					     restore <dx>
1   119
1   120					     add ax, offset buf
1   121					     add ax, char
1   122
1   123					     mov bx, ax
1   124					     xor ax, ax
1   125					     mov al, byte ptr [bx]
1   126					 endm
1   127
1   128					 put macro from, to, position
1   129					     xor dx, dx
1   130					     xor bx, bx
1   131
1   132					     mov dx, offset to
1   133					     mov bl, byte ptr [position]
1   134					     add dx, bx
1   135
1   136					     mov bl, byte ptr [from]
1   137					     mov byte ptr [edx], bl
1   138					     inc [position]
1   139					 endm
1   140
1   141					 clear_mes macro mes, lastidx
1   142					     local l1, end
1   143					     mov bx, offset mes
1   144					     mov cl, byte ptr [lastidx]
1   145					     inc cl
1   146					 l1:
1   147					     cmp cl, 0
1   148					     je	end
1   149					     mov byte ptr [bx],	'$'
1   150					     inc bx
1   151					     dec cl
1   152					     jmp l1
1   153					 end:
1   154					     mov bl, 0
1   155					     mov byte ptr [lastidx], bl
1   156					 endm
    157
    158	    0000			 model tiny
    159					 .386
    160	    0000			 .code
    161					 org 100h
    162	    0100			 start:
    163	    0100  E8 02B0		     call save_cwd
    164	    0103  B9 0000		     mov cx, 0
    165	    0106  51			     push cx
    166	    0107  E8 0291		     call set_dta
    167	    010A  E8 0178		     call parse_command_line
    168
    169					     ;
    170					     ;	 start tree
    171					     ;
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 4
2tree.ASM



    172	    010D  B8 0513r		     mov ax, offset root_folder
    173	    0110  B9 0000		     mov cx, 0
    174	    0113  51			     push cx
    175	    0114  50			     push ax
    176	    0115  E8 001D		     call list_subfiles_recursive_from
    177
    178					     ;
    179					     ;	 cd to start folder
    180					     ;
    181	    0118  B8 04D3r		     mov ax, offset working_folder
    182	    011B  50			     push ax
    183					     break_point <ax>
1   184					     load <ax>
3   185	    011C  50				 push ax
1   186	    011D  33 C0			     xor ax, ax
1   187	    011F  33 C0			     xor ax, ax
1   188	    0121  33 C0			     xor ax, ax
1   189	    0123  33 C0			     xor ax, ax
1   190	    0125  33 C0			     xor ax, ax
1   191	    0127  33 C0			     xor ax, ax
1   192	    0129  33 C0			     xor ax, ax
1   193	    012B  33 C0			     xor ax, ax
1   194					     restore <ax>
3   195	    012D  58				 pop ax
    196	    012E  E8 023D		     call cd
    197					     exit
1   198	    0131  B4 00			     mov ah, 00h
1   199	    0133  CD 21			     int 21h
    200
    201	    0135			 list_subfiles_recursive_from:
    202	    0135  5B			     pop bx	 ; ret address
    203	    0136  58			     pop ax	 ; deep	level
    204	    0137  59			     pop cx	 ; root	folder offset
    205	    0138  53			     push bx
    206					     load <cx>
2   207	    0139  51				 push cx
    208	    013A  50			     push ax
    209	    013B  E8 0230		     call cd
    210					     restore <cx>
2   211	    013E  59				 pop cx
    212
    213					     ;
    214					     ; list subfolder
    215					     ;
    216	    013F  BE 02D4r		     mov si, offset find_first_folder
    217	    0142  BB 0000		     mov bx, 0
    218	    0145  B8 04BBr		     mov ax, offset folder_mask
    219					     load <cx>
2   220	    0148  51				 push cx
    221	    0149  56			     push si
    222	    014A  53			     push bx
    223	    014B  50			     push ax
    224	    014C  51			     push cx
    225	    014D  E8 0013		     call list_subfiles_recursive
    226					     restore <cx>
2   227	    0150  59				 pop cx
    228
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 5
2tree.ASM



    229					     ;
    230					     ; list files
    231					     ;
    232	    0151  BE 02C7r		     mov si, offset find_first_file
    233	    0154  8B D8			     mov bx, ax
    234	    0156  B8 04B5r		     mov ax, offset file_mask
    235					     load <cx>
2   236	    0159  51				 push cx
    237	    015A  56			     push si
    238	    015B  53			     push bx
    239	    015C  50			     push ax
    240	    015D  51			     push cx
    241	    015E  E8 0002		     call list_subfiles_recursive
    242					     restore <cx>
2   243	    0161  59				 pop cx
    244	    0162  C3			     ret
    245
    246	    0163			 list_subfiles_recursive:
    247					     ;
    248					     ;	 save current files
    249					     ;
    250	    0163  E8 02A0		     call count_subfiles_here
    251	    0166  A3 04B0r		     mov word ptr [current_max_entities], ax
    252
    253	    0169  5A			     pop dx
    254	    016A  59			     pop cx ; deep level
    255	    016B  58			     pop ax ; filemask offset
    256	    016C  5B			     pop bx ; current index
    257	    016D  5E			     pop si ; search address
    258	    016E  52			     push dx
    259
    260					     load <cx, ax, bx, si>
2   261	    016F  51				 push cx
2   262	    0170  50				 push ax
2   263	    0171  53				 push bx
2   264	    0172  56				 push si
    265	    0173  51			     push cx
    266	    0174  E8 0224		     call set_dta
    267					     restore <si, bx, ax, cx>
2   268	    0177  5E				 pop si
2   269	    0178  5B				 pop bx
2   270	    0179  58				 pop ax
2   271	    017A  59				 pop cx
    272
    273					     load <bx, cx>
2   274	    017B  53				 push bx
2   275	    017C  51				 push cx
    276	    017D  50			     push ax
    277	    017E  FF D6			     call si
    278	    0180  73 03			     jnc _list_subfiles_recursive_loop
    279	    0182  E9 00A5		     jmp _list_subfiles_recursive_end
    280	    0185			 _list_subfiles_recursive_loop:
    281					     restore <cx>
2   282	    0185  59				 pop cx
    283	    0186  51			     push cx
    284	    0187  E8 0157		     call is_valid_name
    285					     load <cx>
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 6
2tree.ASM



2   286	    018A  51				 push cx
    287	    018B  3D 0001		     cmp ax, 1
    288	    018E  0F 85	008B		     jne _list_subfiles_recursive_next
    289
    290					     restore <cx, bx>
2   291	    0192  59				 pop cx
2   292	    0193  5B				 pop bx
    293	    0194  43			     inc bx
    294					     load <bx, cx>
2   295	    0195  53				 push bx
2   296	    0196  51				 push cx
    297	    0197  53			     push bx
    298	    0198  51			     push cx
    299	    0199  E8 015D		     call show_filename_from_dta
    300
    301					     ;
    302					     ;	 check if folder
    303					     ;
    304					     restore <cx>
2   305	    019C  59				 pop cx
    306					     load <cx>
2   307	    019D  51				 push cx
    308	    019E  51			     push cx
    309	    019F  E8 009F		     call is_folder
    310	    01A2  3D 0001		     cmp ax, 1
    311	    01A5  75 76			     jne _list_subfiles_recursive_next
    312
    313					     ;
    314					     ;	 check deep level
    315					     ;
    316					     restore <cx>
2   317	    01A7  59				 pop cx
    318					     load <cx>
2   319	    01A8  51				 push cx
    320	    01A9  33 DB			     xor bx, bx
    321	    01AB  8A 1E	04B4r		     mov bl, byte ptr [deep_level]
    322	    01AF  3B CB			     cmp cx, bx
    323	    01B1  7D 6A			     jge _list_subfiles_recursive_next
    324
    325					     ;
    326					     ; start new search
    327					     ;
    328	    01B3  A1 04B0r		     mov ax, word ptr [current_max_entities]
    329					     load <ax>
2   330	    01B6  50				 push ax
    331
    332					     ;
    333					     ;	 cd to subfolder
    334					     ;
    335					     load <cx>
2   336	    01B7  51				 push cx
    337	    01B8  51			     push cx
    338	    01B9  E8 0073		     call move_dta
    339	    01BC  05 001E		     add ax, 1Eh
    340
    341	    01BF  50			     push ax
    342					     break_point <bx>
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 7
2tree.ASM



1   343					     load <bx>
3   344	    01C0  53				 push bx
1   345	    01C1  33 DB			     xor bx, bx
1   346	    01C3  33 DB			     xor bx, bx
1   347	    01C5  33 DB			     xor bx, bx
1   348	    01C7  33 DB			     xor bx, bx
1   349	    01C9  33 DB			     xor bx, bx
1   350	    01CB  33 DB			     xor bx, bx
1   351	    01CD  33 DB			     xor bx, bx
1   352	    01CF  33 DB			     xor bx, bx
1   353					     restore <bx>
3   354	    01D1  5B				 pop bx
    355	    01D2  E8 0199		     call cd
    356					     restore <cx>
2   357	    01D5  59				 pop cx
    358
    359	    01D6  41			     inc cx
    360					     ;
    361					     ;	 list subfiles from subfolder
    362					     ;
    363					     load <cx>
2   364	    01D7  51				 push cx
    365	    01D8  BB 0000		     mov bx, 0
    366	    01DB  B8 04BBr		     mov ax, offset folder_mask
    367	    01DE  BE 02D4r		     mov si, offset find_first_folder
    368
    369	    01E1  56			     push si
    370	    01E2  53			     push bx
    371	    01E3  50			     push ax
    372	    01E4  51			     push cx
    373	    01E5  E8 FF7B		     call list_subfiles_recursive
    374					     restore <cx>
2   375	    01E8  59				 pop cx
    376
    377
    378					     ;
    379					     ;	 list subfolders from subfolder
    380					     ;
    381					     load <cx>
2   382	    01E9  51				 push cx
    383	    01EA  8B D8			     mov bx, ax
    384	    01EC  B8 04B5r		     mov ax, offset file_mask
    385	    01EF  BE 02C7r		     mov si, offset find_first_file
    386
    387	    01F2  56			     push si
    388	    01F3  53			     push bx
    389	    01F4  50			     push ax
    390	    01F5  51			     push cx
    391	    01F6  E8 FF6A		     call list_subfiles_recursive
    392					     restore <cx>
2   393	    01F9  59				 pop cx
    394
    395					     ;
    396					     ;	 cd back to this function
    397					     ;
    398	    01FA  B8 04D0r		     mov ax, offset parent_folder
    399	    01FD  50			     push ax
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 8
2tree.ASM



    400					     break_point <cx>
1   401					     load <cx>
3   402	    01FE  51				 push cx
1   403	    01FF  33 C9			     xor cx, cx
1   404	    0201  33 C9			     xor cx, cx
1   405	    0203  33 C9			     xor cx, cx
1   406	    0205  33 C9			     xor cx, cx
1   407	    0207  33 C9			     xor cx, cx
1   408	    0209  33 C9			     xor cx, cx
1   409	    020B  33 C9			     xor cx, cx
1   410	    020D  33 C9			     xor cx, cx
1   411					     restore <cx>
3   412	    020F  59				 pop cx
    413	    0210  E8 015B		     call cd
    414
    415					     restore <ax>
2   416	    0213  58				 pop ax
    417	    0214  A3 04B0r		     mov word ptr [current_max_entities], ax
    418
    419					     restore <cx>
2   420	    0217  59				 pop cx
    421					     load <cx>
2   422	    0218  51				 push cx
    423	    0219  51			     push cx
    424	    021A  E8 017E		     call set_dta
    425	    021D			 _list_subfiles_recursive_next:
    426	    021D  E8 00A2		     call find_next
    427	    0220  0F 83	FF61		     jnc _list_subfiles_recursive_loop
    428	    0224  3A 06	045Fr		     cmp al, byte ptr [no_more_files]
    429	    0228  75 49			     jne find_next_error
    430	    022A			 _list_subfiles_recursive_end:
    431					     restore <cx, bx>
2   432	    022A  59				 pop cx
2   433	    022B  5B				 pop bx
    434	    022C  8B C3			     mov ax, bx
    435	    022E  C3			     ret
    436	    022F			 move_dta:
    437	    022F  5B			     pop bx
    438	    0230  59			     pop cx
    439	    0231  53			     push bx
    440
    441	    0232  33 C0			     xor ax, ax
    442	    0234  A0 0460r		     mov al, byte ptr [dta_len]
    443	    0237  F7 E1			     mul cx
    444
    445	    0239  BB 0595r		     mov bx, offset dta
    446	    023C  03 D8			     add bx, ax
    447	    023E  8B C3			     mov ax, bx
    448	    0240  C3			     ret
    449	    0241			 is_folder:
    450	    0241  5B			     pop bx
    451	    0242  59			     pop cx
    452	    0243  53			     push bx
    453
    454	    0244  51			     push cx
    455	    0245  E8 FFE7		     call move_dta
    456
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 9
2tree.ASM



    457	    0248  05 0015		     add ax, 15h
    458	    024B  8B D8			     mov bx, ax
    459	    024D  8A 1F			     mov bl, byte ptr [bx]
    460	    024F  80 E3	10		     and bl, 10h
    461	    0252  80 FB	10		     cmp bl, 10h
    462	    0255  74 02			     je	_is_folder_true
    463	    0257  75 05			     jne _is_folder_false
    464	    0259			 _is_folder_true:
    465	    0259  B8 0001		     mov ax, 1
    466	    025C  EB 05			     jmp _is_folder_end
    467	    025E			 _is_folder_false:
    468	    025E  B8 0000		     mov ax, 0
    469	    0261  EB 00			     jmp _is_folder_end
    470	    0263			 _is_folder_end:
    471	    0263  C3			     ret
    472
    473	    0264			 find_first_error:
    474					     print_range <find_first_fails, newline>
2   475						 print <offset find_first_fails>
3   476	    0264  B4 09				 mov ah, 09h
3   477	    0266  BA 0479r			 mov dx, offset	find_first_fails
3   478	    0269  CD 21				 int 21h
2   479						 print <offset newline>
3   480	    026B  B4 09				 mov ah, 09h
3   481	    026D  BA 0593r			 mov dx, offset	newline
3   482	    0270  CD 21				 int 21h
    483	    0272  C3			     ret
    484	    0273			 find_next_error:
    485					     print_range <find_next_fails, newline>
2   486						 print <offset find_next_fails>
3   487	    0273  B4 09				 mov ah, 09h
3   488	    0275  BA 0495r			 mov dx, offset	find_next_fails
3   489	    0278  CD 21				 int 21h
2   490						 print <offset newline>
3   491	    027A  B4 09				 mov ah, 09h
3   492	    027C  BA 0593r			 mov dx, offset	newline
3   493	    027F  CD 21				 int 21h
    494					     exit
1   495	    0281  B4 00			     mov ah, 00h
1   496	    0283  CD 21			     int 21h
    497
    498	    0285			 parse_command_line:
    499					     ;
    500					     ; prepare root folder
    501					     ;
    502	    0285  BE 0082		     mov si, 82h
    503	    0288  B9 0040		     mov cx, 64
    504	    028B  51			     push cx
    505	    028C  56			     push si
    506	    028D  E8 0157		     call count_no_space_no_zero_letters
    507	    0290  8B C8			     mov cx, ax
    508	    0292  BE 0082		     mov si, 82h
    509	    0295  BF 0513r		     mov di, offset root_folder
    510	    0298  F3> A4		     rep movsb
    511
    512	    029A			 parse_args:
    513	    029A  46			     inc si
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 10
2tree.ASM



    514	    029B  46			     inc si
    515	    029C  80 3C	64		     cmp byte ptr [si],	'd'
    516	    029F  74 07			     je	parse_d
    517	    02A1  80 3C	66		     cmp byte ptr [si],	'f'
    518	    02A4  74 0F			     je	parse_f
    519	    02A6  EB 19			     jmp parse_end
    520	    02A8			 parse_d:
    521					     ;
    522					     ; parse_deep level
    523					     ;
    524	    02A8  46			     inc si
    525	    02A9  46			     inc si
    526	    02AA  8A 1C			     mov bl, byte ptr [si]
    527	    02AC  80 EB	30		     sub bl, 30h	     ; to number
    528	    02AF  88 1E	04B4r		     mov byte ptr [deep_level],	bl
    529	    02B3  EB E5			     jmp parse_args
    530	    02B5			 parse_f:
    531					     ;
    532					     ; parse file extension
    533					     ;
    534	    02B5  46			     inc si
    535	    02B6  46			     inc si
    536	    02B7  BF 04B6r		     mov di, offset file_ext
    537	    02BA  B9 0004		     mov cx, 4
    538	    02BD  F3> A4		     rep movsb
    539	    02BF  EB D9			     jmp parse_args
    540	    02C1			 parse_end:
    541	    02C1  C3			     ret
    542	    02C2			 find_next:
    543	    02C2  B4 4F			     mov ah, 4Fh
    544	    02C4  CD 21			     int 21h
    545
    546	    02C6  C3			     ret
    547
    548	    02C7			 find_first_file:
    549	    02C7  5B			     pop bx
    550	    02C8  5A			     pop dx		; filename spec
    551	    02C9  B9 000F		     mov cx, 0fh	 ; include files
    552	    02CC  53			     push bx
    553
    554	    02CD  33 C0			     xor ax, ax
    555	    02CF  B4 4E			     mov ah, 4Eh
    556	    02D1  CD 21			     int 21h
    557	    02D3  C3			     ret
    558
    559	    02D4			 find_first_folder:
    560	    02D4  5B			     pop bx
    561	    02D5  5A			     pop dx		 ; filename spec
    562	    02D6  B9 0010		     mov cx, 10h	 ; include directories
    563	    02D9  53			     push bx
    564
    565	    02DA  33 C0			     xor ax, ax
    566	    02DC  B4 4E			     mov ah, 4Eh
    567	    02DE  CD 21			     int 21h
    568	    02E0  C3			     ret
    569
    570	    02E1			 is_valid_name:
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 11
2tree.ASM



    571	    02E1  5B			     pop bx
    572	    02E2  59			     pop cx	 ; deep	level
    573	    02E3  53			     push bx
    574
    575	    02E4  51			     push cx
    576	    02E5  E8 FF47		     call move_dta
    577
    578	    02E8  05 001E		     add ax, 1Eh
    579	    02EB  8B D8			     mov bx, ax
    580	    02ED  B8 0001		     mov ax, 1
    581	    02F0  80 3F	2E		     cmp byte ptr [bx],	'.'
    582	    02F3  75 03			     jne _is_valid_name_end
    583	    02F5  B8 0000		     mov ax, 0
    584	    02F8			 _is_valid_name_end:
    585	    02F8  C3			     ret
    586
    587	    02F9			 show_filename_from_dta:
    588	    02F9  5B			     pop bx
    589	    02FA  59			     pop cx  ; deep level
    590	    02FB  58			     pop ax  ; entity count
    591	    02FC  53			     push bx
    592
    593	    02FD			 _show_filename_from_dta_valid_name:
    594					     ;
    595					     ;	 pseudo	graphic	prefix
    596					     ;
    597					     load <ax>
2   598	    02FD  50				 push ax
    599	    02FE  51			     push cx
    600	    02FF  E8 FF2D		     call move_dta
    601
    602	    0302  05 001E		     add ax, 1Eh
    603	    0305  8B D8			     mov bx, ax
    604					     restore <ax>
2   605	    0307  58				 pop ax
    606
    607					     load <cx, bx>
2   608	    0308  51				 push cx
2   609	    0309  53				 push bx
    610	    030A  50			     push ax	 ; entity count
    611	    030B  51			     push cx	 ; deep	level
    612	    030C  E8 001E		     call print_pseudographic_prefix
    613					     restore <bx, cx>
2   614	    030F  5B				 pop bx
2   615	    0310  59				 pop cx
    616
    617					     load <bx>
2   618	    0311  53				 push bx
    619	    0312  B9 000D		     mov cx, 13
    620	    0315  51			     push cx
    621	    0316  53			     push bx
    622	    0317  E8 00CD		     call count_no_space_no_zero_letters
    623	    031A  8B C8			     mov cx, ax
    624					     restore <bx>
2   625	    031C  5B				 pop bx
    626	    031D  51			     push cx
    627	    031E  53			     push bx
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 12
2tree.ASM



    628	    031F  E8 00AF		     call print_string_with_length
    629					     print_range <newline>
2   630						 print <offset newline>
3   631	    0322  B4 09				 mov ah, 09h
3   632	    0324  BA 0593r			 mov dx, offset	newline
3   633	    0327  CD 21				 int 21h
    634	    0329  B8 0001		     mov ax, 1
    635	    032C  C3			     ret
    636	    032D			 print_pseudographic_prefix:
    637	    032D  5B			     pop bx
    638	    032E  59			     pop cx	 ; deep	level
    639	    032F  58			     pop ax	 ; entity count
    640	    0330  53			     push bx
    641
    642	    0331  83 F9	00		     cmp cx, 0
    643	    0334  74 0D			     je	_print_pseudographic_prefix_zero_level
    644	    0336			 _print_pseudographic_prefix_loop:
    645					     print_range <level_shift>
2   646						 print <offset level_shift>
3   647	    0336  B4 09				 mov ah, 09h
3   648	    0338  BA 04C1r			 mov dx, offset	level_shift
3   649	    033B  CD 21				 int 21h
    650	    033D  49			     dec cx
    651	    033E  83 F9	00		     cmp cx, 0
    652	    0341  75 F3			     jne _print_pseudographic_prefix_loop
    653	    0343			 _print_pseudographic_prefix_zero_level:
    654
    655	    0343  8B 1E	04B0r		     mov bx, word ptr [current_max_entities]
    656	    0347  3A C3			     cmp al, bl
    657	    0349  74 19			     je	_print_pseudographic_prefix_zero_level_end
    658	    034B  3D 0001		     cmp ax, 1
    659	    034E  74 02			     je	_print_pseudographic_prefix_zero_level_first
    660	    0350  EB 09			     jmp _print_pseudographic_prefix_zero_level_middle
    661	    0352			 _print_pseudographic_prefix_zero_level_first:
    662					     print_range <first_file_char>
2   663						 print <offset first_file_char>
3   664	    0352  B4 09				 mov ah, 09h
3   665	    0354  BA 04CAr			 mov dx, offset	first_file_char
3   666	    0357  CD 21				 int 21h
    667	    0359  EB 12			     jmp _print_pseudographic_prefix_end
    668	    035B			 _print_pseudographic_prefix_zero_level_middle:
    669					     print_range <middle_file_char>
2   670						 print <offset middle_file_char>
3   671	    035B  B4 09				 mov ah, 09h
3   672	    035D  BA 04CCr			 mov dx, offset	middle_file_char
3   673	    0360  CD 21				 int 21h
    674	    0362  EB 09			     jmp _print_pseudographic_prefix_end
    675	    0364			 _print_pseudographic_prefix_zero_level_end:
    676					     print_range <end_file_char>
2   677						 print <offset end_file_char>
3   678	    0364  B4 09				 mov ah, 09h
3   679	    0366  BA 04CEr			 mov dx, offset	end_file_char
3   680	    0369  CD 21				 int 21h
    681	    036B  EB 00			     jmp _print_pseudographic_prefix_end
    682	    036D			 _print_pseudographic_prefix_end:
    683	    036D  C3			     ret
    684	    036E			 cd:
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 13
2tree.ASM



    685	    036E  5B			     pop bx ; ret addr
    686	    036F  5A			     pop dx ; root address
    687	    0370  53			     push bx ; ret addr
    688
    689					     load <dx>
2   690	    0371  52				 push dx
    691	    0372  33 C0			     xor ax, ax
    692	    0374  B4 3B			     mov ah, 3Bh
    693	    0376  CD 21			     int 21h
    694
    695	    0378  72 02			     jc	cd_error
    696					     restore <dx>
2   697	    037A  5A				 pop dx
    698	    037B  C3			     ret
    699	    037C			 cd_error:
    700					     print_range <cd_fails, newline>
2   701						 print <offset cd_fails>
3   702	    037C  B4 09				 mov ah, 09h
3   703	    037E  BA 0461r			 mov dx, offset	cd_fails
3   704	    0381  CD 21				 int 21h
2   705						 print <offset newline>
3   706	    0383  B4 09				 mov ah, 09h
3   707	    0385  BA 0593r			 mov dx, offset	newline
3   708	    0388  CD 21				 int 21h
    709					     restore <dx>
2   710	    038A  5A				 pop dx
    711
    712	    038B  B4 09				 mov ah, 09h
    713	    038D  CD 21			     int 21h
    714
    715					     print_range <newline>
2   716						 print <offset newline>
3   717	    038F  B4 09				 mov ah, 09h
3   718	    0391  BA 0593r			 mov dx, offset	newline
3   719	    0394  CD 21				 int 21h
    720					     exit
1   721	    0396  B4 00			     mov ah, 00h
1   722	    0398  CD 21			     int 21h
    723	    039A  C3			     ret
    724
    725	    039B			 set_dta:
    726	    039B  5B			     pop bx
    727	    039C  59			     pop cx			 ; deep	level
    728	    039D  53			     push bx
    729
    730	    039E  BA 0595r		     mov dx, offset dta
    731					     load <dx>
2   732	    03A1  52				 push dx
    733	    03A2  33 C0			     xor ax, ax
    734	    03A4  A0 0460r		     mov al, byte ptr [dta_len]
    735	    03A7  F7 E1			     mul cx
    736
    737					     restore <dx>
2   738	    03A9  5A				 pop dx
    739	    03AA  03 D0			     add dx, ax
    740
    741	    03AC  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 14
2tree.ASM



    742	    03AE  B4 1A			     mov ah, 1Ah
    743	    03B0  CD 21			     int 21h
    744
    745	    03B2  C3			     ret
    746
    747	    03B3			 save_cwd:
    748	    03B3  BE 04D3r		     mov si, offset working_folder
    749
    750					     ;
    751					     ; save driver
    752					     ;
    753	    03B6  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    754	    03B8  CD 21			     int 21h
    755	    03BA  8A D0			     mov dl, al
    756	    03BC  80 C2	41		     add dl, 41h
    757	    03BF  88 14			     mov byte ptr [si],	dl
    758	    03C1  46			     inc si
    759	    03C2  C6 04	3A		     mov byte ptr [si],	':'
    760	    03C5  46			     inc si
    761	    03C6  C6 04	5C		     mov byte ptr [si],	'\'
    762	    03C9  46			     inc si
    763
    764					     ;
    765					     ; save folder
    766					     ;
    767	    03CA  32 D2			     xor dl, dl			 ; Actual drive
    768	    03CC  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    769	    03CE  CD 21			     int 21h
    770	    03D0  C3			     ret
    771	    03D1			 print_string_with_length:
    772	    03D1  5B			     pop bx ; ret address
    773	    03D2  5E			     pop si ; string offset
    774	    03D3  59			     pop cx ; string length
    775	    03D4  53			     push bx; ret address
    776	    03D5  33 C0			     xor ax, ax
    777	    03D7			 _print_string_with_length_loop:
    778	    03D7  B4 02			     mov ah, 02h
    779	    03D9  8A 14			     mov dl, byte ptr [si]
    780	    03DB  CD 21			     int 21h
    781	    03DD  49			     dec cx
    782	    03DE  46			     inc si
    783	    03DF  83 F9	00		     cmp cx, 00h
    784	    03E2  74 02			     je	_print_string_with_length_end
    785	    03E4  EB F1			     jmp _print_string_with_length_loop
    786	    03E6			 _print_string_with_length_end:
    787	    03E6  C3			     ret
    788	    03E7			 count_no_space_no_zero_letters:
    789	    03E7  5B			     pop bx ; ret address
    790	    03E8  5E			     pop si ; string offset
    791	    03E9  59			     pop cx ; string length
    792	    03EA  53			     push bx ; ret address
    793	    03EB  B8 0000		     mov ax, 0
    794	    03EE			 _count_non_space_symbols_loop:
    795	    03EE  80 3C	20		     cmp byte ptr [si],	20h
    796	    03F1  74 12			     je	_count_non_space_symbols_end
    797	    03F3  80 3C	0D		     cmp byte ptr [si],	0Dh
    798	    03F6  74 0D			     je	_count_non_space_symbols_end
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 15
2tree.ASM



    799	    03F8  80 3C	00		     cmp byte ptr [si],	00h
    800	    03FB  74 08			     je	_count_non_space_symbols_end
    801	    03FD  3B C1			     cmp ax, cx
    802	    03FF  74 04			     je	_count_non_space_symbols_end
    803	    0401  40			     inc ax
    804	    0402  46			     inc si
    805	    0403  EB E9			     jmp _count_non_space_symbols_loop
    806	    0405			 _count_non_space_symbols_end:
    807	    0405  C3			     ret
    808	    0406			 count_subfiles_here:
    809	    0406  B8 04B5r		     mov ax, offset file_mask
    810	    0409  BE 02D4r		     mov si, offset find_first_folder
    811
    812	    040C  50			     push ax
    813	    040D  56			     push si
    814	    040E  E8 0017		     call count_subfiles_here_by_mask
    815					     load <ax>
2   816	    0411  50				 push ax
    817	    0412  B8 04BBr		     mov ax, offset folder_mask
    818	    0415  BE 02C7r		     mov si, offset find_first_file
    819
    820	    0418  50			     push ax
    821	    0419  56			     push si
    822	    041A  E8 000B		     call count_subfiles_here_by_mask
    823	    041D  8B D8			     mov bx, ax
    824					     restore <ax>
2   825	    041F  58				 pop ax
    826	    0420  03 D8			     add bx, ax
    827	    0422  8B C3			     mov ax, bx
    828	    0424  A3 04B0r		     mov word ptr [current_max_entities], ax
    829	    0427  C3			     ret
    830	    0428			 count_subfiles_here_by_mask:
    831	    0428  5B			     pop bx
    832	    0429  5E			     pop si		 ; find_first address
    833	    042A  58			     pop ax		 ; mask	address
    834	    042B  53			     push bx
    835
    836					     load <ax, si>
2   837	    042C  50				 push ax
2   838	    042D  56				 push si
    839	    042E  B9 000B		     mov cx, 11		 ; set pointer to count_dta
    840	    0431  51			     push cx
    841	    0432  E8 FF66		     call set_dta
    842					     restore <si, ax>
2   843	    0435  5E				 pop si
2   844	    0436  58				 pop ax
    845
    846	    0437  B9 0000		     mov cx, 0
    847					     load <cx>
2   848	    043A  51				 push cx
    849	    043B  50			     push ax
    850	    043C  FF D6			     call si
    851	    043E  72 1B			     jc	_count_subfiles_from_end
    852	    0440			 _count_subfiles_from_loop:
    853	    0440  B9 000B		     mov cx, 11
    854	    0443  51			     push cx
    855	    0444  E8 FDE8		     call move_dta
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 16
2tree.ASM



    856	    0447  05 001E		     add ax, 1Eh
    857	    044A  8B D8			     mov bx, ax
    858	    044C  80 3F	2E		     cmp byte ptr [bx],	'.'
    859	    044F  74 03			     je	_count_subfiles_from_loop_next
    860
    861					     restore <cx>
2   862	    0451  59				 pop cx
    863	    0452  41			     inc cx
    864					     load <cx>
2   865	    0453  51				 push cx
    866	    0454			 _count_subfiles_from_loop_next:
    867	    0454  E8 FE6B		     call find_next
    868	    0457  72 02			     jc	_count_subfiles_from_end
    869
    870	    0459  EB E5			     jmp _count_subfiles_from_loop
    871	    045B			 _count_subfiles_from_end:
    872					     restore <cx>
2   873	    045B  59				 pop cx
    874	    045C  8B C1			     mov ax, cx
    875	    045E  C3			     ret
    876					 ;
    877					 ; error codes
    878					 ;
    879	    045F  12			 no_more_files db 18
    880	    0460  2B			 dta_len db 2bh
    881
    882					 ;
    883					 ; error messages
    884					 ;
    885	    0461  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    886		  64 69	72 65 63 74 6F+
    887		  72 79	20 66 61 69 6C+
    888		  73 2E	24
    889	    0479  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    890		  72 73	74 20 66 69 6C+
    891		  65 6E	61 6D 65 73 20+
    892		  66 61	69 6C 73 2E 24
    893	    0495  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    894		  78 74	20 66 69 6C 65+
    895		  6E 61	6D 65 73 20 66+
    896		  61 69	6C 73 2E 24
    897
    898					 ;
    899					 ; int variables
    900					 ;
    901	    04B0  0000			 current_max_entities dw 0
    902	    04B2  0000			 current_id_entity dw 0
    903
    904					 ;
    905					 ;   parse arguments
    906					 ;
    907	    04B4  01			 deep_level db 1
    908	    04B5  2A			 file_mask db '*'
    909	    04B6  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    910	    04BB  2A 00			 folder_mask db	'*', 00h
    911	    04BD  2A 2E	2A 00		 all_files db '*.*', 00h
    912
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 17
2tree.ASM



    913					 ;
    914					 ;   pseudographic
    915					 ;
    916	    04C1  B3 24			 level_shift db	179, '$'
    917	    04C3  ?? 20	24		 space db, 32, '$'
    918
    919	    04C6  C3 24			 zero_first_file db 195, '$'
    920	    04C8  C0 24			 zero_end_file db 192, '$'
    921
    922	    04CA  C2 24			 first_file_char db 194, '$'
    923	    04CC  C3 24			 middle_file_char db 195, '$'
    924	    04CE  C0 24			 end_file_char db 192, '$'
    925
    926					 ;
    927					 ; strings
    928					 ;
    929	    04D0  2E 2E	00		 parent_folder db '..',	00h
    930	    04D3  40*(00)		 working_folder	db 64 dup(00h)
    931	    0513  40*(00)		 root_folder db	64 dup(00h)
    932	    0553  40*(00)		 start_mask db 64 dup(00h)
    933	    0593  0A 24			 newline db 0Ah, '$'
    934	    0595  10CC*(00)		 dta db	4300 dup(0)
    935	    1661  2B*(00)		 count_dta db 43 dup(0)
    936					 end start
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 18
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/10/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "00:37:17"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALL_FILES			  Byte	 DGROUP:04BD
CD				  Near	 DGROUP:036E
CD_ERROR			  Near	 DGROUP:037C
CD_FAILS			  Byte	 DGROUP:0461
COUNT_DTA			  Byte	 DGROUP:1661
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:03E7
COUNT_SUBFILES_HERE		  Near	 DGROUP:0406
COUNT_SUBFILES_HERE_BY_MASK	  Near	 DGROUP:0428
CURRENT_ID_ENTITY		  Word	 DGROUP:04B2
CURRENT_MAX_ENTITIES		  Word	 DGROUP:04B0
DEEP_LEVEL			  Byte	 DGROUP:04B4
DTA				  Byte	 DGROUP:0595
DTA_LEN				  Byte	 DGROUP:0460
END_FILE_CHAR			  Byte	 DGROUP:04CE
FILE_EXT			  Byte	 DGROUP:04B6
FILE_MASK			  Byte	 DGROUP:04B5
FIND_FIRST_ERROR		  Near	 DGROUP:0264
FIND_FIRST_FAILS		  Byte	 DGROUP:0479
FIND_FIRST_FILE			  Near	 DGROUP:02C7
FIND_FIRST_FOLDER		  Near	 DGROUP:02D4
FIND_NEXT			  Near	 DGROUP:02C2
FIND_NEXT_ERROR			  Near	 DGROUP:0273
FIND_NEXT_FAILS			  Byte	 DGROUP:0495
FIRST_FILE_CHAR			  Byte	 DGROUP:04CA
FOLDER_MASK			  Byte	 DGROUP:04BB
IS_FOLDER			  Near	 DGROUP:0241
IS_VALID_NAME			  Near	 DGROUP:02E1
LEVEL_SHIFT			  Byte	 DGROUP:04C1
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0163
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0135
MIDDLE_FILE_CHAR		  Byte	 DGROUP:04CC
MOVE_DTA			  Near	 DGROUP:022F
NEWLINE				  Byte	 DGROUP:0593
NO_MORE_FILES			  Byte	 DGROUP:045F
PARENT_FOLDER			  Byte	 DGROUP:04D0
PARSE_ARGS			  Near	 DGROUP:029A
PARSE_COMMAND_LINE		  Near	 DGROUP:0285
PARSE_D				  Near	 DGROUP:02A8
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 19
Symbol Table



PARSE_END			  Near	 DGROUP:02C1
PARSE_F				  Near	 DGROUP:02B5
PRINT_PSEUDOGRAPHIC_PREFIX	  Near	 DGROUP:032D
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:03D1
ROOT_FOLDER			  Byte	 DGROUP:0513
SAVE_CWD			  Near	 DGROUP:03B3
SET_DTA				  Near	 DGROUP:039B
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:02F9
SPACE				  Byte	 DGROUP:04C3
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0553
WORKING_FOLDER			  Byte	 DGROUP:04D3
ZERO_END_FILE			  Byte	 DGROUP:04C8
ZERO_FIRST_FILE			  Byte	 DGROUP:04C6
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0405
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:03EE
_COUNT_SUBFILES_FROM_END	  Near	 DGROUP:045B
_COUNT_SUBFILES_FROM_LOOP	  Near	 DGROUP:0440
_COUNT_SUBFILES_FROM_LOOP_NEXT	  Near	 DGROUP:0454
_IS_FOLDER_END			  Near	 DGROUP:0263
_IS_FOLDER_FALSE		  Near	 DGROUP:025E
_IS_FOLDER_TRUE			  Near	 DGROUP:0259
_IS_VALID_NAME_END		  Near	 DGROUP:02F8
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:022A
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0185
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:021D
_PRINT_PSEUDOGRAPHIC_PREFIX_END	  Near	 DGROUP:036D
_PRINT_PSEUDOGRAPHIC_PREFIX_LOOP  Near	 DGROUP:0336
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0343
_LEVEL
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0364
_LEVEL_END
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:0352
_LEVEL_FIRST
_PRINT_PSEUDOGRAPHIC_PREFIX_ZERO  Near	 DGROUP:035B
_LEVEL_MIDDLE
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:03E6
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:03D7
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:02FD
ME

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
Turbo Assembler	 Version 4.1	    12/10/19 00:37:18	    Page 20
Symbol Table



SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  168C Word	  Public  CODE
