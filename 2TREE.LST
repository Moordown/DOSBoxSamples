Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 00C1		     call save_cwd
    151	    0103  B8 036Fr		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  E8 00B0		     call set_dta
    154	    010A  E8 004D		     call parse_command_line
    155	    010D  B8 02E5r		     mov ax, offset root_folder
    156	    0110  50			     push ax
    157	    0111  E8 008B		     call cd
    158	    0114  B8 0367r		     mov ax, offset file_mask
    159	    0117  50			     push ax
    160	    0118  E8 005A		     call find_first
    161	    011B  72 19			     jc	find_first_error
    162	    011D			 find_loop:
    163	    011D  E8 0062		     call show_filename_from_dta
    164	    0120  E8 004D		     call find_next
    165	    0123  73 F8			     jnc find_loop
    166	    0125  3A 06	0255r		     cmp al, byte ptr [no_more_files]
    167	    0129  75 1D			     jne find_next_error
    168	    012B			 program_end:
    169	    012B  B8 02A5r		     mov ax, offset working_folder
    170	    012E  50			     push ax
    171	    012F  E8 006D		     call cd
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 4
2tree.ASM



    172					     exit
1   173	    0132  B4 00			     mov ah, 00h
1   174	    0134  CD 21			     int 21h
    175
    176	    0136			 find_first_error:
    177					     print_range <find_first_fails, newline>
2   178						 print <offset find_first_fails>
3   179	    0136  B4 09				 mov ah, 09h
3   180	    0138  BA 026Er			 mov dx, offset	find_first_fails
3   181	    013B  CD 21				 int 21h
2   182						 print <offset newline>
3   183	    013D  B4 09				 mov ah, 09h
3   184	    013F  BA 036Dr			 mov dx, offset	newline
3   185	    0142  CD 21				 int 21h
    186					     exit
1   187	    0144  B4 00			     mov ah, 00h
1   188	    0146  CD 21			     int 21h
    189	    0148			 find_next_error:
    190					     print_range <find_next_fails, newline>
2   191						 print <offset find_next_fails>
3   192	    0148  B4 09				 mov ah, 09h
3   193	    014A  BA 028Ar			 mov dx, offset	find_next_fails
3   194	    014D  CD 21				 int 21h
2   195						 print <offset newline>
3   196	    014F  B4 09				 mov ah, 09h
3   197	    0151  BA 036Dr			 mov dx, offset	newline
3   198	    0154  CD 21				 int 21h
    199					     exit
1   200	    0156  B4 00			     mov ah, 00h
1   201	    0158  CD 21			     int 21h
    202	    015A			 parse_command_line:
    203					     ;
    204					     ; prepare root folder
    205					     ;
    206	    015A  BE 0082		     mov si, 82h
    207	    015D  B9 0040		     mov cx, 64
    208	    0160  51			     push cx
    209	    0161  56			     push si
    210	    0162  E8 00D1		     call count_no_space_no_zero_letters
    211	    0165  8B C8			     mov cx, ax
    212	    0167  BE 0082		     mov si, 82h
    213	    016A  BF 02E5r		     mov di, offset root_folder
    214	    016D  F3> A4		     rep movsb
    215	    016F  C3			     ret
    216	    0170			 find_next:
    217	    0170  B4 4F			     mov ah, 4Fh
    218	    0172  CD 21			     int 21h
    219
    220	    0174  C3			     ret
    221
    222	    0175			 find_first:
    223	    0175  5B			     pop bx
    224	    0176  5A			     pop dx		 ; filename spec
    225	    0177  B9 0010		     mov cx, 10h	 ; include directories
    226	    017A  53			     push bx
    227
    228	    017B  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 5
2tree.ASM



    229	    017D  B4 4E			     mov ah, 4Eh
    230	    017F  CD 21			     int 21h
    231	    0181  C3			     ret
    232	    0182			 show_filename_from_dta:
    233	    0182  B8 038Dr		     mov ax, offset dta	+ 1Eh
    234	    0185  B9 000D		     mov cx, 13
    235	    0188  51			     push cx
    236	    0189  50			     push ax
    237	    018A  E8 00A9		     call count_no_space_no_zero_letters
    238	    018D  8B C8			     mov cx, ax
    239	    018F  B8 038Dr		     mov ax, offset dta	+ 1Eh
    240	    0192  51			     push cx
    241	    0193  50			     push ax
    242	    0194  E8 0089		     call print_string_with_length
    243					     print_range <newline>
2   244						 print <offset newline>
3   245	    0197  B4 09				 mov ah, 09h
3   246	    0199  BA 036Dr			 mov dx, offset	newline
3   247	    019C  CD 21				 int 21h
    248	    019E  C3			     ret
    249	    019F			 cd:
    250	    019F  5B			     pop bx ; ret addr
    251	    01A0  5A			     pop dx ; root address
    252	    01A1  53			     push bx ; ret addr
    253
    254	    01A2  33 C0			     xor ax, ax
    255	    01A4  B4 3B			     mov ah, 3Bh
    256	    01A6  CD 21			     int 21h
    257
    258	    01A8  72 01			     jc	cd_error
    259	    01AA  C3			     ret
    260	    01AB			 cd_error:
    261					     print_range <cd_fails, newline>
2   262						 print <offset cd_fails>
3   263	    01AB  B4 09				 mov ah, 09h
3   264	    01AD  BA 0256r			 mov dx, offset	cd_fails
3   265	    01B0  CD 21				 int 21h
2   266						 print <offset newline>
3   267	    01B2  B4 09				 mov ah, 09h
3   268	    01B4  BA 036Dr			 mov dx, offset	newline
3   269	    01B7  CD 21				 int 21h
    270	    01B9  C3			     ret
    271
    272	    01BA			 set_dta:
    273	    01BA  5B			     pop bx
    274	    01BB  5A			     pop dx			 ; dta address offset
    275	    01BC  53			     push bx
    276
    277	    01BD  33 C0			     xor ax, ax
    278	    01BF  B4 1A			     mov ah, 1Ah
    279	    01C1  CD 21			     int 21h
    280
    281	    01C3  C3			     ret
    282
    283	    01C4			 save_cwd:
    284	    01C4  BE 02A5r		     mov si, offset working_folder
    285
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 6
2tree.ASM



    286					     ;
    287					     ; save driver
    288					     ;
    289	    01C7  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    290	    01C9  CD 21			     int 21h
    291	    01CB  8A D0			     mov dl, al
    292	    01CD  80 C2	41		     add dl, 41h
    293	    01D0  88 14			     mov byte ptr [si],	dl
    294	    01D2  46			     inc si
    295	    01D3  C6 04	3A		     mov byte ptr [si],	':'
    296	    01D6  46			     inc si
    297	    01D7  C6 04	5C		     mov byte ptr [si],	'\'
    298	    01DA  46			     inc si
    299
    300					     ;
    301					     ; save folder
    302					     ;
    303	    01DB  32 D2			     xor dl, dl			 ; Actual drive
    304	    01DD  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    305	    01DF  CD 21			     int 21h
    306	    01E1  C3			     ret
    307	    01E2			 copy_root_from_comand_line:
    308					     ;
    309					     ;	 copy root folder
    310					     ;
    311	    01E2  33 C0			     xor ax, ax
    312	    01E4  BE 0080		     mov si, 80h
    313	    01E7  8A 04			     mov al, byte ptr [si]
    314	    01E9  48			     dec ax		     ; remove last 0Dh byte
    315
    316	    01EA  BF 0325r		     mov di, offset start_mask
    317	    01ED  BE 0082		     mov si, 82h	     ; start non space root dir
    318	    01F0  33 C9			     xor cx, cx
    319	    01F2  8A C8			     mov cl, al
    320	    01F4  FC			     cld
    321	    01F5  F3> A4		     rep movsb
    322
    323					     ;
    324					     ;	 add mask for search to	path
    325					     ;
    326	    01F7  B8 0325r		     mov ax, offset start_mask
    327	    01FA  B9 000D		     mov cx, 13
    328	    01FD  51			     push cx
    329	    01FE  50			     push ax
    330	    01FF  E8 0034		     call count_no_space_no_zero_letters
    331	    0202  BE 0325r		     mov si, offset start_mask
    332	    0205  03 F0			     add si, ax
    333	    0207  BF 0367r		     mov di, offset file_mask
    334	    020A  B9 0005		     mov cx, 5
    335	    020D  F3> A4		     rep movsb
    336
    337	    020F  C3			     ret
    338	    0210			 skip_spaces:
    339	    0210  33 C0			     xor ax, ax
    340	    0212  5B			     pop bx ; ret addr
    341	    0213  5E			     pop si ; str addr
    342	    0214  53			     push bx ; ret addr
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 7
2tree.ASM



    343	    0215			 _skip_spaces_loop:
    344	    0215  80 3C	20		     cmp byte ptr [si],	20h
    345	    0218  75 03			     jne _skip_spaces_end
    346	    021A  46			     inc si
    347	    021B  EB F8			     jmp _skip_spaces_loop
    348	    021D			 _skip_spaces_end:
    349	    021D  8B C6			     mov ax, si
    350	    021F  C3			     ret
    351	    0220			 print_string_with_length:
    352	    0220  5B			     pop bx ; ret address
    353	    0221  5E			     pop si ; string offset
    354	    0222  59			     pop cx ; string length
    355	    0223  53			     push bx; ret address
    356	    0224  33 C0			     xor ax, ax
    357	    0226			 _print_string_with_length_loop:
    358	    0226  B4 02			     mov ah, 02h
    359	    0228  8A 14			     mov dl, byte ptr [si]
    360	    022A  CD 21			     int 21h
    361	    022C  49			     dec cx
    362	    022D  46			     inc si
    363	    022E  83 F9	00		     cmp cx, 00h
    364	    0231  74 02			     je	_print_string_with_length_end
    365	    0233  EB F1			     jmp _print_string_with_length_loop
    366	    0235			 _print_string_with_length_end:
    367	    0235  C3			     ret
    368	    0236			 count_no_space_no_zero_letters:
    369	    0236  5B			     pop bx ; ret address
    370	    0237  5E			     pop si ; string offset
    371	    0238  59			     pop cx ; string length
    372	    0239  53			     push bx ; ret address
    373	    023A  B8 0000		     mov ax, 0
    374	    023D			 _count_non_space_symbols_loop:
    375	    023D  80 3C	20		     cmp byte ptr [si],	20h
    376	    0240  74 12			     je	_count_non_space_symbols_end
    377	    0242  80 3C	0D		     cmp byte ptr [si],	0Dh
    378	    0245  74 0D			     je	_count_non_space_symbols_end
    379	    0247  80 3C	00		     cmp byte ptr [si],	00h
    380	    024A  74 08			     je	_count_non_space_symbols_end
    381	    024C  3B C1			     cmp ax, cx
    382	    024E  74 04			     je	_count_non_space_symbols_end
    383	    0250  40			     inc ax
    384	    0251  46			     inc si
    385	    0252  EB E9			     jmp _count_non_space_symbols_loop
    386	    0254			 _count_non_space_symbols_end:
    387	    0254  C3			     ret
    388					 ;
    389					 ; error codes
    390					 ;
    391	    0255  12			 no_more_files db 18
    392					 ;
    393					 ; error messages
    394					 ;
    395	    0256  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    396		  64 69	72 65 63 74 6F+
    397		  72 79	20 66 61 69 6C+
    398		  73 2E	24
    399	    026E  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 8
2tree.ASM



    400		  72 73	74 20 66 69 6C+
    401		  65 6E	61 6D 65 73 20+
    402		  66 61	69 6C 73 2E 24
    403	    028A  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    404		  78 74	20 66 69 6C 65+
    405		  6E 61	6D 65 73 20 66+
    406		  61 69	6C 73 2E 24
    407					 ;
    408					 ; strings
    409					 ;
    410	    02A5  40*(00)		 working_folder	db 64 dup(00h)
    411	    02E5  40*(00)		 root_folder db	64 dup(00h)
    412	    0325  40*(00)		 start_mask db 64 dup(00h)
    413	    0365  2A 00			 folder_mask db	'*', 00h
    414	    0367  2A 2E			 file_mask db '*.'
    415	    0369  74 78	74 00		 file_ext db 'txt', 00h
    416
    417	    036D  0A 24			 newline db 0Ah, '$'
    418	    036F  30*(00)		 dta db	48 dup(0)
    419					 end start
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/07/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "15:04:49"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:019F
CD_ERROR			  Near	 DGROUP:01AB
CD_FAILS			  Byte	 DGROUP:0256
COPY_ROOT_FROM_COMAND_LINE	  Near	 DGROUP:01E2
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:0236
DTA				  Byte	 DGROUP:036F
FILE_EXT			  Byte	 DGROUP:0369
FILE_MASK			  Byte	 DGROUP:0367
FIND_FIRST			  Near	 DGROUP:0175
FIND_FIRST_ERROR		  Near	 DGROUP:0136
FIND_FIRST_FAILS		  Byte	 DGROUP:026E
FIND_LOOP			  Near	 DGROUP:011D
FIND_NEXT			  Near	 DGROUP:0170
FIND_NEXT_ERROR			  Near	 DGROUP:0148
FIND_NEXT_FAILS			  Byte	 DGROUP:028A
FOLDER_MASK			  Byte	 DGROUP:0365
NEWLINE				  Byte	 DGROUP:036D
NO_MORE_FILES			  Byte	 DGROUP:0255
PARSE_COMMAND_LINE		  Near	 DGROUP:015A
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:0220
PROGRAM_END			  Near	 DGROUP:012B
ROOT_FOLDER			  Byte	 DGROUP:02E5
SAVE_CWD			  Near	 DGROUP:01C4
SET_DTA				  Near	 DGROUP:01BA
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0182
SKIP_SPACES			  Near	 DGROUP:0210
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:0325
WORKING_FOLDER			  Byte	 DGROUP:02A5
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0254
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:023D
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:0235
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:0226
_SKIP_SPACES_END		  Near	 DGROUP:021D
_SKIP_SPACES_LOOP		  Near	 DGROUP:0215
Turbo Assembler	 Version 4.1	    12/07/19 15:04:49	    Page 10
Symbol Table




Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  039F Word	  Public  CODE
