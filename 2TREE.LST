Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 017E		     call save_cwd
    151	    0103  B8 03F2r		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  B9 0000		     mov cx, 0
    154	    010A  51			     push cx
    155	    010B  E8 015F		     call set_dta
    156	    010E  E8 00C9		     call parse_command_line
    157
    158					     ;
    159					     ;	 start tree
    160					     ;
    161	    0111  B8 0370r		     mov ax, offset root_folder
    162	    0114  B9 0000		     mov cx, 0
    163	    0117  51			     push cx
    164	    0118  50			     push ax
    165	    0119  E8 000B		     call list_subfiles_recursive_from
    166
    167					     ;
    168					     ;	 cd to start folder
    169					     ;
    170	    011C  B8 0330r		     mov ax, offset working_folder
    171	    011F  50			     push ax
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 4
2tree.ASM



    172	    0120  E8 012F		     call cd
    173					     exit
1   174	    0123  B4 00			     mov ah, 00h
1   175	    0125  CD 21			     int 21h
    176
    177	    0127			 list_subfiles_recursive_from:
    178	    0127  5B			     pop bx	 ; ret address
    179	    0128  58			     pop ax	 ; deep	level
    180	    0129  59			     pop cx	 ; root	folder offset
    181	    012A  53			     push bx
    182					     load <cx>
2   183	    012B  51				 push cx
    184	    012C  50			     push ax
    185	    012D  E8 0122		     call cd
    186					     restore <cx>
2   187	    0130  59				 pop cx
    188
    189					     ;
    190					     ; list subfolder
    191					     ;
    192	    0131  B8 032Br		     mov ax, offset folder_mask
    193					     load <cx>
2   194	    0134  51				 push cx
    195	    0135  50			     push ax
    196	    0136  51			     push cx
    197	    0137  E8 000C		     call list_subfiles_recursive
    198					     restore <cx>
2   199	    013A  59				 pop cx
    200
    201					     ;
    202					     ; list files
    203					     ;
    204	    013B  B8 0325r		     mov ax, offset file_mask
    205					     load <cx>
2   206	    013E  51				 push cx
    207	    013F  50			     push ax
    208	    0140  51			     push cx
    209	    0141  E8 0002		     call list_subfiles_recursive
    210					     restore <cx>
2   211	    0144  59				 pop cx
    212	    0145  C3			     ret
    213
    214	    0146			 list_subfiles_recursive:
    215	    0146  5B			     pop bx
    216	    0147  59			     pop cx ; deep level
    217	    0148  58			     pop ax ; filemask offset
    218	    0149  53			     push bx
    219					     ; mov ax, offset file_mask
    220
    221					     ; load <cx, ax>
    222					     ; mov ax, offset dta
    223					     ; push ax
    224					     ; push cx
    225					     ; call set_dta
    226					     ; restore <ax, cx>
    227
    228					     load <cx>
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 5
2tree.ASM



2   229	    014A  51				 push cx
    230	    014B  50			     push ax
    231	    014C  E8 00CD		     call find_first
    232	    014F  72 65			     jc	find_first_error
    233	    0151			 _list_subfiles_recursive_loop:
    234	    0151  E8 00D5		     call show_filename_from_dta
    235	    0154  3D 0001		     cmp ax, 1
    236	    0157  75 39			     jne _list_subfiles_recursive_next
    237
    238					     ;
    239					     ;	 check if folder
    240					     ;
    241	    0159  E8 0043		     call is_folder
    242	    015C  3D 0001		     cmp ax, 1
    243	    015F  75 31			     jne _list_subfiles_recursive_next
    244
    245					     ;
    246					     ;	 check deep level
    247					     ;
    248					     restore <cx>
2   249	    0161  59				 pop cx
    250					     load <cx>
2   251	    0162  51				 push cx
    252	    0163  33 DB			     xor bx, bx
    253	    0165  8A 1E	0324r		     mov bl, byte ptr [deep_level]
    254	    0169  3B CB			     cmp cx, bx
    255	    016B  7D 25			     jge _list_subfiles_recursive_next
    256
    257					     ;
    258					     ; start new search
    259					     ;
    260
    261					     ;
    262					     ;	 cd to subfolder
    263					     ;
    264					     load <cx>
2   265	    016D  51				 push cx
    266	    016E  B8 0410r		     mov ax, offset dta	+ 1Eh
    267	    0171  50			     push ax
    268	    0172  E8 00DD		     call cd
    269					     restore <cx>
2   270	    0175  59				 pop cx
    271
    272	    0176  41			     inc cx
    273					     ;
    274					     ;	 list subfiles from subfolder
    275					     ;
    276					     load <cx>
2   277	    0177  51				 push cx
    278	    0178  B8 0325r		     mov ax, offset file_mask
    279	    017B  50			     push ax
    280	    017C  51			     push cx
    281	    017D  E8 FFC6		     call list_subfiles_recursive
    282					     restore <cx>
2   283	    0180  59				 pop cx
    284
    285
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 6
2tree.ASM



    286					     ;
    287					     ;	 list subfolders from subfolder
    288					     ;
    289					     load <cx>
2   290	    0181  51				 push cx
    291	    0182  B8 032Br		     mov ax, offset folder_mask
    292	    0185  50			     push ax
    293	    0186  51			     push cx
    294	    0187  E8 FFBC		     call list_subfiles_recursive
    295					     restore <cx>
2   296	    018A  59				 pop cx
    297
    298
    299					     ;
    300					     ;	 cd to this function
    301					     ;
    302	    018B  B8 032Dr		     mov ax, offset parent_folder
    303	    018E  50			     push ax
    304	    018F  E8 00C0		     call cd
    305
    306	    0192			 _list_subfiles_recursive_next:
    307	    0192  E8 0082		     call find_next
    308	    0195  73 BA			     jnc _list_subfiles_recursive_loop
    309	    0197  3A 06	02D4r		     cmp al, byte ptr [no_more_files]
    310	    019B  75 2B			     jne find_next_error
    311	    019D			 _list_subfiles_recursive_end:
    312					     restore <cx>
2   313	    019D  59				 pop cx
    314	    019E  C3			     ret
    315
    316	    019F			 is_folder:
    317	    019F  BB 0407r		     mov bx, offset dta	+ 15h
    318	    01A2  8A 1F			     mov bl, byte ptr [bx]
    319	    01A4  80 FB	10		     cmp bl, 10h
    320	    01A7  74 02			     je	_is_folder_true
    321	    01A9  75 05			     jne _is_folder_false
    322	    01AB			 _is_folder_true:
    323	    01AB  B8 0001		     mov ax, 1
    324	    01AE  EB 05			     jmp _is_folder_end
    325	    01B0			 _is_folder_false:
    326	    01B0  B8 0000		     mov ax, 0
    327	    01B3  EB 00			     jmp _is_folder_end
    328	    01B5			 _is_folder_end:
    329	    01B5  C3			     ret
    330
    331
    332
    333	    01B6			 find_first_error:
    334					     print_range <find_first_fails, newline>
2   335						 print <offset find_first_fails>
3   336	    01B6  B4 09				 mov ah, 09h
3   337	    01B8  BA 02EDr			 mov dx, offset	find_first_fails
3   338	    01BB  CD 21				 int 21h
2   339						 print <offset newline>
3   340	    01BD  B4 09				 mov ah, 09h
3   341	    01BF  BA 03F0r			 mov dx, offset	newline
3   342	    01C2  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 7
2tree.ASM



    343					     exit
1   344	    01C4  B4 00			     mov ah, 00h
1   345	    01C6  CD 21			     int 21h
    346	    01C8			 find_next_error:
    347					     print_range <find_next_fails, newline>
2   348						 print <offset find_next_fails>
3   349	    01C8  B4 09				 mov ah, 09h
3   350	    01CA  BA 0309r			 mov dx, offset	find_next_fails
3   351	    01CD  CD 21				 int 21h
2   352						 print <offset newline>
3   353	    01CF  B4 09				 mov ah, 09h
3   354	    01D1  BA 03F0r			 mov dx, offset	newline
3   355	    01D4  CD 21				 int 21h
    356					     exit
1   357	    01D6  B4 00			     mov ah, 00h
1   358	    01D8  CD 21			     int 21h
    359
    360	    01DA			 parse_command_line:
    361					     ;
    362					     ; prepare root folder
    363					     ;
    364	    01DA  BE 0082		     mov si, 82h
    365	    01DD  B9 0040		     mov cx, 64
    366	    01E0  51			     push cx
    367	    01E1  56			     push si
    368	    01E2  E8 00D0		     call count_no_space_no_zero_letters
    369	    01E5  8B C8			     mov cx, ax
    370	    01E7  BE 0082		     mov si, 82h
    371	    01EA  BF 0370r		     mov di, offset root_folder
    372	    01ED  F3> A4		     rep movsb
    373
    374	    01EF			 parse_args:
    375	    01EF  46			     inc si
    376	    01F0  46			     inc si
    377	    01F1  80 3C	64		     cmp byte ptr [si],	'd'
    378	    01F4  74 07			     je	parse_d
    379	    01F6  80 3C	66		     cmp byte ptr [si],	'f'
    380	    01F9  74 0F			     je	parse_f
    381	    01FB  EB 19			     jmp parse_end
    382	    01FD			 parse_d:
    383					     ;
    384					     ; parse_deep level
    385					     ;
    386	    01FD  46			     inc si
    387	    01FE  46			     inc si
    388	    01FF  8A 1C			     mov bl, byte ptr [si]
    389	    0201  80 EB	30		     sub bl, 30h	     ; to number
    390	    0204  88 1E	0324r		     mov byte ptr [deep_level],	bl
    391	    0208  EB E5			     jmp parse_args
    392	    020A			 parse_f:
    393	    020A  46			     inc si
    394	    020B  46			     inc si
    395	    020C  BF 0326r		     mov di, offset file_ext
    396	    020F  B9 0004		     mov cx, 4
    397	    0212  F3> A4		     rep movsb
    398	    0214  EB D9			     jmp parse_args
    399					     ;
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 8
2tree.ASM



    400					     ; parse file extension
    401					     ;
    402	    0216			 parse_end:
    403	    0216  C3			     ret
    404	    0217			 find_next:
    405	    0217  B4 4F			     mov ah, 4Fh
    406	    0219  CD 21			     int 21h
    407
    408	    021B  C3			     ret
    409
    410	    021C			 find_first:
    411	    021C  5B			     pop bx
    412	    021D  5A			     pop dx		 ; filename spec
    413	    021E  B9 0010		     mov cx, 10h	 ; include directories
    414	    0221  53			     push bx
    415
    416	    0222  33 C0			     xor ax, ax
    417	    0224  B4 4E			     mov ah, 4Eh
    418	    0226  CD 21			     int 21h
    419	    0228  C3			     ret
    420	    0229			 show_filename_from_dta:
    421	    0229  BB 0410r		     mov bx, offset dta	+ 1Eh
    422	    022C  80 3F	2E		     cmp byte ptr [bx],	'.'
    423	    022F  75 04			     jne show_filename_from_dta_valid_name
    424	    0231  B8 0000		     mov ax, 0
    425	    0234  C3			     ret
    426	    0235			 show_filename_from_dta_valid_name:
    427	    0235  B9 000D		     mov cx, 13
    428	    0238  51			     push cx
    429	    0239  53			     push bx
    430	    023A  E8 0078		     call count_no_space_no_zero_letters
    431	    023D  8B C8			     mov cx, ax
    432	    023F  B8 0410r		     mov ax, offset dta	+ 1Eh
    433	    0242  51			     push cx
    434	    0243  50			     push ax
    435	    0244  E8 0058		     call print_string_with_length
    436					     print_range <newline>
2   437						 print <offset newline>
3   438	    0247  B4 09				 mov ah, 09h
3   439	    0249  BA 03F0r			 mov dx, offset	newline
3   440	    024C  CD 21				 int 21h
    441	    024E  B8 0001		     mov ax, 1
    442	    0251  C3			     ret
    443	    0252			 cd:
    444	    0252  5B			     pop bx ; ret addr
    445	    0253  5A			     pop dx ; root address
    446	    0254  53			     push bx ; ret addr
    447
    448	    0255  33 C0			     xor ax, ax
    449	    0257  B4 3B			     mov ah, 3Bh
    450	    0259  CD 21			     int 21h
    451
    452	    025B  72 01			     jc	cd_error
    453	    025D  C3			     ret
    454	    025E			 cd_error:
    455					     print_range <cd_fails, newline>
2   456						 print <offset cd_fails>
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 9
2tree.ASM



3   457	    025E  B4 09				 mov ah, 09h
3   458	    0260  BA 02D5r			 mov dx, offset	cd_fails
3   459	    0263  CD 21				 int 21h
2   460						 print <offset newline>
3   461	    0265  B4 09				 mov ah, 09h
3   462	    0267  BA 03F0r			 mov dx, offset	newline
3   463	    026A  CD 21				 int 21h
    464	    026C  C3			     ret
    465
    466	    026D			 set_dta:
    467	    026D  5B			     pop bx
    468	    026E  59			     pop cx			 ; deep	level
    469	    026F  5A			     pop dx			 ; dta address offset
    470	    0270  53			     push bx
    471
    472					     ; shift to	current	dta
    473					     ; mov cx, 0
    474	    0271  B8 002B		     mov ax, 43
    475					     load <dx>
2   476	    0274  52				 push dx
    477	    0275  F7 E1			     mul cx
    478					     restore <dx>
2   479	    0277  5A				 pop dx
    480	    0278  03 D0			     add dx, ax
    481
    482	    027A  33 C0			     xor ax, ax
    483	    027C  B4 1A			     mov ah, 1Ah
    484	    027E  CD 21			     int 21h
    485
    486	    0280  C3			     ret
    487
    488	    0281			 save_cwd:
    489	    0281  BE 0330r		     mov si, offset working_folder
    490
    491					     ;
    492					     ; save driver
    493					     ;
    494	    0284  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    495	    0286  CD 21			     int 21h
    496	    0288  8A D0			     mov dl, al
    497	    028A  80 C2	41		     add dl, 41h
    498	    028D  88 14			     mov byte ptr [si],	dl
    499	    028F  46			     inc si
    500	    0290  C6 04	3A		     mov byte ptr [si],	':'
    501	    0293  46			     inc si
    502	    0294  C6 04	5C		     mov byte ptr [si],	'\'
    503	    0297  46			     inc si
    504
    505					     ;
    506					     ; save folder
    507					     ;
    508	    0298  32 D2			     xor dl, dl			 ; Actual drive
    509	    029A  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    510	    029C  CD 21			     int 21h
    511	    029E  C3			     ret
    512	    029F			 print_string_with_length:
    513	    029F  5B			     pop bx ; ret address
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 10
2tree.ASM



    514	    02A0  5E			     pop si ; string offset
    515	    02A1  59			     pop cx ; string length
    516	    02A2  53			     push bx; ret address
    517	    02A3  33 C0			     xor ax, ax
    518	    02A5			 _print_string_with_length_loop:
    519	    02A5  B4 02			     mov ah, 02h
    520	    02A7  8A 14			     mov dl, byte ptr [si]
    521	    02A9  CD 21			     int 21h
    522	    02AB  49			     dec cx
    523	    02AC  46			     inc si
    524	    02AD  83 F9	00		     cmp cx, 00h
    525	    02B0  74 02			     je	_print_string_with_length_end
    526	    02B2  EB F1			     jmp _print_string_with_length_loop
    527	    02B4			 _print_string_with_length_end:
    528	    02B4  C3			     ret
    529	    02B5			 count_no_space_no_zero_letters:
    530	    02B5  5B			     pop bx ; ret address
    531	    02B6  5E			     pop si ; string offset
    532	    02B7  59			     pop cx ; string length
    533	    02B8  53			     push bx ; ret address
    534	    02B9  B8 0000		     mov ax, 0
    535	    02BC			 _count_non_space_symbols_loop:
    536	    02BC  80 3C	20		     cmp byte ptr [si],	20h
    537	    02BF  74 12			     je	_count_non_space_symbols_end
    538	    02C1  80 3C	0D		     cmp byte ptr [si],	0Dh
    539	    02C4  74 0D			     je	_count_non_space_symbols_end
    540	    02C6  80 3C	00		     cmp byte ptr [si],	00h
    541	    02C9  74 08			     je	_count_non_space_symbols_end
    542	    02CB  3B C1			     cmp ax, cx
    543	    02CD  74 04			     je	_count_non_space_symbols_end
    544	    02CF  40			     inc ax
    545	    02D0  46			     inc si
    546	    02D1  EB E9			     jmp _count_non_space_symbols_loop
    547	    02D3			 _count_non_space_symbols_end:
    548	    02D3  C3			     ret
    549					 ;
    550					 ; error codes
    551					 ;
    552	    02D4  12			 no_more_files db 18
    553					 ;
    554					 ; error messages
    555					 ;
    556	    02D5  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    557		  64 69	72 65 63 74 6F+
    558		  72 79	20 66 61 69 6C+
    559		  73 2E	24
    560	    02ED  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    561		  72 73	74 20 66 69 6C+
    562		  65 6E	61 6D 65 73 20+
    563		  66 61	69 6C 73 2E 24
    564	    0309  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    565		  78 74	20 66 69 6C 65+
    566		  6E 61	6D 65 73 20 66+
    567		  61 69	6C 73 2E 24
    568					 ;
    569					 ;   parse arguments
    570					 ;
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 11
2tree.ASM



    571	    0324  01			 deep_level db 1
    572	    0325  2A			 file_mask db '*'
    573	    0326  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    574	    032B  2A 00			 folder_mask db	'*', 00h
    575					 ;
    576					 ; strings
    577					 ;
    578	    032D  2E 2E	00		 parent_folder db '..',	00h
    579	    0330  40*(00)		 working_folder	db 64 dup(00h)
    580	    0370  40*(00)		 root_folder db	64 dup(00h)
    581	    03B0  40*(00)		 start_mask db 64 dup(00h)
    582	    03F0  0A 24			 newline db 0Ah, '$'
    583	    03F2  2B*(00)		 dta db	43 dup(0)
    584					 end start
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "13:40:57"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:0252
CD_ERROR			  Near	 DGROUP:025E
CD_FAILS			  Byte	 DGROUP:02D5
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02B5
DEEP_LEVEL			  Byte	 DGROUP:0324
DTA				  Byte	 DGROUP:03F2
FILE_EXT			  Byte	 DGROUP:0326
FILE_MASK			  Byte	 DGROUP:0325
FIND_FIRST			  Near	 DGROUP:021C
FIND_FIRST_ERROR		  Near	 DGROUP:01B6
FIND_FIRST_FAILS		  Byte	 DGROUP:02ED
FIND_NEXT			  Near	 DGROUP:0217
FIND_NEXT_ERROR			  Near	 DGROUP:01C8
FIND_NEXT_FAILS			  Byte	 DGROUP:0309
FOLDER_MASK			  Byte	 DGROUP:032B
IS_FOLDER			  Near	 DGROUP:019F
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0146
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0127
NEWLINE				  Byte	 DGROUP:03F0
NO_MORE_FILES			  Byte	 DGROUP:02D4
PARENT_FOLDER			  Byte	 DGROUP:032D
PARSE_ARGS			  Near	 DGROUP:01EF
PARSE_COMMAND_LINE		  Near	 DGROUP:01DA
PARSE_D				  Near	 DGROUP:01FD
PARSE_END			  Near	 DGROUP:0216
PARSE_F				  Near	 DGROUP:020A
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:029F
ROOT_FOLDER			  Byte	 DGROUP:0370
SAVE_CWD			  Near	 DGROUP:0281
SET_DTA				  Near	 DGROUP:026D
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0229
SHOW_FILENAME_FROM_DTA_VALID_NAM  Near	 DGROUP:0235
E
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03B0
WORKING_FOLDER			  Byte	 DGROUP:0330
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:02D3
_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02BC
Turbo Assembler	 Version 4.1	    12/08/19 13:40:58	    Page 13
Symbol Table



_IS_FOLDER_END			  Near	 DGROUP:01B5
_IS_FOLDER_FALSE		  Near	 DGROUP:01B0
_IS_FOLDER_TRUE			  Near	 DGROUP:01AB
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:019D
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0151
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:0192
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02B4
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:02A5

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  041D Word	  Public  CODE
