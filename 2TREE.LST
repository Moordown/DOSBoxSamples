Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 01BC		     call save_cwd
    151	    0103  B8 0431r		     mov ax, offset dta
    152	    0106  50			     push ax
    153	    0107  B9 0000		     mov cx, 0
    154	    010A  51			     push cx
    155	    010B  E8 019B		     call set_dta
    156	    010E  E8 00FA		     call parse_command_line
    157
    158					     ;
    159					     ;	 start tree
    160					     ;
    161	    0111  B8 03AFr		     mov ax, offset root_folder
    162	    0114  B9 0000		     mov cx, 0
    163	    0117  51			     push cx
    164	    0118  50			     push ax
    165	    0119  E8 000B		     call list_subfiles_recursive_from
    166
    167					     ;
    168					     ;	 cd to start folder
    169					     ;
    170	    011C  B8 036Fr		     mov ax, offset working_folder
    171	    011F  50			     push ax
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 4
2tree.ASM



    172	    0120  E8 016B		     call cd
    173					     exit
1   174	    0123  B4 00			     mov ah, 00h
1   175	    0125  CD 21			     int 21h
    176
    177	    0127			 list_subfiles_recursive_from:
    178	    0127  5B			     pop bx	 ; ret address
    179	    0128  58			     pop ax	 ; deep	level
    180	    0129  59			     pop cx	 ; root	folder offset
    181	    012A  53			     push bx
    182					     load <cx>
2   183	    012B  51				 push cx
    184	    012C  50			     push ax
    185	    012D  E8 015E		     call cd
    186					     restore <cx>
2   187	    0130  59				 pop cx
    188
    189					     ;
    190					     ; list subfolder
    191					     ;
    192	    0131  B8 036Ar		     mov ax, offset folder_mask
    193					     load <cx>
2   194	    0134  51				 push cx
    195	    0135  50			     push ax
    196	    0136  51			     push cx
    197	    0137  E8 000C		     call list_subfiles_recursive
    198					     restore <cx>
2   199	    013A  59				 pop cx
    200
    201					     ;
    202					     ; list files
    203					     ;
    204	    013B  B8 0364r		     mov ax, offset file_mask
    205					     load <cx>
2   206	    013E  51				 push cx
    207	    013F  50			     push ax
    208	    0140  51			     push cx
    209	    0141  E8 0002		     call list_subfiles_recursive
    210					     restore <cx>
2   211	    0144  59				 pop cx
    212	    0145  C3			     ret
    213
    214	    0146			 list_subfiles_recursive:
    215	    0146  5B			     pop bx
    216	    0147  59			     pop cx ; deep level
    217	    0148  58			     pop ax ; filemask offset
    218	    0149  53			     push bx
    219					     ; mov ax, offset file_mask
    220
    221					     load <cx, ax>
2   222	    014A  51				 push cx
2   223	    014B  50				 push ax
    224	    014C  B8 0431r		     mov ax, offset dta
    225	    014F  50			     push ax
    226					     ; mov cx, 0
    227	    0150  51			     push cx
    228	    0151  E8 0155		     call set_dta
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 5
2tree.ASM



    229					     restore <ax, cx>
2   230	    0154  58				 pop ax
2   231	    0155  59				 pop cx
    232
    233					     load <cx>
2   234	    0156  51				 push cx
    235	    0157  50			     push ax
    236	    0158  E8 00F2		     call find_first
    237	    015B  0F 82	0088		     jc	find_first_error
    238	    015F			 _list_subfiles_recursive_loop:
    239					     restore <cx>
2   240	    015F  59				 pop cx
    241					     load <cx>
2   242	    0160  51				 push cx
    243					     ; mov cx, 0
    244	    0161  51			     push cx
    245	    0162  E8 00F5		     call show_filename_from_dta
    246	    0165  3D 0001		     cmp ax, 1
    247	    0168  75 3D			     jne _list_subfiles_recursive_next
    248
    249					     ;
    250					     ;	 check if folder
    251					     ;
    252	    016A  E8 0063		     call is_folder
    253	    016D  3D 0001		     cmp ax, 1
    254	    0170  75 35			     jne _list_subfiles_recursive_next
    255
    256					     ;
    257					     ;	 check deep level
    258					     ;
    259					     restore <cx>
2   260	    0172  59				 pop cx
    261					     load <cx>
2   262	    0173  51				 push cx
    263	    0174  33 DB			     xor bx, bx
    264	    0176  8A 1E	0363r		     mov bl, byte ptr [deep_level]
    265	    017A  3B CB			     cmp cx, bx
    266	    017C  7D 29			     jge _list_subfiles_recursive_next
    267
    268					     ;
    269					     ; start new search
    270					     ;
    271
    272					     ;
    273					     ;	 cd to subfolder
    274					     ;
    275					     load <cx>
2   276	    017E  51				 push cx
    277	    017F  51			     push cx
    278	    0180  E8 0031		     call move_dta
    279	    0183  05 001E		     add ax, 1Eh
    280
    281
    282					     ; xor ax, ax
    283					     ; mov al, byte ptr	[dta_len]
    284					     ; mul cx
    285
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 6
2tree.ASM



    286					     ; mov bx, offset dta + 1Eh
    287					     ; add bx, ax
    288					     ; push bx
    289	    0186  50			     push ax
    290	    0187  E8 0104		     call cd
    291					     restore <cx>
2   292	    018A  59				 pop cx
    293
    294	    018B  41			     inc cx
    295					     ;
    296					     ;	 list subfiles from subfolder
    297					     ;
    298					     load <cx>
2   299	    018C  51				 push cx
    300	    018D  B8 036Ar		     mov ax, offset folder_mask
    301	    0190  50			     push ax
    302	    0191  51			     push cx
    303	    0192  E8 FFB1		     call list_subfiles_recursive
    304					     restore <cx>
2   305	    0195  59				 pop cx
    306
    307
    308					     ;
    309					     ;	 list subfolders from subfolder
    310					     ;
    311					     load <cx>
2   312	    0196  51				 push cx
    313	    0197  B8 0364r		     mov ax, offset file_mask
    314	    019A  50			     push ax
    315	    019B  51			     push cx
    316	    019C  E8 FFA7		     call list_subfiles_recursive
    317					     restore <cx>
2   318	    019F  59				 pop cx
    319
    320
    321					     ;
    322					     ;	 cd back to this function
    323					     ;
    324	    01A0  B8 036Cr		     mov ax, offset parent_folder
    325	    01A3  50			     push ax
    326	    01A4  E8 00E7		     call cd
    327	    01A7			 _list_subfiles_recursive_next:
    328	    01A7  E8 009E		     call find_next
    329	    01AA  73 B3			     jnc _list_subfiles_recursive_loop
    330	    01AC  3A 06	0312r		     cmp al, byte ptr [no_more_files]
    331	    01B0  75 47			     jne find_next_error
    332	    01B2			 _list_subfiles_recursive_end:
    333					     restore <cx>
2   334	    01B2  59				 pop cx
    335	    01B3  C3			     ret
    336	    01B4			 move_dta:
    337	    01B4  5B			     pop bx
    338	    01B5  59			     pop cx
    339	    01B6  53			     push bx
    340
    341	    01B7  33 C0			     xor ax, ax
    342	    01B9  A0 0313r		     mov al, byte ptr [dta_len]
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 7
2tree.ASM



    343	    01BC  F7 E1			     mul cx
    344
    345	    01BE  BB 0431r		     mov bx, offset dta
    346	    01C1  03 D8			     add bx, ax
    347	    01C3  8B C3			     mov ax, bx
    348	    01C5  C3			     ret
    349	    01C6			 zeros:
    350	    01C6  5B			     pop bx
    351	    01C7  59			     pop cx ; length
    352	    01C8  5F			     pop di ; address
    353	    01C9  53			     push bx
    354	    01CA  B0 00			     mov al, 0
    355	    01CC  FC			     cld
    356	    01CD  F3> AA		     rep stosb
    357	    01CF  C3			     ret
    358	    01D0			 is_folder:
    359	    01D0  BB 0446r		     mov bx, offset dta	+ 15h
    360	    01D3  8A 1F			     mov bl, byte ptr [bx]
    361	    01D5  80 FB	10		     cmp bl, 10h
    362	    01D8  74 02			     je	_is_folder_true
    363	    01DA  75 05			     jne _is_folder_false
    364	    01DC			 _is_folder_true:
    365	    01DC  B8 0001		     mov ax, 1
    366	    01DF  EB 05			     jmp _is_folder_end
    367	    01E1			 _is_folder_false:
    368	    01E1  B8 0000		     mov ax, 0
    369	    01E4  EB 00			     jmp _is_folder_end
    370	    01E6			 _is_folder_end:
    371	    01E6  C3			     ret
    372
    373
    374
    375	    01E7			 find_first_error:
    376					     print_range <find_first_fails, newline>
2   377						 print <offset find_first_fails>
3   378	    01E7  B4 09				 mov ah, 09h
3   379	    01E9  BA 032Cr			 mov dx, offset	find_first_fails
3   380	    01EC  CD 21				 int 21h
2   381						 print <offset newline>
3   382	    01EE  B4 09				 mov ah, 09h
3   383	    01F0  BA 042Fr			 mov dx, offset	newline
3   384	    01F3  CD 21				 int 21h
    385					     exit
1   386	    01F5  B4 00			     mov ah, 00h
1   387	    01F7  CD 21			     int 21h
    388	    01F9			 find_next_error:
    389					     print_range <find_next_fails, newline>
2   390						 print <offset find_next_fails>
3   391	    01F9  B4 09				 mov ah, 09h
3   392	    01FB  BA 0348r			 mov dx, offset	find_next_fails
3   393	    01FE  CD 21				 int 21h
2   394						 print <offset newline>
3   395	    0200  B4 09				 mov ah, 09h
3   396	    0202  BA 042Fr			 mov dx, offset	newline
3   397	    0205  CD 21				 int 21h
    398					     exit
1   399	    0207  B4 00			     mov ah, 00h
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 8
2tree.ASM



1   400	    0209  CD 21			     int 21h
    401
    402	    020B			 parse_command_line:
    403					     ;
    404					     ; prepare root folder
    405					     ;
    406	    020B  BE 0082		     mov si, 82h
    407	    020E  B9 0040		     mov cx, 64
    408	    0211  51			     push cx
    409	    0212  56			     push si
    410	    0213  E8 00DD		     call count_no_space_no_zero_letters
    411	    0216  8B C8			     mov cx, ax
    412	    0218  BE 0082		     mov si, 82h
    413	    021B  BF 03AFr		     mov di, offset root_folder
    414	    021E  F3> A4		     rep movsb
    415
    416	    0220			 parse_args:
    417	    0220  46			     inc si
    418	    0221  46			     inc si
    419	    0222  80 3C	64		     cmp byte ptr [si],	'd'
    420	    0225  74 07			     je	parse_d
    421	    0227  80 3C	66		     cmp byte ptr [si],	'f'
    422	    022A  74 0F			     je	parse_f
    423	    022C  EB 19			     jmp parse_end
    424	    022E			 parse_d:
    425					     ;
    426					     ; parse_deep level
    427					     ;
    428	    022E  46			     inc si
    429	    022F  46			     inc si
    430	    0230  8A 1C			     mov bl, byte ptr [si]
    431	    0232  80 EB	30		     sub bl, 30h	     ; to number
    432	    0235  88 1E	0363r		     mov byte ptr [deep_level],	bl
    433	    0239  EB E5			     jmp parse_args
    434	    023B			 parse_f:
    435	    023B  46			     inc si
    436	    023C  46			     inc si
    437	    023D  BF 0365r		     mov di, offset file_ext
    438	    0240  B9 0004		     mov cx, 4
    439	    0243  F3> A4		     rep movsb
    440	    0245  EB D9			     jmp parse_args
    441					     ;
    442					     ; parse file extension
    443					     ;
    444	    0247			 parse_end:
    445	    0247  C3			     ret
    446	    0248			 find_next:
    447	    0248  B4 4F			     mov ah, 4Fh
    448	    024A  CD 21			     int 21h
    449
    450	    024C  C3			     ret
    451
    452	    024D			 find_first:
    453	    024D  5B			     pop bx
    454	    024E  5A			     pop dx		 ; filename spec
    455	    024F  B9 0010		     mov cx, 10h	 ; include directories
    456	    0252  53			     push bx
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 9
2tree.ASM



    457
    458	    0253  33 C0			     xor ax, ax
    459	    0255  B4 4E			     mov ah, 4Eh
    460	    0257  CD 21			     int 21h
    461	    0259  C3			     ret
    462	    025A			 show_filename_from_dta:
    463	    025A  5B			     pop bx
    464	    025B  59			     pop cx  ; deep level
    465	    025C  53			     push bx
    466
    467	    025D  51			     push cx
    468	    025E  E8 FF53		     call move_dta
    469	    0261  05 001E		     add ax, 1Eh
    470					     ; xor ax, ax
    471					     ; mov al, byte ptr	[dta_len]
    472					     ; mul cx
    473					     ; mov bx, offset dta + 1Eh
    474					     ; add bx, ax
    475
    476	    0264  8B D8			     mov bx, ax
    477					     load <bx>
2   478	    0266  53				 push bx
    479	    0267  80 3F	2E		     cmp byte ptr [bx],	'.'
    480	    026A  75 05			     jne _show_filename_from_dta_valid_name
    481	    026C  B8 0000		     mov ax, 0
    482					     restore <bx>
2   483	    026F  5B				 pop bx
    484	    0270  C3			     ret
    485	    0271			 _show_filename_from_dta_valid_name:
    486	    0271  B9 000D		     mov cx, 13
    487					     restore <bx>
2   488	    0274  5B				 pop bx
    489					     load <bx>
2   490	    0275  53				 push bx
    491	    0276  51			     push cx
    492	    0277  53			     push bx
    493	    0278  E8 0078		     call count_no_space_no_zero_letters
    494	    027B  8B C8			     mov cx, ax
    495					     restore <bx>
2   496	    027D  5B				 pop bx
    497					     ; mov ax, offset dta + 1Eh
    498	    027E  51			     push cx
    499	    027F  53			     push bx
    500	    0280  E8 005A		     call print_string_with_length
    501					     print_range <newline>
2   502						 print <offset newline>
3   503	    0283  B4 09				 mov ah, 09h
3   504	    0285  BA 042Fr			 mov dx, offset	newline
3   505	    0288  CD 21				 int 21h
    506	    028A  B8 0001		     mov ax, 1
    507	    028D  C3			     ret
    508	    028E			 cd:
    509	    028E  5B			     pop bx ; ret addr
    510	    028F  5A			     pop dx ; root address
    511	    0290  53			     push bx ; ret addr
    512
    513	    0291  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 10
2tree.ASM



    514	    0293  B4 3B			     mov ah, 3Bh
    515	    0295  CD 21			     int 21h
    516
    517	    0297  72 01			     jc	cd_error
    518	    0299  C3			     ret
    519	    029A			 cd_error:
    520					     print_range <cd_fails, newline>
2   521						 print <offset cd_fails>
3   522	    029A  B4 09				 mov ah, 09h
3   523	    029C  BA 0314r			 mov dx, offset	cd_fails
3   524	    029F  CD 21				 int 21h
2   525						 print <offset newline>
3   526	    02A1  B4 09				 mov ah, 09h
3   527	    02A3  BA 042Fr			 mov dx, offset	newline
3   528	    02A6  CD 21				 int 21h
    529	    02A8  C3			     ret
    530
    531	    02A9			 set_dta:
    532	    02A9  5B			     pop bx
    533	    02AA  59			     pop cx			 ; deep	level
    534	    02AB  5A			     pop dx			 ; dta address offset
    535	    02AC  53			     push bx
    536
    537					     ; shift to	current	dta
    538					     ; mov cx, 0
    539					     ; load <dx>
    540					     ; push cx
    541					     ; call move_dta
    542					     ; restore <dx>
    543					     ; add dx, ax
    544					     load <dx>
2   545	    02AD  52				 push dx
    546	    02AE  33 C0			     xor ax, ax
    547	    02B0  A0 0313r		     mov al, byte ptr [dta_len]
    548	    02B3  F7 E1			     mul cx
    549					     restore <dx>
2   550	    02B5  5A				 pop dx
    551	    02B6  03 D0			     add dx, ax
    552
    553	    02B8  33 C0			     xor ax, ax
    554	    02BA  B4 1A			     mov ah, 1Ah
    555	    02BC  CD 21			     int 21h
    556
    557	    02BE  C3			     ret
    558
    559	    02BF			 save_cwd:
    560	    02BF  BE 036Fr		     mov si, offset working_folder
    561
    562					     ;
    563					     ; save driver
    564					     ;
    565	    02C2  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    566	    02C4  CD 21			     int 21h
    567	    02C6  8A D0			     mov dl, al
    568	    02C8  80 C2	41		     add dl, 41h
    569	    02CB  88 14			     mov byte ptr [si],	dl
    570	    02CD  46			     inc si
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 11
2tree.ASM



    571	    02CE  C6 04	3A		     mov byte ptr [si],	':'
    572	    02D1  46			     inc si
    573	    02D2  C6 04	5C		     mov byte ptr [si],	'\'
    574	    02D5  46			     inc si
    575
    576					     ;
    577					     ; save folder
    578					     ;
    579	    02D6  32 D2			     xor dl, dl			 ; Actual drive
    580	    02D8  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    581	    02DA  CD 21			     int 21h
    582	    02DC  C3			     ret
    583	    02DD			 print_string_with_length:
    584	    02DD  5B			     pop bx ; ret address
    585	    02DE  5E			     pop si ; string offset
    586	    02DF  59			     pop cx ; string length
    587	    02E0  53			     push bx; ret address
    588	    02E1  33 C0			     xor ax, ax
    589	    02E3			 _print_string_with_length_loop:
    590	    02E3  B4 02			     mov ah, 02h
    591	    02E5  8A 14			     mov dl, byte ptr [si]
    592	    02E7  CD 21			     int 21h
    593	    02E9  49			     dec cx
    594	    02EA  46			     inc si
    595	    02EB  83 F9	00		     cmp cx, 00h
    596	    02EE  74 02			     je	_print_string_with_length_end
    597	    02F0  EB F1			     jmp _print_string_with_length_loop
    598	    02F2			 _print_string_with_length_end:
    599	    02F2  C3			     ret
    600	    02F3			 count_no_space_no_zero_letters:
    601	    02F3  5B			     pop bx ; ret address
    602	    02F4  5E			     pop si ; string offset
    603	    02F5  59			     pop cx ; string length
    604	    02F6  53			     push bx ; ret address
    605	    02F7  B8 0000		     mov ax, 0
    606	    02FA			 _count_non_space_symbols_loop:
    607	    02FA  80 3C	20		     cmp byte ptr [si],	20h
    608	    02FD  74 12			     je	_count_non_space_symbols_end
    609	    02FF  80 3C	0D		     cmp byte ptr [si],	0Dh
    610	    0302  74 0D			     je	_count_non_space_symbols_end
    611	    0304  80 3C	00		     cmp byte ptr [si],	00h
    612	    0307  74 08			     je	_count_non_space_symbols_end
    613	    0309  3B C1			     cmp ax, cx
    614	    030B  74 04			     je	_count_non_space_symbols_end
    615	    030D  40			     inc ax
    616	    030E  46			     inc si
    617	    030F  EB E9			     jmp _count_non_space_symbols_loop
    618	    0311			 _count_non_space_symbols_end:
    619	    0311  C3			     ret
    620					 ;
    621					 ; error codes
    622					 ;
    623	    0312  12			 no_more_files db 18
    624	    0313  2B			 dta_len db 2bh
    625					 ;
    626					 ; error messages
    627					 ;
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 12
2tree.ASM



    628	    0314  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    629		  64 69	72 65 63 74 6F+
    630		  72 79	20 66 61 69 6C+
    631		  73 2E	24
    632	    032C  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    633		  72 73	74 20 66 69 6C+
    634		  65 6E	61 6D 65 73 20+
    635		  66 61	69 6C 73 2E 24
    636	    0348  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    637		  78 74	20 66 69 6C 65+
    638		  6E 61	6D 65 73 20 66+
    639		  61 69	6C 73 2E 24
    640					 ;
    641					 ;   parse arguments
    642					 ;
    643	    0363  01			 deep_level db 1
    644	    0364  2A			 file_mask db '*'
    645	    0365  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    646	    036A  2A 00			 folder_mask db	'*', 00h
    647					 ;
    648					 ; strings
    649					 ;
    650	    036C  2E 2E	00		 parent_folder db '..',	00h
    651	    036F  40*(00)		 working_folder	db 64 dup(00h)
    652	    03AF  40*(00)		 root_folder db	64 dup(00h)
    653	    03EF  40*(00)		 start_mask db 64 dup(00h)
    654	    042F  0A 24			 newline db 0Ah, '$'
    655	    0431  2B*(00)		 dta db	43 dup(0)
    656					 end start
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "21:52:24"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:028E
CD_ERROR			  Near	 DGROUP:029A
CD_FAILS			  Byte	 DGROUP:0314
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02F3
DEEP_LEVEL			  Byte	 DGROUP:0363
DTA				  Byte	 DGROUP:0431
DTA_LEN				  Byte	 DGROUP:0313
FILE_EXT			  Byte	 DGROUP:0365
FILE_MASK			  Byte	 DGROUP:0364
FIND_FIRST			  Near	 DGROUP:024D
FIND_FIRST_ERROR		  Near	 DGROUP:01E7
FIND_FIRST_FAILS		  Byte	 DGROUP:032C
FIND_NEXT			  Near	 DGROUP:0248
FIND_NEXT_ERROR			  Near	 DGROUP:01F9
FIND_NEXT_FAILS			  Byte	 DGROUP:0348
FOLDER_MASK			  Byte	 DGROUP:036A
IS_FOLDER			  Near	 DGROUP:01D0
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0146
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0127
MOVE_DTA			  Near	 DGROUP:01B4
NEWLINE				  Byte	 DGROUP:042F
NO_MORE_FILES			  Byte	 DGROUP:0312
PARENT_FOLDER			  Byte	 DGROUP:036C
PARSE_ARGS			  Near	 DGROUP:0220
PARSE_COMMAND_LINE		  Near	 DGROUP:020B
PARSE_D				  Near	 DGROUP:022E
PARSE_END			  Near	 DGROUP:0247
PARSE_F				  Near	 DGROUP:023B
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:02DD
ROOT_FOLDER			  Byte	 DGROUP:03AF
SAVE_CWD			  Near	 DGROUP:02BF
SET_DTA				  Near	 DGROUP:02A9
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:025A
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03EF
WORKING_FOLDER			  Byte	 DGROUP:036F
ZEROS				  Near	 DGROUP:01C6
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0311
Turbo Assembler	 Version 4.1	    12/08/19 21:52:25	    Page 14
Symbol Table



_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02FA
_IS_FOLDER_END			  Near	 DGROUP:01E6
_IS_FOLDER_FALSE		  Near	 DGROUP:01E1
_IS_FOLDER_TRUE			  Near	 DGROUP:01DC
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:01B2
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:015F
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:01A7
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02F2
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:02E3
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:0271
ME

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  045C Word	  Public  CODE
