Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 1
2tree.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 get_offset macro state
1    32					     xor dx, dx
1    33					     xor ax, ax
1    34					     mov al, state
1    35					     shl ax, 8
1    36					 endm get_offset
1    37
1    38					 to_non_space macro addr
1    39					     local l1, l2
1    40					     mov si, addr
1    41					 l1:
1    42					     mov byte ptr al, [si]
1    43					     cmp al, 20h
1    44					     je	l2
1    45					     cmp al, 0
1    46					     je	l2
1    47					     inc si
1    48					     jmp l1
1    49					 l2:
1    50					     inc si
1    51					     mov ax, si
1    52					 endm
1    53
1    54					 set_transition	macro buf, from, to, char
1    55					     load<bx, dx>
1    56					     get_offset	from
1    57
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 2
2tree.ASM



1    58					     add ax, offset buf
1    59					     add ax, char
1    60
1    61					     mov bx, ax
1    62					     mov byte ptr [bx],	to
1    63					     restore<dx, bx>
1    64					 endm
1    65
1    66					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    67					     local l1, end
1    68					     mov bx, start
1    69					     mov cx, iterations
1    70					 l1:
1    71					     cmp cx, 0
1    72					     je	end
1    73
1    74					     load <bx,cx>
1    75					     set_transition buf	from to	bx
1    76					     restore <cx,bx>
1    77
1    78					     inc bx
1    79					     dec cx
1    80					     jmp l1
1    81					 end:
1    82					 endm
1    83
1    84					 set_zero macro	state
1    85					     mov al, 0
1    86					     mov byte ptr [state], al
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 3
2tree.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 01BC		     call save_cwd
    151					     ; mov ax, offset dta
    152					     ; push ax
    153	    0103  B9 0000		     mov cx, 0
    154	    0106  51			     push cx
    155	    0107  E8 019D		     call set_dta
    156	    010A  E8 00FC		     call parse_command_line
    157
    158					     ;
    159					     ;	 start tree
    160					     ;
    161	    010D  B8 03AFr		     mov ax, offset root_folder
    162	    0110  B9 0000		     mov cx, 0
    163	    0113  51			     push cx
    164	    0114  50			     push ax
    165	    0115  E8 000B		     call list_subfiles_recursive_from
    166
    167					     ;
    168					     ;	 cd to start folder
    169					     ;
    170	    0118  B8 036Fr		     mov ax, offset working_folder
    171	    011B  50			     push ax
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 4
2tree.ASM



    172	    011C  E8 016D		     call cd
    173					     exit
1   174	    011F  B4 00			     mov ah, 00h
1   175	    0121  CD 21			     int 21h
    176
    177	    0123			 list_subfiles_recursive_from:
    178	    0123  5B			     pop bx	 ; ret address
    179	    0124  58			     pop ax	 ; deep	level
    180	    0125  59			     pop cx	 ; root	folder offset
    181	    0126  53			     push bx
    182					     load <cx>
2   183	    0127  51				 push cx
    184	    0128  50			     push ax
    185	    0129  E8 0160		     call cd
    186					     restore <cx>
2   187	    012C  59				 pop cx
    188
    189					     ;
    190					     ; list subfolder
    191					     ;
    192	    012D  B8 036Ar		     mov ax, offset folder_mask
    193					     load <cx>
2   194	    0130  51				 push cx
    195	    0131  50			     push ax
    196	    0132  51			     push cx
    197	    0133  E8 000C		     call list_subfiles_recursive
    198					     restore <cx>
2   199	    0136  59				 pop cx
    200
    201					     ;
    202					     ; list files
    203					     ;
    204	    0137  B8 0364r		     mov ax, offset file_mask
    205					     load <cx>
2   206	    013A  51				 push cx
    207	    013B  50			     push ax
    208	    013C  51			     push cx
    209	    013D  E8 0002		     call list_subfiles_recursive
    210					     restore <cx>
2   211	    0140  59				 pop cx
    212	    0141  C3			     ret
    213
    214	    0142			 list_subfiles_recursive:
    215	    0142  5B			     pop bx
    216	    0143  59			     pop cx ; deep level
    217	    0144  58			     pop ax ; filemask offset
    218	    0145  53			     push bx
    219					     ; mov ax, offset file_mask
    220
    221					     load <cx, ax>
2   222	    0146  51				 push cx
2   223	    0147  50				 push ax
    224					     ; mov ax, offset dta
    225					     ; push ax
    226					     ; mov cx, 0
    227	    0148  51			     push cx
    228	    0149  E8 015B		     call set_dta
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 5
2tree.ASM



    229					     restore <ax, cx>
2   230	    014C  58				 pop ax
2   231	    014D  59				 pop cx
    232
    233					     load <cx>
2   234	    014E  51				 push cx
    235	    014F  50			     push ax
    236	    0150  E8 00F8		     call find_first
    237	    0153  0F 82	008E		     jc	find_first_error
    238	    0157			 _list_subfiles_recursive_loop:
    239					     restore <cx>
2   240	    0157  59				 pop cx
    241					     load <cx>
2   242	    0158  51				 push cx
    243					     ; mov cx, 0
    244	    0159  51			     push cx
    245	    015A  E8 00FB		     call show_filename_from_dta
    246	    015D  3D 0001		     cmp ax, 1
    247	    0160  75 43			     jne _list_subfiles_recursive_next
    248
    249					     ;
    250					     ;	 check if folder
    251					     ;
    252	    0162  E8 0069		     call is_folder
    253	    0165  3D 0001		     cmp ax, 1
    254	    0168  75 3B			     jne _list_subfiles_recursive_next
    255
    256					     ;
    257					     ;	 check deep level
    258					     ;
    259					     restore <cx>
2   260	    016A  59				 pop cx
    261					     load <cx>
2   262	    016B  51				 push cx
    263	    016C  33 DB			     xor bx, bx
    264	    016E  8A 1E	0363r		     mov bl, byte ptr [deep_level]
    265	    0172  3B CB			     cmp cx, bx
    266	    0174  7D 2F			     jge _list_subfiles_recursive_next
    267
    268					     ;
    269					     ; start new search
    270					     ;
    271
    272					     ;
    273					     ;	 cd to subfolder
    274					     ;
    275					     load <cx>
2   276	    0176  51				 push cx
    277	    0177  51			     push cx
    278	    0178  E8 0037		     call move_dta
    279	    017B  05 001E		     add ax, 1Eh
    280
    281
    282					     ; xor ax, ax
    283					     ; mov al, byte ptr	[dta_len]
    284					     ; mul cx
    285
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 6
2tree.ASM



    286					     ; mov bx, offset dta + 1Eh
    287					     ; add bx, ax
    288					     ; push bx
    289	    017E  50			     push ax
    290	    017F  E8 010A		     call cd
    291					     restore <cx>
2   292	    0182  59				 pop cx
    293
    294	    0183  41			     inc cx
    295					     ;
    296					     ;	 list subfiles from subfolder
    297					     ;
    298					     load <cx>
2   299	    0184  51				 push cx
    300	    0185  B8 036Ar		     mov ax, offset folder_mask
    301	    0188  50			     push ax
    302	    0189  51			     push cx
    303	    018A  E8 FFB5		     call list_subfiles_recursive
    304					     restore <cx>
2   305	    018D  59				 pop cx
    306
    307
    308					     ;
    309					     ;	 list subfolders from subfolder
    310					     ;
    311					     load <cx>
2   312	    018E  51				 push cx
    313	    018F  B8 0364r		     mov ax, offset file_mask
    314	    0192  50			     push ax
    315	    0193  51			     push cx
    316	    0194  E8 FFAB		     call list_subfiles_recursive
    317					     restore <cx>
2   318	    0197  59				 pop cx
    319
    320
    321					     ;
    322					     ;	 cd back to this function
    323					     ;
    324	    0198  B8 036Cr		     mov ax, offset parent_folder
    325	    019B  50			     push ax
    326	    019C  E8 00ED		     call cd
    327
    328					     restore <cx>
2   329	    019F  59				 pop cx
    330					     load <cx>
2   331	    01A0  51				 push cx
    332					     ; mov ax, offset dta
    333	    01A1  51			     push cx
    334					     ; push ax
    335	    01A2  E8 0102		     call set_dta
    336	    01A5			 _list_subfiles_recursive_next:
    337	    01A5  E8 009E		     call find_next
    338	    01A8  73 AD			     jnc _list_subfiles_recursive_loop
    339	    01AA  3A 06	0312r		     cmp al, byte ptr [no_more_files]
    340	    01AE  75 47			     jne find_next_error
    341	    01B0			 _list_subfiles_recursive_end:
    342					     restore <cx>
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 7
2tree.ASM



2   343	    01B0  59				 pop cx
    344	    01B1  C3			     ret
    345	    01B2			 move_dta:
    346	    01B2  5B			     pop bx
    347	    01B3  59			     pop cx
    348	    01B4  53			     push bx
    349
    350	    01B5  33 C0			     xor ax, ax
    351	    01B7  A0 0313r		     mov al, byte ptr [dta_len]
    352	    01BA  F7 E1			     mul cx
    353
    354	    01BC  BB 0431r		     mov bx, offset dta
    355	    01BF  03 D8			     add bx, ax
    356	    01C1  8B C3			     mov ax, bx
    357	    01C3  C3			     ret
    358	    01C4			 zeros:
    359	    01C4  5B			     pop bx
    360	    01C5  59			     pop cx ; length
    361	    01C6  5F			     pop di ; address
    362	    01C7  53			     push bx
    363	    01C8  B0 00			     mov al, 0
    364	    01CA  FC			     cld
    365	    01CB  F3> AA		     rep stosb
    366	    01CD  C3			     ret
    367	    01CE			 is_folder:
    368	    01CE  BB 0446r		     mov bx, offset dta	+ 15h
    369	    01D1  8A 1F			     mov bl, byte ptr [bx]
    370	    01D3  80 FB	10		     cmp bl, 10h
    371	    01D6  74 02			     je	_is_folder_true
    372	    01D8  75 05			     jne _is_folder_false
    373	    01DA			 _is_folder_true:
    374	    01DA  B8 0001		     mov ax, 1
    375	    01DD  EB 05			     jmp _is_folder_end
    376	    01DF			 _is_folder_false:
    377	    01DF  B8 0000		     mov ax, 0
    378	    01E2  EB 00			     jmp _is_folder_end
    379	    01E4			 _is_folder_end:
    380	    01E4  C3			     ret
    381
    382
    383
    384	    01E5			 find_first_error:
    385					     print_range <find_first_fails, newline>
2   386						 print <offset find_first_fails>
3   387	    01E5  B4 09				 mov ah, 09h
3   388	    01E7  BA 032Cr			 mov dx, offset	find_first_fails
3   389	    01EA  CD 21				 int 21h
2   390						 print <offset newline>
3   391	    01EC  B4 09				 mov ah, 09h
3   392	    01EE  BA 042Fr			 mov dx, offset	newline
3   393	    01F1  CD 21				 int 21h
    394					     exit
1   395	    01F3  B4 00			     mov ah, 00h
1   396	    01F5  CD 21			     int 21h
    397	    01F7			 find_next_error:
    398					     print_range <find_next_fails, newline>
2   399						 print <offset find_next_fails>
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 8
2tree.ASM



3   400	    01F7  B4 09				 mov ah, 09h
3   401	    01F9  BA 0348r			 mov dx, offset	find_next_fails
3   402	    01FC  CD 21				 int 21h
2   403						 print <offset newline>
3   404	    01FE  B4 09				 mov ah, 09h
3   405	    0200  BA 042Fr			 mov dx, offset	newline
3   406	    0203  CD 21				 int 21h
    407					     exit
1   408	    0205  B4 00			     mov ah, 00h
1   409	    0207  CD 21			     int 21h
    410
    411	    0209			 parse_command_line:
    412					     ;
    413					     ; prepare root folder
    414					     ;
    415	    0209  BE 0082		     mov si, 82h
    416	    020C  B9 0040		     mov cx, 64
    417	    020F  51			     push cx
    418	    0210  56			     push si
    419	    0211  E8 00DF		     call count_no_space_no_zero_letters
    420	    0214  8B C8			     mov cx, ax
    421	    0216  BE 0082		     mov si, 82h
    422	    0219  BF 03AFr		     mov di, offset root_folder
    423	    021C  F3> A4		     rep movsb
    424
    425	    021E			 parse_args:
    426	    021E  46			     inc si
    427	    021F  46			     inc si
    428	    0220  80 3C	64		     cmp byte ptr [si],	'd'
    429	    0223  74 07			     je	parse_d
    430	    0225  80 3C	66		     cmp byte ptr [si],	'f'
    431	    0228  74 0F			     je	parse_f
    432	    022A  EB 19			     jmp parse_end
    433	    022C			 parse_d:
    434					     ;
    435					     ; parse_deep level
    436					     ;
    437	    022C  46			     inc si
    438	    022D  46			     inc si
    439	    022E  8A 1C			     mov bl, byte ptr [si]
    440	    0230  80 EB	30		     sub bl, 30h	     ; to number
    441	    0233  88 1E	0363r		     mov byte ptr [deep_level],	bl
    442	    0237  EB E5			     jmp parse_args
    443	    0239			 parse_f:
    444	    0239  46			     inc si
    445	    023A  46			     inc si
    446	    023B  BF 0365r		     mov di, offset file_ext
    447	    023E  B9 0004		     mov cx, 4
    448	    0241  F3> A4		     rep movsb
    449	    0243  EB D9			     jmp parse_args
    450					     ;
    451					     ; parse file extension
    452					     ;
    453	    0245			 parse_end:
    454	    0245  C3			     ret
    455	    0246			 find_next:
    456	    0246  B4 4F			     mov ah, 4Fh
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 9
2tree.ASM



    457	    0248  CD 21			     int 21h
    458
    459	    024A  C3			     ret
    460
    461	    024B			 find_first:
    462	    024B  5B			     pop bx
    463	    024C  5A			     pop dx		 ; filename spec
    464	    024D  B9 0010		     mov cx, 10h	 ; include directories
    465	    0250  53			     push bx
    466
    467	    0251  33 C0			     xor ax, ax
    468	    0253  B4 4E			     mov ah, 4Eh
    469	    0255  CD 21			     int 21h
    470	    0257  C3			     ret
    471	    0258			 show_filename_from_dta:
    472	    0258  5B			     pop bx
    473	    0259  59			     pop cx  ; deep level
    474	    025A  53			     push bx
    475
    476	    025B  51			     push cx
    477	    025C  E8 FF53		     call move_dta
    478	    025F  05 001E		     add ax, 1Eh
    479					     ; xor ax, ax
    480					     ; mov al, byte ptr	[dta_len]
    481					     ; mul cx
    482					     ; mov bx, offset dta + 1Eh
    483					     ; add bx, ax
    484
    485	    0262  8B D8			     mov bx, ax
    486					     load <bx>
2   487	    0264  53				 push bx
    488	    0265  80 3F	2E		     cmp byte ptr [bx],	'.'
    489	    0268  75 05			     jne _show_filename_from_dta_valid_name
    490	    026A  B8 0000		     mov ax, 0
    491					     restore <bx>
2   492	    026D  5B				 pop bx
    493	    026E  C3			     ret
    494	    026F			 _show_filename_from_dta_valid_name:
    495	    026F  B9 000D		     mov cx, 13
    496					     restore <bx>
2   497	    0272  5B				 pop bx
    498					     load <bx>
2   499	    0273  53				 push bx
    500	    0274  51			     push cx
    501	    0275  53			     push bx
    502	    0276  E8 007A		     call count_no_space_no_zero_letters
    503	    0279  8B C8			     mov cx, ax
    504					     restore <bx>
2   505	    027B  5B				 pop bx
    506					     ; mov ax, offset dta + 1Eh
    507	    027C  51			     push cx
    508	    027D  53			     push bx
    509	    027E  E8 005C		     call print_string_with_length
    510					     print_range <newline>
2   511						 print <offset newline>
3   512	    0281  B4 09				 mov ah, 09h
3   513	    0283  BA 042Fr			 mov dx, offset	newline
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 10
2tree.ASM



3   514	    0286  CD 21				 int 21h
    515	    0288  B8 0001		     mov ax, 1
    516	    028B  C3			     ret
    517	    028C			 cd:
    518	    028C  5B			     pop bx ; ret addr
    519	    028D  5A			     pop dx ; root address
    520	    028E  53			     push bx ; ret addr
    521
    522	    028F  33 C0			     xor ax, ax
    523	    0291  B4 3B			     mov ah, 3Bh
    524	    0293  CD 21			     int 21h
    525
    526	    0295  72 01			     jc	cd_error
    527	    0297  C3			     ret
    528	    0298			 cd_error:
    529					     print_range <cd_fails, newline>
2   530						 print <offset cd_fails>
3   531	    0298  B4 09				 mov ah, 09h
3   532	    029A  BA 0314r			 mov dx, offset	cd_fails
3   533	    029D  CD 21				 int 21h
2   534						 print <offset newline>
3   535	    029F  B4 09				 mov ah, 09h
3   536	    02A1  BA 042Fr			 mov dx, offset	newline
3   537	    02A4  CD 21				 int 21h
    538	    02A6  C3			     ret
    539
    540	    02A7			 set_dta:
    541	    02A7  5B			     pop bx
    542	    02A8  59			     pop cx			 ; deep	level
    543					     ; pop dx			   ; dta address offset
    544	    02A9  53			     push bx
    545
    546	    02AA  BA 0431r		     mov dx, offset dta
    547					     ; shift to	current	dta
    548					     ; mov cx, 0
    549					     ; load <dx>
    550					     ; push cx
    551					     ; call move_dta
    552					     ; restore <dx>
    553					     ; add dx, ax
    554					     load <dx>
2   555	    02AD  52				 push dx
    556	    02AE  33 C0			     xor ax, ax
    557	    02B0  A0 0313r		     mov al, byte ptr [dta_len]
    558	    02B3  F7 E1			     mul cx
    559					     restore <dx>
2   560	    02B5  5A				 pop dx
    561	    02B6  03 D0			     add dx, ax
    562
    563	    02B8  33 C0			     xor ax, ax
    564	    02BA  B4 1A			     mov ah, 1Ah
    565	    02BC  CD 21			     int 21h
    566
    567	    02BE  C3			     ret
    568
    569	    02BF			 save_cwd:
    570	    02BF  BE 036Fr		     mov si, offset working_folder
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 11
2tree.ASM



    571
    572					     ;
    573					     ; save driver
    574					     ;
    575	    02C2  B4 19			     mov ah, 19h		 ; GET CURRENT DEFAULT DRIVE
    576	    02C4  CD 21			     int 21h
    577	    02C6  8A D0			     mov dl, al
    578	    02C8  80 C2	41		     add dl, 41h
    579	    02CB  88 14			     mov byte ptr [si],	dl
    580	    02CD  46			     inc si
    581	    02CE  C6 04	3A		     mov byte ptr [si],	':'
    582	    02D1  46			     inc si
    583	    02D2  C6 04	5C		     mov byte ptr [si],	'\'
    584	    02D5  46			     inc si
    585
    586					     ;
    587					     ; save folder
    588					     ;
    589	    02D6  32 D2			     xor dl, dl			 ; Actual drive
    590	    02D8  B4 47			     mov ah, 47h		 ; CWD - GET CURRENT DIRECTORY
    591	    02DA  CD 21			     int 21h
    592	    02DC  C3			     ret
    593	    02DD			 print_string_with_length:
    594	    02DD  5B			     pop bx ; ret address
    595	    02DE  5E			     pop si ; string offset
    596	    02DF  59			     pop cx ; string length
    597	    02E0  53			     push bx; ret address
    598	    02E1  33 C0			     xor ax, ax
    599	    02E3			 _print_string_with_length_loop:
    600	    02E3  B4 02			     mov ah, 02h
    601	    02E5  8A 14			     mov dl, byte ptr [si]
    602	    02E7  CD 21			     int 21h
    603	    02E9  49			     dec cx
    604	    02EA  46			     inc si
    605	    02EB  83 F9	00		     cmp cx, 00h
    606	    02EE  74 02			     je	_print_string_with_length_end
    607	    02F0  EB F1			     jmp _print_string_with_length_loop
    608	    02F2			 _print_string_with_length_end:
    609	    02F2  C3			     ret
    610	    02F3			 count_no_space_no_zero_letters:
    611	    02F3  5B			     pop bx ; ret address
    612	    02F4  5E			     pop si ; string offset
    613	    02F5  59			     pop cx ; string length
    614	    02F6  53			     push bx ; ret address
    615	    02F7  B8 0000		     mov ax, 0
    616	    02FA			 _count_non_space_symbols_loop:
    617	    02FA  80 3C	20		     cmp byte ptr [si],	20h
    618	    02FD  74 12			     je	_count_non_space_symbols_end
    619	    02FF  80 3C	0D		     cmp byte ptr [si],	0Dh
    620	    0302  74 0D			     je	_count_non_space_symbols_end
    621	    0304  80 3C	00		     cmp byte ptr [si],	00h
    622	    0307  74 08			     je	_count_non_space_symbols_end
    623	    0309  3B C1			     cmp ax, cx
    624	    030B  74 04			     je	_count_non_space_symbols_end
    625	    030D  40			     inc ax
    626	    030E  46			     inc si
    627	    030F  EB E9			     jmp _count_non_space_symbols_loop
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 12
2tree.ASM



    628	    0311			 _count_non_space_symbols_end:
    629	    0311  C3			     ret
    630					 ;
    631					 ; error codes
    632					 ;
    633	    0312  12			 no_more_files db 18
    634	    0313  2B			 dta_len db 2bh
    635					 ;
    636					 ; error messages
    637					 ;
    638	    0314  43 68	61 6E 67 65 20+	 cd_fails db 'Change directory fails.$'
    639		  64 69	72 65 63 74 6F+
    640		  72 79	20 66 61 69 6C+
    641		  73 2E	24
    642	    032C  66 69	6E 64 5F 66 69+	 find_first_fails db 'find_first filenames fails.$'
    643		  72 73	74 20 66 69 6C+
    644		  65 6E	61 6D 65 73 20+
    645		  66 61	69 6C 73 2E 24
    646	    0348  66 69	6E 64 5F 6E 65+	 find_next_fails db  'find_next	filenames fails.$'
    647		  78 74	20 66 69 6C 65+
    648		  6E 61	6D 65 73 20 66+
    649		  61 69	6C 73 2E 24
    650					 ;
    651					 ;   parse arguments
    652					 ;
    653	    0363  01			 deep_level db 1
    654	    0364  2A			 file_mask db '*'
    655	    0365  2E 2A	00 00 00	 file_ext db '.*', 00h,	00h, 00h
    656	    036A  2A 00			 folder_mask db	'*', 00h
    657					 ;
    658					 ; strings
    659					 ;
    660	    036C  2E 2E	00		 parent_folder db '..',	00h
    661	    036F  40*(00)		 working_folder	db 64 dup(00h)
    662	    03AF  40*(00)		 root_folder db	64 dup(00h)
    663	    03EF  40*(00)		 start_mask db 64 dup(00h)
    664	    042F  0A 24			 newline db 0Ah, '$'
    665	    0431  2B*(00)		 dta db	43 dup(0)
    666					 end start
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/08/19"
??FILENAME			  Text	 "2tree	  "
??TIME				  Text	 "21:55:33"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 2TREE
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CD				  Near	 DGROUP:028C
CD_ERROR			  Near	 DGROUP:0298
CD_FAILS			  Byte	 DGROUP:0314
COUNT_NO_SPACE_NO_ZERO_LETTERS	  Near	 DGROUP:02F3
DEEP_LEVEL			  Byte	 DGROUP:0363
DTA				  Byte	 DGROUP:0431
DTA_LEN				  Byte	 DGROUP:0313
FILE_EXT			  Byte	 DGROUP:0365
FILE_MASK			  Byte	 DGROUP:0364
FIND_FIRST			  Near	 DGROUP:024B
FIND_FIRST_ERROR		  Near	 DGROUP:01E5
FIND_FIRST_FAILS		  Byte	 DGROUP:032C
FIND_NEXT			  Near	 DGROUP:0246
FIND_NEXT_ERROR			  Near	 DGROUP:01F7
FIND_NEXT_FAILS			  Byte	 DGROUP:0348
FOLDER_MASK			  Byte	 DGROUP:036A
IS_FOLDER			  Near	 DGROUP:01CE
LIST_SUBFILES_RECURSIVE		  Near	 DGROUP:0142
LIST_SUBFILES_RECURSIVE_FROM	  Near	 DGROUP:0123
MOVE_DTA			  Near	 DGROUP:01B2
NEWLINE				  Byte	 DGROUP:042F
NO_MORE_FILES			  Byte	 DGROUP:0312
PARENT_FOLDER			  Byte	 DGROUP:036C
PARSE_ARGS			  Near	 DGROUP:021E
PARSE_COMMAND_LINE		  Near	 DGROUP:0209
PARSE_D				  Near	 DGROUP:022C
PARSE_END			  Near	 DGROUP:0245
PARSE_F				  Near	 DGROUP:0239
PRINT_STRING_WITH_LENGTH	  Near	 DGROUP:02DD
ROOT_FOLDER			  Byte	 DGROUP:03AF
SAVE_CWD			  Near	 DGROUP:02BF
SET_DTA				  Near	 DGROUP:02A7
SHOW_FILENAME_FROM_DTA		  Near	 DGROUP:0258
START				  Near	 DGROUP:0100
START_MASK			  Byte	 DGROUP:03EF
WORKING_FOLDER			  Byte	 DGROUP:036F
ZEROS				  Near	 DGROUP:01C4
_COUNT_NON_SPACE_SYMBOLS_END	  Near	 DGROUP:0311
Turbo Assembler	 Version 4.1	    12/08/19 21:55:34	    Page 14
Symbol Table



_COUNT_NON_SPACE_SYMBOLS_LOOP	  Near	 DGROUP:02FA
_IS_FOLDER_END			  Near	 DGROUP:01E4
_IS_FOLDER_FALSE		  Near	 DGROUP:01DF
_IS_FOLDER_TRUE			  Near	 DGROUP:01DA
_LIST_SUBFILES_RECURSIVE_END	  Near	 DGROUP:01B0
_LIST_SUBFILES_RECURSIVE_LOOP	  Near	 DGROUP:0157
_LIST_SUBFILES_RECURSIVE_NEXT	  Near	 DGROUP:01A5
_PRINT_STRING_WITH_LENGTH_END	  Near	 DGROUP:02F2
_PRINT_STRING_WITH_LENGTH_LOOP	  Near	 DGROUP:02E3
_SHOW_FILENAME_FROM_DTA_VALID_NA  Near	 DGROUP:026F
ME

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  045C Word	  Public  CODE
