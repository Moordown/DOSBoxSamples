Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 1
dwcalc.ASM



      1					 include bmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 parse_byte_to_str macro from, to, length
1    45					     mov ax, length
1    46					     push ax
1    47					     mov ax, to
1    48					     push ax
1    49					     xor ax, ax
1    50					     mov al, from
1    51					     push ax
1    52					     call store_iint_to_string
1    53					 endm
1    54
1    55					 parse_word_to_str macro from, to, length
1    56					     mov ax, length
1    57					     push ax
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 2
dwcalc.ASM



1    58					     mov ax, to
1    59					     push ax
1    60					     xor ax, ax
1    61					     mov ax, from
1    62					     push ax
1    63					     call store_iint_to_string
1    64					 endm
     65
     66	    0000			 .model	tiny
     67					 .386
     68	    0000			 .code
     69					 org 100h
     70	    0100			 start:
     71	    0100  E8 004C		     call example_add
     72
     73	    0103			 example_div:
     74	    0103  A1 0208r		     mov ax, word ptr [div_word]
     75	    0106  8B 1E	020Ar		     mov bx, word ptr [div_word	+ 2]
     76	    010A  53			     push bx
     77	    010B  50			     push ax
     78	    010C  E8 0082		     call set_dword
     79	    010F  E8 00C9		     call ddiv10
     80	    0112  8B 16	0202r		     mov dx, word ptr [remainder]
     81	    0116  83 FA	02		     cmp dx, 2
     82	    0119  75 1F			     jne example_div_l1
     83	    011B  E8 007F		     call get_dword
     84	    011E  58			     pop ax ; l
     85	    011F  5A			     pop dx ; h
     86	    0120  83 FA	66		     cmp dx, 102
     87	    0123  75 15			     jne example_div_l1
     88	    0125  3D B373		     cmp ax, 45939
     89	    0128  75 10			     jne example_div_l1
     90					     print_range <example_ok, example_newline>
2    91						 print <offset example_ok>
3    92	    012A  B4 09				 mov ah, 09h
3    93	    012C  BA 0210r			 mov dx, offset	example_ok
3    94	    012F  CD 21				 int 21h
2    95						 print <offset example_newline>
3    96	    0131  B4 09				 mov ah, 09h
3    97	    0133  BA 0217r			 mov dx, offset	example_newline
3    98	    0136  CD 21				 int 21h
     99	    0138  EB 10			     jmp example_div_ext
    100	    013A			 example_div_l1:
    101					     print_range <example_err, example_newline>
2   102						 print <offset example_err>
3   103	    013A  B4 09				 mov ah, 09h
3   104	    013C  BA 0213r			 mov dx, offset	example_err
3   105	    013F  CD 21				 int 21h
2   106						 print <offset example_newline>
3   107	    0141  B4 09				 mov ah, 09h
3   108	    0143  BA 0217r			 mov dx, offset	example_newline
3   109	    0146  CD 21				 int 21h
    110	    0148  EB 00			     jmp example_div_ext
    111	    014A			 example_div_ext:
    112					     exit
1   113	    014A  B4 00			     mov ah, 00h
1   114	    014C  CD 21			     int 21h
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 3
dwcalc.ASM



    115	    014E  C3			     ret
    116
    117
    118	    014F			 example_add:
    119	    014F  B8 020Cr		     lea ax, add_word
    120	    0152  50			     push ax
    121	    0153  E8 0053		     call set_dword_from
    122	    0156  B8 020Cr		     lea ax, add_word
    123	    0159  50			     push ax
    124	    015A  E8 005A		     call dadd_from
    125	    015D  E8 003D		     call get_dword
    126	    0160  58			     pop ax ; l
    127	    0161  5A			     pop dx ; h
    128	    0162  83 FA	01		     cmp dx, 1
    129	    0165  75 15			     jne example_add_l1
    130	    0167  3D FFFE		     cmp ax, 65534
    131	    016A  75 10			     jne example_add_l1
    132					     print_range <example_ok, example_newline>
2   133						 print <offset example_ok>
3   134	    016C  B4 09				 mov ah, 09h
3   135	    016E  BA 0210r			 mov dx, offset	example_ok
3   136	    0171  CD 21				 int 21h
2   137						 print <offset example_newline>
3   138	    0173  B4 09				 mov ah, 09h
3   139	    0175  BA 0217r			 mov dx, offset	example_newline
3   140	    0178  CD 21				 int 21h
    141	    017A  EB 10			     jmp example_add_ext
    142	    017C			 example_add_l1:
    143					     print_range <example_err, example_newline>
2   144						 print <offset example_err>
3   145	    017C  B4 09				 mov ah, 09h
3   146	    017E  BA 0213r			 mov dx, offset	example_err
3   147	    0181  CD 21				 int 21h
2   148						 print <offset example_newline>
3   149	    0183  B4 09				 mov ah, 09h
3   150	    0185  BA 0217r			 mov dx, offset	example_newline
3   151	    0188  CD 21				 int 21h
    152	    018A  EB 00			     jmp example_add_ext
    153	    018C			 example_add_ext:
    154					     exit
1   155	    018C  B4 00			     mov ah, 00h
1   156	    018E  CD 21			     int 21h
    157	    0190  C3			     ret
    158
    159					 include fdwcalc.asm
1   160	    0191			 set_dword:
1   161	    0191  59			     pop cx ; ret address
1   162	    0192  58			     pop ax ; word ptr [l16]
1   163	    0193  5A			     pop dx ; word ptr [h16]
1   164
1   165	    0194  51			     push cx
1   166	    0195  A3 0204r		     mov word ptr [doubleword],	ax
1   167	    0198  89 16	0206r		     mov word ptr [doubleword +	2], dx
1   168
1   169	    019C  C3			     ret
1   170
1   171	    019D			 get_dword:
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 4
dwcalc.ASM



1   172	    019D  59			     pop cx ; ret address
1   173
1   174	    019E  A1 0204r		     mov ax, word ptr [doubleword]
1   175	    01A1  8B 16	0206r		     mov dx, word ptr [doubleword + 2]
1   176
1   177	    01A5  52			     push dx
1   178	    01A6  50			     push ax
1   179	    01A7  51			     push cx
1   180
1   181	    01A8  C3			     ret
1   182
1   183	    01A9			 set_dword_from:
1   184	    01A9  5A			     pop dx
1   185	    01AA  5B			     pop bx ; address from
1   186	    01AB  52			     push dx
1   187	    01AC  8B 57	02		     mov dx, word ptr [bx + 2]
1   188	    01AF  52			     push dx
1   189	    01B0  8B 17			     mov dx, word ptr [bx]
1   190	    01B2  52			     push dx
1   191	    01B3  E8 FFDB		     call set_dword
1   192	    01B6  C3			     ret
1   193
1   194	    01B7			 dadd_from:
1   195	    01B7  5A			     pop dx
1   196	    01B8  5B			     pop bx ; address from
1   197	    01B9  52			     push dx
1   198	    01BA  8B 47	02		     mov ax, word ptr [bx + 2]
1   199	    01BD  50			     push ax
1   200	    01BE  8B 07			     mov ax, word ptr [bx]
1   201	    01C0  50			     push ax
1   202	    01C1  E8 0001		     call dadd
1   203	    01C4  C3			     ret
1   204
1   205	    01C5			 dadd:
1   206	    01C5  5E			     pop si
1   207					     ;
1   208					     ; on stack	lay pair (l,h) of one dword, then we load second
1   209					     ;
1   210	    01C6  E8 FFD4		     call get_dword
1   211
1   212	    01C9  58			     pop ax ; our low
1   213	    01CA  5B			     pop bx ; our hight
1   214	    01CB  59			     pop cx ; their low
1   215	    01CC  5A			     pop dx ; their hight
1   216
1   217	    01CD  13 C1			     adc ax, cx
1   218	    01CF  72 00			     jc	_dadd_add_one
1   219	    01D1			 _dadd_add_one:
1   220	    01D1  43			     inc bx
1   221	    01D2  03 DA			     add bx, dx
1   222	    01D4  53			     push bx
1   223	    01D5  50			     push ax
1   224	    01D6  E8 FFB8		     call set_dword
1   225	    01D9  56			     push si
1   226	    01DA  C3			     ret
1   227
1   228	    01DB			 ddiv10:
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 5
dwcalc.ASM



1   229	    01DB  E8 FFBF		     call get_dword
1   230	    01DE  E8 0008		     call _ddiv10
1   231	    01E1  89 16	0202r		     mov word ptr [remainder], dx
1   232	    01E5  E8 FFA9		     call set_dword
1   233
1   234	    01E8  C3			     ret
1   235
1   236	    01E9			 _ddiv10:
1   237	    01E9  59			     pop cx ; ret address
1   238	    01EA  58			     pop ax ; word ptr [l16]
1   239	    01EB  5A			     pop dx ; word ptr [h16]
1   240
1   241					     load <ax>
3   242	    01EC  50				 push ax
1   243	    01ED  8B C2			     mov ax, dx
1   244	    01EF  33 D2			     xor dx, dx
1   245	    01F1  BB 000A		     mov bx, 10
1   246	    01F4  F7 F3			     div bx
1   247	    01F6  8B D8			     mov bx, ax	; word ptr [h16]
1   248					     restore <ax>
3   249	    01F8  58				 pop ax
1   250	    01F9  53			     push bx
1   251
1   252	    01FA  BB 000A		     mov bx, 10
1   253	    01FD  F7 F3			     div bx
1   254	    01FF  50			     push ax ; word ptr	[l15]
1   255
1   256	    0200  51			     push cx
1   257	    0201  C3			     ret
1   258
1   259	    0202  0000			 remainder dw 0
1   260	    0204  00000000		 doubleword dd 0
    261
    262	    0208  04030280		 div_word dd 67306112
    263	    020C  0000FFFF		 add_word dd 65535
    264
    265	    0210  6F 6B	24		 example_ok db 'ok$'
    266	    0213  65 72	72 24		 example_err db	'err$'
    267	    0217  0A 24			 example_newline db 0Ah, '$'
    268
    269					 end start
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/23/19"
??FILENAME			  Text	 "dwcalc  "
??TIME				  Text	 "12:39:54"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DWCALC
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADD_WORD			  Dword	 DGROUP:020C
DADD				  Near	 DGROUP:01C5
DADD_FROM			  Near	 DGROUP:01B7
DDIV10				  Near	 DGROUP:01DB
DIV_WORD			  Dword	 DGROUP:0208
DOUBLEWORD			  Dword	 DGROUP:0204
EXAMPLE_ADD			  Near	 DGROUP:014F
EXAMPLE_ADD_EXT			  Near	 DGROUP:018C
EXAMPLE_ADD_L1			  Near	 DGROUP:017C
EXAMPLE_DIV			  Near	 DGROUP:0103
EXAMPLE_DIV_EXT			  Near	 DGROUP:014A
EXAMPLE_DIV_L1			  Near	 DGROUP:013A
EXAMPLE_ERR			  Byte	 DGROUP:0213
EXAMPLE_NEWLINE			  Byte	 DGROUP:0217
EXAMPLE_OK			  Byte	 DGROUP:0210
GET_DWORD			  Near	 DGROUP:019D
REMAINDER			  Word	 DGROUP:0202
SET_DWORD			  Near	 DGROUP:0191
SET_DWORD_FROM			  Near	 DGROUP:01A9
START				  Near	 DGROUP:0100
_DADD_ADD_ONE			  Near	 DGROUP:01D1
_DDIV10				  Near	 DGROUP:01E9

Macro Name

BREAK_POINT
EXIT
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
PRINT
PRINT_RANGE
RESTORE
Turbo Assembler	 Version 4.1	    12/23/19 12:39:54	    Page 7
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0219 Word	  Public  CODE
