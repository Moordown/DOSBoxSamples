Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 1
sgraph.ASM



      1					 include bmacro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 print_range macro args
1    26					     irp d,<args>
1    27						 print <offset d>
1    28					     endm
1    29					 endm
1    30
1    31					 break_point macro arg
1    32					     load <arg>
1    33					     xor arg, arg
1    34					     xor arg, arg
1    35					     xor arg, arg
1    36					     xor arg, arg
1    37					     xor arg, arg
1    38					     xor arg, arg
1    39					     xor arg, arg
1    40					     xor arg, arg
1    41					     restore <arg>
1    42					 endm
1    43
1    44					 parse_byte_to_str macro from, to, length
1    45					     mov ax, length
1    46					     push ax
1    47					     mov ax, to
1    48					     push ax
1    49					     xor ax, ax
1    50					     mov al, from
1    51					     push ax
1    52					     call store_iint_to_string
1    53					 endm
1    54
1    55					 parse_word_to_str macro from, to, length
1    56					     mov ax, length
1    57					     push ax
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 2
sgraph.ASM



1    58					     mov ax, to
1    59					     push ax
1    60					     xor ax, ax
1    61					     mov ax, from
1    62					     push ax
1    63					     call store_iint_to_string
1    64					 endm
     65					 include macro.asm
1    66					 load macro args
1    67					     irp d,<args>
1    68						 push d
1    69					     endm
1    70					 endm
1    71
1    72					 restore macro args
1    73					     irp d,<args>
1    74						 pop d
1    75					     endm
1    76					 endm
1    77
1    78					 exit macro
1    79					     mov ah, 00h
1    80					     int 21h
1    81					 endm
1    82
1    83					 print macro buf
1    84						 mov ah, 09h
1    85						 mov dx, buf
1    86						 int 21h
1    87					 endm
1    88
1    89					 print_range macro args
1    90					     irp d,<args>
1    91						 print <offset d>
1    92					     endm
1    93					 endm
1    94
1    95					 push_fragment macro buf, length
1    96					     local l1
1    97					     lea di, buf
1    98					     mov cx, length
1    99					     xor bx, bx
1   100					 l1:
1   101					     mov bl, byte ptr [di]
1   102					     push bx
1   103					     inc di
1   104					     dec cx
1   105					     cmp cx, 0
1   106					     jne l1
1   107					 endm
1   108
1   109					 pop_fragment macro buf, length
1   110					     local l1
1   111					     lea di, buf
1   112					     mov cx, length
1   113					     add di, cx
1   114					     dec di
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 3
sgraph.ASM



1   115					     xor bx, bx
1   116					 l1:
1   117					     pop bx
1   118					     mov byte ptr [di],	bl
1   119					     dec di
1   120					     dec cx
1   121					     cmp cx, 0
1   122					     jne l1
1   123					 endm
1   124
1   125					 set_dta macro dta
1   126					     lea dx, dta
1   127					     xor ax, ax
1   128					     mov ah, 1Ah
1   129					     int 21h
1   130					 endm
1   131
1   132					 break_point macro arg
1   133					     load <arg>
1   134					     xor arg, arg
1   135					     xor arg, arg
1   136					     xor arg, arg
1   137					     xor arg, arg
1   138					     xor arg, arg
1   139					     xor arg, arg
1   140					     xor arg, arg
1   141					     xor arg, arg
1   142					     restore <arg>
1   143					 endm
1   144
1   145					 get_offset macro state
1   146					     xor dx, dx
1   147					     xor ax, ax
1   148					     mov al, state
1   149					     shl ax, 8
1   150					 endm get_offset
1   151
1   152					 to_non_space macro addr
1   153					     local l1, l2
1   154					     mov si, addr
1   155					 l1:
1   156					     mov byte ptr al, [si]
1   157					     cmp al, 20h
1   158					     je	l2
1   159					     cmp al, 0
1   160					     je	l2
1   161					     inc si
1   162					     jmp l1
1   163					 l2:
1   164					     inc si
1   165					     mov ax, si
1   166					 endm
1   167
1   168					 set_transition	macro buf, from, to, char
1   169					     load<bx, dx>
1   170					     get_offset	from
1   171
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 4
sgraph.ASM



1   172					     add ax, offset buf
1   173					     add ax, char
1   174
1   175					     mov bx, ax
1   176					     mov byte ptr [bx],	to
1   177					     restore<dx, bx>
1   178					 endm
1   179
1   180					 set_transition_length_from_start macro	buf, from, to, start, iterations
1   181					     local l1, end
1   182					     mov bx, start
1   183					     mov cx, iterations
1   184					 l1:
1   185					     cmp cx, 0
1   186					     je	end
1   187
1   188					     load <bx,cx>
1   189					     set_transition buf	from to	bx
1   190					     restore <cx,bx>
1   191
1   192					     inc bx
1   193					     dec cx
1   194					     jmp l1
1   195					 end:
1   196					 endm
1   197
1   198					 set_zero macro	state
1   199					     mov al, 0
1   200					     mov byte ptr [state], al
1   201					 endm
1   202
1   203					 set_transition_for_all	macro buf, from, to
1   204					     set_transition_length_from_start buf, from, to, 0,	255
1   205					 endm
1   206
1   207					 set_transition_for_digits macro buf, from, to
1   208					     set_transition_length_from_start buf, from, to, 30, 10
1   209					 endm
1   210
1   211					 set_transition_for_letters macro buf, from, to
1   212					     set_transition_length_from_start buf, from, to, 97, 26
1   213					     set_transition_length_from_start buf, from, to, 65, 26
1   214					 endm
1   215
1   216					 get_transition	macro buf, from, char
1   217					     load <dx>
1   218					     get_offset	from
1   219					     restore <dx>
1   220
1   221					     add ax, offset buf
1   222					     add ax, char
1   223
1   224					     mov bx, ax
1   225					     xor ax, ax
1   226					     mov al, byte ptr [bx]
1   227					 endm
1   228
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 5
sgraph.ASM



1   229					 put macro from, to, position
1   230					     xor dx, dx
1   231					     xor bx, bx
1   232
1   233					     mov dx, offset to
1   234					     mov bl, byte ptr [position]
1   235					     add dx, bx
1   236
1   237					     mov bl, byte ptr [from]
1   238					     mov byte ptr [edx], bl
1   239					     inc [position]
1   240					 endm
1   241
1   242					 clear_mes macro mes, lastidx
1   243					     local l1, end
1   244					     mov bx, offset mes
1   245					     mov cl, byte ptr [lastidx]
1   246					     inc cl
1   247					 l1:
1   248					     cmp cl, 0
1   249					     je	end
1   250					     mov byte ptr [bx],	'$'
1   251					     inc bx
1   252					     dec cl
1   253					     jmp l1
1   254					 end:
1   255					     mov bl, 0
1   256					     mov byte ptr [lastidx], bl
1   257					 endm
    258
    259	    0000			 model tiny
    260					 .386
    261	    0000			 .code
    262					 org 100h
    263	    0100			 start:
    264
    265	    0100  BA 0170r		     lea dx, fname
    266	    0103  52			     push dx
    267	    0104  E8 01E8		     call parse_file_from
    268					     print_range <first_parsed,	fp, open_newline>
2   269						 print <offset first_parsed>
3   270	    0107  B4 09				 mov ah, 09h
3   271	    0109  BA 05F1r			 mov dx, offset	first_parsed
3   272	    010C  CD 21				 int 21h
2   273						 print <offset fp>
3   274	    010E  B4 09				 mov ah, 09h
3   275	    0110  BA 0635r			 mov dx, offset	fp
3   276	    0113  CD 21				 int 21h
2   277						 print <offset open_newline>
3   278	    0115  B4 09				 mov ah, 09h
3   279	    0117  BA 016Er			 mov dx, offset	open_newline
3   280	    011A  CD 21				 int 21h
    281					     print_range <middle_parsed, mp, open_newline>
2   282						 print <offset middle_parsed>
3   283	    011C  B4 09				 mov ah, 09h
3   284	    011E  BA 0600r			 mov dx, offset	middle_parsed
3   285	    0121  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 6
sgraph.ASM



2   286						 print <offset mp>
3   287	    0123  B4 09				 mov ah, 09h
3   288	    0125  BA 0637r			 mov dx, offset	mp
3   289	    0128  CD 21				 int 21h
2   290						 print <offset open_newline>
3   291	    012A  B4 09				 mov ah, 09h
3   292	    012C  BA 016Er			 mov dx, offset	open_newline
3   293	    012F  CD 21				 int 21h
    294					     print_range <last_parsed, lp, open_newline>
2   295						 print <offset last_parsed>
3   296	    0131  B4 09				 mov ah, 09h
3   297	    0133  BA 0610r			 mov dx, offset	last_parsed
3   298	    0136  CD 21				 int 21h
2   299						 print <offset lp>
3   300	    0138  B4 09				 mov ah, 09h
3   301	    013A  BA 0639r			 mov dx, offset	lp
3   302	    013D  CD 21				 int 21h
2   303						 print <offset open_newline>
3   304	    013F  B4 09				 mov ah, 09h
3   305	    0141  BA 016Er			 mov dx, offset	open_newline
3   306	    0144  CD 21				 int 21h
    307					     print_range <level_shift_parsed, lhp, open_newline>
2   308						 print <offset level_shift_parsed>
3   309	    0146  B4 09				 mov ah, 09h
3   310	    0148  BA 061Er			 mov dx, offset	level_shift_parsed
3   311	    014B  CD 21				 int 21h
2   312						 print <offset lhp>
3   313	    014D  B4 09				 mov ah, 09h
3   314	    014F  BA 063Br			 mov dx, offset	lhp
3   315	    0152  CD 21				 int 21h
2   316						 print <offset open_newline>
3   317	    0154  B4 09				 mov ah, 09h
3   318	    0156  BA 016Er			 mov dx, offset	open_newline
3   319	    0159  CD 21				 int 21h
    320					     exit
1   321	    015B  B4 00			     mov ah, 00h
1   322	    015D  CD 21			     int 21h
    323
    324
    325	    015F  66 69	6C 65 20 63 6F+	 hello db 'file	content: $'
    326		  6E 74	65 6E 74 3A 20+
    327		  24
    328	    016E  0A 24			 open_newline db 0ah, '$'
    329	    0170  67 72	61 70 68 2E 74+	 fname db 'graph.txt', 00
    330		  78 74	00
    331
    332					 include parser.asm
1   333					 include macro.asm
2   334					 load macro args
2   335					     irp d,<args>
2   336						 push d
2   337					     endm
2   338					 endm
2   339
2   340					 restore macro args
2   341					     irp d,<args>
2   342						 pop d
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 7
sgraph.ASM



2   343					     endm
2   344					 endm
2   345
2   346					 exit macro
2   347					     mov ah, 00h
2   348					     int 21h
2   349					 endm
2   350
2   351					 print macro buf
2   352						 mov ah, 09h
2   353						 mov dx, buf
2   354						 int 21h
2   355					 endm
2   356
2   357					 print_range macro args
2   358					     irp d,<args>
2   359						 print <offset d>
2   360					     endm
2   361					 endm
2   362
2   363					 push_fragment macro buf, length
2   364					     local l1
2   365					     lea di, buf
2   366					     mov cx, length
2   367					     xor bx, bx
2   368					 l1:
2   369					     mov bl, byte ptr [di]
2   370					     push bx
2   371					     inc di
2   372					     dec cx
2   373					     cmp cx, 0
2   374					     jne l1
2   375					 endm
2   376
2   377					 pop_fragment macro buf, length
2   378					     local l1
2   379					     lea di, buf
2   380					     mov cx, length
2   381					     add di, cx
2   382					     dec di
2   383					     xor bx, bx
2   384					 l1:
2   385					     pop bx
2   386					     mov byte ptr [di],	bl
2   387					     dec di
2   388					     dec cx
2   389					     cmp cx, 0
2   390					     jne l1
2   391					 endm
2   392
2   393					 set_dta macro dta
2   394					     lea dx, dta
2   395					     xor ax, ax
2   396					     mov ah, 1Ah
2   397					     int 21h
2   398					 endm
2   399
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 8
sgraph.ASM



2   400					 break_point macro arg
2   401					     load <arg>
2   402					     xor arg, arg
2   403					     xor arg, arg
2   404					     xor arg, arg
2   405					     xor arg, arg
2   406					     xor arg, arg
2   407					     xor arg, arg
2   408					     xor arg, arg
2   409					     xor arg, arg
2   410					     restore <arg>
2   411					 endm
2   412
2   413					 get_offset macro state
2   414					     xor dx, dx
2   415					     xor ax, ax
2   416					     mov al, state
2   417					     shl ax, 8
2   418					 endm get_offset
2   419
2   420					 to_non_space macro addr
2   421					     local l1, l2
2   422					     mov si, addr
2   423					 l1:
2   424					     mov byte ptr al, [si]
2   425					     cmp al, 20h
2   426					     je	l2
2   427					     cmp al, 0
2   428					     je	l2
2   429					     inc si
2   430					     jmp l1
2   431					 l2:
2   432					     inc si
2   433					     mov ax, si
2   434					 endm
2   435
2   436					 set_transition	macro buf, from, to, char
2   437					     load<bx, dx>
2   438					     get_offset	from
2   439
2   440					     add ax, offset buf
2   441					     add ax, char
2   442
2   443					     mov bx, ax
2   444					     mov byte ptr [bx],	to
2   445					     restore<dx, bx>
2   446					 endm
2   447
2   448					 set_transition_length_from_start macro	buf, from, to, start, iterations
2   449					     local l1, end
2   450					     mov bx, start
2   451					     mov cx, iterations
2   452					 l1:
2   453					     cmp cx, 0
2   454					     je	end
2   455
2   456					     load <bx,cx>
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 9
sgraph.ASM



2   457					     set_transition buf	from to	bx
2   458					     restore <cx,bx>
2   459
2   460					     inc bx
2   461					     dec cx
2   462					     jmp l1
2   463					 end:
2   464					 endm
2   465
2   466					 set_zero macro	state
2   467					     mov al, 0
2   468					     mov byte ptr [state], al
2   469					 endm
2   470
2   471					 set_transition_for_all	macro buf, from, to
2   472					     set_transition_length_from_start buf, from, to, 0,	255
2   473					 endm
2   474
2   475					 set_transition_for_digits macro buf, from, to
2   476					     set_transition_length_from_start buf, from, to, 30, 10
2   477					 endm
2   478
2   479					 set_transition_for_letters macro buf, from, to
2   480					     set_transition_length_from_start buf, from, to, 97, 26
2   481					     set_transition_length_from_start buf, from, to, 65, 26
2   482					 endm
2   483
2   484					 get_transition	macro buf, from, char
2   485					     load <dx>
2   486					     get_offset	from
2   487					     restore <dx>
2   488
2   489					     add ax, offset buf
2   490					     add ax, char
2   491
2   492					     mov bx, ax
2   493					     xor ax, ax
2   494					     mov al, byte ptr [bx]
2   495					 endm
2   496
2   497					 put macro from, to, position
2   498					     xor dx, dx
2   499					     xor bx, bx
2   500
2   501					     mov dx, offset to
2   502					     mov bl, byte ptr [position]
2   503					     add dx, bx
2   504
2   505					     mov bl, byte ptr [from]
2   506					     mov byte ptr [edx], bl
2   507					     inc [position]
2   508					 endm
2   509
2   510					 clear_mes macro mes, lastidx
2   511					     local l1, end
2   512					     mov bx, offset mes
2   513					     mov cl, byte ptr [lastidx]
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 10
sgraph.ASM



2   514					     inc cl
2   515					 l1:
2   516					     cmp cl, 0
2   517					     je	end
2   518					     mov byte ptr [bx],	'$'
2   519					     inc bx
2   520					     dec cl
2   521					     jmp l1
2   522					 end:
2   523					     mov bl, 0
2   524					     mov byte ptr [lastidx], bl
2   525					 endm
1   526					 include ffile.asm
2   527	    017A			 read_from_file:
2   528	    017A  58			     pop ax
2   529	    017B  5B			     pop bx ; file handler
2   530	    017C  59			     pop cx ; read count
2   531	    017D  5A			     pop dx ; buffer for writing
2   532	    017E  50			     push ax
2   533
2   534	    017F  B4 3F			     mov ah, 3fh
2   535	    0181  CD 21			     int 21h
2   536	    0183  73 2C			     jnc _read_form_file_end
2   537	    0185  3D 0005		     cmp ax, 5
2   538	    0188  74 07			     je	ll5
2   539	    018A  3D 0006		     cmp ax, 6
2   540	    018D  74 12			     je	ll6
2   541	    018F  EB 20			     jmp _read_form_file_end
2   542	    0191			 ll5:
2   543					     print_range <read_err_5, file_newline>
4   544						 print <offset read_err_5>
5   545	    0191  B4 09				 mov ah, 09h
5   546	    0193  BA 02D0r			 mov dx, offset	read_err_5
5   547	    0196  CD 21				 int 21h
4   548						 print <offset file_newline>
5   549	    0198  B4 09				 mov ah, 09h
5   550	    019A  BA 02EDr			 mov dx, offset	file_newline
5   551	    019D  CD 21				 int 21h
2   552	    019F  EB 10			     jmp _read_form_file_end
2   553	    01A1			 ll6:
2   554					     print_range <read_err_6, file_newline>
4   555						 print <offset read_err_6>
5   556	    01A1  B4 09				 mov ah, 09h
5   557	    01A3  BA 02DEr			 mov dx, offset	read_err_6
5   558	    01A6  CD 21				 int 21h
4   559						 print <offset file_newline>
5   560	    01A8  B4 09				 mov ah, 09h
5   561	    01AA  BA 02EDr			 mov dx, offset	file_newline
5   562	    01AD  CD 21				 int 21h
2   563	    01AF  EB 00			     jmp _read_form_file_end
2   564	    01B1			 _read_form_file_end:
2   565	    01B1  C3			     ret
2   566
2   567	    01B2			 close_file:
2   568	    01B2  58			     pop ax
2   569	    01B3  5B			     pop bx ; file handler
2   570	    01B4  50			     push ax
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 11
sgraph.ASM



2   571	    01B5  B4 3E			     mov ah, 3eh
2   572	    01B7  CD 21			     int 21h
2   573	    01B9  73 0E			     jnc _close_file_end
2   574					     print_range <close_err_6, file_newline>
4   575						 print <offset close_err_6>
5   576	    01BB  B4 09				 mov ah, 09h
5   577	    01BD  BA 02C1r			 mov dx, offset	close_err_6
5   578	    01C0  CD 21				 int 21h
4   579						 print <offset file_newline>
5   580	    01C2  B4 09				 mov ah, 09h
5   581	    01C4  BA 02EDr			 mov dx, offset	file_newline
5   582	    01C7  CD 21				 int 21h
2   583	    01C9			 _close_file_end:
2   584	    01C9  C3			     ret
2   585
2   586	    01CA			 open_read:
2   587	    01CA  5B			     pop bx
2   588	    01CB  5A			     pop dx ; filename pointer
2   589	    01CC  53			     push bx
2   590	    01CD  B4 3D			     mov ah, 3Dh
2   591	    01CF  B0 00			     mov al, 0
2   592	    01D1  CD 21			     int 21h
2   593	    01D3  0F 83	0080		     jnc _open_read_end
2   594	    01D7  3D 0001		     cmp ax, 1
2   595	    01DA  74 1B			     je	l1
2   596	    01DC  3D 0002		     cmp ax, 2
2   597	    01DF  74 26			     je	l2
2   598	    01E1  3D 0003		     cmp ax, 3
2   599	    01E4  74 31			     je	l3
2   600	    01E6  3D 0004		     cmp ax, 4
2   601	    01E9  74 3C			     je	l4
2   602	    01EB  3D 0005		     cmp ax, 5
2   603	    01EE  74 47			     je	l5
2   604	    01F0  3D 000C		     cmp ax, 12
2   605	    01F3  74 52			     je	l12
2   606	    01F5  EB 60			     jmp _open_read_end
2   607	    01F7			 l1:
2   608					     print_range <open_err_1, file_newline>
4   609						 print <offset open_err_1>
5   610	    01F7  B4 09				 mov ah, 09h
5   611	    01F9  BA 0258r			 mov dx, offset	open_err_1
5   612	    01FC  CD 21				 int 21h
4   613						 print <offset file_newline>
5   614	    01FE  B4 09				 mov ah, 09h
5   615	    0200  BA 02EDr			 mov dx, offset	file_newline
5   616	    0203  CD 21				 int 21h
2   617	    0205  EB 50			     jmp _open_read_end
2   618	    0207			 l2:
2   619					     print_range <open_err_2, file_newline>
4   620						 print <offset open_err_2>
5   621	    0207  B4 09				 mov ah, 09h
5   622	    0209  BA 0270r			 mov dx, offset	open_err_2
5   623	    020C  CD 21				 int 21h
4   624						 print <offset file_newline>
5   625	    020E  B4 09				 mov ah, 09h
5   626	    0210  BA 02EDr			 mov dx, offset	file_newline
5   627	    0213  CD 21				 int 21h
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 12
sgraph.ASM



2   628	    0215  EB 40			     jmp _open_read_end
2   629	    0217			 l3:
2   630					     print_range <open_err_3, file_newline>
4   631						 print <offset open_err_3>
5   632	    0217  B4 09				 mov ah, 09h
5   633	    0219  BA 027Fr			 mov dx, offset	open_err_3
5   634	    021C  CD 21				 int 21h
4   635						 print <offset file_newline>
5   636	    021E  B4 09				 mov ah, 09h
5   637	    0220  BA 02EDr			 mov dx, offset	file_newline
5   638	    0223  CD 21				 int 21h
2   639	    0225  EB 30			     jmp _open_read_end
2   640	    0227			 l4:
2   641					     print_range <open_err_4, file_newline>
4   642						 print <offset open_err_4>
5   643	    0227  B4 09				 mov ah, 09h
5   644	    0229  BA 028Er			 mov dx, offset	open_err_4
5   645	    022C  CD 21				 int 21h
4   646						 print <offset file_newline>
5   647	    022E  B4 09				 mov ah, 09h
5   648	    0230  BA 02EDr			 mov dx, offset	file_newline
5   649	    0233  CD 21				 int 21h
2   650	    0235  EB 20			     jmp _open_read_end
2   651	    0237			 l5:
2   652					     print_range <open_err_5, file_newline>
4   653						 print <offset open_err_5>
5   654	    0237  B4 09				 mov ah, 09h
5   655	    0239  BA 02A1r			 mov dx, offset	open_err_5
5   656	    023C  CD 21				 int 21h
4   657						 print <offset file_newline>
5   658	    023E  B4 09				 mov ah, 09h
5   659	    0240  BA 02EDr			 mov dx, offset	file_newline
5   660	    0243  CD 21				 int 21h
2   661	    0245  EB 10			     jmp _open_read_end
2   662	    0247			 l12:
2   663					     print_range <open_err_12, file_newline>
4   664						 print <offset open_err_12>
5   665	    0247  B4 09				 mov ah, 09h
5   666	    0249  BA 02AFr			 mov dx, offset	open_err_12
5   667	    024C  CD 21				 int 21h
4   668						 print <offset file_newline>
5   669	    024E  B4 09				 mov ah, 09h
5   670	    0250  BA 02EDr			 mov dx, offset	file_newline
5   671	    0253  CD 21				 int 21h
2   672	    0255  EB 00			     jmp _open_read_end
2   673
2   674	    0257			 _open_read_end:
2   675	    0257  C3			     ret
2   676					 ;
2   677					 ; error codes
2   678					 ;
2   679	    0258  66 75	6E 63 74 69 6F+	 open_err_1 db 'function number	invalid$'
    680		  6E 20	6E 75 6D 62 65+
    681		  72 20	69 6E 76 61 6C+
    682		  69 64	24
2   683	    0270  66 69	6C 65 20 6E 6F+	 open_err_2 db 'file not found$'
    684		  74 20	66 6F 75 6E 64+
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 13
sgraph.ASM



    685		  24
2   686	    027F  70 61	74 68 20 6E 6F+	 open_err_3 db 'path not found$'
    687		  74 20	66 6F 75 6E 64+
    688		  24
2   689	    028E  6E 6F	20 68 61 6E 64+	 open_err_4 db 'no handle avaiable$'
    690		  6C 65	20 61 76 61 69+
    691		  61 62	6C 65 24
2   692	    02A1  61 63	63 65 73 73 20+	 open_err_5 db 'access denied$'
    693		  64 65	6E 69 65 64 24
2   694	    02AF  6F 70	65 6E 20 6D 6F+	 open_err_12 db	'open mode invalid$'
    695		  64 65	20 69 6E 76 61+
    696		  6C 69	64 24
2   697
2   698	    02C1  69 6E	76 61 6C 69 64+	 close_err_6 db	'invalid handle$'
    699		  20 68	61 6E 64 6C 65+
    700		  24
2   701
2   702	    02D0  61 63	63 65 73 73 20+	 read_err_5 db 'access denied$'
    703		  64 65	6E 69 65 64 24
2   704	    02DE  69 6E	76 61 6C 69 64+	 read_err_6 db 'invalid	handle$'
    705		  20 68	61 6E 64 6C 65+
    706		  24
2   707					 ;
2   708					 ; constants
2   709					 ;
2   710	    02ED  0A 24			 file_newline db 0ah, '$'
1   711
1   712	    02EF			 parse_file_from:
1   713	    02EF  E8 00B1		     call create_first_transition_table
1   714	    02F2  E8 0139		     call create_middle_transition_table
1   715	    02F5  E8 01C1		     call create_last_transition_table
1   716	    02F8  E8 0249		     call create_level_shift_transition_table
1   717
1   718	    02FB  5B			     pop bx  ; ret address
1   719	    02FC  5A			     pop dx  ; filename	pointer
1   720	    02FD  53			     push bx
1   721	    02FE  52			     push dx
1   722	    02FF  E8 FEC8		     call open_read
1   723	    0302  72 0C			     jc	ext
1   724					     load <ax>
3   725	    0304  50				 push ax
1   726	    0305  50			     push ax
1   727	    0306  E8 0008		     call parse_file
1   728					     restore <ax>
3   729	    0309  58				 pop ax
1   730	    030A  50			     push ax
1   731	    030B  E8 FEA4		     call close_file
1   732	    030E  72 00			     jc	ext
1   733	    0310			 ext:
1   734	    0310  C3			     ret
1   735
1   736	    0311			 parse_file:
1   737	    0311  5B			     pop bx
1   738	    0312  58			     pop ax ; file handler
1   739	    0313  53			     push bx
1   740
1   741					     load <ax>
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 14
sgraph.ASM



3   742	    0314  50				 push ax
1   743	    0315			 _parse_file_loop:
1   744	    0315  B9 0001		     mov cx, 1
1   745	    0318  BA 063Er		     lea dx, buf
1   746					     restore <ax>
3   747	    031B  58				 pop ax
1   748					     load <ax>
3   749	    031C  50				 push ax
1   750	    031D  52			     push dx
1   751	    031E  51			     push cx
1   752	    031F  50			     push ax
1   753	    0320  E8 FE57		     call read_from_file
1   754	    0323  72 7C			     jc	_parse_file_ext
1   755	    0325  3D 0000		     cmp ax, 0
1   756	    0328  74 77			     je	_parse_file_ext
1   757	    032A  33 D2			     xor dx, dx
1   758	    032C  8A 16	063Er		     mov dl, byte ptr [buf]
1   759	    0330  8A 1E	063Dr		     mov bl, byte ptr [state]
1   760					     get_transition transition_table, bl, dx
2   761					     load <dx>
4   762	    0334  52				 push dx
2   763					     get_offset	bl
3   764	    0335  33 D2			     xor dx, dx
3   765	    0337  33 C0			     xor ax, ax
3   766	    0339  8A C3			     mov al, bl
3   767	    033B  C1 E0	08		     shl ax, 8
2   768					     restore <dx>
4   769	    033E  5A				 pop dx
2   770	    033F  05 0640r		     add ax, offset transition_table
2   771	    0342  03 C2			     add ax, dx
2   772	    0344  8B D8			     mov bx, ax
2   773	    0346  33 C0			     xor ax, ax
2   774	    0348  8A 07			     mov al, byte ptr [bx]
1   775	    034A  80 FA	00		     cmp dl, 0
1   776	    034D  75 14			     jne _parse_file_next
1   777	    034F  3C 00			     cmp al, 0
1   778	    0351  75 10			     jne _parse_file_next
1   779					     print_range <parse_error, parse_newline>
3   780						 print <offset parse_error>
4   781	    0353  B4 09				 mov ah, 09h
4   782	    0355  BA 05CFr			 mov dx, offset	parse_error
4   783	    0358  CD 21				 int 21h
3   784						 print <offset parse_newline>
4   785	    035A  B4 09				 mov ah, 09h
4   786	    035C  BA 0633r			 mov dx, offset	parse_newline
4   787	    035F  CD 21				 int 21h
1   788	    0361  EB 3E			     jmp _parse_file_ext
1   789	    0363			 _parse_file_next:
1   790	    0363  A2 063Dr		     mov byte ptr [state], al
1   791	    0366  3A 06	05EDr		     cmp al, byte ptr [first_terminal]
1   792	    036A  75 08			     jne _parse_file_next_terminal_1
1   793	    036C  A0 063Er		     mov al, byte ptr [buf]
1   794	    036F  A2 0635r		     mov byte ptr [fp],	al
1   795					     ; print_range <first_parsed, buf, open_newline>
1   796	    0372  EB A1			     jmp _parse_file_loop
1   797	    0374			 _parse_file_next_terminal_1:
1   798	    0374  3A 06	05EEr		     cmp al, byte ptr [middle_terminal]
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 15
sgraph.ASM



1   799	    0378  75 08			     jne _parse_file_next_terminal_2
1   800	    037A  A0 063Er		     mov al, byte ptr [buf]
1   801	    037D  A2 0637r		     mov byte ptr [mp],	al
1   802					     ; print_range <middle_parsed, buf,	open_newline>
1   803	    0380  EB 93			     jmp _parse_file_loop
1   804	    0382			 _parse_file_next_terminal_2:
1   805	    0382  3A 06	05EFr		     cmp al, byte ptr [last_terminal]
1   806	    0386  75 08			     jne _parse_file_next_terminal_3
1   807	    0388  A0 063Er		     mov al, byte ptr [buf]
1   808	    038B  A2 0639r		     mov byte ptr [lp],	al
1   809					     ; print_range <last_parsed, buf, open_newline>
1   810	    038E  EB 85			     jmp _parse_file_loop
1   811	    0390			 _parse_file_next_terminal_3:
1   812	    0390  3A 06	05F0r		     cmp al, byte ptr [level_shift_terminal]
1   813	    0394  0F 85	FF7D		     jne _parse_file_loop
1   814	    0398  A0 063Er		     mov al, byte ptr [buf]
1   815	    039B  A2 063Br		     mov byte ptr [lhp], al
1   816					     ; print_range <last_parsed, buf, open_newline>
1   817	    039E  E9 FF74		     jmp _parse_file_loop
1   818	    03A1			 _parse_file_ext:
1   819					     restore <bx>
3   820	    03A1  5B				 pop bx
1   821	    03A2  C3			     ret
1   822
1   823	    03A3			 create_first_transition_table:
1   824					     set_transition transition_table 0 1 'f'
2   825					     load<bx, dx>
4   826	    03A3  53				 push bx
4   827	    03A4  52				 push dx
2   828					     get_offset	0
3   829	    03A5  33 D2			     xor dx, dx
3   830	    03A7  33 C0			     xor ax, ax
3   831	    03A9  B0 00			     mov al, 0
3   832	    03AB  C1 E0	08		     shl ax, 8
2   833	    03AE  05 0640r		     add ax, offset transition_table
2   834	    03B1  05 0066		     add ax, 'f'
2   835	    03B4  8B D8			     mov bx, ax
2   836	    03B6  C6 07	01		     mov byte ptr [bx],	1
2   837					     restore<dx, bx>
4   838	    03B9  5A				 pop dx
4   839	    03BA  5B				 pop bx
1   840					     set_transition transition_table 1 2 ':'
2   841					     load<bx, dx>
4   842	    03BB  53				 push bx
4   843	    03BC  52				 push dx
2   844					     get_offset	1
3   845	    03BD  33 D2			     xor dx, dx
3   846	    03BF  33 C0			     xor ax, ax
3   847	    03C1  B0 01			     mov al, 1
3   848	    03C3  C1 E0	08		     shl ax, 8
2   849	    03C6  05 0640r		     add ax, offset transition_table
2   850	    03C9  05 003A		     add ax, ':'
2   851	    03CC  8B D8			     mov bx, ax
2   852	    03CE  C6 07	02		     mov byte ptr [bx],	2
2   853					     restore<dx, bx>
4   854	    03D1  5A				 pop dx
4   855	    03D2  5B				 pop bx
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 16
sgraph.ASM



1   856					     set_transition transition_table 2 3 ' '
2   857					     load<bx, dx>
4   858	    03D3  53				 push bx
4   859	    03D4  52				 push dx
2   860					     get_offset	2
3   861	    03D5  33 D2			     xor dx, dx
3   862	    03D7  33 C0			     xor ax, ax
3   863	    03D9  B0 02			     mov al, 2
3   864	    03DB  C1 E0	08		     shl ax, 8
2   865	    03DE  05 0640r		     add ax, offset transition_table
2   866	    03E1  05 0020		     add ax, ' '
2   867	    03E4  8B D8			     mov bx, ax
2   868	    03E6  C6 07	03		     mov byte ptr [bx],	3
2   869					     restore<dx, bx>
4   870	    03E9  5A				 pop dx
4   871	    03EA  5B				 pop bx
1   872					     set_transition_for_all transition_table 3 4
2   873					     set_transition_length_from_start transition_table,	3, 4, 0, 255
3   874	    03EB  BB 0000		     mov bx, 0
3   875	    03EE  B9 00FF		     mov cx, 255
3   876	    03F1			 ??0000:
3   877	    03F1  83 F9	00		     cmp cx, 0
3   878	    03F4  74 1F			     je	??0001
3   879					     load <bx,cx>
5   880	    03F6  53				 push bx
5   881	    03F7  51				 push cx
3   882					     set_transition transition_table 3 4 bx
4   883					     load<bx, dx>
6   884	    03F8  53				 push bx
6   885	    03F9  52				 push dx
4   886					     get_offset	3
5   887	    03FA  33 D2			     xor dx, dx
5   888	    03FC  33 C0			     xor ax, ax
5   889	    03FE  B0 03			     mov al, 3
5   890	    0400  C1 E0	08		     shl ax, 8
4   891	    0403  05 0640r		     add ax, offset transition_table
4   892	    0406  03 C3			     add ax, bx
4   893	    0408  8B D8			     mov bx, ax
4   894	    040A  C6 07	04		     mov byte ptr [bx],	4
4   895					     restore<dx, bx>
6   896	    040D  5A				 pop dx
6   897	    040E  5B				 pop bx
3   898					     restore <cx,bx>
5   899	    040F  59				 pop cx
5   900	    0410  5B				 pop bx
3   901	    0411  43			     inc bx
3   902	    0412  49			     dec cx
3   903	    0413  EB DC			     jmp ??0000
3   904	    0415			 ??0001:
1   905					     set_transition transition_table 4 0 0ah
2   906					     load<bx, dx>
4   907	    0415  53				 push bx
4   908	    0416  52				 push dx
2   909					     get_offset	4
3   910	    0417  33 D2			     xor dx, dx
3   911	    0419  33 C0			     xor ax, ax
3   912	    041B  B0 04			     mov al, 4
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 17
sgraph.ASM



3   913	    041D  C1 E0	08		     shl ax, 8
2   914	    0420  05 0640r		     add ax, offset transition_table
2   915	    0423  05 000A		     add ax, 0ah
2   916	    0426  8B D8			     mov bx, ax
2   917	    0428  C6 07	00		     mov byte ptr [bx],	0
2   918					     restore<dx, bx>
4   919	    042B  5A				 pop dx
4   920	    042C  5B				 pop bx
1   921	    042D  C3			     ret
1   922
1   923	    042E			 create_middle_transition_table:
1   924					     set_transition transition_table 0 5 'm'
2   925					     load<bx, dx>
4   926	    042E  53				 push bx
4   927	    042F  52				 push dx
2   928					     get_offset	0
3   929	    0430  33 D2			     xor dx, dx
3   930	    0432  33 C0			     xor ax, ax
3   931	    0434  B0 00			     mov al, 0
3   932	    0436  C1 E0	08		     shl ax, 8
2   933	    0439  05 0640r		     add ax, offset transition_table
2   934	    043C  05 006D		     add ax, 'm'
2   935	    043F  8B D8			     mov bx, ax
2   936	    0441  C6 07	05		     mov byte ptr [bx],	5
2   937					     restore<dx, bx>
4   938	    0444  5A				 pop dx
4   939	    0445  5B				 pop bx
1   940					     set_transition transition_table 5 6 ':'
2   941					     load<bx, dx>
4   942	    0446  53				 push bx
4   943	    0447  52				 push dx
2   944					     get_offset	5
3   945	    0448  33 D2			     xor dx, dx
3   946	    044A  33 C0			     xor ax, ax
3   947	    044C  B0 05			     mov al, 5
3   948	    044E  C1 E0	08		     shl ax, 8
2   949	    0451  05 0640r		     add ax, offset transition_table
2   950	    0454  05 003A		     add ax, ':'
2   951	    0457  8B D8			     mov bx, ax
2   952	    0459  C6 07	06		     mov byte ptr [bx],	6
2   953					     restore<dx, bx>
4   954	    045C  5A				 pop dx
4   955	    045D  5B				 pop bx
1   956					     set_transition transition_table 6 7 ' '
2   957					     load<bx, dx>
4   958	    045E  53				 push bx
4   959	    045F  52				 push dx
2   960					     get_offset	6
3   961	    0460  33 D2			     xor dx, dx
3   962	    0462  33 C0			     xor ax, ax
3   963	    0464  B0 06			     mov al, 6
3   964	    0466  C1 E0	08		     shl ax, 8
2   965	    0469  05 0640r		     add ax, offset transition_table
2   966	    046C  05 0020		     add ax, ' '
2   967	    046F  8B D8			     mov bx, ax
2   968	    0471  C6 07	07		     mov byte ptr [bx],	7
2   969					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 18
sgraph.ASM



4   970	    0474  5A				 pop dx
4   971	    0475  5B				 pop bx
1   972					     set_transition_for_all transition_table 7 8
2   973					     set_transition_length_from_start transition_table,	7, 8, 0, 255
3   974	    0476  BB 0000		     mov bx, 0
3   975	    0479  B9 00FF		     mov cx, 255
3   976	    047C			 ??0002:
3   977	    047C  83 F9	00		     cmp cx, 0
3   978	    047F  74 1F			     je	??0003
3   979					     load <bx,cx>
5   980	    0481  53				 push bx
5   981	    0482  51				 push cx
3   982					     set_transition transition_table 7 8 bx
4   983					     load<bx, dx>
6   984	    0483  53				 push bx
6   985	    0484  52				 push dx
4   986					     get_offset	7
5   987	    0485  33 D2			     xor dx, dx
5   988	    0487  33 C0			     xor ax, ax
5   989	    0489  B0 07			     mov al, 7
5   990	    048B  C1 E0	08		     shl ax, 8
4   991	    048E  05 0640r		     add ax, offset transition_table
4   992	    0491  03 C3			     add ax, bx
4   993	    0493  8B D8			     mov bx, ax
4   994	    0495  C6 07	08		     mov byte ptr [bx],	8
4   995					     restore<dx, bx>
6   996	    0498  5A				 pop dx
6   997	    0499  5B				 pop bx
3   998					     restore <cx,bx>
5   999	    049A  59				 pop cx
5  1000	    049B  5B				 pop bx
3  1001	    049C  43			     inc bx
3  1002	    049D  49			     dec cx
3  1003	    049E  EB DC			     jmp ??0002
3  1004	    04A0			 ??0003:
1  1005					     set_transition transition_table 8 0 0ah
2  1006					     load<bx, dx>
4  1007	    04A0  53				 push bx
4  1008	    04A1  52				 push dx
2  1009					     get_offset	8
3  1010	    04A2  33 D2			     xor dx, dx
3  1011	    04A4  33 C0			     xor ax, ax
3  1012	    04A6  B0 08			     mov al, 8
3  1013	    04A8  C1 E0	08		     shl ax, 8
2  1014	    04AB  05 0640r		     add ax, offset transition_table
2  1015	    04AE  05 000A		     add ax, 0ah
2  1016	    04B1  8B D8			     mov bx, ax
2  1017	    04B3  C6 07	00		     mov byte ptr [bx],	0
2  1018					     restore<dx, bx>
4  1019	    04B6  5A				 pop dx
4  1020	    04B7  5B				 pop bx
1  1021	    04B8  C3			     ret
1  1022
1  1023	    04B9			 create_last_transition_table:
1  1024					     set_transition transition_table 0 9 'l'
2  1025					     load<bx, dx>
4  1026	    04B9  53				 push bx
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 19
sgraph.ASM



4  1027	    04BA  52				 push dx
2  1028					     get_offset	0
3  1029	    04BB  33 D2			     xor dx, dx
3  1030	    04BD  33 C0			     xor ax, ax
3  1031	    04BF  B0 00			     mov al, 0
3  1032	    04C1  C1 E0	08		     shl ax, 8
2  1033	    04C4  05 0640r		     add ax, offset transition_table
2  1034	    04C7  05 006C		     add ax, 'l'
2  1035	    04CA  8B D8			     mov bx, ax
2  1036	    04CC  C6 07	09		     mov byte ptr [bx],	9
2  1037					     restore<dx, bx>
4  1038	    04CF  5A				 pop dx
4  1039	    04D0  5B				 pop bx
1  1040					     set_transition transition_table 9 10 ':'
2  1041					     load<bx, dx>
4  1042	    04D1  53				 push bx
4  1043	    04D2  52				 push dx
2  1044					     get_offset	9
3  1045	    04D3  33 D2			     xor dx, dx
3  1046	    04D5  33 C0			     xor ax, ax
3  1047	    04D7  B0 09			     mov al, 9
3  1048	    04D9  C1 E0	08		     shl ax, 8
2  1049	    04DC  05 0640r		     add ax, offset transition_table
2  1050	    04DF  05 003A		     add ax, ':'
2  1051	    04E2  8B D8			     mov bx, ax
2  1052	    04E4  C6 07	0A		     mov byte ptr [bx],	10
2  1053					     restore<dx, bx>
4  1054	    04E7  5A				 pop dx
4  1055	    04E8  5B				 pop bx
1  1056					     set_transition transition_table 10	11 ' '
2  1057					     load<bx, dx>
4  1058	    04E9  53				 push bx
4  1059	    04EA  52				 push dx
2  1060					     get_offset	10
3  1061	    04EB  33 D2			     xor dx, dx
3  1062	    04ED  33 C0			     xor ax, ax
3  1063	    04EF  B0 0A			     mov al, 10
3  1064	    04F1  C1 E0	08		     shl ax, 8
2  1065	    04F4  05 0640r		     add ax, offset transition_table
2  1066	    04F7  05 0020		     add ax, ' '
2  1067	    04FA  8B D8			     mov bx, ax
2  1068	    04FC  C6 07	0B		     mov byte ptr [bx],	11
2  1069					     restore<dx, bx>
4  1070	    04FF  5A				 pop dx
4  1071	    0500  5B				 pop bx
1  1072					     set_transition_for_all transition_table 11	12
2  1073					     set_transition_length_from_start transition_table,	11, 12,	0, 255
3  1074	    0501  BB 0000		     mov bx, 0
3  1075	    0504  B9 00FF		     mov cx, 255
3  1076	    0507			 ??0004:
3  1077	    0507  83 F9	00		     cmp cx, 0
3  1078	    050A  74 1F			     je	??0005
3  1079					     load <bx,cx>
5  1080	    050C  53				 push bx
5  1081	    050D  51				 push cx
3  1082					     set_transition transition_table 11	12 bx
4  1083					     load<bx, dx>
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 20
sgraph.ASM



6  1084	    050E  53				 push bx
6  1085	    050F  52				 push dx
4  1086					     get_offset	11
5  1087	    0510  33 D2			     xor dx, dx
5  1088	    0512  33 C0			     xor ax, ax
5  1089	    0514  B0 0B			     mov al, 11
5  1090	    0516  C1 E0	08		     shl ax, 8
4  1091	    0519  05 0640r		     add ax, offset transition_table
4  1092	    051C  03 C3			     add ax, bx
4  1093	    051E  8B D8			     mov bx, ax
4  1094	    0520  C6 07	0C		     mov byte ptr [bx],	12
4  1095					     restore<dx, bx>
6  1096	    0523  5A				 pop dx
6  1097	    0524  5B				 pop bx
3  1098					     restore <cx,bx>
5  1099	    0525  59				 pop cx
5  1100	    0526  5B				 pop bx
3  1101	    0527  43			     inc bx
3  1102	    0528  49			     dec cx
3  1103	    0529  EB DC			     jmp ??0004
3  1104	    052B			 ??0005:
1  1105					     set_transition transition_table 12	0 0ah
2  1106					     load<bx, dx>
4  1107	    052B  53				 push bx
4  1108	    052C  52				 push dx
2  1109					     get_offset	12
3  1110	    052D  33 D2			     xor dx, dx
3  1111	    052F  33 C0			     xor ax, ax
3  1112	    0531  B0 0C			     mov al, 12
3  1113	    0533  C1 E0	08		     shl ax, 8
2  1114	    0536  05 0640r		     add ax, offset transition_table
2  1115	    0539  05 000A		     add ax, 0ah
2  1116	    053C  8B D8			     mov bx, ax
2  1117	    053E  C6 07	00		     mov byte ptr [bx],	0
2  1118					     restore<dx, bx>
4  1119	    0541  5A				 pop dx
4  1120	    0542  5B				 pop bx
1  1121	    0543  C3			     ret
1  1122
1  1123	    0544			 create_level_shift_transition_table:
1  1124					     set_transition transition_table 9 14 'h'
2  1125					     load<bx, dx>
4  1126	    0544  53				 push bx
4  1127	    0545  52				 push dx
2  1128					     get_offset	9
3  1129	    0546  33 D2			     xor dx, dx
3  1130	    0548  33 C0			     xor ax, ax
3  1131	    054A  B0 09			     mov al, 9
3  1132	    054C  C1 E0	08		     shl ax, 8
2  1133	    054F  05 0640r		     add ax, offset transition_table
2  1134	    0552  05 0068		     add ax, 'h'
2  1135	    0555  8B D8			     mov bx, ax
2  1136	    0557  C6 07	0E		     mov byte ptr [bx],	14
2  1137					     restore<dx, bx>
4  1138	    055A  5A				 pop dx
4  1139	    055B  5B				 pop bx
1  1140					     set_transition transition_table 14	15 ':'
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 21
sgraph.ASM



2  1141					     load<bx, dx>
4  1142	    055C  53				 push bx
4  1143	    055D  52				 push dx
2  1144					     get_offset	14
3  1145	    055E  33 D2			     xor dx, dx
3  1146	    0560  33 C0			     xor ax, ax
3  1147	    0562  B0 0E			     mov al, 14
3  1148	    0564  C1 E0	08		     shl ax, 8
2  1149	    0567  05 0640r		     add ax, offset transition_table
2  1150	    056A  05 003A		     add ax, ':'
2  1151	    056D  8B D8			     mov bx, ax
2  1152	    056F  C6 07	0F		     mov byte ptr [bx],	15
2  1153					     restore<dx, bx>
4  1154	    0572  5A				 pop dx
4  1155	    0573  5B				 pop bx
1  1156					     set_transition transition_table 15	16 ' '
2  1157					     load<bx, dx>
4  1158	    0574  53				 push bx
4  1159	    0575  52				 push dx
2  1160					     get_offset	15
3  1161	    0576  33 D2			     xor dx, dx
3  1162	    0578  33 C0			     xor ax, ax
3  1163	    057A  B0 0F			     mov al, 15
3  1164	    057C  C1 E0	08		     shl ax, 8
2  1165	    057F  05 0640r		     add ax, offset transition_table
2  1166	    0582  05 0020		     add ax, ' '
2  1167	    0585  8B D8			     mov bx, ax
2  1168	    0587  C6 07	10		     mov byte ptr [bx],	16
2  1169					     restore<dx, bx>
4  1170	    058A  5A				 pop dx
4  1171	    058B  5B				 pop bx
1  1172					     set_transition_for_all transition_table 16	17
2  1173					     set_transition_length_from_start transition_table,	16, 17,	0, 255
3  1174	    058C  BB 0000		     mov bx, 0
3  1175	    058F  B9 00FF		     mov cx, 255
3  1176	    0592			 ??0006:
3  1177	    0592  83 F9	00		     cmp cx, 0
3  1178	    0595  74 1F			     je	??0007
3  1179					     load <bx,cx>
5  1180	    0597  53				 push bx
5  1181	    0598  51				 push cx
3  1182					     set_transition transition_table 16	17 bx
4  1183					     load<bx, dx>
6  1184	    0599  53				 push bx
6  1185	    059A  52				 push dx
4  1186					     get_offset	16
5  1187	    059B  33 D2			     xor dx, dx
5  1188	    059D  33 C0			     xor ax, ax
5  1189	    059F  B0 10			     mov al, 16
5  1190	    05A1  C1 E0	08		     shl ax, 8
4  1191	    05A4  05 0640r		     add ax, offset transition_table
4  1192	    05A7  03 C3			     add ax, bx
4  1193	    05A9  8B D8			     mov bx, ax
4  1194	    05AB  C6 07	11		     mov byte ptr [bx],	17
4  1195					     restore<dx, bx>
6  1196	    05AE  5A				 pop dx
6  1197	    05AF  5B				 pop bx
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 22
sgraph.ASM



3  1198					     restore <cx,bx>
5  1199	    05B0  59				 pop cx
5  1200	    05B1  5B				 pop bx
3  1201	    05B2  43			     inc bx
3  1202	    05B3  49			     dec cx
3  1203	    05B4  EB DC			     jmp ??0006
3  1204	    05B6			 ??0007:
1  1205					     set_transition transition_table 17	0 0ah
2  1206					     load<bx, dx>
4  1207	    05B6  53				 push bx
4  1208	    05B7  52				 push dx
2  1209					     get_offset	17
3  1210	    05B8  33 D2			     xor dx, dx
3  1211	    05BA  33 C0			     xor ax, ax
3  1212	    05BC  B0 11			     mov al, 17
3  1213	    05BE  C1 E0	08		     shl ax, 8
2  1214	    05C1  05 0640r		     add ax, offset transition_table
2  1215	    05C4  05 000A		     add ax, 0ah
2  1216	    05C7  8B D8			     mov bx, ax
2  1217	    05C9  C6 07	00		     mov byte ptr [bx],	0
2  1218					     restore<dx, bx>
4  1219	    05CC  5A				 pop dx
4  1220	    05CD  5B				 pop bx
1  1221	    05CE  C3			     ret
1  1222
1  1223
1  1224
1  1225					 ;
1  1226					 ; errors
1  1227					 ;
1  1228	    05CF  70 61	72 73 65 20 65+	 parse_error db	'parse error: incorrect	format$'
   1229		  72 72	6F 72 3A 20 69+
   1230		  6E 63	6F 72 72 65 63+
   1231		  74 20	66 6F 72 6D 61+
   1232		  74 24
1  1233
1  1234					 ;
1  1235					 ; terminal states
1  1236					 ;
1  1237	    05ED  04			 first_terminal	db 4
1  1238	    05EE  08			 middle_terminal db 8
1  1239	    05EF  0C			 last_terminal db 12
1  1240	    05F0  11			 level_shift_terminal db 17
1  1241
1  1242					 ;
1  1243					 ; info	messages
1  1244					 ;
1  1245	    05F1  66 69	72 73 74 20 70+	 first_parsed db 'first	parsed:	$'
   1246		  61 72	73 65 64 3A 20+
   1247		  24
1  1248	    0600  6D 69	64 64 6C 65 20+	 middle_parsed db 'middle parsed: $'
   1249		  70 61	72 73 65 64 3A+
   1250		  20 24
1  1251	    0610  6C 61	73 74 20 70 61+	 last_parsed db	'last parsed: $'
   1252		  72 73	65 64 3A 20 24
1  1253	    061E  6C 65	76 65 6C 20 73+	 level_shift_parsed db 'level shift parsed: $'
   1254		  68 69	66 74 20 70 61+
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 23
sgraph.ASM



   1255		  72 73	65 64 3A 20 24
1  1256	    0633  0A 24			 parse_newline db 0ah, '$'
1  1257
1  1258					 ;
1  1259					 ; parsed symbols
1  1260					 ;
1  1261	    0635  24 24			 fp db '$$'
1  1262	    0637  24 24			 mp db '$$'
1  1263	    0639  24 24			 lp db '$$'
1  1264	    063B  24 24			 lhp db	'$$'
1  1265
1  1266	    063D  00			 state db 0
1  1267	    063E  24 24			 buf db	'$$'
1  1268	    0640  0CF3*(00)		 transition_table db 3315 dup(0)
   1269
   1270					 end start
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 24
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:03F1
??0001				  Near	 DGROUP:0415
??0002				  Near	 DGROUP:047C
??0003				  Near	 DGROUP:04A0
??0004				  Near	 DGROUP:0507
??0005				  Near	 DGROUP:052B
??0006				  Near	 DGROUP:0592
??0007				  Near	 DGROUP:05B6
??DATE				  Text	 "12/24/19"
??FILENAME			  Text	 "sgraph  "
??TIME				  Text	 "00:41:38"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 SGRAPH
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUF				  Byte	 DGROUP:063E
CLOSE_ERR_6			  Byte	 DGROUP:02C1
CLOSE_FILE			  Near	 DGROUP:01B2
CREATE_FIRST_TRANSITION_TABLE	  Near	 DGROUP:03A3
CREATE_LAST_TRANSITION_TABLE	  Near	 DGROUP:04B9
CREATE_LEVEL_SHIFT_TRANSITION_TA  Near	 DGROUP:0544
BLE
CREATE_MIDDLE_TRANSITION_TABLE	  Near	 DGROUP:042E
EXT				  Near	 DGROUP:0310
FILE_NEWLINE			  Byte	 DGROUP:02ED
FIRST_PARSED			  Byte	 DGROUP:05F1
FIRST_TERMINAL			  Byte	 DGROUP:05ED
FNAME				  Byte	 DGROUP:0170
FP				  Byte	 DGROUP:0635
HELLO				  Byte	 DGROUP:015F
L1				  Near	 DGROUP:01F7
L12				  Near	 DGROUP:0247
L2				  Near	 DGROUP:0207
L3				  Near	 DGROUP:0217
L4				  Near	 DGROUP:0227
L5				  Near	 DGROUP:0237
LAST_PARSED			  Byte	 DGROUP:0610
LAST_TERMINAL			  Byte	 DGROUP:05EF
LEVEL_SHIFT_PARSED		  Byte	 DGROUP:061E
LEVEL_SHIFT_TERMINAL		  Byte	 DGROUP:05F0
LHP				  Byte	 DGROUP:063B
LL5				  Near	 DGROUP:0191
LL6				  Near	 DGROUP:01A1
LP				  Byte	 DGROUP:0639
MIDDLE_PARSED			  Byte	 DGROUP:0600
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 25
Symbol Table



MIDDLE_TERMINAL			  Byte	 DGROUP:05EE
MP				  Byte	 DGROUP:0637
OPEN_ERR_1			  Byte	 DGROUP:0258
OPEN_ERR_12			  Byte	 DGROUP:02AF
OPEN_ERR_2			  Byte	 DGROUP:0270
OPEN_ERR_3			  Byte	 DGROUP:027F
OPEN_ERR_4			  Byte	 DGROUP:028E
OPEN_ERR_5			  Byte	 DGROUP:02A1
OPEN_NEWLINE			  Byte	 DGROUP:016E
OPEN_READ			  Near	 DGROUP:01CA
PARSE_ERROR			  Byte	 DGROUP:05CF
PARSE_FILE			  Near	 DGROUP:0311
PARSE_FILE_FROM			  Near	 DGROUP:02EF
PARSE_NEWLINE			  Byte	 DGROUP:0633
READ_ERR_5			  Byte	 DGROUP:02D0
READ_ERR_6			  Byte	 DGROUP:02DE
READ_FROM_FILE			  Near	 DGROUP:017A
START				  Near	 DGROUP:0100
STATE				  Byte	 DGROUP:063D
TRANSITION_TABLE		  Byte	 DGROUP:0640
_CLOSE_FILE_END			  Near	 DGROUP:01C9
_OPEN_READ_END			  Near	 DGROUP:0257
_PARSE_FILE_EXT			  Near	 DGROUP:03A1
_PARSE_FILE_LOOP		  Near	 DGROUP:0315
_PARSE_FILE_NEXT		  Near	 DGROUP:0363
_PARSE_FILE_NEXT_TERMINAL_1	  Near	 DGROUP:0374
_PARSE_FILE_NEXT_TERMINAL_2	  Near	 DGROUP:0382
_PARSE_FILE_NEXT_TERMINAL_3	  Near	 DGROUP:0390
_READ_FORM_FILE_END		  Near	 DGROUP:01B1

Macro Name

BREAK_POINT
CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PARSE_BYTE_TO_STR
PARSE_WORD_TO_STR
POP_FRAGMENT
PRINT
PRINT_RANGE
PUSH_FRAGMENT
PUT
RESTORE
SET_DTA
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE
Turbo Assembler	 Version 4.1	    12/24/19 00:41:41	    Page 26
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  1333 Word	  Public  CODE
