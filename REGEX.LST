Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 1
regex.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 get_offset macro state
1    26					     xor dx, dx
1    27					     xor ax, ax
1    28					     mov al, state
1    29					     shl ax, 8
1    30					 endm get_offset
1    31
1    32					 to_non_space macro addr
1    33					     local l1, l2
1    34					     mov si, addr
1    35					 l1:
1    36					     mov byte ptr al, [si]
1    37					     cmp al, 20h
1    38					     je	l2
1    39					     cmp al, 0
1    40					     je	l2
1    41					     inc si
1    42					     jmp l1
1    43					 l2:
1    44					     inc si
1    45					     mov ax, si
1    46					 endm
1    47
1    48					 set_transition	macro buf, from, to, char
1    49					     load<bx, dx>
1    50					     get_offset	from
1    51
1    52					     add ax, offset buf
1    53					     add ax, char
1    54
1    55					     mov bx, ax
1    56					     mov byte ptr [bx],	to
1    57					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 2
regex.ASM



1    58					 endm
1    59
1    60					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    61					     local l1, end
1    62					     mov bx, start
1    63					     mov cx, iterations
1    64					 l1:
1    65					     cmp cx, 0
1    66					     je	end
1    67
1    68					     load <bx,cx>
1    69					     set_transition buf	from to	bx
1    70					     restore <cx,bx>
1    71
1    72					     inc bx
1    73					     dec cx
1    74					     jmp l1
1    75					 end:
1    76					 endm
1    77
1    78					 print_range macro args
1    79					     irp d,<args>
1    80						 print <offset d>
1    81					     endm
1    82					 endm
1    83
1    84					 set_transition_for_all	macro buf, from, to
1    85					     set_transition_length_from_start buf, from, to, 0,	255
1    86					 endm
1    87
1    88					 set_transition_for_digits macro buf, from, to
1    89					     set_transition_length_from_start buf, from, to, 30, 10
1    90					 endm
1    91
1    92					 set_transition_for_letters macro buf, from, to
1    93					     set_transition_length_from_start buf, from, to, 97, 26
1    94					     set_transition_length_from_start buf, from, to, 65, 26
1    95					 endm
1    96
1    97					 get_transition	macro buf, from, char
1    98					     load <dx>
1    99					     get_offset	from
1   100					     restore <dx>
1   101
1   102					     add ax, offset buf
1   103					     add ax, char
1   104
1   105					     mov bx, ax
1   106					     xor ax, ax
1   107					     mov al, byte ptr [bx]
1   108					 endm
1   109
1   110					 put macro from, to, position
1   111					     xor dx, dx
1   112					     xor bx, bx
1   113
1   114					     mov dx, offset to
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 3
regex.ASM



1   115					     mov bl, byte ptr [position]
1   116					     add dx, bx
1   117
1   118					     inc [position]
1   119					     mov bl, byte ptr [from]
1   120					     mov byte ptr [edx], bl
1   121					 endm
    122
    123	    0000			 model tiny
    124					 .386
    125	    0000			 .code
    126					 org 100h
    127	    0100			 start:
    128	    0100  E8 017D		     call create_D_table
    129	    0103  E8 01A5		     call create_C_table
    130	    0106  E8 01E5		     call create_B_table
    131	    0109  E8 02A9		     call create_A_table
    132					     to_non_space 80h
1   133	    010C  BE 0080		     mov si, 80h
1   134	    010F			 ??0000:
1   135	    010F  8A 04			     mov byte ptr al, [si]
1   136	    0111  3C 20			     cmp al, 20h
1   137	    0113  74 07			     je	??0001
1   138	    0115  3C 00			     cmp al, 0
1   139	    0117  74 03			     je	??0001
1   140	    0119  46			     inc si
1   141	    011A  EB F3			     jmp ??0000
1   142	    011C			 ??0001:
1   143	    011C  46			     inc si
1   144	    011D  8B C6			     mov ax, si
    145	    011F  8B F0			     mov si, ax
    146	    0121			 parse_loop:
    147					     load <si>
2   148	    0121  56				 push si
    149	    0122  33 D2			     xor dx, dx
    150	    0124  33 DB			     xor bx, bx
    151	    0126  33 C0			     xor ax, ax
    152	    0128  8A 14			     mov dl, byte ptr [si]
    153	    012A  80 FA	0D		     cmp dl, 0Dh
    154	    012D  0F 84	011C		     je	l8
    155	    0131  8A 1E	048Er		     mov bl, byte ptr [state]
    156					     get_transition buf, bl, dx
1   157					     load <dx>
3   158	    0135  52				 push dx
1   159					     get_offset	bl
2   160	    0136  33 D2			     xor dx, dx
2   161	    0138  33 C0			     xor ax, ax
2   162	    013A  8A C3			     mov al, bl
2   163	    013C  C1 E0	08		     shl ax, 8
1   164					     restore <dx>
3   165	    013F  5A				 pop dx
1   166	    0140  05 06D4r		     add ax, offset buf
1   167	    0143  03 C2			     add ax, dx
1   168	    0145  8B D8			     mov bx, ax
1   169	    0147  33 C0			     xor ax, ax
1   170	    0149  8A 07			     mov al, byte ptr [bx]
    171					     restore <si>
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 4
regex.ASM



2   172	    014B  5E				 pop si
    173
    174	    014C  A2 048Er		     mov byte ptr [state], al
    175	    014F  3C 00			     cmp al, 0
    176	    0151  0F 84	0113		     je	l9
    177	    0155  3A 06	048Fr		     cmp al, byte ptr [termA]
    178	    0159  7E 19			     jle l1
    179	    015B  3A 06	0490r		     cmp al, byte ptr [termB]
    180	    015F  7E 51			     jle l3
    181	    0161  3A 06	0491r		     cmp al, byte ptr [termC]
    182	    0165  0F 8E	0087		     jle l5
    183	    0169  3A 06	0492r		     cmp al, byte ptr [termD]
    184	    016D  0F 8E	00BB		     jle l7
    185	    0171  E9 0108		     jmp eall
    186	    0174			 l1:
    187					     put si, pr, prad
1   188	    0174  33 D2			     xor dx, dx
1   189	    0176  33 DB			     xor bx, bx
1   190	    0178  BA 0493r		     mov dx, offset pr
1   191	    017B  8A 1E	06D0r		     mov bl, byte ptr [prad]
1   192	    017F  03 D3			     add dx, bx
1   193	    0181  FE 06	06D0r		     inc [prad]
1   194	    0185  8A 1C			     mov bl, byte ptr [si]
1   195	    0187  67| 88 1A		     mov byte ptr [edx], bl
    196	    018A  A0 048Er		     mov al, byte ptr [state]
    197	    018D  3A 06	048Fr		     cmp al, byte ptr [termA]
    198	    0191  74 03			     je	l2
    199	    0193  E9 00E2		     jmp eloop
    200	    0196			 l2:
    201					     print_range <prmes, pr, newline>
2   202						 print <offset prmes>
3   203	    0196  B4 09				 mov ah, 09h
3   204	    0198  BA 0693r			 mov dx, offset	prmes
3   205	    019B  CD 21				 int 21h
2   206						 print <offset pr>
3   207	    019D  B4 09				 mov ah, 09h
3   208	    019F  BA 0493r			 mov dx, offset	pr
3   209	    01A2  CD 21				 int 21h
2   210						 print <offset newline>
3   211	    01A4  B4 09				 mov ah, 09h
3   212	    01A6  BA 06CEr			 mov dx, offset	newline
3   213	    01A9  CD 21				 int 21h
    214	    01AB  FE 06	048Er		     inc [state]
    215	    01AF  E9 00C6		     jmp eloop
    216	    01B2			 l3:
    217					     put si, dom, domad
1   218	    01B2  33 D2			     xor dx, dx
1   219	    01B4  33 DB			     xor bx, bx
1   220	    01B6  BA 0513r		     mov dx, offset dom
1   221	    01B9  8A 1E	06D1r		     mov bl, byte ptr [domad]
1   222	    01BD  03 D3			     add dx, bx
1   223	    01BF  FE 06	06D1r		     inc [domad]
1   224	    01C3  8A 1C			     mov bl, byte ptr [si]
1   225	    01C5  67| 88 1A		     mov byte ptr [edx], bl
    226	    01C8  A0 048Er		     mov al, byte ptr [state]
    227	    01CB  3A 06	0490r		     cmp al, byte ptr [termB]
    228	    01CF  74 03			     je	l4
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 5
regex.ASM



    229	    01D1  E9 00A4		     jmp eloop
    230	    01D4			 l4:
    231					     print_range <dommes, dom, newline>
2   232						 print <offset dommes>
3   233	    01D4  B4 09				 mov ah, 09h
3   234	    01D6  BA 069Er			 mov dx, offset	dommes
3   235	    01D9  CD 21				 int 21h
2   236						 print <offset dom>
3   237	    01DB  B4 09				 mov ah, 09h
3   238	    01DD  BA 0513r			 mov dx, offset	dom
3   239	    01E0  CD 21				 int 21h
2   240						 print <offset newline>
3   241	    01E2  B4 09				 mov ah, 09h
3   242	    01E4  BA 06CEr			 mov dx, offset	newline
3   243	    01E7  CD 21				 int 21h
    244	    01E9  FE 06	048Er		     inc [state]
    245	    01ED  E9 0088		     jmp eloop
    246	    01F0			 l5:
    247					     put si, pat, patad
1   248	    01F0  33 D2			     xor dx, dx
1   249	    01F2  33 DB			     xor bx, bx
1   250	    01F4  BA 0593r		     mov dx, offset pat
1   251	    01F7  8A 1E	06D2r		     mov bl, byte ptr [patad]
1   252	    01FB  03 D3			     add dx, bx
1   253	    01FD  FE 06	06D2r		     inc [patad]
1   254	    0201  8A 1C			     mov bl, byte ptr [si]
1   255	    0203  67| 88 1A		     mov byte ptr [edx], bl
    256	    0206  A0 048Er		     mov al, byte ptr [state]
    257	    0209  3A 06	0491r		     cmp al, byte ptr [termC]
    258	    020D  74 02			     je	l6
    259	    020F  EB 67			     jmp eloop
    260	    0211			 l6:
    261					     print_range <pathmes, pat,	newline>
2   262						 print <offset pathmes>
3   263	    0211  B4 09				 mov ah, 09h
3   264	    0213  BA 06A7r			 mov dx, offset	pathmes
3   265	    0216  CD 21				 int 21h
2   266						 print <offset pat>
3   267	    0218  B4 09				 mov ah, 09h
3   268	    021A  BA 0593r			 mov dx, offset	pat
3   269	    021D  CD 21				 int 21h
2   270						 print <offset newline>
3   271	    021F  B4 09				 mov ah, 09h
3   272	    0221  BA 06CEr			 mov dx, offset	newline
3   273	    0224  CD 21				 int 21h
    274	    0226  FE 06	048Er		     inc [state]
    275	    022A  EB 4C			     jmp eloop
    276	    022C			 l7:
    277					     put si, que, quead
1   278	    022C  33 D2			     xor dx, dx
1   279	    022E  33 DB			     xor bx, bx
1   280	    0230  BA 0613r		     mov dx, offset que
1   281	    0233  8A 1E	06D3r		     mov bl, byte ptr [quead]
1   282	    0237  03 D3			     add dx, bx
1   283	    0239  FE 06	06D3r		     inc [quead]
1   284	    023D  8A 1C			     mov bl, byte ptr [si]
1   285	    023F  67| 88 1A		     mov byte ptr [edx], bl
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 6
regex.ASM



    286	    0242  A0 048Er		     mov al, byte ptr [state]
    287	    0245  3A 06	0492r		     cmp al, byte ptr [termD]
    288	    0249  74 89			     je	l4
    289	    024B  EB 2B			     jmp eloop
    290	    024D			 l8:
    291					     print_range <querymes, que, newline>
2   292						 print <offset querymes>
3   293	    024D  B4 09				 mov ah, 09h
3   294	    024F  BA 06AEr			 mov dx, offset	querymes
3   295	    0252  CD 21				 int 21h
2   296						 print <offset que>
3   297	    0254  B4 09				 mov ah, 09h
3   298	    0256  BA 0613r			 mov dx, offset	que
3   299	    0259  CD 21				 int 21h
2   300						 print <offset newline>
3   301	    025B  B4 09				 mov ah, 09h
3   302	    025D  BA 06CEr			 mov dx, offset	newline
3   303	    0260  CD 21				 int 21h
    304	    0262  FE 06	048Er		     inc [state]
    305	    0266  EB 14			     jmp eall
    306	    0268			 l9:
    307					     print_range <errormes, newline>
2   308						 print <offset errormes>
3   309	    0268  B4 09				 mov ah, 09h
3   310	    026A  BA 06B6r			 mov dx, offset	errormes
3   311	    026D  CD 21				 int 21h
2   312						 print <offset newline>
3   313	    026F  B4 09				 mov ah, 09h
3   314	    0271  BA 06CEr			 mov dx, offset	newline
3   315	    0274  CD 21				 int 21h
    316	    0276  EB 04			     jmp eall
    317	    0278			 eloop:
    318	    0278  46			     inc si
    319	    0279  E9 FEA5		     jmp parse_loop
    320	    027C			 eall:
    321					     exit
1   322	    027C  B4 00			     mov ah, 00h
1   323	    027E  CD 21			     int 21h
    324	    0280			 create_D_table:
    325					     set_transition_for_all buf	11 11
1   326					     set_transition_length_from_start buf, 11, 11, 0, 255
2   327	    0280  BB 0000		     mov bx, 0
2   328	    0283  B9 00FF		     mov cx, 255
2   329	    0286			 ??0002:
2   330	    0286  83 F9	00		     cmp cx, 0
2   331	    0289  74 1F			     je	??0003
2   332					     load <bx,cx>
4   333	    028B  53				 push bx
4   334	    028C  51				 push cx
2   335					     set_transition buf	11 11 bx
3   336					     load<bx, dx>
5   337	    028D  53				 push bx
5   338	    028E  52				 push dx
3   339					     get_offset	11
4   340	    028F  33 D2			     xor dx, dx
4   341	    0291  33 C0			     xor ax, ax
4   342	    0293  B0 0B			     mov al, 11
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 7
regex.ASM



4   343	    0295  C1 E0	08		     shl ax, 8
3   344	    0298  05 06D4r		     add ax, offset buf
3   345	    029B  03 C3			     add ax, bx
3   346	    029D  8B D8			     mov bx, ax
3   347	    029F  C6 07	0B		     mov byte ptr [bx],	11
3   348					     restore<dx, bx>
5   349	    02A2  5A				 pop dx
5   350	    02A3  5B				 pop bx
2   351					     restore <cx,bx>
4   352	    02A4  59				 pop cx
4   353	    02A5  5B				 pop bx
2   354	    02A6  43			     inc bx
2   355	    02A7  49			     dec cx
2   356	    02A8  EB DC			     jmp ??0002
2   357	    02AA			 ??0003:
    358	    02AA  C3			     ret
    359	    02AB			 create_C_table:
    360					     set_transition_for_all buf	10 10
1   361					     set_transition_length_from_start buf, 10, 10, 0, 255
2   362	    02AB  BB 0000		     mov bx, 0
2   363	    02AE  B9 00FF		     mov cx, 255
2   364	    02B1			 ??0004:
2   365	    02B1  83 F9	00		     cmp cx, 0
2   366	    02B4  74 1F			     je	??0005
2   367					     load <bx,cx>
4   368	    02B6  53				 push bx
4   369	    02B7  51				 push cx
2   370					     set_transition buf	10 10 bx
3   371					     load<bx, dx>
5   372	    02B8  53				 push bx
5   373	    02B9  52				 push dx
3   374					     get_offset	10
4   375	    02BA  33 D2			     xor dx, dx
4   376	    02BC  33 C0			     xor ax, ax
4   377	    02BE  B0 0A			     mov al, 10
4   378	    02C0  C1 E0	08		     shl ax, 8
3   379	    02C3  05 06D4r		     add ax, offset buf
3   380	    02C6  03 C3			     add ax, bx
3   381	    02C8  8B D8			     mov bx, ax
3   382	    02CA  C6 07	0A		     mov byte ptr [bx],	10
3   383					     restore<dx, bx>
5   384	    02CD  5A				 pop dx
5   385	    02CE  5B				 pop bx
2   386					     restore <cx,bx>
4   387	    02CF  59				 pop cx
4   388	    02D0  5B				 pop bx
2   389	    02D1  43			     inc bx
2   390	    02D2  49			     dec cx
2   391	    02D3  EB DC			     jmp ??0004
2   392	    02D5			 ??0005:
    393					     set_transition buf	10 11 '?'
1   394					     load<bx, dx>
3   395	    02D5  53				 push bx
3   396	    02D6  52				 push dx
1   397					     get_offset	10
2   398	    02D7  33 D2			     xor dx, dx
2   399	    02D9  33 C0			     xor ax, ax
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 8
regex.ASM



2   400	    02DB  B0 0A			     mov al, 10
2   401	    02DD  C1 E0	08		     shl ax, 8
1   402	    02E0  05 06D4r		     add ax, offset buf
1   403	    02E3  05 003F		     add ax, '?'
1   404	    02E6  8B D8			     mov bx, ax
1   405	    02E8  C6 07	0B		     mov byte ptr [bx],	11
1   406					     restore<dx, bx>
3   407	    02EB  5A				 pop dx
3   408	    02EC  5B				 pop bx
    409	    02ED  C3			     ret
    410	    02EE			 create_B_table:
    411					     set_transition_for_digits buf 9 9
1   412					     set_transition_length_from_start buf, 9, 9, 30, 10
2   413	    02EE  BB 001E		     mov bx, 30
2   414	    02F1  B9 000A		     mov cx, 10
2   415	    02F4			 ??0006:
2   416	    02F4  83 F9	00		     cmp cx, 0
2   417	    02F7  74 1F			     je	??0007
2   418					     load <bx,cx>
4   419	    02F9  53				 push bx
4   420	    02FA  51				 push cx
2   421					     set_transition buf	9 9 bx
3   422					     load<bx, dx>
5   423	    02FB  53				 push bx
5   424	    02FC  52				 push dx
3   425					     get_offset	9
4   426	    02FD  33 D2			     xor dx, dx
4   427	    02FF  33 C0			     xor ax, ax
4   428	    0301  B0 09			     mov al, 9
4   429	    0303  C1 E0	08		     shl ax, 8
3   430	    0306  05 06D4r		     add ax, offset buf
3   431	    0309  03 C3			     add ax, bx
3   432	    030B  8B D8			     mov bx, ax
3   433	    030D  C6 07	09		     mov byte ptr [bx],	9
3   434					     restore<dx, bx>
5   435	    0310  5A				 pop dx
5   436	    0311  5B				 pop bx
2   437					     restore <cx,bx>
4   438	    0312  59				 pop cx
4   439	    0313  5B				 pop bx
2   440	    0314  43			     inc bx
2   441	    0315  49			     dec cx
2   442	    0316  EB DC			     jmp ??0006
2   443	    0318			 ??0007:
    444					     set_transition_for_letters	buf 9 9
1   445					     set_transition_length_from_start buf, 9, 9, 97, 26
2   446	    0318  BB 0061		     mov bx, 97
2   447	    031B  B9 001A		     mov cx, 26
2   448	    031E			 ??0008:
2   449	    031E  83 F9	00		     cmp cx, 0
2   450	    0321  74 1F			     je	??0009
2   451					     load <bx,cx>
4   452	    0323  53				 push bx
4   453	    0324  51				 push cx
2   454					     set_transition buf	9 9 bx
3   455					     load<bx, dx>
5   456	    0325  53				 push bx
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 9
regex.ASM



5   457	    0326  52				 push dx
3   458					     get_offset	9
4   459	    0327  33 D2			     xor dx, dx
4   460	    0329  33 C0			     xor ax, ax
4   461	    032B  B0 09			     mov al, 9
4   462	    032D  C1 E0	08		     shl ax, 8
3   463	    0330  05 06D4r		     add ax, offset buf
3   464	    0333  03 C3			     add ax, bx
3   465	    0335  8B D8			     mov bx, ax
3   466	    0337  C6 07	09		     mov byte ptr [bx],	9
3   467					     restore<dx, bx>
5   468	    033A  5A				 pop dx
5   469	    033B  5B				 pop bx
2   470					     restore <cx,bx>
4   471	    033C  59				 pop cx
4   472	    033D  5B				 pop bx
2   473	    033E  43			     inc bx
2   474	    033F  49			     dec cx
2   475	    0340  EB DC			     jmp ??0008
2   476	    0342			 ??0009:
1   477					     set_transition_length_from_start buf, 9, 9, 65, 26
2   478	    0342  BB 0041		     mov bx, 65
2   479	    0345  B9 001A		     mov cx, 26
2   480	    0348			 ??000A:
2   481	    0348  83 F9	00		     cmp cx, 0
2   482	    034B  74 1F			     je	??000B
2   483					     load <bx,cx>
4   484	    034D  53				 push bx
4   485	    034E  51				 push cx
2   486					     set_transition buf	9 9 bx
3   487					     load<bx, dx>
5   488	    034F  53				 push bx
5   489	    0350  52				 push dx
3   490					     get_offset	9
4   491	    0351  33 D2			     xor dx, dx
4   492	    0353  33 C0			     xor ax, ax
4   493	    0355  B0 09			     mov al, 9
4   494	    0357  C1 E0	08		     shl ax, 8
3   495	    035A  05 06D4r		     add ax, offset buf
3   496	    035D  03 C3			     add ax, bx
3   497	    035F  8B D8			     mov bx, ax
3   498	    0361  C6 07	09		     mov byte ptr [bx],	9
3   499					     restore<dx, bx>
5   500	    0364  5A				 pop dx
5   501	    0365  5B				 pop bx
2   502					     restore <cx,bx>
4   503	    0366  59				 pop cx
4   504	    0367  5B				 pop bx
2   505	    0368  43			     inc bx
2   506	    0369  49			     dec cx
2   507	    036A  EB DC			     jmp ??000A
2   508	    036C			 ??000B:
    509					     set_transition buf	9 9 '.'
1   510					     load<bx, dx>
3   511	    036C  53				 push bx
3   512	    036D  52				 push dx
1   513					     get_offset	9
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 10
regex.ASM



2   514	    036E  33 D2			     xor dx, dx
2   515	    0370  33 C0			     xor ax, ax
2   516	    0372  B0 09			     mov al, 9
2   517	    0374  C1 E0	08		     shl ax, 8
1   518	    0377  05 06D4r		     add ax, offset buf
1   519	    037A  05 002E		     add ax, '.'
1   520	    037D  8B D8			     mov bx, ax
1   521	    037F  C6 07	09		     mov byte ptr [bx],	9
1   522					     restore<dx, bx>
3   523	    0382  5A				 pop dx
3   524	    0383  5B				 pop bx
    525					     set_transition buf	9 10 '/'
1   526					     load<bx, dx>
3   527	    0384  53				 push bx
3   528	    0385  52				 push dx
1   529					     get_offset	9
2   530	    0386  33 D2			     xor dx, dx
2   531	    0388  33 C0			     xor ax, ax
2   532	    038A  B0 09			     mov al, 9
2   533	    038C  C1 E0	08		     shl ax, 8
1   534	    038F  05 06D4r		     add ax, offset buf
1   535	    0392  05 002F		     add ax, '/'
1   536	    0395  8B D8			     mov bx, ax
1   537	    0397  C6 07	0A		     mov byte ptr [bx],	10
1   538					     restore<dx, bx>
3   539	    039A  5A				 pop dx
3   540	    039B  5B				 pop bx
    541					     set_transition buf	9 11 '?'
1   542					     load<bx, dx>
3   543	    039C  53				 push bx
3   544	    039D  52				 push dx
1   545					     get_offset	9
2   546	    039E  33 D2			     xor dx, dx
2   547	    03A0  33 C0			     xor ax, ax
2   548	    03A2  B0 09			     mov al, 9
2   549	    03A4  C1 E0	08		     shl ax, 8
1   550	    03A7  05 06D4r		     add ax, offset buf
1   551	    03AA  05 003F		     add ax, '?'
1   552	    03AD  8B D8			     mov bx, ax
1   553	    03AF  C6 07	0B		     mov byte ptr [bx],	11
1   554					     restore<dx, bx>
3   555	    03B2  5A				 pop dx
3   556	    03B3  5B				 pop bx
    557	    03B4  C3			     ret
    558	    03B5			 create_A_table:
    559					     set_transition buf	0 1 'h'
1   560					     load<bx, dx>
3   561	    03B5  53				 push bx
3   562	    03B6  52				 push dx
1   563					     get_offset	0
2   564	    03B7  33 D2			     xor dx, dx
2   565	    03B9  33 C0			     xor ax, ax
2   566	    03BB  B0 00			     mov al, 0
2   567	    03BD  C1 E0	08		     shl ax, 8
1   568	    03C0  05 06D4r		     add ax, offset buf
1   569	    03C3  05 0068		     add ax, 'h'
1   570	    03C6  8B D8			     mov bx, ax
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 11
regex.ASM



1   571	    03C8  C6 07	01		     mov byte ptr [bx],	1
1   572					     restore<dx, bx>
3   573	    03CB  5A				 pop dx
3   574	    03CC  5B				 pop bx
    575					     set_transition buf	1 2 't'
1   576					     load<bx, dx>
3   577	    03CD  53				 push bx
3   578	    03CE  52				 push dx
1   579					     get_offset	1
2   580	    03CF  33 D2			     xor dx, dx
2   581	    03D1  33 C0			     xor ax, ax
2   582	    03D3  B0 01			     mov al, 1
2   583	    03D5  C1 E0	08		     shl ax, 8
1   584	    03D8  05 06D4r		     add ax, offset buf
1   585	    03DB  05 0074		     add ax, 't'
1   586	    03DE  8B D8			     mov bx, ax
1   587	    03E0  C6 07	02		     mov byte ptr [bx],	2
1   588					     restore<dx, bx>
3   589	    03E3  5A				 pop dx
3   590	    03E4  5B				 pop bx
    591					     set_transition buf	2 3 't'
1   592					     load<bx, dx>
3   593	    03E5  53				 push bx
3   594	    03E6  52				 push dx
1   595					     get_offset	2
2   596	    03E7  33 D2			     xor dx, dx
2   597	    03E9  33 C0			     xor ax, ax
2   598	    03EB  B0 02			     mov al, 2
2   599	    03ED  C1 E0	08		     shl ax, 8
1   600	    03F0  05 06D4r		     add ax, offset buf
1   601	    03F3  05 0074		     add ax, 't'
1   602	    03F6  8B D8			     mov bx, ax
1   603	    03F8  C6 07	03		     mov byte ptr [bx],	3
1   604					     restore<dx, bx>
3   605	    03FB  5A				 pop dx
3   606	    03FC  5B				 pop bx
    607					     set_transition buf	3 4 'p'
1   608					     load<bx, dx>
3   609	    03FD  53				 push bx
3   610	    03FE  52				 push dx
1   611					     get_offset	3
2   612	    03FF  33 D2			     xor dx, dx
2   613	    0401  33 C0			     xor ax, ax
2   614	    0403  B0 03			     mov al, 3
2   615	    0405  C1 E0	08		     shl ax, 8
1   616	    0408  05 06D4r		     add ax, offset buf
1   617	    040B  05 0070		     add ax, 'p'
1   618	    040E  8B D8			     mov bx, ax
1   619	    0410  C6 07	04		     mov byte ptr [bx],	4
1   620					     restore<dx, bx>
3   621	    0413  5A				 pop dx
3   622	    0414  5B				 pop bx
    623					     set_transition buf	4 5 's'
1   624					     load<bx, dx>
3   625	    0415  53				 push bx
3   626	    0416  52				 push dx
1   627					     get_offset	4
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 12
regex.ASM



2   628	    0417  33 D2			     xor dx, dx
2   629	    0419  33 C0			     xor ax, ax
2   630	    041B  B0 04			     mov al, 4
2   631	    041D  C1 E0	08		     shl ax, 8
1   632	    0420  05 06D4r		     add ax, offset buf
1   633	    0423  05 0073		     add ax, 's'
1   634	    0426  8B D8			     mov bx, ax
1   635	    0428  C6 07	05		     mov byte ptr [bx],	5
1   636					     restore<dx, bx>
3   637	    042B  5A				 pop dx
3   638	    042C  5B				 pop bx
    639					     set_transition buf	4 6 ':'
1   640					     load<bx, dx>
3   641	    042D  53				 push bx
3   642	    042E  52				 push dx
1   643					     get_offset	4
2   644	    042F  33 D2			     xor dx, dx
2   645	    0431  33 C0			     xor ax, ax
2   646	    0433  B0 04			     mov al, 4
2   647	    0435  C1 E0	08		     shl ax, 8
1   648	    0438  05 06D4r		     add ax, offset buf
1   649	    043B  05 003A		     add ax, ':'
1   650	    043E  8B D8			     mov bx, ax
1   651	    0440  C6 07	06		     mov byte ptr [bx],	6
1   652					     restore<dx, bx>
3   653	    0443  5A				 pop dx
3   654	    0444  5B				 pop bx
    655					     set_transition buf	5 6 ':'
1   656					     load<bx, dx>
3   657	    0445  53				 push bx
3   658	    0446  52				 push dx
1   659					     get_offset	5
2   660	    0447  33 D2			     xor dx, dx
2   661	    0449  33 C0			     xor ax, ax
2   662	    044B  B0 05			     mov al, 5
2   663	    044D  C1 E0	08		     shl ax, 8
1   664	    0450  05 06D4r		     add ax, offset buf
1   665	    0453  05 003A		     add ax, ':'
1   666	    0456  8B D8			     mov bx, ax
1   667	    0458  C6 07	06		     mov byte ptr [bx],	6
1   668					     restore<dx, bx>
3   669	    045B  5A				 pop dx
3   670	    045C  5B				 pop bx
    671					     set_transition buf	6 7 '/'
1   672					     load<bx, dx>
3   673	    045D  53				 push bx
3   674	    045E  52				 push dx
1   675					     get_offset	6
2   676	    045F  33 D2			     xor dx, dx
2   677	    0461  33 C0			     xor ax, ax
2   678	    0463  B0 06			     mov al, 6
2   679	    0465  C1 E0	08		     shl ax, 8
1   680	    0468  05 06D4r		     add ax, offset buf
1   681	    046B  05 002F		     add ax, '/'
1   682	    046E  8B D8			     mov bx, ax
1   683	    0470  C6 07	07		     mov byte ptr [bx],	7
1   684					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 13
regex.ASM



3   685	    0473  5A				 pop dx
3   686	    0474  5B				 pop bx
    687					     set_transition buf	7 8 '/'
1   688					     load<bx, dx>
3   689	    0475  53				 push bx
3   690	    0476  52				 push dx
1   691					     get_offset	7
2   692	    0477  33 D2			     xor dx, dx
2   693	    0479  33 C0			     xor ax, ax
2   694	    047B  B0 07			     mov al, 7
2   695	    047D  C1 E0	08		     shl ax, 8
1   696	    0480  05 06D4r		     add ax, offset buf
1   697	    0483  05 002F		     add ax, '/'
1   698	    0486  8B D8			     mov bx, ax
1   699	    0488  C6 07	08		     mov byte ptr [bx],	8
1   700					     restore<dx, bx>
3   701	    048B  5A				 pop dx
3   702	    048C  5B				 pop bx
    703	    048D  C3			     ret
    704	    048E  00			 state db 0
    705
    706	    048F  08			 termA db 8
    707	    0490  0A			 termB db 10
    708	    0491  0B			 termC db 11
    709	    0492  0C			 termD db 12
    710
    711	    0493  80*(24)		 pr db 128 dup('$')
    712	    0513  80*(24)		 dom db	128 dup('$')
    713	    0593  80*(24)		 pat db	128 dup('$')
    714	    0613  80*(24)		 que db	128 dup('$')
    715
    716	    0693  50 72	6F 74 6F 63 6F+	 prmes db 'Protocol: $'
    717		  6C 3A	20 24
    718	    069E  44 6F	6D 61 69 6E 3A+	 dommes	db 'Domain: $'
    719		  20 24
    720	    06A7  50 61	74 68 3A 20 24	 pathmes db 'Path: $'
    721	    06AE  51 75	65 72 79 3A 20+	 querymes db 'Query: $'
    722		  24
    723
    724	    06B6  45 72	72 6F 72 3A 20+	 errormes db 'Error: incorrect format$'
    725		  69 6E	63 6F 72 72 65+
    726		  63 74	20 66 6F 72 6D+
    727		  61 74	24
    728
    729	    06CE  0A 24			 newline db 0Ah, '$'
    730
    731	    06D0  00			 prad db 0
    732	    06D1  00			 domad db 0
    733	    06D2  00			 patad db 0
    734	    06D3  00			 quead db 0
    735
    736	    06D4  0E10*(00)		 buf db	3600 dup(0) ; memory for table
    737					 end start
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 14
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:010F
??0001				  Near	 DGROUP:011C
??0002				  Near	 DGROUP:0286
??0003				  Near	 DGROUP:02AA
??0004				  Near	 DGROUP:02B1
??0005				  Near	 DGROUP:02D5
??0006				  Near	 DGROUP:02F4
??0007				  Near	 DGROUP:0318
??0008				  Near	 DGROUP:031E
??0009				  Near	 DGROUP:0342
??000A				  Near	 DGROUP:0348
??000B				  Near	 DGROUP:036C
??DATE				  Text	 "11/25/19"
??FILENAME			  Text	 "regex	  "
??TIME				  Text	 "14:19:57"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGEX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUF				  Byte	 DGROUP:06D4
CREATE_A_TABLE			  Near	 DGROUP:03B5
CREATE_B_TABLE			  Near	 DGROUP:02EE
CREATE_C_TABLE			  Near	 DGROUP:02AB
CREATE_D_TABLE			  Near	 DGROUP:0280
DOM				  Byte	 DGROUP:0513
DOMAD				  Byte	 DGROUP:06D1
DOMMES				  Byte	 DGROUP:069E
EALL				  Near	 DGROUP:027C
ELOOP				  Near	 DGROUP:0278
ERRORMES			  Byte	 DGROUP:06B6
L1				  Near	 DGROUP:0174
L2				  Near	 DGROUP:0196
L3				  Near	 DGROUP:01B2
L4				  Near	 DGROUP:01D4
L5				  Near	 DGROUP:01F0
L6				  Near	 DGROUP:0211
L7				  Near	 DGROUP:022C
L8				  Near	 DGROUP:024D
L9				  Near	 DGROUP:0268
NEWLINE				  Byte	 DGROUP:06CE
PARSE_LOOP			  Near	 DGROUP:0121
PAT				  Byte	 DGROUP:0593
PATAD				  Byte	 DGROUP:06D2
PATHMES				  Byte	 DGROUP:06A7
PR				  Byte	 DGROUP:0493
Turbo Assembler	 Version 4.1	    11/25/19 14:19:58	    Page 15
Symbol Table



PRAD				  Byte	 DGROUP:06D0
PRMES				  Byte	 DGROUP:0693
QUE				  Byte	 DGROUP:0613
QUEAD				  Byte	 DGROUP:06D3
QUERYMES			  Byte	 DGROUP:06AE
START				  Near	 DGROUP:0100
STATE				  Byte	 DGROUP:048E
TERMA				  Byte	 DGROUP:048F
TERMB				  Byte	 DGROUP:0490
TERMC				  Byte	 DGROUP:0491
TERMD				  Byte	 DGROUP:0492

Macro Name

EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  14E4 Word	  Public  CODE
