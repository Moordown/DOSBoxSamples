Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 1
regex.ASM



      1					 include macro.asm
1     2					 load macro args
1     3					     irp d,<args>
1     4						 push d
1     5					     endm
1     6					 endm
1     7
1     8					 restore macro args
1     9					     irp d,<args>
1    10						 pop d
1    11					     endm
1    12					 endm
1    13
1    14					 exit macro
1    15					     mov ah, 00h
1    16					     int 21h
1    17					 endm
1    18
1    19					 print macro buf
1    20						 mov ah, 09h
1    21						 mov dx, buf
1    22						 int 21h
1    23					 endm
1    24
1    25					 get_offset macro state
1    26					     xor dx, dx
1    27					     xor ax, ax
1    28					     mov al, state
1    29					     shl ax, 8
1    30					 endm get_offset
1    31
1    32					 to_non_space macro addr
1    33					     local l1, l2
1    34					     mov si, addr
1    35					 l1:
1    36					     mov byte ptr al, [si]
1    37					     cmp al, 20h
1    38					     je	l2
1    39					     cmp al, 0
1    40					     je	l2
1    41					     inc si
1    42					     jmp l1
1    43					 l2:
1    44					     inc si
1    45					     mov ax, si
1    46					 endm
1    47
1    48					 set_transition	macro buf, from, to, char
1    49					     load<bx, dx>
1    50					     get_offset	from
1    51
1    52					     add ax, offset buf
1    53					     add ax, char
1    54
1    55					     mov bx, ax
1    56					     mov byte ptr [bx],	to
1    57					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 2
regex.ASM



1    58					 endm
1    59
1    60					 set_transition_length_from_start macro	buf, from, to, start, iterations
1    61					     local l1, end
1    62					     mov bx, start
1    63					     mov cx, iterations
1    64					 l1:
1    65					     cmp cx, 0
1    66					     je	end
1    67
1    68					     load <bx,cx>
1    69					     set_transition buf	from to	bx
1    70					     restore <cx,bx>
1    71
1    72					     inc bx
1    73					     dec cx
1    74					     jmp l1
1    75					 end:
1    76					 endm
1    77
1    78					 set_zero macro	state
1    79					     mov al, 0
1    80					     mov byte ptr [state], al
1    81					 endm
1    82
1    83					 print_range macro args
1    84					     irp d,<args>
1    85						 print <offset d>
1    86					     endm
1    87					 endm
1    88
1    89					 set_transition_for_all	macro buf, from, to
1    90					     set_transition_length_from_start buf, from, to, 0,	255
1    91					 endm
1    92
1    93					 set_transition_for_digits macro buf, from, to
1    94					     set_transition_length_from_start buf, from, to, 30, 10
1    95					 endm
1    96
1    97					 set_transition_for_letters macro buf, from, to
1    98					     set_transition_length_from_start buf, from, to, 97, 26
1    99					     set_transition_length_from_start buf, from, to, 65, 26
1   100					 endm
1   101
1   102					 get_transition	macro buf, from, char
1   103					     load <dx>
1   104					     get_offset	from
1   105					     restore <dx>
1   106
1   107					     add ax, offset buf
1   108					     add ax, char
1   109
1   110					     mov bx, ax
1   111					     xor ax, ax
1   112					     mov al, byte ptr [bx]
1   113					 endm
1   114
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 3
regex.ASM



1   115					 put macro from, to, position
1   116					     xor dx, dx
1   117					     xor bx, bx
1   118
1   119					     mov dx, offset to
1   120					     mov bl, byte ptr [position]
1   121					     add dx, bx
1   122
1   123					     mov bl, byte ptr [from]
1   124					     mov byte ptr [edx], bl
1   125					     inc [position]
1   126					 endm
1   127
1   128					 clear_mes macro mes, lastidx
1   129					     local l1, end
1   130					     mov bx, offset mes
1   131					     mov cl, byte ptr [lastidx]
1   132					     inc cl
1   133					 l1:
1   134					     cmp cl, 0
1   135					     je	end
1   136					     mov byte ptr [bx],	'$'
1   137					     inc bx
1   138					     dec cl
1   139					     jmp l1
1   140					 end:
1   141					     mov bl, 0
1   142					     mov byte ptr [lastidx], bl
1   143					 endm
    144
    145	    0000			 model tiny
    146					 .386
    147	    0000			 .code
    148					 org 100h
    149	    0100			 start:
    150	    0100  E8 0237		     call create_D_table
    151	    0103  E8 025F		     call create_C_table
    152	    0106  E8 02C9		     call create_B_table
    153	    0109  E8 040B		     call create_A_table
    154	    010C  E8 07CF		     call create_Zero_table
    155					     to_non_space 80h
1   156	    010F  BE 0080		     mov si, 80h
1   157	    0112			 ??0000:
1   158	    0112  8A 04			     mov byte ptr al, [si]
1   159	    0114  3C 20			     cmp al, 20h
1   160	    0116  74 07			     je	??0001
1   161	    0118  3C 00			     cmp al, 0
1   162	    011A  74 03			     je	??0001
1   163	    011C  46			     inc si
1   164	    011D  EB F3			     jmp ??0000
1   165	    011F			 ??0001:
1   166	    011F  46			     inc si
1   167	    0120  8B C6			     mov ax, si
    168	    0122  8B F0			     mov si, ax
    169	    0124			 parse_loop:
    170					     load <si>
2   171	    0124  56				 push si
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 4
regex.ASM



    172	    0125  33 D2			     xor dx, dx
    173	    0127  33 DB			     xor bx, bx
    174	    0129  33 C0			     xor ax, ax
    175	    012B  8A 14			     mov dl, byte ptr [si]
    176	    012D  80 FA	0D		     cmp dl, 0Dh
    177	    0130  75 15			     jne l0
    178	    0132  A0 0AB3r		     mov al, byte ptr [domain_was]
    179	    0135  3C 00			     cmp al, 0
    180	    0137  0F 84	01E7		     je	l11
    181	    013B  A0 0AB4r		     mov al, byte ptr [query_was]
    182	    013E  3C 00			     cmp al, 0
    183	    0140  0F 84	01CE		     je	l10
    184	    0144  E9 0183		     jmp l8
    185	    0147			 l0:
    186	    0147  8A 1E	09BDr		     mov bl, byte ptr [state]
    187					     get_transition buf, bl, dx
1   188					     load <dx>
3   189	    014B  52				 push dx
1   190					     get_offset	bl
2   191	    014C  33 D2			     xor dx, dx
2   192	    014E  33 C0			     xor ax, ax
2   193	    0150  8A C3			     mov al, bl
2   194	    0152  C1 E0	08		     shl ax, 8
1   195					     restore <dx>
3   196	    0155  5A				 pop dx
1   197	    0156  05 0AB5r		     add ax, offset buf
1   198	    0159  03 C2			     add ax, dx
1   199	    015B  8B D8			     mov bx, ax
1   200	    015D  33 C0			     xor ax, ax
1   201	    015F  8A 07			     mov al, byte ptr [bx]
    202					     restore <si>
2   203	    0161  5E				 pop si
    204
    205	    0162  A2 09BDr		     mov byte ptr [state], al
    206	    0165  3C 00			     cmp al, 0
    207	    0167  0F 84	0197		     je	l9
    208	    016B  3A 06	09BEr		     cmp al, byte ptr [termA]
    209	    016F  7E 19			     jle l1
    210	    0171  3A 06	09BFr		     cmp al, byte ptr [termB]
    211	    0175  7E 6E			     jle l3
    212	    0177  3A 06	09C0r		     cmp al, byte ptr [termC]
    213	    017B  0F 8E	00C8		     jle l5
    214	    017F  3A 06	09C1r		     cmp al, byte ptr [termD]
    215	    0183  0F 8E	011C		     jle l7
    216	    0187  E9 01AC		     jmp eall
    217	    018A			 l1:
    218					     put si, mes, mesad
1   219	    018A  33 D2			     xor dx, dx
1   220	    018C  33 DB			     xor bx, bx
1   221	    018E  BA 09C3r		     mov dx, offset mes
1   222	    0191  8A 1E	09C2r		     mov bl, byte ptr [mesad]
1   223	    0195  03 D3			     add dx, bx
1   224	    0197  8A 1C			     mov bl, byte ptr [si]
1   225	    0199  67| 88 1A		     mov byte ptr [edx], bl
1   226	    019C  FE 06	09C2r		     inc [mesad]
    227	    01A0  A0 09BDr		     mov al, byte ptr [state]
    228	    01A3  3A 06	09BEr		     cmp al, byte ptr [termA]
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 5
regex.ASM



    229	    01A7  74 03			     je	l2
    230	    01A9  E9 0186		     jmp eloop
    231	    01AC			 l2:
    232					     print_range <prmes, mes, newline>
2   233						 print <offset prmes>
3   234	    01AC  B4 09				 mov ah, 09h
3   235	    01AE  BA 0A43r			 mov dx, offset	prmes
3   236	    01B1  CD 21				 int 21h
2   237						 print <offset mes>
3   238	    01B3  B4 09				 mov ah, 09h
3   239	    01B5  BA 09C3r			 mov dx, offset	mes
3   240	    01B8  CD 21				 int 21h
2   241						 print <offset newline>
3   242	    01BA  B4 09				 mov ah, 09h
3   243	    01BC  BA 0AB1r			 mov dx, offset	newline
3   244	    01BF  CD 21				 int 21h
    245					     clear_mes mes, mesad
1   246	    01C1  BB 09C3r		     mov bx, offset mes
1   247	    01C4  8A 0E	09C2r		     mov cl, byte ptr [mesad]
1   248	    01C8  FE C1			     inc cl
1   249	    01CA			 ??0002:
1   250	    01CA  80 F9	00		     cmp cl, 0
1   251	    01CD  74 08			     je	??0003
1   252	    01CF  C6 07	24		     mov byte ptr [bx],	'$'
1   253	    01D2  43			     inc bx
1   254	    01D3  FE C9			     dec cl
1   255	    01D5  EB F3			     jmp ??0002
1   256	    01D7			 ??0003:
1   257	    01D7  B3 00			     mov bl, 0
1   258	    01D9  88 1E	09C2r		     mov byte ptr [mesad], bl
    259					     set_zero state
1   260	    01DD  B0 00			     mov al, 0
1   261	    01DF  A2 09BDr		     mov byte ptr [state], al
    262	    01E2  E9 014D		     jmp eloop
    263	    01E5			 l3:
    264	    01E5  B3 01			     mov bl, 1
    265	    01E7  88 1E	0AB3r		     mov byte ptr [domain_was],	bl
    266	    01EB  A0 09BDr		     mov al, byte ptr [state]
    267	    01EE  3A 06	09BFr		     cmp al, byte ptr [termB]
    268	    01F2  74 19			     je	l4
    269					     put si, mes, mesad
1   270	    01F4  33 D2			     xor dx, dx
1   271	    01F6  33 DB			     xor bx, bx
1   272	    01F8  BA 09C3r		     mov dx, offset mes
1   273	    01FB  8A 1E	09C2r		     mov bl, byte ptr [mesad]
1   274	    01FF  03 D3			     add dx, bx
1   275	    0201  8A 1C			     mov bl, byte ptr [si]
1   276	    0203  67| 88 1A		     mov byte ptr [edx], bl
1   277	    0206  FE 06	09C2r		     inc [mesad]
    278	    020A  E9 0125		     jmp eloop
    279	    020D			 l4:
    280					     print_range <dommes, mes, newline>
2   281						 print <offset dommes>
3   282	    020D  B4 09				 mov ah, 09h
3   283	    020F  BA 0A4Er			 mov dx, offset	dommes
3   284	    0212  CD 21				 int 21h
2   285						 print <offset mes>
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 6
regex.ASM



3   286	    0214  B4 09				 mov ah, 09h
3   287	    0216  BA 09C3r			 mov dx, offset	mes
3   288	    0219  CD 21				 int 21h
2   289						 print <offset newline>
3   290	    021B  B4 09				 mov ah, 09h
3   291	    021D  BA 0AB1r			 mov dx, offset	newline
3   292	    0220  CD 21				 int 21h
    293					     clear_mes mes, mesad
1   294	    0222  BB 09C3r		     mov bx, offset mes
1   295	    0225  8A 0E	09C2r		     mov cl, byte ptr [mesad]
1   296	    0229  FE C1			     inc cl
1   297	    022B			 ??0004:
1   298	    022B  80 F9	00		     cmp cl, 0
1   299	    022E  74 08			     je	??0005
1   300	    0230  C6 07	24		     mov byte ptr [bx],	'$'
1   301	    0233  43			     inc bx
1   302	    0234  FE C9			     dec cl
1   303	    0236  EB F3			     jmp ??0004
1   304	    0238			 ??0005:
1   305	    0238  B3 00			     mov bl, 0
1   306	    023A  88 1E	09C2r		     mov byte ptr [mesad], bl
    307					     set_zero state
1   308	    023E  B0 00			     mov al, 0
1   309	    0240  A2 09BDr		     mov byte ptr [state], al
    310	    0243  4E			     dec si
    311	    0244  E9 00EB		     jmp eloop
    312	    0247			 l5:
    313	    0247  A0 09BDr		     mov al, byte ptr [state]
    314	    024A  3A 06	09C0r		     cmp al, byte ptr [termC]
    315	    024E  74 19			     je	l6
    316					     put si, mes, mesad
1   317	    0250  33 D2			     xor dx, dx
1   318	    0252  33 DB			     xor bx, bx
1   319	    0254  BA 09C3r		     mov dx, offset mes
1   320	    0257  8A 1E	09C2r		     mov bl, byte ptr [mesad]
1   321	    025B  03 D3			     add dx, bx
1   322	    025D  8A 1C			     mov bl, byte ptr [si]
1   323	    025F  67| 88 1A		     mov byte ptr [edx], bl
1   324	    0262  FE 06	09C2r		     inc [mesad]
    325	    0266  E9 00C9		     jmp eloop
    326	    0269			 l6:
    327					     print_range <pathmes, mes,	newline>
2   328						 print <offset pathmes>
3   329	    0269  B4 09				 mov ah, 09h
3   330	    026B  BA 0A57r			 mov dx, offset	pathmes
3   331	    026E  CD 21				 int 21h
2   332						 print <offset mes>
3   333	    0270  B4 09				 mov ah, 09h
3   334	    0272  BA 09C3r			 mov dx, offset	mes
3   335	    0275  CD 21				 int 21h
2   336						 print <offset newline>
3   337	    0277  B4 09				 mov ah, 09h
3   338	    0279  BA 0AB1r			 mov dx, offset	newline
3   339	    027C  CD 21				 int 21h
    340					     clear_mes mes, mesad
1   341	    027E  BB 09C3r		     mov bx, offset mes
1   342	    0281  8A 0E	09C2r		     mov cl, byte ptr [mesad]
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 7
regex.ASM



1   343	    0285  FE C1			     inc cl
1   344	    0287			 ??0006:
1   345	    0287  80 F9	00		     cmp cl, 0
1   346	    028A  74 08			     je	??0007
1   347	    028C  C6 07	24		     mov byte ptr [bx],	'$'
1   348	    028F  43			     inc bx
1   349	    0290  FE C9			     dec cl
1   350	    0292  EB F3			     jmp ??0006
1   351	    0294			 ??0007:
1   352	    0294  B3 00			     mov bl, 0
1   353	    0296  88 1E	09C2r		     mov byte ptr [mesad], bl
    354					     set_zero state
1   355	    029A  B0 00			     mov al, 0
1   356	    029C  A2 09BDr		     mov byte ptr [state], al
    357	    029F  4E			     dec si
    358	    02A0  E9 008F		     jmp eloop
    359	    02A3			 l7:
    360	    02A3  B3 01			     mov bl, 1
    361	    02A5  88 1E	0AB4r		     mov byte ptr [query_was], bl
    362	    02A9  A0 09BDr		     mov al, byte ptr [state]
    363	    02AC  3A 06	09C1r		     cmp al, byte ptr [termD]
    364	    02B0  74 18			     je	l8
    365					     put si, mes, mesad
1   366	    02B2  33 D2			     xor dx, dx
1   367	    02B4  33 DB			     xor bx, bx
1   368	    02B6  BA 09C3r		     mov dx, offset mes
1   369	    02B9  8A 1E	09C2r		     mov bl, byte ptr [mesad]
1   370	    02BD  03 D3			     add dx, bx
1   371	    02BF  8A 1C			     mov bl, byte ptr [si]
1   372	    02C1  67| 88 1A		     mov byte ptr [edx], bl
1   373	    02C4  FE 06	09C2r		     inc [mesad]
    374	    02C8  EB 68			     jmp eloop
    375	    02CA			 l8:
    376					     print_range <querymes, mes, newline>
2   377						 print <offset querymes>
3   378	    02CA  B4 09				 mov ah, 09h
3   379	    02CC  BA 0A5Er			 mov dx, offset	querymes
3   380	    02CF  CD 21				 int 21h
2   381						 print <offset mes>
3   382	    02D1  B4 09				 mov ah, 09h
3   383	    02D3  BA 09C3r			 mov dx, offset	mes
3   384	    02D6  CD 21				 int 21h
2   385						 print <offset newline>
3   386	    02D8  B4 09				 mov ah, 09h
3   387	    02DA  BA 0AB1r			 mov dx, offset	newline
3   388	    02DD  CD 21				 int 21h
    389					     clear_mes mes, mesad
1   390	    02DF  BB 09C3r		     mov bx, offset mes
1   391	    02E2  8A 0E	09C2r		     mov cl, byte ptr [mesad]
1   392	    02E6  FE C1			     inc cl
1   393	    02E8			 ??0008:
1   394	    02E8  80 F9	00		     cmp cl, 0
1   395	    02EB  74 08			     je	??0009
1   396	    02ED  C6 07	24		     mov byte ptr [bx],	'$'
1   397	    02F0  43			     inc bx
1   398	    02F1  FE C9			     dec cl
1   399	    02F3  EB F3			     jmp ??0008
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 8
regex.ASM



1   400	    02F5			 ??0009:
1   401	    02F5  B3 00			     mov bl, 0
1   402	    02F7  88 1E	09C2r		     mov byte ptr [mesad], bl
    403					     set_zero state
1   404	    02FB  B0 00			     mov al, 0
1   405	    02FD  A2 09BDr		     mov byte ptr [state], al
    406	    0300  EB 34			     jmp eall
    407	    0302			 l9:
    408					     print_range <errormes, newline>
2   409						 print <offset errormes>
3   410	    0302  B4 09				 mov ah, 09h
3   411	    0304  BA 0A66r			 mov dx, offset	errormes
3   412	    0307  CD 21				 int 21h
2   413						 print <offset newline>
3   414	    0309  B4 09				 mov ah, 09h
3   415	    030B  BA 0AB1r			 mov dx, offset	newline
3   416	    030E  CD 21				 int 21h
    417	    0310  EB 24			     jmp eall
    418	    0312			 l10:
    419					     print_range <errormes2, newline>
2   420						 print <offset errormes2>
3   421	    0312  B4 09				 mov ah, 09h
3   422	    0314  BA 0A7Er			 mov dx, offset	errormes2
3   423	    0317  CD 21				 int 21h
2   424						 print <offset newline>
3   425	    0319  B4 09				 mov ah, 09h
3   426	    031B  BA 0AB1r			 mov dx, offset	newline
3   427	    031E  CD 21				 int 21h
    428	    0320  EB 14			     jmp eall
    429	    0322			 l11:
    430					     print_range <errormes3, newline>
2   431						 print <offset errormes3>
3   432	    0322  B4 09				 mov ah, 09h
3   433	    0324  BA 0A97r			 mov dx, offset	errormes3
3   434	    0327  CD 21				 int 21h
2   435						 print <offset newline>
3   436	    0329  B4 09				 mov ah, 09h
3   437	    032B  BA 0AB1r			 mov dx, offset	newline
3   438	    032E  CD 21				 int 21h
    439	    0330  EB 04			     jmp eall
    440	    0332			 eloop:
    441	    0332  46			     inc si
    442	    0333  E9 FDEE		     jmp parse_loop
    443	    0336			 eall:
    444					     exit
1   445	    0336  B4 00			     mov ah, 00h
1   446	    0338  CD 21			     int 21h
    447	    033A			 create_D_table:
    448					     set_transition_for_all buf	15 15
1   449					     set_transition_length_from_start buf, 15, 15, 0, 255
2   450	    033A  BB 0000		     mov bx, 0
2   451	    033D  B9 00FF		     mov cx, 255
2   452	    0340			 ??000A:
2   453	    0340  83 F9	00		     cmp cx, 0
2   454	    0343  74 1F			     je	??000B
2   455					     load <bx,cx>
4   456	    0345  53				 push bx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 9
regex.ASM



4   457	    0346  51				 push cx
2   458					     set_transition buf	15 15 bx
3   459					     load<bx, dx>
5   460	    0347  53				 push bx
5   461	    0348  52				 push dx
3   462					     get_offset	15
4   463	    0349  33 D2			     xor dx, dx
4   464	    034B  33 C0			     xor ax, ax
4   465	    034D  B0 0F			     mov al, 15
4   466	    034F  C1 E0	08		     shl ax, 8
3   467	    0352  05 0AB5r		     add ax, offset buf
3   468	    0355  03 C3			     add ax, bx
3   469	    0357  8B D8			     mov bx, ax
3   470	    0359  C6 07	0F		     mov byte ptr [bx],	15
3   471					     restore<dx, bx>
5   472	    035C  5A				 pop dx
5   473	    035D  5B				 pop bx
2   474					     restore <cx,bx>
4   475	    035E  59				 pop cx
4   476	    035F  5B				 pop bx
2   477	    0360  43			     inc bx
2   478	    0361  49			     dec cx
2   479	    0362  EB DC			     jmp ??000A
2   480	    0364			 ??000B:
    481	    0364  C3			     ret
    482	    0365			 create_C_table:
    483					     set_transition_for_all buf	12 13
1   484					     set_transition_length_from_start buf, 12, 13, 0, 255
2   485	    0365  BB 0000		     mov bx, 0
2   486	    0368  B9 00FF		     mov cx, 255
2   487	    036B			 ??000C:
2   488	    036B  83 F9	00		     cmp cx, 0
2   489	    036E  74 1F			     je	??000D
2   490					     load <bx,cx>
4   491	    0370  53				 push bx
4   492	    0371  51				 push cx
2   493					     set_transition buf	12 13 bx
3   494					     load<bx, dx>
5   495	    0372  53				 push bx
5   496	    0373  52				 push dx
3   497					     get_offset	12
4   498	    0374  33 D2			     xor dx, dx
4   499	    0376  33 C0			     xor ax, ax
4   500	    0378  B0 0C			     mov al, 12
4   501	    037A  C1 E0	08		     shl ax, 8
3   502	    037D  05 0AB5r		     add ax, offset buf
3   503	    0380  03 C3			     add ax, bx
3   504	    0382  8B D8			     mov bx, ax
3   505	    0384  C6 07	0D		     mov byte ptr [bx],	13
3   506					     restore<dx, bx>
5   507	    0387  5A				 pop dx
5   508	    0388  5B				 pop bx
2   509					     restore <cx,bx>
4   510	    0389  59				 pop cx
4   511	    038A  5B				 pop bx
2   512	    038B  43			     inc bx
2   513	    038C  49			     dec cx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 10
regex.ASM



2   514	    038D  EB DC			     jmp ??000C
2   515	    038F			 ??000D:
    516					     set_transition_for_all buf	13 13
1   517					     set_transition_length_from_start buf, 13, 13, 0, 255
2   518	    038F  BB 0000		     mov bx, 0
2   519	    0392  B9 00FF		     mov cx, 255
2   520	    0395			 ??000E:
2   521	    0395  83 F9	00		     cmp cx, 0
2   522	    0398  74 1F			     je	??000F
2   523					     load <bx,cx>
4   524	    039A  53				 push bx
4   525	    039B  51				 push cx
2   526					     set_transition buf	13 13 bx
3   527					     load<bx, dx>
5   528	    039C  53				 push bx
5   529	    039D  52				 push dx
3   530					     get_offset	13
4   531	    039E  33 D2			     xor dx, dx
4   532	    03A0  33 C0			     xor ax, ax
4   533	    03A2  B0 0D			     mov al, 13
4   534	    03A4  C1 E0	08		     shl ax, 8
3   535	    03A7  05 0AB5r		     add ax, offset buf
3   536	    03AA  03 C3			     add ax, bx
3   537	    03AC  8B D8			     mov bx, ax
3   538	    03AE  C6 07	0D		     mov byte ptr [bx],	13
3   539					     restore<dx, bx>
5   540	    03B1  5A				 pop dx
5   541	    03B2  5B				 pop bx
2   542					     restore <cx,bx>
4   543	    03B3  59				 pop cx
4   544	    03B4  5B				 pop bx
2   545	    03B5  43			     inc bx
2   546	    03B6  49			     dec cx
2   547	    03B7  EB DC			     jmp ??000E
2   548	    03B9			 ??000F:
    549					     set_transition buf	13 14 '?'
1   550					     load<bx, dx>
3   551	    03B9  53				 push bx
3   552	    03BA  52				 push dx
1   553					     get_offset	13
2   554	    03BB  33 D2			     xor dx, dx
2   555	    03BD  33 C0			     xor ax, ax
2   556	    03BF  B0 0D			     mov al, 13
2   557	    03C1  C1 E0	08		     shl ax, 8
1   558	    03C4  05 0AB5r		     add ax, offset buf
1   559	    03C7  05 003F		     add ax, '?'
1   560	    03CA  8B D8			     mov bx, ax
1   561	    03CC  C6 07	0E		     mov byte ptr [bx],	14
1   562					     restore<dx, bx>
3   563	    03CF  5A				 pop dx
3   564	    03D0  5B				 pop bx
    565	    03D1  C3			     ret
    566	    03D2			 create_B_table:
    567					     set_transition_for_digits buf 9 9
1   568					     set_transition_length_from_start buf, 9, 9, 30, 10
2   569	    03D2  BB 001E		     mov bx, 30
2   570	    03D5  B9 000A		     mov cx, 10
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 11
regex.ASM



2   571	    03D8			 ??0010:
2   572	    03D8  83 F9	00		     cmp cx, 0
2   573	    03DB  74 1F			     je	??0011
2   574					     load <bx,cx>
4   575	    03DD  53				 push bx
4   576	    03DE  51				 push cx
2   577					     set_transition buf	9 9 bx
3   578					     load<bx, dx>
5   579	    03DF  53				 push bx
5   580	    03E0  52				 push dx
3   581					     get_offset	9
4   582	    03E1  33 D2			     xor dx, dx
4   583	    03E3  33 C0			     xor ax, ax
4   584	    03E5  B0 09			     mov al, 9
4   585	    03E7  C1 E0	08		     shl ax, 8
3   586	    03EA  05 0AB5r		     add ax, offset buf
3   587	    03ED  03 C3			     add ax, bx
3   588	    03EF  8B D8			     mov bx, ax
3   589	    03F1  C6 07	09		     mov byte ptr [bx],	9
3   590					     restore<dx, bx>
5   591	    03F4  5A				 pop dx
5   592	    03F5  5B				 pop bx
2   593					     restore <cx,bx>
4   594	    03F6  59				 pop cx
4   595	    03F7  5B				 pop bx
2   596	    03F8  43			     inc bx
2   597	    03F9  49			     dec cx
2   598	    03FA  EB DC			     jmp ??0010
2   599	    03FC			 ??0011:
    600					     set_transition_for_letters	buf 9 9
1   601					     set_transition_length_from_start buf, 9, 9, 97, 26
2   602	    03FC  BB 0061		     mov bx, 97
2   603	    03FF  B9 001A		     mov cx, 26
2   604	    0402			 ??0012:
2   605	    0402  83 F9	00		     cmp cx, 0
2   606	    0405  74 1F			     je	??0013
2   607					     load <bx,cx>
4   608	    0407  53				 push bx
4   609	    0408  51				 push cx
2   610					     set_transition buf	9 9 bx
3   611					     load<bx, dx>
5   612	    0409  53				 push bx
5   613	    040A  52				 push dx
3   614					     get_offset	9
4   615	    040B  33 D2			     xor dx, dx
4   616	    040D  33 C0			     xor ax, ax
4   617	    040F  B0 09			     mov al, 9
4   618	    0411  C1 E0	08		     shl ax, 8
3   619	    0414  05 0AB5r		     add ax, offset buf
3   620	    0417  03 C3			     add ax, bx
3   621	    0419  8B D8			     mov bx, ax
3   622	    041B  C6 07	09		     mov byte ptr [bx],	9
3   623					     restore<dx, bx>
5   624	    041E  5A				 pop dx
5   625	    041F  5B				 pop bx
2   626					     restore <cx,bx>
4   627	    0420  59				 pop cx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 12
regex.ASM



4   628	    0421  5B				 pop bx
2   629	    0422  43			     inc bx
2   630	    0423  49			     dec cx
2   631	    0424  EB DC			     jmp ??0012
2   632	    0426			 ??0013:
1   633					     set_transition_length_from_start buf, 9, 9, 65, 26
2   634	    0426  BB 0041		     mov bx, 65
2   635	    0429  B9 001A		     mov cx, 26
2   636	    042C			 ??0014:
2   637	    042C  83 F9	00		     cmp cx, 0
2   638	    042F  74 1F			     je	??0015
2   639					     load <bx,cx>
4   640	    0431  53				 push bx
4   641	    0432  51				 push cx
2   642					     set_transition buf	9 9 bx
3   643					     load<bx, dx>
5   644	    0433  53				 push bx
5   645	    0434  52				 push dx
3   646					     get_offset	9
4   647	    0435  33 D2			     xor dx, dx
4   648	    0437  33 C0			     xor ax, ax
4   649	    0439  B0 09			     mov al, 9
4   650	    043B  C1 E0	08		     shl ax, 8
3   651	    043E  05 0AB5r		     add ax, offset buf
3   652	    0441  03 C3			     add ax, bx
3   653	    0443  8B D8			     mov bx, ax
3   654	    0445  C6 07	09		     mov byte ptr [bx],	9
3   655					     restore<dx, bx>
5   656	    0448  5A				 pop dx
5   657	    0449  5B				 pop bx
2   658					     restore <cx,bx>
4   659	    044A  59				 pop cx
4   660	    044B  5B				 pop bx
2   661	    044C  43			     inc bx
2   662	    044D  49			     dec cx
2   663	    044E  EB DC			     jmp ??0014
2   664	    0450			 ??0015:
    665					     set_transition buf	9 10 '.'
1   666					     load<bx, dx>
3   667	    0450  53				 push bx
3   668	    0451  52				 push dx
1   669					     get_offset	9
2   670	    0452  33 D2			     xor dx, dx
2   671	    0454  33 C0			     xor ax, ax
2   672	    0456  B0 09			     mov al, 9
2   673	    0458  C1 E0	08		     shl ax, 8
1   674	    045B  05 0AB5r		     add ax, offset buf
1   675	    045E  05 002E		     add ax, '.'
1   676	    0461  8B D8			     mov bx, ax
1   677	    0463  C6 07	0A		     mov byte ptr [bx],	10
1   678					     restore<dx, bx>
3   679	    0466  5A				 pop dx
3   680	    0467  5B				 pop bx
    681					     set_transition_for_digits buf 10 9
1   682					     set_transition_length_from_start buf, 10, 9, 30, 10
2   683	    0468  BB 001E		     mov bx, 30
2   684	    046B  B9 000A		     mov cx, 10
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 13
regex.ASM



2   685	    046E			 ??0016:
2   686	    046E  83 F9	00		     cmp cx, 0
2   687	    0471  74 1F			     je	??0017
2   688					     load <bx,cx>
4   689	    0473  53				 push bx
4   690	    0474  51				 push cx
2   691					     set_transition buf	10 9 bx
3   692					     load<bx, dx>
5   693	    0475  53				 push bx
5   694	    0476  52				 push dx
3   695					     get_offset	10
4   696	    0477  33 D2			     xor dx, dx
4   697	    0479  33 C0			     xor ax, ax
4   698	    047B  B0 0A			     mov al, 10
4   699	    047D  C1 E0	08		     shl ax, 8
3   700	    0480  05 0AB5r		     add ax, offset buf
3   701	    0483  03 C3			     add ax, bx
3   702	    0485  8B D8			     mov bx, ax
3   703	    0487  C6 07	09		     mov byte ptr [bx],	9
3   704					     restore<dx, bx>
5   705	    048A  5A				 pop dx
5   706	    048B  5B				 pop bx
2   707					     restore <cx,bx>
4   708	    048C  59				 pop cx
4   709	    048D  5B				 pop bx
2   710	    048E  43			     inc bx
2   711	    048F  49			     dec cx
2   712	    0490  EB DC			     jmp ??0016
2   713	    0492			 ??0017:
    714					     set_transition_for_letters	buf 10 9
1   715					     set_transition_length_from_start buf, 10, 9, 97, 26
2   716	    0492  BB 0061		     mov bx, 97
2   717	    0495  B9 001A		     mov cx, 26
2   718	    0498			 ??0018:
2   719	    0498  83 F9	00		     cmp cx, 0
2   720	    049B  74 1F			     je	??0019
2   721					     load <bx,cx>
4   722	    049D  53				 push bx
4   723	    049E  51				 push cx
2   724					     set_transition buf	10 9 bx
3   725					     load<bx, dx>
5   726	    049F  53				 push bx
5   727	    04A0  52				 push dx
3   728					     get_offset	10
4   729	    04A1  33 D2			     xor dx, dx
4   730	    04A3  33 C0			     xor ax, ax
4   731	    04A5  B0 0A			     mov al, 10
4   732	    04A7  C1 E0	08		     shl ax, 8
3   733	    04AA  05 0AB5r		     add ax, offset buf
3   734	    04AD  03 C3			     add ax, bx
3   735	    04AF  8B D8			     mov bx, ax
3   736	    04B1  C6 07	09		     mov byte ptr [bx],	9
3   737					     restore<dx, bx>
5   738	    04B4  5A				 pop dx
5   739	    04B5  5B				 pop bx
2   740					     restore <cx,bx>
4   741	    04B6  59				 pop cx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 14
regex.ASM



4   742	    04B7  5B				 pop bx
2   743	    04B8  43			     inc bx
2   744	    04B9  49			     dec cx
2   745	    04BA  EB DC			     jmp ??0018
2   746	    04BC			 ??0019:
1   747					     set_transition_length_from_start buf, 10, 9, 65, 26
2   748	    04BC  BB 0041		     mov bx, 65
2   749	    04BF  B9 001A		     mov cx, 26
2   750	    04C2			 ??001A:
2   751	    04C2  83 F9	00		     cmp cx, 0
2   752	    04C5  74 1F			     je	??001B
2   753					     load <bx,cx>
4   754	    04C7  53				 push bx
4   755	    04C8  51				 push cx
2   756					     set_transition buf	10 9 bx
3   757					     load<bx, dx>
5   758	    04C9  53				 push bx
5   759	    04CA  52				 push dx
3   760					     get_offset	10
4   761	    04CB  33 D2			     xor dx, dx
4   762	    04CD  33 C0			     xor ax, ax
4   763	    04CF  B0 0A			     mov al, 10
4   764	    04D1  C1 E0	08		     shl ax, 8
3   765	    04D4  05 0AB5r		     add ax, offset buf
3   766	    04D7  03 C3			     add ax, bx
3   767	    04D9  8B D8			     mov bx, ax
3   768	    04DB  C6 07	09		     mov byte ptr [bx],	9
3   769					     restore<dx, bx>
5   770	    04DE  5A				 pop dx
5   771	    04DF  5B				 pop bx
2   772					     restore <cx,bx>
4   773	    04E0  59				 pop cx
4   774	    04E1  5B				 pop bx
2   775	    04E2  43			     inc bx
2   776	    04E3  49			     dec cx
2   777	    04E4  EB DC			     jmp ??001A
2   778	    04E6			 ??001B:
    779					     set_transition buf	10 11 '/'
1   780					     load<bx, dx>
3   781	    04E6  53				 push bx
3   782	    04E7  52				 push dx
1   783					     get_offset	10
2   784	    04E8  33 D2			     xor dx, dx
2   785	    04EA  33 C0			     xor ax, ax
2   786	    04EC  B0 0A			     mov al, 10
2   787	    04EE  C1 E0	08		     shl ax, 8
1   788	    04F1  05 0AB5r		     add ax, offset buf
1   789	    04F4  05 002F		     add ax, '/'
1   790	    04F7  8B D8			     mov bx, ax
1   791	    04F9  C6 07	0B		     mov byte ptr [bx],	11
1   792					     restore<dx, bx>
3   793	    04FC  5A				 pop dx
3   794	    04FD  5B				 pop bx
    795					     set_transition buf	10 11 '?'
1   796					     load<bx, dx>
3   797	    04FE  53				 push bx
3   798	    04FF  52				 push dx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 15
regex.ASM



1   799					     get_offset	10
2   800	    0500  33 D2			     xor dx, dx
2   801	    0502  33 C0			     xor ax, ax
2   802	    0504  B0 0A			     mov al, 10
2   803	    0506  C1 E0	08		     shl ax, 8
1   804	    0509  05 0AB5r		     add ax, offset buf
1   805	    050C  05 003F		     add ax, '?'
1   806	    050F  8B D8			     mov bx, ax
1   807	    0511  C6 07	0B		     mov byte ptr [bx],	11
1   808					     restore<dx, bx>
3   809	    0514  5A				 pop dx
3   810	    0515  5B				 pop bx
    811	    0516  C3			     ret
    812	    0517			 create_A_table:
    813					     set_transition buf	0 1 'h'
1   814					     load<bx, dx>
3   815	    0517  53				 push bx
3   816	    0518  52				 push dx
1   817					     get_offset	0
2   818	    0519  33 D2			     xor dx, dx
2   819	    051B  33 C0			     xor ax, ax
2   820	    051D  B0 00			     mov al, 0
2   821	    051F  C1 E0	08		     shl ax, 8
1   822	    0522  05 0AB5r		     add ax, offset buf
1   823	    0525  05 0068		     add ax, 'h'
1   824	    0528  8B D8			     mov bx, ax
1   825	    052A  C6 07	01		     mov byte ptr [bx],	1
1   826					     restore<dx, bx>
3   827	    052D  5A				 pop dx
3   828	    052E  5B				 pop bx
    829
    830					     set_transition_for_digits buf 1 9
1   831					     set_transition_length_from_start buf, 1, 9, 30, 10
2   832	    052F  BB 001E		     mov bx, 30
2   833	    0532  B9 000A		     mov cx, 10
2   834	    0535			 ??001C:
2   835	    0535  83 F9	00		     cmp cx, 0
2   836	    0538  74 1F			     je	??001D
2   837					     load <bx,cx>
4   838	    053A  53				 push bx
4   839	    053B  51				 push cx
2   840					     set_transition buf	1 9 bx
3   841					     load<bx, dx>
5   842	    053C  53				 push bx
5   843	    053D  52				 push dx
3   844					     get_offset	1
4   845	    053E  33 D2			     xor dx, dx
4   846	    0540  33 C0			     xor ax, ax
4   847	    0542  B0 01			     mov al, 1
4   848	    0544  C1 E0	08		     shl ax, 8
3   849	    0547  05 0AB5r		     add ax, offset buf
3   850	    054A  03 C3			     add ax, bx
3   851	    054C  8B D8			     mov bx, ax
3   852	    054E  C6 07	09		     mov byte ptr [bx],	9
3   853					     restore<dx, bx>
5   854	    0551  5A				 pop dx
5   855	    0552  5B				 pop bx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 16
regex.ASM



2   856					     restore <cx,bx>
4   857	    0553  59				 pop cx
4   858	    0554  5B				 pop bx
2   859	    0555  43			     inc bx
2   860	    0556  49			     dec cx
2   861	    0557  EB DC			     jmp ??001C
2   862	    0559			 ??001D:
    863					     set_transition_for_letters	buf 1 9
1   864					     set_transition_length_from_start buf, 1, 9, 97, 26
2   865	    0559  BB 0061		     mov bx, 97
2   866	    055C  B9 001A		     mov cx, 26
2   867	    055F			 ??001E:
2   868	    055F  83 F9	00		     cmp cx, 0
2   869	    0562  74 1F			     je	??001F
2   870					     load <bx,cx>
4   871	    0564  53				 push bx
4   872	    0565  51				 push cx
2   873					     set_transition buf	1 9 bx
3   874					     load<bx, dx>
5   875	    0566  53				 push bx
5   876	    0567  52				 push dx
3   877					     get_offset	1
4   878	    0568  33 D2			     xor dx, dx
4   879	    056A  33 C0			     xor ax, ax
4   880	    056C  B0 01			     mov al, 1
4   881	    056E  C1 E0	08		     shl ax, 8
3   882	    0571  05 0AB5r		     add ax, offset buf
3   883	    0574  03 C3			     add ax, bx
3   884	    0576  8B D8			     mov bx, ax
3   885	    0578  C6 07	09		     mov byte ptr [bx],	9
3   886					     restore<dx, bx>
5   887	    057B  5A				 pop dx
5   888	    057C  5B				 pop bx
2   889					     restore <cx,bx>
4   890	    057D  59				 pop cx
4   891	    057E  5B				 pop bx
2   892	    057F  43			     inc bx
2   893	    0580  49			     dec cx
2   894	    0581  EB DC			     jmp ??001E
2   895	    0583			 ??001F:
1   896					     set_transition_length_from_start buf, 1, 9, 65, 26
2   897	    0583  BB 0041		     mov bx, 65
2   898	    0586  B9 001A		     mov cx, 26
2   899	    0589			 ??0020:
2   900	    0589  83 F9	00		     cmp cx, 0
2   901	    058C  74 1F			     je	??0021
2   902					     load <bx,cx>
4   903	    058E  53				 push bx
4   904	    058F  51				 push cx
2   905					     set_transition buf	1 9 bx
3   906					     load<bx, dx>
5   907	    0590  53				 push bx
5   908	    0591  52				 push dx
3   909					     get_offset	1
4   910	    0592  33 D2			     xor dx, dx
4   911	    0594  33 C0			     xor ax, ax
4   912	    0596  B0 01			     mov al, 1
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 17
regex.ASM



4   913	    0598  C1 E0	08		     shl ax, 8
3   914	    059B  05 0AB5r		     add ax, offset buf
3   915	    059E  03 C3			     add ax, bx
3   916	    05A0  8B D8			     mov bx, ax
3   917	    05A2  C6 07	09		     mov byte ptr [bx],	9
3   918					     restore<dx, bx>
5   919	    05A5  5A				 pop dx
5   920	    05A6  5B				 pop bx
2   921					     restore <cx,bx>
4   922	    05A7  59				 pop cx
4   923	    05A8  5B				 pop bx
2   924	    05A9  43			     inc bx
2   925	    05AA  49			     dec cx
2   926	    05AB  EB DC			     jmp ??0020
2   927	    05AD			 ??0021:
    928					     set_transition buf	1 9 '.'
1   929					     load<bx, dx>
3   930	    05AD  53				 push bx
3   931	    05AE  52				 push dx
1   932					     get_offset	1
2   933	    05AF  33 D2			     xor dx, dx
2   934	    05B1  33 C0			     xor ax, ax
2   935	    05B3  B0 01			     mov al, 1
2   936	    05B5  C1 E0	08		     shl ax, 8
1   937	    05B8  05 0AB5r		     add ax, offset buf
1   938	    05BB  05 002E		     add ax, '.'
1   939	    05BE  8B D8			     mov bx, ax
1   940	    05C0  C6 07	09		     mov byte ptr [bx],	9
1   941					     restore<dx, bx>
3   942	    05C3  5A				 pop dx
3   943	    05C4  5B				 pop bx
    944					     set_transition buf	1 2 't'
1   945					     load<bx, dx>
3   946	    05C5  53				 push bx
3   947	    05C6  52				 push dx
1   948					     get_offset	1
2   949	    05C7  33 D2			     xor dx, dx
2   950	    05C9  33 C0			     xor ax, ax
2   951	    05CB  B0 01			     mov al, 1
2   952	    05CD  C1 E0	08		     shl ax, 8
1   953	    05D0  05 0AB5r		     add ax, offset buf
1   954	    05D3  05 0074		     add ax, 't'
1   955	    05D6  8B D8			     mov bx, ax
1   956	    05D8  C6 07	02		     mov byte ptr [bx],	2
1   957					     restore<dx, bx>
3   958	    05DB  5A				 pop dx
3   959	    05DC  5B				 pop bx
    960
    961					     set_transition_for_digits buf 2 9
1   962					     set_transition_length_from_start buf, 2, 9, 30, 10
2   963	    05DD  BB 001E		     mov bx, 30
2   964	    05E0  B9 000A		     mov cx, 10
2   965	    05E3			 ??0022:
2   966	    05E3  83 F9	00		     cmp cx, 0
2   967	    05E6  74 1F			     je	??0023
2   968					     load <bx,cx>
4   969	    05E8  53				 push bx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 18
regex.ASM



4   970	    05E9  51				 push cx
2   971					     set_transition buf	2 9 bx
3   972					     load<bx, dx>
5   973	    05EA  53				 push bx
5   974	    05EB  52				 push dx
3   975					     get_offset	2
4   976	    05EC  33 D2			     xor dx, dx
4   977	    05EE  33 C0			     xor ax, ax
4   978	    05F0  B0 02			     mov al, 2
4   979	    05F2  C1 E0	08		     shl ax, 8
3   980	    05F5  05 0AB5r		     add ax, offset buf
3   981	    05F8  03 C3			     add ax, bx
3   982	    05FA  8B D8			     mov bx, ax
3   983	    05FC  C6 07	09		     mov byte ptr [bx],	9
3   984					     restore<dx, bx>
5   985	    05FF  5A				 pop dx
5   986	    0600  5B				 pop bx
2   987					     restore <cx,bx>
4   988	    0601  59				 pop cx
4   989	    0602  5B				 pop bx
2   990	    0603  43			     inc bx
2   991	    0604  49			     dec cx
2   992	    0605  EB DC			     jmp ??0022
2   993	    0607			 ??0023:
    994					     set_transition_for_letters	buf 2 9
1   995					     set_transition_length_from_start buf, 2, 9, 97, 26
2   996	    0607  BB 0061		     mov bx, 97
2   997	    060A  B9 001A		     mov cx, 26
2   998	    060D			 ??0024:
2   999	    060D  83 F9	00		     cmp cx, 0
2  1000	    0610  74 1F			     je	??0025
2  1001					     load <bx,cx>
4  1002	    0612  53				 push bx
4  1003	    0613  51				 push cx
2  1004					     set_transition buf	2 9 bx
3  1005					     load<bx, dx>
5  1006	    0614  53				 push bx
5  1007	    0615  52				 push dx
3  1008					     get_offset	2
4  1009	    0616  33 D2			     xor dx, dx
4  1010	    0618  33 C0			     xor ax, ax
4  1011	    061A  B0 02			     mov al, 2
4  1012	    061C  C1 E0	08		     shl ax, 8
3  1013	    061F  05 0AB5r		     add ax, offset buf
3  1014	    0622  03 C3			     add ax, bx
3  1015	    0624  8B D8			     mov bx, ax
3  1016	    0626  C6 07	09		     mov byte ptr [bx],	9
3  1017					     restore<dx, bx>
5  1018	    0629  5A				 pop dx
5  1019	    062A  5B				 pop bx
2  1020					     restore <cx,bx>
4  1021	    062B  59				 pop cx
4  1022	    062C  5B				 pop bx
2  1023	    062D  43			     inc bx
2  1024	    062E  49			     dec cx
2  1025	    062F  EB DC			     jmp ??0024
2  1026	    0631			 ??0025:
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 19
regex.ASM



1  1027					     set_transition_length_from_start buf, 2, 9, 65, 26
2  1028	    0631  BB 0041		     mov bx, 65
2  1029	    0634  B9 001A		     mov cx, 26
2  1030	    0637			 ??0026:
2  1031	    0637  83 F9	00		     cmp cx, 0
2  1032	    063A  74 1F			     je	??0027
2  1033					     load <bx,cx>
4  1034	    063C  53				 push bx
4  1035	    063D  51				 push cx
2  1036					     set_transition buf	2 9 bx
3  1037					     load<bx, dx>
5  1038	    063E  53				 push bx
5  1039	    063F  52				 push dx
3  1040					     get_offset	2
4  1041	    0640  33 D2			     xor dx, dx
4  1042	    0642  33 C0			     xor ax, ax
4  1043	    0644  B0 02			     mov al, 2
4  1044	    0646  C1 E0	08		     shl ax, 8
3  1045	    0649  05 0AB5r		     add ax, offset buf
3  1046	    064C  03 C3			     add ax, bx
3  1047	    064E  8B D8			     mov bx, ax
3  1048	    0650  C6 07	09		     mov byte ptr [bx],	9
3  1049					     restore<dx, bx>
5  1050	    0653  5A				 pop dx
5  1051	    0654  5B				 pop bx
2  1052					     restore <cx,bx>
4  1053	    0655  59				 pop cx
4  1054	    0656  5B				 pop bx
2  1055	    0657  43			     inc bx
2  1056	    0658  49			     dec cx
2  1057	    0659  EB DC			     jmp ??0026
2  1058	    065B			 ??0027:
   1059					     set_transition buf	2 9 '.'
1  1060					     load<bx, dx>
3  1061	    065B  53				 push bx
3  1062	    065C  52				 push dx
1  1063					     get_offset	2
2  1064	    065D  33 D2			     xor dx, dx
2  1065	    065F  33 C0			     xor ax, ax
2  1066	    0661  B0 02			     mov al, 2
2  1067	    0663  C1 E0	08		     shl ax, 8
1  1068	    0666  05 0AB5r		     add ax, offset buf
1  1069	    0669  05 002E		     add ax, '.'
1  1070	    066C  8B D8			     mov bx, ax
1  1071	    066E  C6 07	09		     mov byte ptr [bx],	9
1  1072					     restore<dx, bx>
3  1073	    0671  5A				 pop dx
3  1074	    0672  5B				 pop bx
   1075					     set_transition buf	2 3 't'
1  1076					     load<bx, dx>
3  1077	    0673  53				 push bx
3  1078	    0674  52				 push dx
1  1079					     get_offset	2
2  1080	    0675  33 D2			     xor dx, dx
2  1081	    0677  33 C0			     xor ax, ax
2  1082	    0679  B0 02			     mov al, 2
2  1083	    067B  C1 E0	08		     shl ax, 8
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 20
regex.ASM



1  1084	    067E  05 0AB5r		     add ax, offset buf
1  1085	    0681  05 0074		     add ax, 't'
1  1086	    0684  8B D8			     mov bx, ax
1  1087	    0686  C6 07	03		     mov byte ptr [bx],	3
1  1088					     restore<dx, bx>
3  1089	    0689  5A				 pop dx
3  1090	    068A  5B				 pop bx
   1091
   1092					     set_transition_for_digits buf 3 9
1  1093					     set_transition_length_from_start buf, 3, 9, 30, 10
2  1094	    068B  BB 001E		     mov bx, 30
2  1095	    068E  B9 000A		     mov cx, 10
2  1096	    0691			 ??0028:
2  1097	    0691  83 F9	00		     cmp cx, 0
2  1098	    0694  74 1F			     je	??0029
2  1099					     load <bx,cx>
4  1100	    0696  53				 push bx
4  1101	    0697  51				 push cx
2  1102					     set_transition buf	3 9 bx
3  1103					     load<bx, dx>
5  1104	    0698  53				 push bx
5  1105	    0699  52				 push dx
3  1106					     get_offset	3
4  1107	    069A  33 D2			     xor dx, dx
4  1108	    069C  33 C0			     xor ax, ax
4  1109	    069E  B0 03			     mov al, 3
4  1110	    06A0  C1 E0	08		     shl ax, 8
3  1111	    06A3  05 0AB5r		     add ax, offset buf
3  1112	    06A6  03 C3			     add ax, bx
3  1113	    06A8  8B D8			     mov bx, ax
3  1114	    06AA  C6 07	09		     mov byte ptr [bx],	9
3  1115					     restore<dx, bx>
5  1116	    06AD  5A				 pop dx
5  1117	    06AE  5B				 pop bx
2  1118					     restore <cx,bx>
4  1119	    06AF  59				 pop cx
4  1120	    06B0  5B				 pop bx
2  1121	    06B1  43			     inc bx
2  1122	    06B2  49			     dec cx
2  1123	    06B3  EB DC			     jmp ??0028
2  1124	    06B5			 ??0029:
   1125					     set_transition_for_letters	buf 3 9
1  1126					     set_transition_length_from_start buf, 3, 9, 97, 26
2  1127	    06B5  BB 0061		     mov bx, 97
2  1128	    06B8  B9 001A		     mov cx, 26
2  1129	    06BB			 ??002A:
2  1130	    06BB  83 F9	00		     cmp cx, 0
2  1131	    06BE  74 1F			     je	??002B
2  1132					     load <bx,cx>
4  1133	    06C0  53				 push bx
4  1134	    06C1  51				 push cx
2  1135					     set_transition buf	3 9 bx
3  1136					     load<bx, dx>
5  1137	    06C2  53				 push bx
5  1138	    06C3  52				 push dx
3  1139					     get_offset	3
4  1140	    06C4  33 D2			     xor dx, dx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 21
regex.ASM



4  1141	    06C6  33 C0			     xor ax, ax
4  1142	    06C8  B0 03			     mov al, 3
4  1143	    06CA  C1 E0	08		     shl ax, 8
3  1144	    06CD  05 0AB5r		     add ax, offset buf
3  1145	    06D0  03 C3			     add ax, bx
3  1146	    06D2  8B D8			     mov bx, ax
3  1147	    06D4  C6 07	09		     mov byte ptr [bx],	9
3  1148					     restore<dx, bx>
5  1149	    06D7  5A				 pop dx
5  1150	    06D8  5B				 pop bx
2  1151					     restore <cx,bx>
4  1152	    06D9  59				 pop cx
4  1153	    06DA  5B				 pop bx
2  1154	    06DB  43			     inc bx
2  1155	    06DC  49			     dec cx
2  1156	    06DD  EB DC			     jmp ??002A
2  1157	    06DF			 ??002B:
1  1158					     set_transition_length_from_start buf, 3, 9, 65, 26
2  1159	    06DF  BB 0041		     mov bx, 65
2  1160	    06E2  B9 001A		     mov cx, 26
2  1161	    06E5			 ??002C:
2  1162	    06E5  83 F9	00		     cmp cx, 0
2  1163	    06E8  74 1F			     je	??002D
2  1164					     load <bx,cx>
4  1165	    06EA  53				 push bx
4  1166	    06EB  51				 push cx
2  1167					     set_transition buf	3 9 bx
3  1168					     load<bx, dx>
5  1169	    06EC  53				 push bx
5  1170	    06ED  52				 push dx
3  1171					     get_offset	3
4  1172	    06EE  33 D2			     xor dx, dx
4  1173	    06F0  33 C0			     xor ax, ax
4  1174	    06F2  B0 03			     mov al, 3
4  1175	    06F4  C1 E0	08		     shl ax, 8
3  1176	    06F7  05 0AB5r		     add ax, offset buf
3  1177	    06FA  03 C3			     add ax, bx
3  1178	    06FC  8B D8			     mov bx, ax
3  1179	    06FE  C6 07	09		     mov byte ptr [bx],	9
3  1180					     restore<dx, bx>
5  1181	    0701  5A				 pop dx
5  1182	    0702  5B				 pop bx
2  1183					     restore <cx,bx>
4  1184	    0703  59				 pop cx
4  1185	    0704  5B				 pop bx
2  1186	    0705  43			     inc bx
2  1187	    0706  49			     dec cx
2  1188	    0707  EB DC			     jmp ??002C
2  1189	    0709			 ??002D:
   1190					     set_transition buf	3 9 '.'
1  1191					     load<bx, dx>
3  1192	    0709  53				 push bx
3  1193	    070A  52				 push dx
1  1194					     get_offset	3
2  1195	    070B  33 D2			     xor dx, dx
2  1196	    070D  33 C0			     xor ax, ax
2  1197	    070F  B0 03			     mov al, 3
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 22
regex.ASM



2  1198	    0711  C1 E0	08		     shl ax, 8
1  1199	    0714  05 0AB5r		     add ax, offset buf
1  1200	    0717  05 002E		     add ax, '.'
1  1201	    071A  8B D8			     mov bx, ax
1  1202	    071C  C6 07	09		     mov byte ptr [bx],	9
1  1203					     restore<dx, bx>
3  1204	    071F  5A				 pop dx
3  1205	    0720  5B				 pop bx
   1206					     set_transition buf	3 4 'p'
1  1207					     load<bx, dx>
3  1208	    0721  53				 push bx
3  1209	    0722  52				 push dx
1  1210					     get_offset	3
2  1211	    0723  33 D2			     xor dx, dx
2  1212	    0725  33 C0			     xor ax, ax
2  1213	    0727  B0 03			     mov al, 3
2  1214	    0729  C1 E0	08		     shl ax, 8
1  1215	    072C  05 0AB5r		     add ax, offset buf
1  1216	    072F  05 0070		     add ax, 'p'
1  1217	    0732  8B D8			     mov bx, ax
1  1218	    0734  C6 07	04		     mov byte ptr [bx],	4
1  1219					     restore<dx, bx>
3  1220	    0737  5A				 pop dx
3  1221	    0738  5B				 pop bx
   1222
   1223					     set_transition_for_digits buf 4 9
1  1224					     set_transition_length_from_start buf, 4, 9, 30, 10
2  1225	    0739  BB 001E		     mov bx, 30
2  1226	    073C  B9 000A		     mov cx, 10
2  1227	    073F			 ??002E:
2  1228	    073F  83 F9	00		     cmp cx, 0
2  1229	    0742  74 1F			     je	??002F
2  1230					     load <bx,cx>
4  1231	    0744  53				 push bx
4  1232	    0745  51				 push cx
2  1233					     set_transition buf	4 9 bx
3  1234					     load<bx, dx>
5  1235	    0746  53				 push bx
5  1236	    0747  52				 push dx
3  1237					     get_offset	4
4  1238	    0748  33 D2			     xor dx, dx
4  1239	    074A  33 C0			     xor ax, ax
4  1240	    074C  B0 04			     mov al, 4
4  1241	    074E  C1 E0	08		     shl ax, 8
3  1242	    0751  05 0AB5r		     add ax, offset buf
3  1243	    0754  03 C3			     add ax, bx
3  1244	    0756  8B D8			     mov bx, ax
3  1245	    0758  C6 07	09		     mov byte ptr [bx],	9
3  1246					     restore<dx, bx>
5  1247	    075B  5A				 pop dx
5  1248	    075C  5B				 pop bx
2  1249					     restore <cx,bx>
4  1250	    075D  59				 pop cx
4  1251	    075E  5B				 pop bx
2  1252	    075F  43			     inc bx
2  1253	    0760  49			     dec cx
2  1254	    0761  EB DC			     jmp ??002E
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 23
regex.ASM



2  1255	    0763			 ??002F:
   1256					     set_transition_for_letters	buf 4 9
1  1257					     set_transition_length_from_start buf, 4, 9, 97, 26
2  1258	    0763  BB 0061		     mov bx, 97
2  1259	    0766  B9 001A		     mov cx, 26
2  1260	    0769			 ??0030:
2  1261	    0769  83 F9	00		     cmp cx, 0
2  1262	    076C  74 1F			     je	??0031
2  1263					     load <bx,cx>
4  1264	    076E  53				 push bx
4  1265	    076F  51				 push cx
2  1266					     set_transition buf	4 9 bx
3  1267					     load<bx, dx>
5  1268	    0770  53				 push bx
5  1269	    0771  52				 push dx
3  1270					     get_offset	4
4  1271	    0772  33 D2			     xor dx, dx
4  1272	    0774  33 C0			     xor ax, ax
4  1273	    0776  B0 04			     mov al, 4
4  1274	    0778  C1 E0	08		     shl ax, 8
3  1275	    077B  05 0AB5r		     add ax, offset buf
3  1276	    077E  03 C3			     add ax, bx
3  1277	    0780  8B D8			     mov bx, ax
3  1278	    0782  C6 07	09		     mov byte ptr [bx],	9
3  1279					     restore<dx, bx>
5  1280	    0785  5A				 pop dx
5  1281	    0786  5B				 pop bx
2  1282					     restore <cx,bx>
4  1283	    0787  59				 pop cx
4  1284	    0788  5B				 pop bx
2  1285	    0789  43			     inc bx
2  1286	    078A  49			     dec cx
2  1287	    078B  EB DC			     jmp ??0030
2  1288	    078D			 ??0031:
1  1289					     set_transition_length_from_start buf, 4, 9, 65, 26
2  1290	    078D  BB 0041		     mov bx, 65
2  1291	    0790  B9 001A		     mov cx, 26
2  1292	    0793			 ??0032:
2  1293	    0793  83 F9	00		     cmp cx, 0
2  1294	    0796  74 1F			     je	??0033
2  1295					     load <bx,cx>
4  1296	    0798  53				 push bx
4  1297	    0799  51				 push cx
2  1298					     set_transition buf	4 9 bx
3  1299					     load<bx, dx>
5  1300	    079A  53				 push bx
5  1301	    079B  52				 push dx
3  1302					     get_offset	4
4  1303	    079C  33 D2			     xor dx, dx
4  1304	    079E  33 C0			     xor ax, ax
4  1305	    07A0  B0 04			     mov al, 4
4  1306	    07A2  C1 E0	08		     shl ax, 8
3  1307	    07A5  05 0AB5r		     add ax, offset buf
3  1308	    07A8  03 C3			     add ax, bx
3  1309	    07AA  8B D8			     mov bx, ax
3  1310	    07AC  C6 07	09		     mov byte ptr [bx],	9
3  1311					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 24
regex.ASM



5  1312	    07AF  5A				 pop dx
5  1313	    07B0  5B				 pop bx
2  1314					     restore <cx,bx>
4  1315	    07B1  59				 pop cx
4  1316	    07B2  5B				 pop bx
2  1317	    07B3  43			     inc bx
2  1318	    07B4  49			     dec cx
2  1319	    07B5  EB DC			     jmp ??0032
2  1320	    07B7			 ??0033:
   1321					     set_transition buf	4 9 '.'
1  1322					     load<bx, dx>
3  1323	    07B7  53				 push bx
3  1324	    07B8  52				 push dx
1  1325					     get_offset	4
2  1326	    07B9  33 D2			     xor dx, dx
2  1327	    07BB  33 C0			     xor ax, ax
2  1328	    07BD  B0 04			     mov al, 4
2  1329	    07BF  C1 E0	08		     shl ax, 8
1  1330	    07C2  05 0AB5r		     add ax, offset buf
1  1331	    07C5  05 002E		     add ax, '.'
1  1332	    07C8  8B D8			     mov bx, ax
1  1333	    07CA  C6 07	09		     mov byte ptr [bx],	9
1  1334					     restore<dx, bx>
3  1335	    07CD  5A				 pop dx
3  1336	    07CE  5B				 pop bx
   1337					     set_transition buf	4 5 's'
1  1338					     load<bx, dx>
3  1339	    07CF  53				 push bx
3  1340	    07D0  52				 push dx
1  1341					     get_offset	4
2  1342	    07D1  33 D2			     xor dx, dx
2  1343	    07D3  33 C0			     xor ax, ax
2  1344	    07D5  B0 04			     mov al, 4
2  1345	    07D7  C1 E0	08		     shl ax, 8
1  1346	    07DA  05 0AB5r		     add ax, offset buf
1  1347	    07DD  05 0073		     add ax, 's'
1  1348	    07E0  8B D8			     mov bx, ax
1  1349	    07E2  C6 07	05		     mov byte ptr [bx],	5
1  1350					     restore<dx, bx>
3  1351	    07E5  5A				 pop dx
3  1352	    07E6  5B				 pop bx
   1353
   1354					     set_transition buf	4 6 ':'
1  1355					     load<bx, dx>
3  1356	    07E7  53				 push bx
3  1357	    07E8  52				 push dx
1  1358					     get_offset	4
2  1359	    07E9  33 D2			     xor dx, dx
2  1360	    07EB  33 C0			     xor ax, ax
2  1361	    07ED  B0 04			     mov al, 4
2  1362	    07EF  C1 E0	08		     shl ax, 8
1  1363	    07F2  05 0AB5r		     add ax, offset buf
1  1364	    07F5  05 003A		     add ax, ':'
1  1365	    07F8  8B D8			     mov bx, ax
1  1366	    07FA  C6 07	06		     mov byte ptr [bx],	6
1  1367					     restore<dx, bx>
3  1368	    07FD  5A				 pop dx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 25
regex.ASM



3  1369	    07FE  5B				 pop bx
   1370
   1371					     set_transition_for_digits buf 5 9
1  1372					     set_transition_length_from_start buf, 5, 9, 30, 10
2  1373	    07FF  BB 001E		     mov bx, 30
2  1374	    0802  B9 000A		     mov cx, 10
2  1375	    0805			 ??0034:
2  1376	    0805  83 F9	00		     cmp cx, 0
2  1377	    0808  74 1F			     je	??0035
2  1378					     load <bx,cx>
4  1379	    080A  53				 push bx
4  1380	    080B  51				 push cx
2  1381					     set_transition buf	5 9 bx
3  1382					     load<bx, dx>
5  1383	    080C  53				 push bx
5  1384	    080D  52				 push dx
3  1385					     get_offset	5
4  1386	    080E  33 D2			     xor dx, dx
4  1387	    0810  33 C0			     xor ax, ax
4  1388	    0812  B0 05			     mov al, 5
4  1389	    0814  C1 E0	08		     shl ax, 8
3  1390	    0817  05 0AB5r		     add ax, offset buf
3  1391	    081A  03 C3			     add ax, bx
3  1392	    081C  8B D8			     mov bx, ax
3  1393	    081E  C6 07	09		     mov byte ptr [bx],	9
3  1394					     restore<dx, bx>
5  1395	    0821  5A				 pop dx
5  1396	    0822  5B				 pop bx
2  1397					     restore <cx,bx>
4  1398	    0823  59				 pop cx
4  1399	    0824  5B				 pop bx
2  1400	    0825  43			     inc bx
2  1401	    0826  49			     dec cx
2  1402	    0827  EB DC			     jmp ??0034
2  1403	    0829			 ??0035:
   1404					     set_transition_for_letters	buf 5 9
1  1405					     set_transition_length_from_start buf, 5, 9, 97, 26
2  1406	    0829  BB 0061		     mov bx, 97
2  1407	    082C  B9 001A		     mov cx, 26
2  1408	    082F			 ??0036:
2  1409	    082F  83 F9	00		     cmp cx, 0
2  1410	    0832  74 1F			     je	??0037
2  1411					     load <bx,cx>
4  1412	    0834  53				 push bx
4  1413	    0835  51				 push cx
2  1414					     set_transition buf	5 9 bx
3  1415					     load<bx, dx>
5  1416	    0836  53				 push bx
5  1417	    0837  52				 push dx
3  1418					     get_offset	5
4  1419	    0838  33 D2			     xor dx, dx
4  1420	    083A  33 C0			     xor ax, ax
4  1421	    083C  B0 05			     mov al, 5
4  1422	    083E  C1 E0	08		     shl ax, 8
3  1423	    0841  05 0AB5r		     add ax, offset buf
3  1424	    0844  03 C3			     add ax, bx
3  1425	    0846  8B D8			     mov bx, ax
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 26
regex.ASM



3  1426	    0848  C6 07	09		     mov byte ptr [bx],	9
3  1427					     restore<dx, bx>
5  1428	    084B  5A				 pop dx
5  1429	    084C  5B				 pop bx
2  1430					     restore <cx,bx>
4  1431	    084D  59				 pop cx
4  1432	    084E  5B				 pop bx
2  1433	    084F  43			     inc bx
2  1434	    0850  49			     dec cx
2  1435	    0851  EB DC			     jmp ??0036
2  1436	    0853			 ??0037:
1  1437					     set_transition_length_from_start buf, 5, 9, 65, 26
2  1438	    0853  BB 0041		     mov bx, 65
2  1439	    0856  B9 001A		     mov cx, 26
2  1440	    0859			 ??0038:
2  1441	    0859  83 F9	00		     cmp cx, 0
2  1442	    085C  74 1F			     je	??0039
2  1443					     load <bx,cx>
4  1444	    085E  53				 push bx
4  1445	    085F  51				 push cx
2  1446					     set_transition buf	5 9 bx
3  1447					     load<bx, dx>
5  1448	    0860  53				 push bx
5  1449	    0861  52				 push dx
3  1450					     get_offset	5
4  1451	    0862  33 D2			     xor dx, dx
4  1452	    0864  33 C0			     xor ax, ax
4  1453	    0866  B0 05			     mov al, 5
4  1454	    0868  C1 E0	08		     shl ax, 8
3  1455	    086B  05 0AB5r		     add ax, offset buf
3  1456	    086E  03 C3			     add ax, bx
3  1457	    0870  8B D8			     mov bx, ax
3  1458	    0872  C6 07	09		     mov byte ptr [bx],	9
3  1459					     restore<dx, bx>
5  1460	    0875  5A				 pop dx
5  1461	    0876  5B				 pop bx
2  1462					     restore <cx,bx>
4  1463	    0877  59				 pop cx
4  1464	    0878  5B				 pop bx
2  1465	    0879  43			     inc bx
2  1466	    087A  49			     dec cx
2  1467	    087B  EB DC			     jmp ??0038
2  1468	    087D			 ??0039:
   1469					     set_transition buf	5 9 '.'
1  1470					     load<bx, dx>
3  1471	    087D  53				 push bx
3  1472	    087E  52				 push dx
1  1473					     get_offset	5
2  1474	    087F  33 D2			     xor dx, dx
2  1475	    0881  33 C0			     xor ax, ax
2  1476	    0883  B0 05			     mov al, 5
2  1477	    0885  C1 E0	08		     shl ax, 8
1  1478	    0888  05 0AB5r		     add ax, offset buf
1  1479	    088B  05 002E		     add ax, '.'
1  1480	    088E  8B D8			     mov bx, ax
1  1481	    0890  C6 07	09		     mov byte ptr [bx],	9
1  1482					     restore<dx, bx>
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 27
regex.ASM



3  1483	    0893  5A				 pop dx
3  1484	    0894  5B				 pop bx
   1485					     set_transition buf	5 6 ':'
1  1486					     load<bx, dx>
3  1487	    0895  53				 push bx
3  1488	    0896  52				 push dx
1  1489					     get_offset	5
2  1490	    0897  33 D2			     xor dx, dx
2  1491	    0899  33 C0			     xor ax, ax
2  1492	    089B  B0 05			     mov al, 5
2  1493	    089D  C1 E0	08		     shl ax, 8
1  1494	    08A0  05 0AB5r		     add ax, offset buf
1  1495	    08A3  05 003A		     add ax, ':'
1  1496	    08A6  8B D8			     mov bx, ax
1  1497	    08A8  C6 07	06		     mov byte ptr [bx],	6
1  1498					     restore<dx, bx>
3  1499	    08AB  5A				 pop dx
3  1500	    08AC  5B				 pop bx
   1501					     set_transition buf	6 7 '/'
1  1502					     load<bx, dx>
3  1503	    08AD  53				 push bx
3  1504	    08AE  52				 push dx
1  1505					     get_offset	6
2  1506	    08AF  33 D2			     xor dx, dx
2  1507	    08B1  33 C0			     xor ax, ax
2  1508	    08B3  B0 06			     mov al, 6
2  1509	    08B5  C1 E0	08		     shl ax, 8
1  1510	    08B8  05 0AB5r		     add ax, offset buf
1  1511	    08BB  05 002F		     add ax, '/'
1  1512	    08BE  8B D8			     mov bx, ax
1  1513	    08C0  C6 07	07		     mov byte ptr [bx],	7
1  1514					     restore<dx, bx>
3  1515	    08C3  5A				 pop dx
3  1516	    08C4  5B				 pop bx
   1517					     set_transition buf	7 8 '/'
1  1518					     load<bx, dx>
3  1519	    08C5  53				 push bx
3  1520	    08C6  52				 push dx
1  1521					     get_offset	7
2  1522	    08C7  33 D2			     xor dx, dx
2  1523	    08C9  33 C0			     xor ax, ax
2  1524	    08CB  B0 07			     mov al, 7
2  1525	    08CD  C1 E0	08		     shl ax, 8
1  1526	    08D0  05 0AB5r		     add ax, offset buf
1  1527	    08D3  05 002F		     add ax, '/'
1  1528	    08D6  8B D8			     mov bx, ax
1  1529	    08D8  C6 07	08		     mov byte ptr [bx],	8
1  1530					     restore<dx, bx>
3  1531	    08DB  5A				 pop dx
3  1532	    08DC  5B				 pop bx
   1533	    08DD  C3			     ret
   1534	    08DE			 create_Zero_table:
   1535					     set_transition_for_digits buf 0 9
1  1536					     set_transition_length_from_start buf, 0, 9, 30, 10
2  1537	    08DE  BB 001E		     mov bx, 30
2  1538	    08E1  B9 000A		     mov cx, 10
2  1539	    08E4			 ??003A:
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 28
regex.ASM



2  1540	    08E4  83 F9	00		     cmp cx, 0
2  1541	    08E7  74 1F			     je	??003B
2  1542					     load <bx,cx>
4  1543	    08E9  53				 push bx
4  1544	    08EA  51				 push cx
2  1545					     set_transition buf	0 9 bx
3  1546					     load<bx, dx>
5  1547	    08EB  53				 push bx
5  1548	    08EC  52				 push dx
3  1549					     get_offset	0
4  1550	    08ED  33 D2			     xor dx, dx
4  1551	    08EF  33 C0			     xor ax, ax
4  1552	    08F1  B0 00			     mov al, 0
4  1553	    08F3  C1 E0	08		     shl ax, 8
3  1554	    08F6  05 0AB5r		     add ax, offset buf
3  1555	    08F9  03 C3			     add ax, bx
3  1556	    08FB  8B D8			     mov bx, ax
3  1557	    08FD  C6 07	09		     mov byte ptr [bx],	9
3  1558					     restore<dx, bx>
5  1559	    0900  5A				 pop dx
5  1560	    0901  5B				 pop bx
2  1561					     restore <cx,bx>
4  1562	    0902  59				 pop cx
4  1563	    0903  5B				 pop bx
2  1564	    0904  43			     inc bx
2  1565	    0905  49			     dec cx
2  1566	    0906  EB DC			     jmp ??003A
2  1567	    0908			 ??003B:
   1568					     set_transition_for_letters	buf 0 9
1  1569					     set_transition_length_from_start buf, 0, 9, 97, 26
2  1570	    0908  BB 0061		     mov bx, 97
2  1571	    090B  B9 001A		     mov cx, 26
2  1572	    090E			 ??003C:
2  1573	    090E  83 F9	00		     cmp cx, 0
2  1574	    0911  74 1F			     je	??003D
2  1575					     load <bx,cx>
4  1576	    0913  53				 push bx
4  1577	    0914  51				 push cx
2  1578					     set_transition buf	0 9 bx
3  1579					     load<bx, dx>
5  1580	    0915  53				 push bx
5  1581	    0916  52				 push dx
3  1582					     get_offset	0
4  1583	    0917  33 D2			     xor dx, dx
4  1584	    0919  33 C0			     xor ax, ax
4  1585	    091B  B0 00			     mov al, 0
4  1586	    091D  C1 E0	08		     shl ax, 8
3  1587	    0920  05 0AB5r		     add ax, offset buf
3  1588	    0923  03 C3			     add ax, bx
3  1589	    0925  8B D8			     mov bx, ax
3  1590	    0927  C6 07	09		     mov byte ptr [bx],	9
3  1591					     restore<dx, bx>
5  1592	    092A  5A				 pop dx
5  1593	    092B  5B				 pop bx
2  1594					     restore <cx,bx>
4  1595	    092C  59				 pop cx
4  1596	    092D  5B				 pop bx
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 29
regex.ASM



2  1597	    092E  43			     inc bx
2  1598	    092F  49			     dec cx
2  1599	    0930  EB DC			     jmp ??003C
2  1600	    0932			 ??003D:
1  1601					     set_transition_length_from_start buf, 0, 9, 65, 26
2  1602	    0932  BB 0041		     mov bx, 65
2  1603	    0935  B9 001A		     mov cx, 26
2  1604	    0938			 ??003E:
2  1605	    0938  83 F9	00		     cmp cx, 0
2  1606	    093B  74 1F			     je	??003F
2  1607					     load <bx,cx>
4  1608	    093D  53				 push bx
4  1609	    093E  51				 push cx
2  1610					     set_transition buf	0 9 bx
3  1611					     load<bx, dx>
5  1612	    093F  53				 push bx
5  1613	    0940  52				 push dx
3  1614					     get_offset	0
4  1615	    0941  33 D2			     xor dx, dx
4  1616	    0943  33 C0			     xor ax, ax
4  1617	    0945  B0 00			     mov al, 0
4  1618	    0947  C1 E0	08		     shl ax, 8
3  1619	    094A  05 0AB5r		     add ax, offset buf
3  1620	    094D  03 C3			     add ax, bx
3  1621	    094F  8B D8			     mov bx, ax
3  1622	    0951  C6 07	09		     mov byte ptr [bx],	9
3  1623					     restore<dx, bx>
5  1624	    0954  5A				 pop dx
5  1625	    0955  5B				 pop bx
2  1626					     restore <cx,bx>
4  1627	    0956  59				 pop cx
4  1628	    0957  5B				 pop bx
2  1629	    0958  43			     inc bx
2  1630	    0959  49			     dec cx
2  1631	    095A  EB DC			     jmp ??003E
2  1632	    095C			 ??003F:
   1633					     set_transition buf	0 9 '.'
1  1634					     load<bx, dx>
3  1635	    095C  53				 push bx
3  1636	    095D  52				 push dx
1  1637					     get_offset	0
2  1638	    095E  33 D2			     xor dx, dx
2  1639	    0960  33 C0			     xor ax, ax
2  1640	    0962  B0 00			     mov al, 0
2  1641	    0964  C1 E0	08		     shl ax, 8
1  1642	    0967  05 0AB5r		     add ax, offset buf
1  1643	    096A  05 002E		     add ax, '.'
1  1644	    096D  8B D8			     mov bx, ax
1  1645	    096F  C6 07	09		     mov byte ptr [bx],	9
1  1646					     restore<dx, bx>
3  1647	    0972  5A				 pop dx
3  1648	    0973  5B				 pop bx
   1649					     set_transition buf	0 12 '/'
1  1650					     load<bx, dx>
3  1651	    0974  53				 push bx
3  1652	    0975  52				 push dx
1  1653					     get_offset	0
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 30
regex.ASM



2  1654	    0976  33 D2			     xor dx, dx
2  1655	    0978  33 C0			     xor ax, ax
2  1656	    097A  B0 00			     mov al, 0
2  1657	    097C  C1 E0	08		     shl ax, 8
1  1658	    097F  05 0AB5r		     add ax, offset buf
1  1659	    0982  05 002F		     add ax, '/'
1  1660	    0985  8B D8			     mov bx, ax
1  1661	    0987  C6 07	0C		     mov byte ptr [bx],	12
1  1662					     restore<dx, bx>
3  1663	    098A  5A				 pop dx
3  1664	    098B  5B				 pop bx
   1665					     set_transition buf	0 15 '?'
1  1666					     load<bx, dx>
3  1667	    098C  53				 push bx
3  1668	    098D  52				 push dx
1  1669					     get_offset	0
2  1670	    098E  33 D2			     xor dx, dx
2  1671	    0990  33 C0			     xor ax, ax
2  1672	    0992  B0 00			     mov al, 0
2  1673	    0994  C1 E0	08		     shl ax, 8
1  1674	    0997  05 0AB5r		     add ax, offset buf
1  1675	    099A  05 003F		     add ax, '?'
1  1676	    099D  8B D8			     mov bx, ax
1  1677	    099F  C6 07	0F		     mov byte ptr [bx],	15
1  1678					     restore<dx, bx>
3  1679	    09A2  5A				 pop dx
3  1680	    09A3  5B				 pop bx
   1681
   1682					     set_transition buf	0 1 'h'
1  1683					     load<bx, dx>
3  1684	    09A4  53				 push bx
3  1685	    09A5  52				 push dx
1  1686					     get_offset	0
2  1687	    09A6  33 D2			     xor dx, dx
2  1688	    09A8  33 C0			     xor ax, ax
2  1689	    09AA  B0 00			     mov al, 0
2  1690	    09AC  C1 E0	08		     shl ax, 8
1  1691	    09AF  05 0AB5r		     add ax, offset buf
1  1692	    09B2  05 0068		     add ax, 'h'
1  1693	    09B5  8B D8			     mov bx, ax
1  1694	    09B7  C6 07	01		     mov byte ptr [bx],	1
1  1695					     restore<dx, bx>
3  1696	    09BA  5A				 pop dx
3  1697	    09BB  5B				 pop bx
   1698	    09BC  C3			     ret
   1699	    09BD  00			 state db 0
   1700
   1701	    09BE  08			 termA db 8
   1702	    09BF  0B			 termB db 11
   1703	    09C0  0E			 termC db 14
   1704	    09C1  10			 termD db 16
   1705
   1706	    09C2  00			 mesad db 0
   1707	    09C3  80*(24)		 mes db	128 dup('$')
   1708
   1709	    0A43  50 72	6F 74 6F 63 6F+	 prmes db 'Protocol: $'
   1710		  6C 3A	20 24
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 31
regex.ASM



   1711	    0A4E  44 6F	6D 61 69 6E 3A+	 dommes	db 'Domain: $'
   1712		  20 24
   1713	    0A57  50 61	74 68 3A 20 24	 pathmes db 'Path: $'
   1714	    0A5E  51 75	65 72 79 3A 20+	 querymes db 'Query: $'
   1715		  24
   1716
   1717	    0A66  45 72	72 6F 72 3A 20+	 errormes db 'Error: incorrect format$'
   1718		  69 6E	63 6F 72 72 65+
   1719		  63 74	20 66 6F 72 6D+
   1720		  61 74	24
   1721	    0A7E  45 72	72 6F 72 3A 20+	 errormes2 db 'Error: there is no query$'
   1722		  74 68	65 72 65 20 69+
   1723		  73 20	6E 6F 20 71 75+
   1724		  65 72	79 24
   1725	    0A97  45 72	72 6F 72 3A 20+	 errormes3 db 'Error: there is no domain$'
   1726		  74 68	65 72 65 20 69+
   1727		  73 20	6E 6F 20 64 6F+
   1728		  6D 61	69 6E 24
   1729
   1730	    0AB1  0A 24			 newline db 0Ah, '$'
   1731
   1732	    0AB3  00			 domain_was db 0
   1733	    0AB4  00			 query_was db 0
   1734
   1735	    0AB5  0E10*(00)		 buf db	3600 dup(0) ; memory for table
   1736					 end start
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 32
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 DGROUP:0112
??0001				  Near	 DGROUP:011F
??0002				  Near	 DGROUP:01CA
??0003				  Near	 DGROUP:01D7
??0004				  Near	 DGROUP:022B
??0005				  Near	 DGROUP:0238
??0006				  Near	 DGROUP:0287
??0007				  Near	 DGROUP:0294
??0008				  Near	 DGROUP:02E8
??0009				  Near	 DGROUP:02F5
??000A				  Near	 DGROUP:0340
??000B				  Near	 DGROUP:0364
??000C				  Near	 DGROUP:036B
??000D				  Near	 DGROUP:038F
??000E				  Near	 DGROUP:0395
??000F				  Near	 DGROUP:03B9
??0010				  Near	 DGROUP:03D8
??0011				  Near	 DGROUP:03FC
??0012				  Near	 DGROUP:0402
??0013				  Near	 DGROUP:0426
??0014				  Near	 DGROUP:042C
??0015				  Near	 DGROUP:0450
??0016				  Near	 DGROUP:046E
??0017				  Near	 DGROUP:0492
??0018				  Near	 DGROUP:0498
??0019				  Near	 DGROUP:04BC
??001A				  Near	 DGROUP:04C2
??001B				  Near	 DGROUP:04E6
??001C				  Near	 DGROUP:0535
??001D				  Near	 DGROUP:0559
??001E				  Near	 DGROUP:055F
??001F				  Near	 DGROUP:0583
??0020				  Near	 DGROUP:0589
??0021				  Near	 DGROUP:05AD
??0022				  Near	 DGROUP:05E3
??0023				  Near	 DGROUP:0607
??0024				  Near	 DGROUP:060D
??0025				  Near	 DGROUP:0631
??0026				  Near	 DGROUP:0637
??0027				  Near	 DGROUP:065B
??0028				  Near	 DGROUP:0691
??0029				  Near	 DGROUP:06B5
??002A				  Near	 DGROUP:06BB
??002B				  Near	 DGROUP:06DF
??002C				  Near	 DGROUP:06E5
??002D				  Near	 DGROUP:0709
??002E				  Near	 DGROUP:073F
??002F				  Near	 DGROUP:0763
??0030				  Near	 DGROUP:0769
??0031				  Near	 DGROUP:078D
??0032				  Near	 DGROUP:0793
??0033				  Near	 DGROUP:07B7
??0034				  Near	 DGROUP:0805
??0035				  Near	 DGROUP:0829
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 33
Symbol Table



??0036				  Near	 DGROUP:082F
??0037				  Near	 DGROUP:0853
??0038				  Near	 DGROUP:0859
??0039				  Near	 DGROUP:087D
??003A				  Near	 DGROUP:08E4
??003B				  Near	 DGROUP:0908
??003C				  Near	 DGROUP:090E
??003D				  Near	 DGROUP:0932
??003E				  Near	 DGROUP:0938
??003F				  Near	 DGROUP:095C
??DATE				  Text	 "11/25/19"
??FILENAME			  Text	 "regex	  "
??TIME				  Text	 "15:41:42"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGEX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUF				  Byte	 DGROUP:0AB5
CREATE_A_TABLE			  Near	 DGROUP:0517
CREATE_B_TABLE			  Near	 DGROUP:03D2
CREATE_C_TABLE			  Near	 DGROUP:0365
CREATE_D_TABLE			  Near	 DGROUP:033A
CREATE_ZERO_TABLE		  Near	 DGROUP:08DE
DOMAIN_WAS			  Byte	 DGROUP:0AB3
DOMMES				  Byte	 DGROUP:0A4E
EALL				  Near	 DGROUP:0336
ELOOP				  Near	 DGROUP:0332
ERRORMES			  Byte	 DGROUP:0A66
ERRORMES2			  Byte	 DGROUP:0A7E
ERRORMES3			  Byte	 DGROUP:0A97
L0				  Near	 DGROUP:0147
L1				  Near	 DGROUP:018A
L10				  Near	 DGROUP:0312
L11				  Near	 DGROUP:0322
L2				  Near	 DGROUP:01AC
L3				  Near	 DGROUP:01E5
L4				  Near	 DGROUP:020D
L5				  Near	 DGROUP:0247
L6				  Near	 DGROUP:0269
L7				  Near	 DGROUP:02A3
L8				  Near	 DGROUP:02CA
L9				  Near	 DGROUP:0302
MES				  Byte	 DGROUP:09C3
MESAD				  Byte	 DGROUP:09C2
NEWLINE				  Byte	 DGROUP:0AB1
PARSE_LOOP			  Near	 DGROUP:0124
PATHMES				  Byte	 DGROUP:0A57
PRMES				  Byte	 DGROUP:0A43
Turbo Assembler	 Version 4.1	    11/25/19 15:41:45	    Page 34
Symbol Table



QUERYMES			  Byte	 DGROUP:0A5E
QUERY_WAS			  Byte	 DGROUP:0AB4
START				  Near	 DGROUP:0100
STATE				  Byte	 DGROUP:09BD
TERMA				  Byte	 DGROUP:09BE
TERMB				  Byte	 DGROUP:09BF
TERMC				  Byte	 DGROUP:09C0
TERMD				  Byte	 DGROUP:09C1

Macro Name

CLEAR_MES
EXIT
GET_OFFSET
GET_TRANSITION
LOAD
PRINT
PRINT_RANGE
PUT
RESTORE
SET_TRANSITION
SET_TRANSITION_FOR_ALL
SET_TRANSITION_FOR_DIGITS
SET_TRANSITION_FOR_LETTERS
SET_TRANSITION_LENGTH_FROM_START
SET_ZERO
TO_NON_SPACE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  18C5 Word	  Public  CODE
