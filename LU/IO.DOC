@np@pl72@lm0@rm64@tm4@bm68@ff1
@np@dh1@ce- @pa -

          @e1Научно-технологический центр "Форум"@e0


@i1
                Программно-технические средства
               персональных ЭВМ семейства IBM PC
@i0









@ce@e1Ю. С. Лукач, А. Е. Сибиряков@e0

@e1
@ceА Р Х И Т Е К Т У Р А   В В О Д А - В Ы В О Д А
@ceП Е Р С О Н А Л Ь Н Ы Х   Э В М   I B M   P C
@e0

                        Второе издание











           Цикл издается под редакцией Ю. С. Лукача




────────────────────────────────────────────────────────────
              (C) Научно-технологический центр "Форум", 1991

              Полное   или  частичное   воспроизведение  или
              размножение каким бы то ни было способом мате-
              риалов,  опубликованных  в  настоящем издании,
              допускается  только  с  письменного разрешения
              НТЦ "Форум".



                        Свердловск
                           1991
@pb1
@e1@ceСодержание@e0

Введение . . . . . . . . . . . . . . . . . . . . . . . . .   3
Обозначения  . . . . . . . . . . . . . . . . . . . . . . .   4
1. Таблица портов ввода-вывода . . . . . . . . . . . . . .   6
2. Контроллер прямого доступа к памяти . . . . . . . . . .   7
2.1. Принципы работы контроллера ПДП . . . . . . . . . . .   8
2.2. Типы передач  . . . . . . . . . . . . . . . . . . . .  10
2.3. Описание внутренних регистров ПДП . . . . . . . . . .  11
2.4. Программное управление контроллером ПДП . . . . . . .  15
2.4.1. Организация и управление ПДП на XT-подобных ПЭВМ  .  15
2.4.2. Организация и управление ПДП на AT-подобных ПЭВМ  .  18
3. Программируемый контроллер прерываний . . . . . . . . .  21
3.1. Описание основных элементов ПКП . . . . . . . . . . .  23
3.2. Режимы работы ПКП . . . . . . . . . . . . . . . . . .  25
3.3. Программирование ПКП. . . . . . . . . . . . . . . . .  26
4. Таймер и генерация звука  . . . . . . . . . . . . . . .  31
4.1. Программируемый таймер 8253 . . . . . . . . . . . . .  31
4.2. Таймер на системной плате IBM PC  . . . . . . . . . .  35
4.3. Генерация звука . . . . . . . . . . . . . . . . . . .  36
5. Программируемый периферийный интерфейс  . . . . . . . .  39
5.1. Описание ППИ 8255 . . . . . . . . . . . . . . . . . .  39
5.2. Использование ППИ в IBM PC  . . . . . . . . . . . . .  41
6. Клавиатура  . . . . . . . . . . . . . . . . . . . . . .  43
6.1. Клавиатура IBM PC/XT  . . . . . . . . . . . . . . . .  43
6.2. Клавиатура IBM PC AT  . . . . . . . . . . . . . . . .  44
7. Дисплеи . . . . . . . . . . . . . . . . . . . . . . . .  47
7.1. Общее описание  . . . . . . . . . . . . . . . . . . .  47
7.2. Контроллеры ЭЛТ . . . . . . . . . . . . . . . . . . .  48
7.3. Атрибуты символов . . . . . . . . . . . . . . . . . .  52
7.4. Монохромный графический адаптер MGA . . . . . . . . .  54
7.5. Цветной графический адаптер CGA . . . . . . . . . . .  57
7.6. Расширенный графический адаптер EGA . . . . . . . . .  60
7.6.1. Описание контроллера  . . . . . . . . . . . . . . .
7.6.2. Порты ввода-вывода  . . . . . . . . . . . . . . . .
7.6.3. Организация видеопамяти . . . . . . . . . . . . . .
7.6.4. Примеры программирования  . . . . . . . . . . . . .
7.7. Графический видеомассив VGA . . . . . . . . . . . . .  71
8. Контроллер накопителей на гибких дисках . . . . . . . .  72
8.1. Основные сведения о контроллере . . . . . . . . . . .  72
8.2. Порты контроллера накопителей на гибких дисках. . . .  73
8.3. Команды управления накопителями . . . . . . . . . . .  75
8.3.1. Перечень команд контроллера НГМД  . . . . . . . . .  75
8.3.2. Структура байтов состояния  . . . . . . . . . . . .  81
8.4. Формат дорожки. . . . . . . . . . . . . . . . . . . .  83
8.5. Отличия контроллера для АТ-подобных ПЭВМ. . . . . . .  85
9. Контроллер накопителей на жестких дисках  . . . . . . .  89
9.1. Контроллер жестких дисков для ХТ-подобных ПЭВМ. . . .  90
9.1.1. Порты ввода-вывода  . . . . . . . . . . . . . . . .  90
9.1.2. Общий формат команды и терминология . . . . . . . .  93
9.1.3. Описание команд . . . . . . . . . . . . . . . . . .  95
9.1.4. Разметка диска  . . . . . . . . . . . . . . . . . . 102
9.2. Контроллер жестких дисков для АТ-подобных ПЭВМ. . . . 105
9.2.1. Описание портов ввода-вывода  . . . . . . . . . . . 105
9.2.2. Система команд  . . . . . . . . . . . . . . . . . . 106
10. Печатающее устройство  . . . . . . . . . . . . . . . . 108
11. Последовательный интерфейс RS-232  . . . . . . . . . . 112
11.1. Общие сведения . . . . . . . . . . . . . . . . . . . 112
11.2. Описание портов  . . . . . . . . . . . . . . . . . . 113
11.3. Порядок инициализации 8250 . . . . . . . . . . . . . 116
12. Игровой адаптер  . . . . . . . . . . . . . . . . . . . 121
13. КМОП (CMOS)  . . . . . . . . . . . . . . . . . . . . . 122
13.1. Доступ к КМОП  . . . . . . . . . . . . . . . . . . . 122
13.2. Содержимое КМОП  . . . . . . . . . . . . . . . . . . 123
14. Прочие порты . . . . . . . . . . . . . . . . . . . . . 127
Приложение 1. Скан-коды клавиш . . . . . . . . . . . . . . 128
Приложение 2. Типы жестких дисков  . . . . . . . . . . . . 129
Приложение 3. Подготовка ПЭВМ к работе . . . . . . . . . . 131
Глоссарий  . . . . . . . . . . . . . . . . . . . . . . . . 137
Перечень рекомендуемых материалов  . . . . . . . . . . . . 139
@pb
@e1@ceВведение@e0

     Данный  документ  содержит  техническое  описание устройств
ввода-вывода, входящих  в состав ПЭВМ семейства  IBM PC, включая
ПЭВМ  IBM  PC   XT,  AT  и  PS/2.  Он   основан  на  технической
документации  фирм  -  производителей  периферийной  аппаратуры,
охватывающей   несколько  десятков   руководств.  В   частности,
описание микросхем,  размещенных на системной  плате, базируется
на справочниках фирмы INTEL (Intel Handbooks).

     Дополнительными     источниками     информации    послужили
многочисленные   монографии,  журнальные   статьи  и  диалоговые
справочные системы (такие, как TECH  Helр!, Norton Guide и др.).
Кроме того, данное описание учитывает опыт авторов по разработке
и сопровождению  программ в  среде MS-DOS.  Этот опыт  позволил,
во-первых, исправить  отдельные неточности и  недоговоренности в
использованных  материалах,  и,  во-вторых,  описать ряд недоку-
ментированных особенностей оборудования IBM PC.

     Вся   приведенная   информация   подвергалась  максимальной
проверке  на  ЭВМ;  однако,  авторы  предполагают, что отдельные
нюансы описаний, заимствованных из фирменной документации, могут
содержать  ошибки. Такие  "подозрительные" моменты  мы, по  мере
возможности,   старались  явно   оговаривать  в  соответствующих
местах справочника.

    Второе издание  содержит многочисленные уточнения и дополне-
ния; в частности, существенно расширены главы, посвященные конт-
роллерам жестких дисков и видеоадаптеров EGA/VGA.

    Для   понимания  изложенного   здесь   материала   требуется
владение основами  программирования на языке  ассемблера для IBM
PC (знание архитектуры процессора и директив ассемблера).

     Авторы  будут благодарны  за любые  указания на неточности,
замечания и дополнения, которые мы просим присылать по адресу:

     620075, г. Свердловск,
     ул. Луначарского 81,
     Внедренческий научно-технологический центр "Форум".
     тел. 56-92-54, 56-92-88.
@pb
@e1@ceОбозначения@e0

     PC,  XT,  AT,  PCjr,  PC  Convertible  и  PS/2  - это имена
компьютеров семейства IBM PC. Все они более или менее совместимы
между собой на уровне  прикладных пакетов, но имеют определенные
аппаратные различия:

     PC: центральный процессор 8088,  тактовая частота 4.77 МГц,
5 позиций для адаптерных плат.

     PCjr:  ЦП  8088,  нет  места  для  плат.  Выпущена мизерным
тиражом и  не совместима с остальными  IBM PC. В нашей  серии не
описывается.

     XT: ЦП 8088, жесткий диск, 8 позиций для адаптерных плат. В
остальном аналогична PC.

     Turbo PC: ПЭВМ других фирм (не IBM), совместимые с PC и XT,
но имеюший ЦП 8086 или V30 фирмы NEC, тактовая частота которых 6
или 8 МГц. Обычно имеет 8 позиций для плат.

     XT-286:  ЦП 80286,  8 позиций  для плат,  частота 6 Мгц без
холостых циклов (скорость  как у AT с 8 МГц).  Платы от AT к ней
не  подходят,  от  PC  подходят,  но  не  позволяют использовать
преимущества 16-разрядной системной шины.

     AT: ЦП 80286, 8 позиций для  плат, тактовая частота 6 или 8
МГц.

     PC Convertible: Портативный вариант AT. Отличия: плазменный
(LCD)  дисплей,  3.5-дюймовые  дисководы,  нет  позиций для плат
расширения.

     PS/2: Новое семейство ПЭВМ фирмы IBM.  Модели 25 и 30 - это
улучшенные версии  старых PC, совместимые  с ними по  адаптерным
платам.  Модели   50  и  60   -  ЦП  80286,   32-разрядная  шина
MicroChannel,  совместимости со  старыми платами  нет. Модель 80
имеет  ЦП 80386.  Все модели  оснащены дисководами  размером 3.5
дюйма.

     AT-386: ПЭВМ третьих фирм, совместимая  с AT, но имеющая ЦП
80386.

     Если  рассматриваемые устройства  зависят от  типа ПЭВМ, то
используются следующие пометки:

     PC/XT          относится к ПЭВМ IBM PC и XT, включая
                    Portable PC
     AT             относится к ПЭВМ IBM PC AT
     PS/2           относится к семейству PS/2

     Отсутствие  таких  указаний  означает,  что данный материал
применим ко всем ПЭВМ фирмы IBM.

     Десятичные    числа     записываются    обычным    образом,
шестнадцатиричные  отличаются  добавлением  буквы  "h"  в конце.
Например, 256 и 100h означают десятичное число 256.

     Все  размеры  полей  в  управляющих  структурах приведены в
байтах, если не оговорено противное.

     В  некоторых  случаях  алгоритмы  сопровождаются формулами.
Операции  в формулах  обозначаются, как  принято в  языке Си,  а
именно:

     арифметические: +, -, *, /, % (взятие остатка)
     битовые: & (и), | (или), ~ (не)
     сдвиги:  << и >>.
@pb
@e1@ce1.Таблица портов ввода-вывода@e0

     Приведенная  ниже таблица  содержит распределение адресного
пространства портов  ввода-вывода для IBM PC/XT,  AT и PS/2. При
этом:

     - порты 0 - FFh отведены для системной платы;
     - порты 100h - 3FFh отведены для контроллеров устройств;
     - порты, начиная с 400h, недоступны для системной шины.

AT/PS-2  PC/XT              Описание                  См. раздел
────────────────────────────────────────────────────────────────
000-01F 000-00F  Контроллер ПДП N 1, 8237А-5                  2
020-03F 020-021  Контроллер прерываний N 1, 8259A             3
040-05F 040-043  Таймер (PC/XT:8253-5, AT:8254-2)             4
        060-063  Программируемый интерфейс периферии 8255     5
060-06F          Контроллер клавиатуры AT 8042                6
070-07F          Память КМОП и маска NMI                     13
080              Диагностический регистр                     14
080-08F 080-083  Регистры страниц ПДП 74LS612                 2
090-097          Блок управления каналами PS/2              ───
        0A0      Маска NMI                                   14
0A0-0BF          Контроллер прерываний N 2, 8259A             3
0C0-0DF          Контроллер ПДП N 2, 8237A-5                  2
0F0-0FF          Сопроцессор 80287                           14
────────────────────────────────────────────────────────────────
101-107          Выбор программируемых опций PS/2           ───
170-177          Жесткий диск N 2                             9
1F0-1F7          Жесткий диск N 1                             9
200-207 200-20F  Игровой адаптер                             12
        210-217  Блок расширений                             14
238-23F          Стык RS-232 N 4 (в PS/2)                    11
278-27F 278-27F  Параллельный принтер N2 (N 3 при MGA)       10
2C0-2DF 2C0-2DF  Расширенный графический адаптер (EGA) N 2    7
2F8-2FF 2F8-2FF  Стык RS-232  N 2                            11
300-31F          Плата прототипа                            ───
        320-32F  Жесткий диск XT                              9
338-33F          Стык RS-232 N 3 (в RS/2)                    11
370-377          Контроллер НГМД N 2                          8
378-37F 378-37F  Параллельный принтер N 1 (N2 при MGA)       10
380-38F 380-38F  Синхронные адаптеры: SDLC или BSC N 2      ───
3A0-3AF 3A0-3A9  Синхронный адаптер BSC N 1                 ───
3B0-3BF 3B0-3BF  Монохромный адаптер (MGA) + принтер N 1    7,10
3C0-3CF 3C0-3CF  Расширенный графический адаптер (EGA) N 1    7
3D0-3DF 3D0-3DF  Цветной графический адаптер (CGA) и EGA      7
3F0-3F7 3F0-3F7  Контроллер НГМД N 1                          8
3F8-3FF 3F8-3FF  Стык RS-232 N 1                             11
────────────────────────────────────────────────────────────────

     Примечание: В таблицу не включены устройства, базовый адрес
ввода-вывода  которых  может  настраиваться  (сетевые  адаптеры,
контроллеры стриммерных лент и т.д.).
@pb
@e1@ce2. Контроллер прямого доступа к памяти@e0

     Контроллер  прямого доступа  к  памяти  (ПДП, DMA  - Direct
Memory Access) обеспечивает высокоскоростной обмен данными между
устройствами ввода-вывода  и ОЗУ без  использования центрального
процессора,  что позволяет  освободить процессор  для выполнения
вычислений параллельно с обменом  и независимо от него. Наиболее
часто  возможности  ПДП  используются  при  работе  с  дисковыми
накопителями,  однако реализовано  использование ПДП  адаптерами
накопителей  на  магнитной  ленте   и  рядом  других  устройств.
Ощутимые приемущества дает использование ПДП в процессе обмена с
устройствами,  принимающими  или  передающими  данные достаточно
большими порциями с высокой скоростью.

     В  IBM  PC-подобных  компьютерах  функции  контроллера  ПДП
выполняет  микросхема   8237А  фирмы  INTEL   (советский  аналог
КР580ВТ57)  или  ее  аналоги  8237А-4  и  8237А-5,  работающие с
тактовой  частотой   4  и  5   Мгц  соответственно  (стандартная
микросхема 8237А работает на частоте  3 Мгц). Контроллер имеет 4
независимых  канала, каждый  из которых  может обслуживать  одно
периферийное устройство.
@pb
@e1@ce2.1. Принципы работы контроллера ПДП@e0

     В  работе ПДП  различаются 2  главных цикла:  цикл ожидания
(Idle  cycle)  и  активный  цикл  (Active  cycle).  Каждый  цикл
подразделяется  на  ряд  состояний,  занимающих  по времени один
период  часов (тик).  Из  цикла  ожидания контроллер  может быть
переведен в состояние программирования (Program Condition) путем
подачи на  вход RESET сигнала высокого  уровня, длительностью не
менее 300  нc и следующей  за ним подачи  сигнала низкого уровня
(уровня  0)  на  вывод  CS  (Chiр  Select). В состоянии програм-
мирования контроллер будет находится до  тех пор, пока на выводе
CS сохранится сигнал низкого уровня. В процессе программирования
контроллеру задаются:

     - начальный адрес памяти для обмена;
     - уменьшенное на единицу число передаваемых байтов;
     - направление обмена,

а также устанавливаются  требуемые режимы работы  (разрешить или
запретить  циклическое изменение приоритетов, автоинициализацию,
задать направление изменения адреса при обмене и т. д.).

     Загрузка 16-разрядных  регистров контроллера осуществляется
через  8-разрядные порты  ввода-вывода. Перед  загрузкой первого
(младшего)  байта должен  быть сброшен  (очищен) триггер-защелка
(триггер   первый/последний,   First/Last   fliр-floр),  который
изменяет  свое состояние  после вывода  в порт  первого байта  и
таким образом  дает возможность следующей командой  вывода в тот
же порт загрузить старший байт соответствующего регистра.

     Запрограммированный  канал  должен  быть  демаскирован (бит
маски канала устанавливается при этом  в 0), после чего он может
принимать  сигналы  "Запрос  на  ПДП",  генерируемые тем внешним
устройством,  которое  обслуживается  через  этот  канал. Сигнал
"Запрос на ПДП" может быть также инициирован установкой в 1 бита
запроса  данного канала  в регистре  запросов контроллера. После
появления сигнала  запроса контроллер входит в  активный цикл, в
котором выполняется обмен данными.  Обмен может осуществляется в
одном из четырех режимов:

     1. Режим  одиночной передачи (Signle  Transfer Mode). После
каждого цикла  передачи контроллер освобождает  шину процессору,
но  сразу же  начинает проверку  сигналов запроса  и, как только
обнаруживает активный сигнал  запроса, инициирует следующий цикл
передачи.

     2.  Режим блочной  передачи (Block  Transfer Mode).  В этом
режиме  наличие  сигнала  запроса  требуется  только  до момента
выдачи  контроллером  сигнала  "Подтверждение  запроса  на  ПДП"
(DACK), после  чего шина не  освобождается вплоть до  завершения
передачи всего блока.

     3.  Режим передачи  по требованию  (Demand Transfer  Mode).
Данный  режим   является  промежуточным  между   двумя  первыми:
передача  идет  непрерывно  до  тех  пор,  пока  активен  сигнал
запроса,  состояние  которого  проверяется  после  каждого цикла
передачи.  Как только  устройство не  может продолжить передачу,
сигнал  запроса  сбрасывается  им  и контроллер приостанавливает
работу.   Этот  режим   применяется  для   обмена  с  медленными
устройствами, не позволяющими по своим временным характеристикам
работать с ПДП в режиме блочной передачи.

     4. Каскадный режим (Cascade Mode). Режим позволяет включить
в подсистему ПДП  более одного контроллера в  тех случаях, когда
недостаточно четырех каналов ПДП. В  этом режиме один из каналов
ведущего   контроллера   используется   для   каскадирования   с
контроллером  второго уровня.  Для работы  в каскаде  сигнал HRQ
("Запрос на захват") ведомого  контроллера подается на вход DREG
("Запрос на канал ПДП")  ведущего, а сигнал DACK ("Подтверждение
запроса")   ведущего  подается   на  вход   HDLA  ("Потверждение
захвата") ведомого.

     Такая  схема  подключения  аналогична  подключению ведущего
(первого)   контроллера   к   микропроцессору,   с   которым  он
обменивается сигналами HRQ и HDLA.
@pb
@e1@ce2.2. Типы передач@e0

     1. Передача память-память (Memory-to-memory DMA).
     Используется  для  передачи  блока  данных  из одного места
памяти  в  другое.  Исходный   адрес  определяется  в  регистрах
нулевого канала,  выходной - в  регистрах первого канала.  Число
циклов  обмена (число  байт минус  1) задается  в регистре числа
циклов канала  1. Передача происходит  с использованием рабочего
регистра  контроллера   в  качестве  промежуточного   звена  для
хранения информации. При передачe память-память может быть задан
специальный  режим фиксации  адреса (Address  hold), при котором
значение   текущего  адреса   в  регистре   нулевого  канала  не
изменяется, при этом весь выходной блок памяти заполняется одним
и тем же элементом данных, находящимся по заданному адресу.

     2. Автоинициализация (автозагрузка, Autoinitialization).
     После завершения обычной  передачи использованный канал ПДП
маскируется  и  должен  быть  перепрограммирован  для дальнейшей
работы  с  ним.  При  автоинициализации  маскировка канала после
окончания передачи  не происходит, а регистры  текущего адреса и
счетчик  циклов  автоматически  загружаются  из  соответствующих
регистров с начальными значениями. Таким образом для продолжения
(повторения) обмена  достаточно выставить сигнал  запроса на ПДП
по данному каналу.

     3. Режим фиксированных приоритетов.
     В этом режиме канал  0 всегда имеет максимальный приоритет,
а канал  3 -  минимальный. Это  означает, что  любая передача по
каналу с более высоким приоритетом будет выполняться раньше, чем
по каналу с более низким приоритетом.

     4. Циклический сдвиг приоритетов.
     Позволяет  избежать  "забивания"  шины  одним  каналом  при
одновременной передачe по нескольким каналам. Каждому каналу, по
которому  прошла  передача,  автоматически  присваивается низший
приоритет,  после  чего  право  на  передачу  получает  канал  с
наивысшим  приоритетом, для  которого передача  в данный  момент
возможна.  Таким  образом,  если  в  начале работы распределение
приоритетов было обычным (канал 0 - наивысший), и пришли сигналы
запроса  на  ПДП  по  1-му  и  2-му  каналам,  то  сначала будет
выполняться передача по первому  каналу, затем он получит низший
приоритет  (а  канал  2,  соответственно,  высший,  т.  к. сдвиг
приоритетов циклический)  и передача выполнится  по 2-му каналу,
который  затем  получит  низший  приоритет,  а  высший приоритет
получит,  соответственно,  канал  3,  который  и  будет  обладать
преимущественным правом на передачу.

     5. Сжатие времени передачи (Comрressed transfer timing).
     В  случае,  если  временные  характеристики  быстродействия
обменивающихся  устройств совпадают,  ПДП может  сократить время
выполнения  каждого  такта  передачи  на  2  цикла часов за счет
тактов ожидания, входящих в каждый цикл передачи.
@pb
@e1@ce2.3. Описание внутренних регистров ПДП@e0

     Контроллер имеет 344 бита внутренней памяти, организованной
в виде регистров. Описание внутренних  регистров ПДП приведено в
таблице.

┌───────────────────────────────────┬──────────────┬───────────┐
│          Наименование             │ Разрядность  │   Число   │
│            регистра               │    (бит)     │ регистров │
├───────────────────────────────────┼──────────────┼───────────┤
│ Регистр начального адреса         │     16       │     4     │
│ (Base Address Register)           │              │           │
│                                   │              │           │
│ Регистр начального счетчика циклов│     16       │     4     │
│ (Base Word Count Register)        │              │           │
│                                   │              │           │
│ Регистр текущего адреса           │     16       │     4     │
│ (Current Address Register)        │              │           │
│                                   │              │           │
│ Регистр текущего счетчика циклов  │     16       │     4     │
│ (Current Word Count Register)     │              │           │
│                                   │              │           │
│ Рабочий регистр адреса            │     16       │     1     │
│ (Temрorary Address Register)      │              │           │
│                                   │              │           │
│ Рабочий регистр счетчика циклов   │     16       │     1     │
│ (Temрorary Word Count Register)   │              │           │
│                                   │              │           │
│ Регистр состояния                 │     8        │     1     │
│ (Status Register)                 │              │           │
│                                   │              │           │
│ Регистр команд                    │     8        │     1     │
│ (Command Register)                │              │           │
│                                   │              │           │
│ Регистр режима (Mode Register)    │     6        │     4     │
│                                   │              │           │
│ Рабочий регистр                   │     8        │     1     │
│ (Temрorary Register)              │              │           │
│                                   │              │           │
│ Регистр масок (Mask Register)     │     4        │     1     │
│                                   │              │           │
│ Регистр запросов                  │     4        │     1     │
│ (Request Register)                │              │           │
└───────────────────────────────────┴──────────────┴───────────┘

     Регистр начального адреса (Base Address Register).
     В этом  регистре задается стартовый  адрес ОЗУ, с  которого
начинается передача.  Регистр содержит 16  разрядов и определяет
адрес  внутри  заданной  страницы  памяти  размером 64К. Задание
номера   страницы   памяти   осуществляется   через  специальные
страничные  регистры  (Page  Registers),  поддерживаемые внешней
логикой. Каждый канал ПДП имеет свой регистр начального адреса и
страничный  регистр.   Такое  деление  памяти   на  страницы  не
позволяет  осуществить  обмен  с  блоком  памяти, находящимся на
пересечении   двух   страниц.   Каждая   страница  начинается  с
сегментного  адреса,  кратного  1000h  (0,  1000h,  2000h,  ...,
9000h).

     Регистр  начального   счетчика  циклов  (Base   Word  Count
Register).
     В  этом регистре  задается начальное  число циклов передачи
для программируемого  канала. Фактическое число  передаваемых во
время работы ПДП элементов  данных на единицу превышает заданное
число  циклов, т.  е. если   Вы задаете  100 циклов  передачи, а
размер элемента  будет равен 1  байту, то за  сеанс обмена будет
передан 101 байт информации.

     Регистр текущего адреса (Current Address Register).
     Начальное значение заносится в  этот регистр одновременно с
регистром  начального  адреса.  В  дальнейшем  в  ходе  передачи
значение   текущего  адреса   автоматически  увеличивается   или
уменьшается  (конкретное  направление   изменения  задается  при
программировании  в  регистре  режима).  Если разрешена автоини-
циализация, то после окончания  передачи в регистр автоматически
устанавливается значение из регистра начального адреса.

     Регистр  текущего  счетчика   циклов  (Current  Word  Count
Register).
     Регистр  содержит текущее  значение счетчика  циклов (число
оставшихся  циклов передачи).  Отображаемое в  нем число  циклов
всегда  на  единицу  меньше  числа  еще  не переданных элементов
данных, так как изменение значения в этом регистре производится в
конце  цикла передачи,  уже после  фактической передачи элемента
данных,  а  конец  передачи  фиксируется  в  момент переполнения
счетчика (изменение его значения с 0 на 0FFFFh).

    Регистр режима (Mode Register).
    Данный   регистр   задает   режимы   работы   своего  канала
контроллера.

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│     │  │  │     │ Биты:
└─┴─┴──┼──┴┬─┴┬─┴──┬──┘ ─────
       │   │  │    └────> 0-1: Режим работы: 00=проверка,
       │   │  │                01=запись (в память),
       │   │  │                10=чтение (из памяти),
       │   │  │                11=недопустимая комбинация
       │   │  └─────────> 2: Автоинициализация: 1=разрешена,
       │   │                                    0=запрещена
       │   └────────────> 3: Изменение текущего адреса при
       │                     обмене: 0=увеличение, 1=уменьшение
       └────────────────> 4-5: Тип передачи:
                               00=Режим передачи по требованию,
                               01=Режим одиночной передачи,
                               10=Режим блочной передачи,
                               11=Каскадный режим.

    Каждый из  четырех каналов ПДП  имеет свой набор  регистров,
описанных выше.  Кроме того, имеется  следующий набор регистров,
общих для всех каналов.

      Регистр команд (Command Register).
      Этот  8-битный регистр  управляет работой  контроллера. Он
программируется,   когда   контроллер   находится   в  состоянии
программирования и очищается командами  сброса "Reset" и "Master
Clear". Назначение битов регистра команд приведено на рисунке.

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ───
 │  │  │  │  │  │  │  └─> 0: 0=запретить передачу память-память,
 │  │  │  │  │  │  │         1=разрешить
 │  │  │  │  │  │  └────> 1: 0=запретить фиксацию адреса в канале
 │  │  │  │  │  │            0, 1=разрешить
 │  │  │  │  │  └───────> 2: 0=разблокировать, 1=заблокировать
 │  │  │  │  │               контроллер
 │  │  │  │  └──────────> 3: 0=нормальная временная диаграмма,
 │  │  │  │                  1=сжатие времени передачи; если бит
 │  │  │  │                  0 установлен, то игнорируется
 │  │  │  └─────────────> 4: 0=режим фиксированных приоритетов,
 │  │  │                     1=режим циклического сдвига
 │  │  │                       приоритетов
 │  │  └────────────────> 5: 1=Режим расширенной записи,
 │  │                        0=задержки при записи; если бит 3
 │  │                        установлен, то игнорируется
 │  └───────────────────> 6: 0=активным считается высокий уровень
 │                           сигнала запроса (DREQ), 1=низкий
 └──────────────────────> 7: активным считается высокий уровень
                             сигнала подтверждения запроса на
                             ПДП (DACK), 1=низкий

     Регистр состояния (Status Register).
     Регистр  отражает текущее  состояние запросов  и передач по
всем четырем каналам. Биты 0 - 3 устанавливаются в единицу после
завершения передачи по каналам  0 - 3 (бит 0 - канал  0, бит 1 -
канал 1 и т.д.), если не задан режим автоинициализации. Эти биты
очищаются  после  команды  сброса  контроллера  и  после  каждой
операции считывания состояния из регистра  состояния. Биты 4 - 7
указывают по  какому из каналов 0  - 3 активен в  текущий момент
сигнал запроса на ПДП.

     Регистр масок (Mask Register).
     Каждый бит этого  4-битового регистра маскирует/демаскирует
свой канал ПДП, при этом  значение 1 маскирует канал, значение 0
демаскирует  канал и  разрешает прием  сигнала запроса  по этому
каналу.

     Регистр запросов (Request Register).
     Сигнал  запроса   на  ПДП  (DREQ)  может   быть  издан  как
обслуживаемым  устройством, так  и программно.  Для программного
издания сигнала запроса по одному  из 4-х каналов ПДП необходимо
установить соответствующий бит  в 4-разрядном регистре запросов.
Запрос  на ПДП  может быть  отменен записью  нулевого значения в
соответствующий    бит   регистра.    Бит   запроса    очищается
автоматически при окончании передачи по данному каналу. Все биты
запросов  очищаются  при  сбросе  контроллера.  Для  того, чтобы
воспринимать программные запросы на  ПДП, канал должен находится
в режиме блоковой передачи.

     Рабочий регистр (Temрorary Register).
     Этот   8-разрядный   регистр   используется   для  хранения
элемента  данных, передаваемого  в режиме  фиксированного адреса
при   передаче   память-память   или   для  временного  хранения
передаваемого байта при всех остальных режимах передачи.
@pb
@e1@ce2.4. Программное управление контроллером ПДП@e0

     Программное  управление   контроллером  ПДП  осуществляется
через порты ввода-вывода. Доступ  к каждому регистру контроллера
может быть осуществлен через свои порты ввода-вывода. В разделах
2.4.1 и  2.4.2 описывается программное  управление контроллерами
на XT- и АТ-подобных ПЭВМ соответственно.

     @e12.4.1. Организация и управление ПДП на XT-подобных ПЭВМ@e0

     IBM  PC XT  и  XT-совместимые  ПЭВМ имеют  один 4-канальный
контроллер ПДП 8237А. Назначение каналов следующее:

     0 - обмен память-память;
     1 - свободен (может использоваться сетевыми адаптерами);
     2 - обмен с контроллером гибких дисков;
     3 - обмен с контроллером жестких дисков.

     В   таблице   приведено   описание   портов   ввода-вывода,
предназначенных для управления контроллером ПДП.

┌──────┬────────┬─────────────────────────────────────────────┐
│ Порт │ Режим  │       Назначение                            │
├──────┼────────┼─────────────────────────────────────────────┤
│ 0h   │ запись │ Запись начального адреса в регистр начально-│
│      │        │ го адреса и регистр текущего адреса канала 0│
│      │        │                                             │
│ 2h   │ запись │ то же для канала 1                          │
│      │        │                                             │
│ 4h   │ запись │ то же для канала 2                          │
│      │        │                                             │
│ 6h   │ запись │ то же для канала 3                          │
│      │        │                                             │
│ 0h   │ чтение │ Чтение начального адреса из регистра началь-│
│      │        │ ного адреса канала 0                        │
│      │        │                                             │
│ 2h   │ чтение │ то же для канала 1                          │
│      │        │                                             │
│ 4h   │ чтение │ то же для канала 2                          │
│      │        │                                             │
│ 6h   │ чтение │ то же для канала 3                          │
│      │        │                                             │
│ 1h   │ запись │ Запись в регистр начального счетчика циклов │
│      │        │и в регистр текущего счетчика циклов канала 0│
│      │        │                                             │
│ 3h   │ запись │ то же для канала 1                          │
│      │        │                                             │
│ 5h   │ запись │ то же для канала 2                          │
│      │        │                                             │
│ 7h   │ запись │ то же для канала 3                          │
└──────┴────────┴─────────────────────────────────────────────┘
@pb
┌──────┬────────┬─────────────────────────────────────────────┐
│ Порт │ Режим  │       Назначение                            │
├──────┼────────┼─────────────────────────────────────────────┤
│      │        │                                             │
│ 1h   │ чтение │ Чтение текущего значения из регистра теку-  │
│      │        │ щего счетчика циклов канала 0               │
│      │        │                                             │
│ 3h   │ чтение │ то же для канала 1                          │
│      │        │                                             │
│ 5h   │ чтение │ то же для канала 2                          │
│      │        │                                             │
│ 7h   │ чтение │ то же для канала 3                          │
│      │        │                                             │
│ 8h   │ запись │ Запись регистра команд ПДП                  │
│      │        │                                             │
│ 8h   │ чтение │ Чтение регистра состояния ПДП               │
│      │        │                                             │
│ 9h   │ запись │ Запись в регистр запросов ПДП               │
│      │        │                                             │
│ 0Ah  │ запись │ Запись бита маски для одного из каналов ПДП │
│      │        │                                             │
│ 0Bh  │ запись │ Запись регистра режимов для одного из       │
│      │        │ каналов ПДП                                 │
│      │        │                                             │
│ 0Ch  │ запись │ Очистка (сброс) триггера-защелки (триггера  │
│      │        │ первого/последнего)                         │
│      │        │                                             │
│ 0Dh  │ запись │ Программный сброс контроллера               │
│      │        │                                             │
│ 0Eh  │ запись │ Очистка битов масок всех 4-х каналов        │
│      │        │                                             │
│ 0Fh  │ запись │ Запись регистра масок для всех 4-х каналов  │
│      │        │                                             │
│ 0Dh  │        │                                             │
│ или  │ чтение │ Чтение рабочего регистра ПДП                │
│ 0Fh  │        │                                             │
├──────┼────────┼─────────────────────────────────────────────┤
│ 81h  │ запись │ Задание номера страницы для канала 2        │
│      │        │                                             │
│ 82h  │ запись │ то же для канала 3                          │
│      │        │                                             │
│ 83h  │ запись │ то же для канала 1                          │
│      │        │                                             │
│ 87h  │ запись │ то же для канала 0                          │
└──────┴────────┴─────────────────────────────────────────────┘

     Порты 0h - 7h предназначены  для записи исходных значений в
регистры  начального и  текущего адреса,  начального и  текущего
счетчика   циклов  для   всех   4-х   каналов.  Так   как  порты
восьмиразрядные,  а  регистры,  в  которые  через  них заносятся
данные, 16-разрядные, то запись производится в два приема. Перед
первой  командой  вывода  в  требуемый  порт необходимо сбросить
триггер-защелку,    для   чего    выполняется   команда   вывода
произвольного значения  в порт 0Ch, после  чего в требуемый порт
выводится  младший байт  16-разрядного значения  и затем старший
байт следующей команды вывода в тот же порт.

     Вывод в порт 8h позволяет занести значение в регистр команд
ПДП. Описание битов регистра команд приведено в п.2.3.

     Чтение  из  порта   8h  считывает  регистр  состояния  ПДП.
Описание битов регистра состояния приведено в п.2.3.

     Запись  в порт  9h  позволяет  установить или  сбросить бит
запроса в регистр запросов для одного из каналов. Формат команды
следующий:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│X  X  X  X  X │  │     │ Биты:
└──┴──┴──┴──┴──┴┬─┴┬─┴┬─┘ ─────
не используются │  └──┴──> 0-1: выбор канала 00 - 0
                │                            01 - 1
                │                            10 - 2
                │                            11 - 3
                └────────> 2: 1=установить бит запроса на ПДП
                              0=сбросить бит запроса на ПДП

     Запись  в порт  0Ah позволяет  установить или  сбросить бит
маски в регистре масок для одного из каналов. Формат команды:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│X  X  X  X  X │  │     │ Биты:
└──┴──┴──┴──┴──┴┬─┴┬─┴┬─┘ ─────
не используются │  └──┴──> 0-1: выбор канала 00 - 0
                │                            01 - 1
                │                            10 - 2
                │                            11 - 3
                └────────> 2: 1=установить бит маски
                              0=сбросить бит маски

     Запись в порт 0Bh устанавливает значение в регистре режимов
одного из 4-х каналов ПДП. Биты 0  и 1 задают номер канала (00 -
0, 01  - 1, 10 -  2, 11 - 3).  В биты 2 -  7 заносятся значения,
передаваемые  соответственно  в  биты  0  -  6 регистра режимов.
Описание битов регистра режимов приведено в п. 2.3.

     Запись  в  порт  0Dh  задает  программный сброс контроллера
(Master  Clear). Вывод  любого байта  в этот  порт имеет  тот же
эффект,  что  и  аппаратный  сброс  контроллера. При программном
сбросе очищаются регистры команд,  состояния, запросов и рабочий
регистр. Так  же сбрасывается триггер-защелка  и устанавливается
все  биты  масок  в  регистре  масок.  После программного сброса
контроллер переходит в цикл ожидания.

     Вывод  любого  байта  в  порт  0Eh  очищает регистр масок -
сбрасывает  биты  масок  всех  4-х  каналов  ПДП и таким образом
разрешает прием запросов на ПДП по всем каналам.

     Через порт 0Fh можно  задать произвольное значение регистра
масок  ПДП. Для  этого необходимо  в  битах  0 -  3 регистра  AL
установить требуемое значение масок каналов 0 - 3 соответственно
и вывести это значение в порт.

     Страничные регистры ПДП предназначены для задания параметра
страницы памяти, с которой будет производится обмен. Под номером
страницы  понимаются старшие  4 бита  полного 20-битового адреса
ОЗУ, т.е. начальные сегментные адреса страниц будут кратны 1000h
(0,  1000h, 2000h,  ..., 9000h).  Напомним, что  архитектура ПДП
позволяет работать  только со страницей  памяти размером 64К,  а
логика,  обеспечивающая переключение  страниц устроена  так, что
страницы  имеют  жесткие  границы,  описанные  выше.  Из-за этой
особенности невозможно с помощью ПДП осуществить обмен с блоками
памяти, пересекающими границу между двумя такими страницами.

     @e12.4.2. Организация и управление ПДП на AT-подобных ПЭВМ@e0

     IBM  PC AT  и AT-подобные  ПЭВМ имеют  два контроллера  ПДП
8237А, работающиe в каскадном режиме.

     Назначение каналов следующие:

     0 - свободен;
     1 - адаптер SDLC;
     2 - контроллер накопителей на гибких дисках;
     3 - контроллер накопителей на жестких дисках;
     4 - каскад с первым контроллером ПДП;
     5, 6, 7 - свободны.

     Управление каналами 0 -  3 осуществляется аналогично PC/ХТ.
Каналы 4  - 7 предназначены для  обмена 16-разрядными словами. В
связи с этим возникает ряд отличий в работе с этими каналами:

     -  бит  0  в  данных,  заносимых  в  регистры  начального и
текущего адреса, всегда подразумевается  равным 0, поэтому через
эти регистры передаются биты 1 - 16 полного 23-разрядного адреса
(а  не  биты  0  -  15  полного  20-разрядного  адреса,  как это
реализовано  на   ХТ-подобных  ПЭВМ),  по  этой   же  причине  в
страничные регистры каналов 4 - 7 заносятся биты 17 - 23 полного
адреса, а  не биты 16  - 23, как  это надо сделать  при работе с
каналами 0 - 3;

     - поскольку передача  осуществляется 16-разрядными словами,
в регистры  текущего и  начального счетчика  циклов заносится не
число байт, а число слов, уменьшенное на единицу;

     - размеры страниц памяти, в пределах которых возможен обмен
в течение одной передачи составляют 2000h байтов.

     В   таблице   приведено   описание   портов   ввода-вывода,
предназначенных для управления вторым контроллером ПДП.
@pb
┌──────┬────────┬─────────────────────────────────────────────┐
│ Порт │ Режим  │       Назначение                            │
├──────┼────────┼─────────────────────────────────────────────┤
│ 0C0h │ запись │ Запись начального адреса в регистр начально-│
│      │        │ го адреса и регистр текущего адреса канала 4│
│      │        │                                             │
│ 0C4h │ запись │ то же для канала 5                          │
│      │        │                                             │
│ 0C8h │ запись │ то же для канала 6                          │
│      │        │                                             │
│ 0CCh │ запись │ то же для канала 7                          │
│      │        │                                             │
│ 0C0h │ чтение │ Чтение начального адреса из регистра началь-│
│      │        │ ного адреса канала 4                        │
│      │        │                                             │
│ 0C4h │ чтение │ то же для канала 5                          │
│      │        │                                             │
│ 0C8h │ чтение │ то же для канала 6                          │
│      │        │                                             │
│ 0CCh │ чтение │ то же для канала 7                          │
│      │        │                                             │
│ 0C2h │ запись │ Запись в регистр начального счетчика циклов │
│      │        │и в регистр текущего счетчика циклов канала 4│
│      │        │                                             │
│ 0C6h │ запись │ то же для канала 5                          │
│      │        │                                             │
│ 0CAh │ запись │ то же для канала 6                          │
│      │        │                                             │
│ 0CEh │ запись │ то же для канала 7                          │
│      │        │                                             │
│ 0C2h │ чтение │ Чтение текущего значения из регистра теку-  │
│      │        │ щего счетчика циклов канала 4               │
│      │        │                                             │
│ 0C6h │ чтение │ то же для канала 5                          │
│      │        │                                             │
│ 0Cah │ чтение │ то же для канала 6                          │
│      │        │                                             │
│ 0CCh │ чтение │ то же для канала 7                          │
│      │        │                                             │
│ 89h  │ запись │ Задание номера страницы для канала 6        │
│      │        │                                             │
│ 8Bh  │ запись │ то же для канала 5                          │
│      │        │                                             │
│ 8Ah  │ запись │ то же для канала 7                          │
│      │        │                                             │
│ 8Fh  │ запись │ то же для канала 4                          │
└──────┴────────┴─────────────────────────────────────────────┘

     В  следующей таблице  приведено описание  назначения портов
второго контроллера  ПДП с указанием  аналогичных портов первого
контроллера. Форматы данных,  вводимых/выводимых через эти порты
совпадают   с  форматами   данных  аналогичных   портов  первого
контроллера.   При  работе   с  этими   портами  следует  только
учитывать,  что  нумерация  каналов  начинается  не  с  0, как у
первого  контроллера, а  с 4  (канал  4  - это  канал 0  второго
контроллера, канал 5 - это его канал 1 и т. д.).

┌──────┬────────┬───────────────────────────────────┬─────────┐
│ Порт │        │                                   │ Аналог. │
│      │ Режим  │        Назначение                 │  порт   │
│ ПДП-2│        │                                   │  ПДП-1  │
├──────┼────────┼───────────────────────────────────┼─────────┤
│ 0D0h │ запись │ Запись регистра команд ПДП        │   8h    │
│      │        │                                   │         │
│ 0D0h │ чтение │ Чтение регистра состояния ПДП     │   8h    │
│      │        │                                   │         │
│ 0D2h │ запись │ Запись в регистр запросов ПДП     │   9h    │
│      │        │                                   │         │
│ 0D4h │ запись │ Запись бита маски для одного из ка│   0Ah   │
│      │        │ каналов ПДП                       │         │
│      │        │                                   │         │
│ 0D6h │ запись │ Запись регистра режимов для одного│   0Bh   │
│      │        │ из каналов ПДП                    │         │
│      │        │                                   │         │
│ 0D8h │ запись │ Очистка (сброс) триггера-защелки  │   0Ch   │
│      │        │ (триггера первого/последнего)     │         │
│      │        │                                   │         │
│ 0DAh │ запись │ Программный сброс контроллера     │   0Dh   │
│      │        │                                   │         │
│ 0DCh │ запись │ Очистка битов масок всех  каналов │   0Eh   │
│      │        │                                   │         │
│ 0DEh │ запись │ Запись регистра масок для всех 4-х│   0Fh   │
│      │        │ каналов                           │         │
│      │        │                                   │         │
│ 0DAh │ чтение │ Чтение рабочего регистра ПДП      │   0Dh   │
│      │        │                                   │         │
└──────┴────────┴───────────────────────────────────┴─────────┘
@pb
@ce@e13.Программируемый контроллер прерываний@e0

     Программируемый  контроллер  прерываний  (ПКП, Programmable
Interruрt   Controller,   PIC)   реализует   векторную   систему
прерываний.  Микросхема  8259А  фирмы  Intel  (советский  аналог
КР580ВН59),  а   так  же  ее  модификации   8259А-2  и  8259А-8,
поддерживает 8 уровней прерываний от восьми различных устройств.
Основные функции контроллера:

     -  фиксация  запросов  на   прерывания  от  восьми  внешних
источников;
     - программное маскирование поступающих запросов;
     - присвоение  фиксированных или циклически  изменяемых при-
оритетов входам контроллера, на которые поступают запросы;
     - инициация  вызова процедуры обработки  поступившего аппа-
ратного прерывания.

     Количество  обслуживаемых   внешних  источников  прерываний
может    быть   увеличено    путем   каскадирования   нескольких
контроллеров.

      Расположение   выводов    микросхемы   контроллера   8259A
приведено на рисунке.

            ┌────────────┐  ┌────────────┐
       __   │            └──┘            │
       CS  █▌ 1                       28 ▐█  Vcc
       __   │                            │
       WR  █▌ 2                       27 ▐█  A0
       __   │                            │   ____
       RD  █▌ 3                       26 ▐█  INTA
            │                            │
       D7  █▌ 4                       25 ▐█  IR7
            │                            │
       D6  █▌ 5                       24 ▐█  IR6
            │                            │
       D5  █▌ 6                       23 ▐█  IR5
            │                            │
       D4  █▌ 7                       22 ▐█  IR4
            │                            │
       D3  █▌ 8                       21 ▐█  IR3
            │                            │
       D2  █▌ 9                       20 ▐█  IR2
            │                            │
       D1  █▌ 10                      19 ▐█  IR1
            │                            │
       D0  █▌ 11                      18 ▐█  IR0
            │                            │
     CAS0  █▌ 12                      17 ▐█  INT
            │                            │   __ __
     CAS1  █▌ 13                      16 ▐█  SP/EN
            │                            │
      GND  █▌ 14                      15 ▐█  CAS2
            │                            │
            └────────────────────────────┘

┌───────────┬──────────┬───────────────────────────────────────┐
│Обозначение│Тип вывода│             Назначение                │
├───────────┼──────────┼───────────────────────────────────────┤
│  Vcc      │    -     │  Питание + 5 В                        │
│           │          │                                       │
│  GND      │    -     │  Общий (земля)                        │
│  __       │          │                                       │
│  CS       │  вход    │  Выбор микросхемы                     │
│  __       │          │                                       │
│  RD       │  вход    │  Чтение                               │
│  __       │          │                                       │
│  WR       │  вход    │  Запись                               │
│           │          │                                       │
│  D0-D7    │двунаправ-│  Выводы на шину данных                │
│           │ленные    │                                       │
│           │выводы    │                                       │
│           │          │                                       │
│ CAS0-CAS2 │ входы/   │  Для ведущего контроллера являются    │
│           │ выходы   │  выходами, для всех ведомых входами.  │
│           │          │  Предназначены для передачи ведущим   │
│           │          │  информации для выбора необходимого   │
│           │          │  ведомого.                            │
│ __ __     │          │                                       │
│ SP/EN     │ вход     │  Выбор ведущего контроллера           │
│           │          │                                       │
│ INT       │ выход    │  Запрос на прерывания                 │
│ ____      │          │                                       │
│ INTA      │ вход     │  Подтверждение прерывания             │
│           │          │                                       │
│   A0      │ вход     │  Выбор регистров контроллера          │
│           │          │                                       │
│ IR0-IR7   │ входы    │  Входы запросов на прерывания от      │
│           │          │  внешних источников.                  │
└───────────┴──────────┴───────────────────────────────────────┘

     В состав контроллера входят:

     - схема управления чтением/записью;
     - схема управления;
     - схема каскадирования;
     - регистр запросов на прерывания;
     - схема обработки приоритетов;
     - регистр состояния;
     - регистр маскирования запросов на прерывания.

     ПКП может находиться в  двух основных состояниях: настройки
и обслуживания  запросов  на  прерывания.  В состоянии настройки
контроллер    принимает    управляющие    слова    инициализации
(Initialization Command Words, ICW),  в состоянии обслуживания -
операционные управляющие  слова (Oрeration Control  Words, OCW).
Возможны несколько режимов обслуживания источников прерываний:

     - режим фиксированных приоритетов по по уровням прерываний;
     - два различных варианта циклического сдвига приоритетов;
     - режим автоматического завершения обработки прерывания;
     - режим специального маскирования;
     - режим опроса устройств.

@e1@ce3.1.Описание основных элементов ПКП@e0

     Схема   управления   чтением/записью   (Read/Write  Control
Logic). Основной  функцией этого блока является  прием команд от
микропроцессора и передача ему информации о состоянии ПКП. Обмен
с микропроцессором осуществляется  через специальный 8-разрядный
буфер данных (Data Bus Buffer), являющийся интерфейсом между ПКП
и шиной данных. В состав  блока входят регистры управляющих слов
ICW и  OCW. Схема управляется входами  CS, RD, WR и  A0. Вход CS
(Chiр  select)  отвечает  за  выбор  микросхемы.  Низкий уровень
сигнала на  входе CS разрешает  выполнение обмена с  ПКП. Низкий
уровень  сигнала на  входе WR  (Write) разрешает микропроцессору
выводить управляющие слова  ICW и OCW для приема  их ПКП. Низкий
уровень  сигнала  на  входе  RD  (Read)  разрешает  ПКП передать
микропроцессору  информацию  о  состоянии  специальных регистров
IRR, ISR и IMR, которые описаны ниже.

     Все управляющие слова ICW  и OCW принимаются контроллером в
виде  9-разрядных  значений.  Разряды  0  -  7  передаются через
8-разрядный  буфер  данных.  Старший  разряд  (восьмой, считая с
нуля)  носит  название  А0  и   устанавливается  в  0  или  1  в
зависимости  от  того,  через  какой  из  двух  возможных портов
ввода-вывода  (четный  или  нечетный)  было передано управляющее
слово.  Если для  вывода  значения  использовался порт  с четным
адресом, А0  будет равен 0,  если использовался порт  с нечетным
адресом на единицу большим, чем предыдущий, тогда А0 будет равен
1.

     Регистр запросов на прерывания (Interruрt Request Register,
IRR) обслуживается через входы IR0  - IR7 контроллера. Сигнал на
одном   входов   IR0   -   IR7   -   это  запрос  на  прерывание
соответствующего  уровня  (0  -  7).  В  соответствии с сигналом
запроса   на   прерывание   схемой   управления  устанавливается
соответствующий бит в регистре IRR.

     Регистр   состояния   (регистр   обрабатываемых   запросов,
In-Service  Register, ISR)  описывает в  битах 0  - 7 прерывания
каких уровней (0 - 7) в данный момент обрабатываются.

     Регистр маскирования запросов на прерывания (Interruрt Mask
Register, IMR)  описывает, прерывания каких  уровней в настоящий
момент замаскированы. Единичное значение бита в IMR указывает на
то, что прерывание соответствующего уровня при появлении запроса
в IRR блокируется.

     Схема обработки приоритетов (шифратор приоритетов, Priority
Resolver) определяет,  прерывание какого уровня  в данный момент
является наиболее приоритетным для выполнения.

     Схема   управления   ПКП   формирует   сигнал   запроса  на
прерывaние,  поступающий  на  вход  INT  (запрос  на прерывание)
микропроцессора. Если флаг IF регистра флагов процессора равен 1
(прерывания  разрешены),  процессор  отвечает  сигналом по линии
INTA  (подтверждение прерывания),  после чего  сбрасывается в  0
разряд  IRR и  устанавливается в  1 разряд  ISR, соответствующие
уровню  обрабатываемого  прерывания.   После  получения  второго
сигнала подтверждения от процессора  по линии INTA, ПКП передает
на    шину   данных    8-битовый   номер    прерывания.   Данная
последовательность  работы  схемы   управления  выполняется  при
подключении  ПКП к  системе с  микропроцессорами 8088/8086.  При
работе  с микропроцессорами  8080/8085 последовательность работы
схемы  управления   несколько  отличается  от   описанной  выше.
Основное  отличие состоит  в том,  что процессору  передается не
только  номер  прерывания,  но  и  код  команды  процессора  INT
(прерывание) - байт 0CDh.

     Схема   каскадирования  отвечает   за  работу   каскада  из
нескольких контроллеров. При  подключении к ведущему контроллеру
выход INT каждого ведомого подключается к одному из входов IR0 -
IR7 ведущего.  Далее этот сигнал передается  ведущим на вход INT
процессора.  Когда  процессор  возвращает  сигнал  INTA, ведущий
контроллер не только устанавливает бит  в ISR и сбрасывает бит в
IRR,  но  и  выдает  на  свои  выходы  CAS0  - CAS2 номер уровня
прерывания,  к которому  подключен ведомый,  пославший запрос на
прерывание.  Сигналы  по  линии  CAS0  -  CAS2 принимаются всеми
ведомыми, однако обрабатываются только  тем, который подключен к
линии IR с соответствующим номером.
@pb
@e1@ce3.2.Режимы работы ПКП@e0

     1. Режим  фиксированных приоритетов (Fixed  Priority, Fully
Nested  Mode). В  этом режиме  контроллер находится  сразу после
инициализации. Запросы прерываний имеют  жесткие приоритеты от 0
до   7  (0   -  высший)   и  обрабатываются   в  соответствии  с
приоритетами. Прерывание с меньшим  приоритетом никогда не будет
обработано,  если  в  процессе   обработки  прерываний  с  более
высокими  приоритетами   постоянно  возникают  запросы   на  эти
прерывания.

     2. Автоматический сдвиг приоритетов (Automatic Rotation). В
этом  режиме  дается   возможность  обработать  прерывания  всех
уровней   без  их   дискриминации.  Например,   после  обработки
прерывания  уровня  4  ему  автоматически  присваивается  низший
приоритет,  при  этом  приоритеты  для  всех  остальных  уровней
циклически сдвигаются и прерывания уровня 5 будут иметь в данной
ситуации  высший  приоритет  и,  следовательно, возможность быть
обработанными.

     3.   Программно-управляемый    сдвиг   приоритетов(Sрecific
Rotation). Программист  может сам передать  команду циклического
сдвига приоритетов ПКП, задав соответствующее управляющее слово.
В команде  задается номер  уровня, которому  требуется присвоить
максимальный   приоритет.   После   выполнения   такой   команды
устройство  работает  так  же,  как  и  в  режиме  фиксированных
приоритетов,   с   учетом   их   сдвига.  Приоритеты  сдвигаются
циклически,  таким  образом   если  максимальный  приоритет  был
назначен  уровню 3,  то уровень  2 получит  минимальный и  будет
обрабатываться последним.

     4.    Автоматическое   завершение    обработки   прерывания
(Automatic  End Of  Interruрt,  AEOI).  В обычном  режиме работы
процедура  обработки аппаратного  прерывания должна  перед своим
завершением очистить свой бит  в ISR специальной командой, иначе
новые  прерывания не  будут  обрабатываться  ПКП. В  режиме AEOI
нужный бит в ISR автоматически  сбрасывается в тот момент, когда
начинается обработка прерывания нужной процедурой обработки и от
нее   не   требуется   издавать   команду  завершения  обработки
прерывания   (EOI).    Сложность   работы   в    данном   режиме
обуславливается  тем,  что  все  процедуры  обработки аппаратных
прерываний  должны быть  повторно входимыми,  т. к.  за время их
работы могут повторно возникнуть прерывания того же уровня.

     5.  Режим  специальной  маски  (Sрecial  Mask Mode). Данный
режим  позволяет  отменить  приоритетное  упорядочение обработки
запросов  и обрабатывать  их по  мере поступления.  После отмены
режима  специальной  маски  предшествующий  порядок  приоритетов
уровней сохраняется.

     6. Режим  опроса (Polling Mode).  В этом режиме  аппаратные
прерывания  не происходят  автоматически. Появление  запросов на
прерывание  должно  определяться  считыванием  IRR. Данный режим
позволяет так  же получить от ПКП  информацию о наличии запросов
на  прерывания   и,  если  запросы   имеются,  номер  уровня   с
максимальным приоритетом, по которому есть запрос.

@e1@ce3.3.Программирование ПКП@e0

     Ниже   описывается   управление   ПКП   в   ПЭВМ   на  базе
микропроцессоров Intel 8086/8088/80286. Возможности, позволяющие
включить ПКП в ПЭВМ, использующие другие процессоры, опущены.

     Для   вывода  информации   в  ПКП   используются  2   порта
ввода-вывода. Порт с четным адресом (обычно это порт 20h) и порт
с нечетным  адресом (обычно  21h).  Через  эти порты  могут быть
переданы  4  слова  инициализации  (Initialization Control Word,
ICW1  -  ICW4),  задающие  режим  работы  ПКП,  и 3 операционных
управляющих  слова  (слова  рабочих  приказов, Oрeration Control
Words,  OCW1 -  OCW3). В  порт с  четным адресом выводятся ICW1,
OCW2 и OCW3. OCW2 отличается от OCW3 тем, что бит 3 в ocw2 равен
0, а в OCW3 равен 1. В то же  время бит 4 в OCW2 и OCW3 равен 0,
а в ICW1 равен 1. Таким образом по значению, выводимому в порт с
четным адресом, однозначно определяется,  в какой регистр (ICW1,
OCW2 или OCW3) заносятся данные.

     Порт с нечетным адресом используется для вывода ICW2, ICW3,
ICW4 и OCW1. Неоднозначности  интерпретации данных в этом случае
так  же не  возникает, т.   к. слова  инициализации ICW2  - ICW4
должны непосредственно  следовать за ICW1,  выведенным в порт  с
четным  адресом  и  выводить  в  промежутке  между  ними OCW1 не
следует, онo не будет опознанo контроллером.

     Выводом  в   порт  с  четным   адресом  управляющего  слова
инициализации  ICW1  начинается  инициализация  ПКП.  В процессе
инициализации  контроллер последовательно  принимает управляющие
слова ICW1 - ICW4. При наличии в системе одного контроллера ICW3
не  выводится. Наличие  ICW4 определяется  содержанием ICW1. При
наличии каскада из нескольких ПКП каждый из них инициализируется
отдельно.

     Формат ICW1 следующий:

  A0   7    6    5    4    3    2    1    0
┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
│  0 │ -- │ -- │ -- │  1 │LTIM│ ADI│SNGL│ IC4│
└────┴────┴────┴────┴────┴─┬──┴─┬──┴─┬──┴─┬──┘
                           │    │    │    │
                           │    │    │    └─> 1=будет вывод ICW4
                           │    │    │        0=не будет
                           │    │    └──────> 1=один контроллер
                           │    │             0=каскад
                           │    └───────────> игнорируется
                           └────────────────> 0=запуск запросов
                                                фронтом
                                              1=запуск запросов
                                                уровнем

     Бит 4, равный 1, определяет,  что выводится ICW1, а не OCW2
или OCW3.

     Бит 3 (LTIM), равный 0, задает запуск запросов фронтом, при
этом действует описанная выше схема:  бит в IRR сбрасывается при
установке соответствующего бита в ISR.

     Бит  2  (ADI)  используется  только  в  ПЭВМ на базе микро-
процессоров Intel 8080/8085.

     Бит  1  (SNGL)  указывает   на  наличие  в  системе  одного
контроллера   (если   равен   1)   или   каскада  из  нескольких
контроллеров (если  равен 0). Если этот  бит равен 1, то ICW3 не
выводится в процессе инициализации и следом за ICW2 сразу должно
следовать ICW4.

     Бит 0 (IC4) определяет, будет ли выводиться ICW4. Если ICW4
не  выводится  (бит  0  =  0),  то оно автоматически заполняется
нулями. В  описываемых ПЭВМ наличие  ICW4 обязательно, т. к. тип
микропроцессора 8086/8088 задается в нем  значением 1 в одном из
битов.

     Управляющее слово ICW2 задает  номер вектора прерывания для
прерываний уровня 0 (например 8 для  IBM PC, у которых по уровню
0 происходят прерывания от таймера).  Так как вектора аппаратных
прерываний  располагаются подряд  друг за  другом, вывод  в ICW2
значения  8 не  только задает  восьмой вектор  для таймера, но и
девятый для  прерываний уровня 1,  десятый (0Ah) для  прерываний
уровня 2 и т. д.

     Управляющее слово ICW3 выводится только при наличии каскада
и имеет разный формат для  ведущего и ведомых контроллеров. ICW3
ведущего указывает, к каким входам  IR0 - IR7 подключены ведомые
контроллеры, при этом соответствующие  биты устанавливаются в 1.
Остальные биты при этом равны 0. ICW3 следующего вида:

          A0   7    6    5    4    3    2    1    0
        ┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
        │  1 │  0 │  0 │  0 │  1 │  0 │  0 │  1 │  0 │
        └────┴────┴────┴────┴────┴────┴────┴────┴────┘

задает,   что   в   каскаде   имеется   2  ведомых  контроллера,
подключенных к входам IR1 и IR4.

     ICW3  ведомого  (подчиненного,  slave)  ПКП  в трех младших
битах   задает  номер   уровня,  на   котором  работает  ведомый
контроллер.  Для ведомого  контроллера, работающего  на уровне 1
ICW3 будет выглядеть следующим образом:

          A0   7    6    5    4    3    2    1    0
        ┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
        │  1 │  0 │  0 │  0 │  0 │  0 │  0 │  0 │  1 │
        └────┴────┴────┴────┴────┴────┴────┴────┴────┘

Если ведомый контроллер работает на  уровне 4, то его ICW3 будет
таким:
@pb
          A0   7    6    5    4    3    2    1    0
        ┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
        │  1 │  0 │  0 │  0 │  0 │  0 │  1 │  0 │  0 │
        └────┴────┴────┴────┴────┴────┴────┴────┴────┘

     Последнее   слово  инициализации   (ICW4)  имеет  следующий
формат:

  A0   7    6    5    4    3    2    1    0
┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
│  1 │  0 │  0 │  0 │SFNM│ BUF│ M/S│AEOI│ mPM│
└────┴────┴────┴────┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┘
                      │    │    │    │    │
                      │    │    │    │    └───> 1=8088/8086
                      │    │    │    │          0=8080/8085
                      │    │    │    └────────> 1=AEOI
                      │    │    │               0=EOI
                      │    │    └─────────────> 1=ведущий
                      │    │                    0=ведомый
                      │    │                  (только при BUF=1)
                      │    └──────────────────> 1=режим
                      │                           буферизации
                      └───────────────────────> 1=специальный
                                                вложенный режим

     Бит 0  (mPM) определяет, с  каким микропроцессором работает
ПКП (0 - 8080/8085, 1 - 8086/8088).

     Бит  1  (AEOI),  равный  1,  задает  режим  автоматического
завершения обработки  прерывания, описанный выше.  Если этот бит
равен  0,  действует  обычное  соглашение:  процедура  обработки
аппаратного прерывания должна сама сбрасывать свой бит в ISR.

     Бит 2 (M/S) игнорируется, если бит 3 (BUF) = 0. При наличии
одного контроллера  и BUF =  1 устанавливается в  1. При наличии
каскада должен быть равен 1 только для ведущего контроллера.

     Бит  4  (SFNM)  устанавливает  специальный вложенный режим,
применяемый  при  каскадировании   для  определения  приоритетов
запросов от разных контроллеров (Sрecial Fully Nested Mode).

     После инициализации  ПКП готов к работе  в заданном режиме.
Для  изменения  режимов  работы,  задаваемых  при  инициализации
требуется переинициализировать его заново.

     В процессе работы с ПКП Вы можете без переинициализации:

     - маскировать и размаскировать аппаратные прерывания;
     - изменять приоритеты уровней;
     - издавать  команду  завершения обработки  аппаратного пре-
рывания;
     - устанавливать/сбрасывать режим специальной маски;
     - переводить   контроллер  в  режим   опроса   и  считывать
состояние регистров ISR и IRR; для этого Вам потребуется вывести
в порты ПКП одно из трех слов рабочих приказов OCW1 - OCW3.

     Формат первого слова рабочих приказов OCW1:

  A0   7    6    5    4    3    2    1    0
┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
│  1 │ M7 │ M6 │ M5 │ M4 │ M3 │ M2 │ M1 │ M0 │
└────┴────┴────┴────┴────┴────┴────┴────┴────┘

     Единичное значение  одного из битов  М0 - М7  означает, что
прерывания соответствующего уровня (IR0  - IR7) маскируются и не
будут обрабатываться контроллером.

     Второе  слово  рабочих  приказов  (OCW2)  предназначено для
вывода  команды  завершения   обработки  аппаратного  прерывания
(EOI),  циклического  сдвига   и  явного  изменения  приоритетов
уровней. Назначение битов OCW2 следующее:

  A0   7    6    5    4    3    2    1    0
┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
│  0 │  R │ SL │ EOI│  0 │  0 │ L2 │ L1 │ L0 │
└────┴─┬──┴─┬──┴─┬──┴────┴────┴─┬──┴─┬──┴─┬──┘
       │    │    │              │    │    └──> Эти 3 бита опреде-
       │    │    │              │    └───────> ляют номер уровня
       │    │    │              └────────────> прерывания, если он
       │    │    │                             требуется в команде.
       │    │    │
       │    │    │
       │    │    └───────────────────────────> 1-команда завер-
       v    v                                    шения обработки
    ┌────┬────┐                                  аппаратного
    │  0 │  0 │ Используется вместе с EOI=1      прерывания
    ├────┼────┤
    │  0 │  1 │ Специфицированный EOI (сбрасывает бит в ISR,
    ├────┼────┤ определяемый полями L0 - L2)
    │  1 │  0 │ Циклический сдвиг приоритетов влево на одну
    ├────┼────┤ позицию
    │  1 │  1 │ Назначение низшего приоритета уровню, определяе-
    └────┴────┘ мому полями L0 - L2

     Как   уже  говорилось,   процедура  обработки   аппаратного
прерывания должна  перед своим завершением  очистить свой бит  в
ISR  выводом  команды  завершения  обработки  прерывания (End Of
Interruрt, EOI). Существует два  варианта команды EOI: обычный и
специфицированный  EOI. Обычный  EOI  очищает  бит в  ISR, соот-
ветствующий  прерыванию  с  максимальным  приоритетом.  Специфи-
цированный EOI  (R=0, SL=1, EOI=1,  L0 - L2  равно номеру уровня
прерывания)  очищает  в  ISR  бит,  соответствующий прерыванию с
номером,  указанным  в  L0  -  L2  независимо от его приоритета.
Команды  с  битом  R=1  позволяют  изменить  приоритеты уровней.
Циклический  сдвиг  приоритетов  сдвигает  приоритеты  влево  на
единицу,   при   этом,   если   после   обычного   распределения
приоритетов,  издать  команду  циклического  сдвига,  уровень  0
получит  низший приоритет,  уровень 1  - наивысший,  уровень 2 -
следующий  за  ним  и  т.д.  Команда  явного  назначения низшего
приоритета  одному  из  уровней  изменяет  приоритеты  остальных
уровней  циклически.  Таким  образом,  если  Вы  зададите низший
приоритет уровню 5, то уровень 6 получит наивысший.

     Третье слово  рабочих приказов OCW3  позволяет установить и
отменить режим  специальной маски, перевести  контроллер в режим
опроса и  прочитать содержимое IRR и  ISR. Назначение битов OCW3
приведено на рисунке

  A0   7    6    5    4    3    2    1    0
┌────┬────┬────┬────┬────┬────┬────┬────┬────┐
│  0 │  0 │ESMM│ SMM│  0 │  1 │  P │ RR │ RIS│
└────┴────┴─┬──┴─┬──┴────┴────┴─┬──┴──┬─┴─┬──┘
  ┌─────────┘    │              │     │   │
  │   ┌──────────┘              └─┬───┼───┼──> 1-режим опроса
  v   v                           v   v   v
┌───┬───┐                       ┌───┬───┬───┐
│ 1 │ 0 │-Отменить режим        │ 0 │ 1 │ 0 │ Чтение IRR
├───┼───┤ специальной маски     ├───┼───┼───┤
│ 1 │ 1 │-Установить режим      │ 0 │ 1 │ 1 │ Чтение ISR
└───┴───┘ специальной маски     └───┴───┴───┘

     Единичное  значение  бита  Р   (бит  опроса,  Polling  Bit)
переводит контроллер  в режим опроса.  Если после этого  считать
данные из порта  с четным адресом, в регистр  AL загрузится байт
следующего содержания:

          7    6    5    4    3    2    1    0
        ┌────┬────┬────┬────┬────┬────┬────┬────┐
        │  I │  0 │  0 │  0 │  0 │ L2 │ L1 │ L0 │
        └────┴────┴────┴────┴────┴────┴────┴────┘

     Если I = 1, значит имеются запросы на прерывания и тогда L0
- L2  - это  номер уровня  с наивысшим  приоритетом, по которому
имеется запрос на прерывание.

     Если P=0, Вы можете считать  информацию из ISR или IRR. Для
этого необходимо издать команду чтения  ISR или IRR (см. рисунок
выше) и затем считать значение из порта с нечетным адресом.

     Единичное  значение бита  ESMM позволяет  в зависимости  от
значения  бита  SMM  установить  или  отменить режим специальной
маски.
@pb
@e1@ce4. Таймер и генерация звука@e0

@e1@ce4.1. Программируемый таймер 8253@e0

     Для задания временных интервалов  и формирования сигналов с
различными  временными  параметрами   в  IBM  PC/XT  применяется
программируемый таймер 8253  (отечественный аналог КР580ВН53), в
AT - 8254.  С точки зрения программиста они  идентичны. В состав
таймера   входят:   буфер    шины   данных,   схема   управления
вводом-выводом  и  три  независимых  канала,  каждый  из которых
содержит  регистр  режима,  схему  управления  каналом,  буфер и
16-разрядный счетчик.

     Программирование   канала   осуществляется   путем   вывода
управляющих слов в регистр  режима каналов и начального значения
в его счетчики. Каждый канал имеет управляющий вход GATE и выход
OUT и может работать в одном из следующих шести режимов.

      @u1Режим  0@u0  (прерывание  терминального  счета). После записи
управляющего  слова  в  регистр  режима  канала  на  выходе  ОUT
устанавливается напряжение низкого  уровня; загрузка счетчика не
изменяет  это  состояние.  Затем  начинается  декремент счетчика
(последовательное  вычитание из  него единицы).  В момент, когда
счетчик  обнулится,  на  выходе  OUT  устанавливается напряжение
высокого  уровня  и  сохраняется   до  загрузки  счетчика  новым
значением.  Счет возможен  только при  наличие сигнала  высокого
уровня  на   входе  GATE.  Низкий  уровень   этого  сигнала  или
ниспадающий фронт запрещают счет.

     Перезагрузка  счетчика  во  время  приводит  к  следующему:
загрузка  младшего  байта  останавливает  текущий счет, загрузка
старшего байта запускает новый цикл счета. Минимально допустимое
значение счетчика равно 2.

     @u1Режим 1@u0 (ждущий мультивибратор).  На выходе OUT формируется
отрицательный  импульс  длительностью  t=n*T,  где  n  -  число,
загруженное  в счетчик,  T -  период тактовых  импульсов. Низкий
уровень на выходе OUT  устанавливается со следующего такта после
подачи на вход GATE сигнала высокого уровня.

     Загрузка в  счетчик нового числа не  влияет на длительность
текущего   импульса,  а   учитывается  при   следующем  запуске.
Перезапуск счетчика производится  нарастающим фронтом входа GATE
(без перезагрузки счетчика). Минимальное допустимое n=1.

     @u1Режим  2@u0 (генератор  частоты). Каждый  раз после достижения
счетчиком нуля на выходе  OUT появляется отрицательный импульс с
длительностью  один  такт.   Перезагрузка  счетчика  сказывается
только  после  перезапуска  счетчика.  При  исчезновении сигнала
высокого уровня на  входе GATE прекращается счет и  на выход OUT
подается   напряжение  высокого   уровня.  Перезапуск   счетчика
происходит при наличии на входе GATE сигнала высокого уровня.

     @u1Режим  3@u0  (генератор  меандра).  Аналогичен  режиму  2,  но
положительный   уровень   выходного   сигнала   занимает  первый
полупериод, а отрицательный -  второй полупериод. Точнее, если n
(начальное    значение   счетчика)    четно,   то   длительность
положительного и  отрицательного полупериодов равна  n*T/2; если
же  n нечетно  - то  (n+1)*T/2 и  (n-1)*Т/2 соответственно. Низкий
уровень  сигнала на  входе GATE  запрещает счет,  на выходе  OUT
устанавливается  сигнал  высокого  уровня.  Высокий уровень GATE
разрешает  счет, а  нарастание его  запускает счетчик начального
состояния. Отметим, что n=3 в этом режиме недопустимо.

     @u1Режим  4@u0  (счетчик  событий).  По  окончании отсчета числа,
загруженного в счетчик, на  выходе OUT формируется отрицательный
импульс длительностью один такт. Запись в счетчик во время счета
младшего  байта не  влияет на  текущий счет,  а запись  старшего
байта перезапускает счетчик. Низкий уровень входа GATE запрещает
счет,  высокий  -  разрешает.  Минимальное  допустимое  значение
счетчика равно 1.

     @u1Режим  5@u0  (счетчик  событий  с  автозагрузкой).  Отличие от
режима 4 состоит  в том, что каждое нарастание  сигнала на входе
GATE перезапускает  счетчик. Перезагрузка счетчика  не влияет на
текущий   цикл,   однако   следующий   цикл  определяется  вновь
занесенным числом.

     Временные диаграммы режимов  таймера приведены на следующем
рисунке:

       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=5 ┌────────────────┐n=4 ┌──────────────────
  WR   │└────┘                └────┘
       │       ┌─────────────────────────┐   ┌────────
  GATE ├───────┘                         └───┘
       ├─────┐           ┌─────────┐               ┌──
  OUT  │     └───────────┘         └───────────────┘
       │
  n    │      5 4 3 2 1 0           4 3 2     2 1 0
       └─────────────────────────────────────────────────

                            Режим 0

       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=4 ┌──────┐n=5 ┌────────────────────────────
  WR   │└────┘      └────┘
       │         ┌──────────┐    ┌─┐    ┌─────────────
  GATE ├─────────┘          └────┘ └────┘
       ├───────────┐       ┌───────┐               ┌──
  OUT  │           └───────┘       └───────────────┘
       │
  n    │          4 3 2 1 0       5 4 3  5 4 3 2 1 0
       └─────────────────────────────────────────────────

                            Режим 1
@pb
       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=4 ┌──┐n=3 ┌────────────────────────────────
  WR   │└────┘  └────┘
       │      ┌────────────────────────┐    ┌─────────
  GATE ├──────┘                        └────┘
       ├─────────────┐ ┌────┐ ┌─────┐ ┌──────────┐ ┌──
  OUT  │             └─┘    └─┘     └─┘          └─┘
       │
  n    │      4 3 2 1 0 3 2 1 0 3 2 1 0      3 2 1 0
       └─────────────────────────────────────────────────

                            Режим 2

       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=4 ┌────────────────┐n=5 ┌──────────────────
  WR   │└────┘                └────┘
       │     ┌────────────────────────────────┐   ┌───
  GATE ├─────┘                                └───┘
       ├──────────┐    ┌─────┐    ┌─────┐    ┌────────
  OUT  │          └────┘     └────┘     └────┘
       │
  n    │      4 3 2 1 0  4 3 2 1 0  4 3 2 1 0  5   5 4
       └─────────────────────────────────────────────────

                            Режим 3

       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=4 ┌────────────────┐n=5 ┌─────────────────────
  WR   │└────┘                └────┘
       ├──────────────────────────────┐   ┌──────────────
  GATE │                              └───┘
       ├──────────────┐ ┌────────────────────────────┐ ┌─
  OUT  │              └─┘                            └─┘
       │
  n    │      4 3 2 1 0             5      5 4 3 2 1 0
       └─────────────────────────────────────────────────

                            Режим 4

       │┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐
  CLK  ├┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└
  __   ├┐n=4 ┌────────────────────────────────────────
  WR   │└────┘
       │         ┌────────┐   ┌─┐   ┌─────────────────
  GATE ├─────────┘        └───┘ └───┘
       ├─────────────────┐ ┌─────────────────┐ ┌──────
  OUT  │                 └─┘                 └─┘
       │
  n    │         4 3 2 1 0    4 3    4 3 2 1 0
       └─────────────────────────────────────────────────

                            Режим 5

     В  IBM  PC  таймер  имеет  базовый  адрес  40h  и следующие
программируемые регистры:

 Адрес     Операция        Назначение
────────────────────────────────────────────────────
  40h       запись       Загрузка счетчика канала 0
            чтение       Чтение счетчика канала 0

  41h       запись       Загрузка счетчика канала 1
            чтение       Чтение счетчика канала 1

  42h       запись       Загрузка счетчика канала 2
            чтение       Чтение счетчика канала 2

  43h       запись       Запись управляющего слова
                         в регистр режима канала
─────────────────────────────────────────────────────

     Управляющее слово имеет следующий формат:

 7  6  5  4  3  2  1  0
┌─┬──┬──┬──┬──┬──┬──┬──┐
│    │     │        │  │  Биты                          Маска
└─┼──┴──┼──┴──┴┬─┴──┴─┬┘  ────                        ───────
  │     │      │      └> 0: 0 = двоичный код,           а & 1
  │     │      │            1 = двоично-десятичный код
  │     │      └───────> 1-3: режим работы канала:      а & 0Eh
  │     │                     000 - режим 0
  │     │                     001 - режим 1
  │     │                     X10 - режим 2
  │     │                     X11 - режим 3
  │     │                     100 - режим 4
  │     │                     101 - режим 5
  │     └──────────────> 4-5: вид загрузки счетчика:    а & 30h
  │                           00 - "защелкивание"
  │                                (биты 0-3 безразличны)
  │                           01 - только младший байт
  │                           10 - только старший байт
  │                           11 - младший байт, затем старший
  └────────────────────> 6-7: номер канала:             a & C0h
                              00 - канал 0
                              01 - канал 1
                              10 - канал 2
                              11 - запрещенная комбинация

     Существует  два способа  чтения текущего  значения счетчика
канала.

     1. Чтение с остановом  счетчика. Для обеспечения стабильных
показаний  необходимо приостановить  работу канала  либо подачей
сигнала  низкого  уровня  на  вход  GATE  (кроме режима 1), либо
блокированием тактовых импульсов.

     2. Чтение "на лету".  Для считывания счетчика без остановки
процесса  счета  используется  посылка  в  порт 43h управляющего
слова в режиме "защелкивания"  (см. выше). Это управляющее слово
фиксирует  текущее значение  счетчика  и  Вы можете  считать его
младший байт, а затем старший байт.

@e1@ce4.2. Таймер на системной плате IBM PC@e0

     В IBM PC каналы таймера имеют следующее назначение.

  Канал      Назначение                        Режим
────────────────────────────────────────────────────────────────
    0        системные часы (IRQ0)          3, счетчик=0 (65536)
    1        запрос для канала 0 ПДП
             (регенерация памяти)           2, счетчик=18
    2        генератор звука                      ──
────────────────────────────────────────────────────────────────

     Тактовая частота  каждого канала равна  1,19318 МГц, т.  е.
каждый такт имеет длительность 0,84  мсек. Вход GATE каналов 0 и
1 всегда  имеют высокий  уровень, поэтому  счет на  этих каналах
разрешен всегда. Вход GATE канала 2 управляется битом 0 порта PB
интерфейса 8255 (см. гл. 5), связанного с портом 61h.

     При  начальной  загрузке  BIOS  инициализирует  канал 0 для
работы в  режиме 3 со  счетчиком 0 (т.  е. 65536 декрементов  на
цикл счета). Поэтому частота системных часов равна
     1,19 МГц/65536 = 18.2 Гц
и прерывание IRQ0,  связанное с вектором Int  8, происходит 18,2
раз в секунду, т. е. каждые 55 мсек.

     Вы можете перепрограммировать канал 0, но тогда

     - BIOS не сможет отслеживать текущее время и дату;

     -  нарушится работа  с гибкими  дисками, т.  к. включение и
выключение их двигателей отсчитывается по текущему времени.

     Канал  1  работает  в  режиме  2  со  счетчиком 18, поэтому
регенерация   памяти  происходит   каждые  18   мсек.  Перепрог-
раммировать  его нельзя,  т. к.  это приведет  к потере данных в
ОЗУ.

     Программирование канала 2 описано в следующем пункте.
@pb
@e1@ce4.3. Генерация звука@e0

     На  вход  звукогенератора  поступает  логическое  "И"  двух
сигналов: выхода  OUT 2-го канала  таймера и содержимого  бита 1
порта  РВ интерфейса  8255. Поэтому  простейший способ генерации
звука состоит в программировании канала  2 таймера так, чтобы он
выдавал  прямоугольный  импульс   заданной  частоты,  лежащий  в
звуковом  диапазоне  (20  Гц  -   20  КГц).  Для  этого  следует
использовать  режим таймера  3 с  подходящим начальным значением
счетчика. Если затем установить биты 0  и 1 порта РВ, то импульс
начнет поступать на вход звукогенератора  (бит 0 - это вход GATE
канала 2, разрешающий  счет, а бит 1 -  разрешение выдачи выхода
OUT  на вход  звукогенератора). Для  выключения звука достаточно
сбросить биты  0 - 1 в  РВ. Преимущество этого метода  состоит в
том, что,  запустив генерацию звука,  ЦП может выполнять  другие
действия. Значение  счетчика 2-го канала  вычисляется по формуле
n=1193181/f=1234DDh/f (1193181 - тактовая  частота таймера в Гц,
f - требуемая частота звука).

     Пример:

           ;
           ; подпрограмма генерации звука
           ; Вход: АX= частота звука в Гц
           ;
Sound      рroc     near
           рush     ax        ;сохранить регистры
           рush     bx
           рush     dx
           mov      bx,ax     ;частота
           mov      ax,34DDh
           mov      dx,12h    ;(dx,ax)=1193181
           cmр      dx,bx     ;если bx < 18Гц, то выход
           jnb      Done      ;чтобы избежать переполнения
           div      bx        ;ax=(dx,ax)/bx
           mov      bx,ax     ;счетчик таймера
           in       al,61h    ;порт РВ
           or       al,3      ;установить биты 0-1
           out      61h,al
           mov      al,00001011b   ;управляющее слово таймера:
                              ;канал 2, режим 3, двоичное слово
           mov      dx,43h
           out      dx,al     ;вывод в регистр режима
           dec      dx
           mov      al,bl
           out      dx,al     ;младший байт счетчика
           mov      al,bh
           out      dx,al     ;старший байт счетчика
Done:
           рoр      dx        ;восстановить регистры
           рoр      bx
           рoр      ax
           ret
Sound      endр
           ;
           ;подпрограмма выключения звука
           ;
No_Sound   рroc     near
           рush     ax
           in       al,61h    ;порт РВ
           and      al,not 3  ;сброс битов 0-1
           out      61h,al
           рoр      ax
           ret
No_Sound   endр

     Для генерации музыки можно использовать следующий алгоритм.
Пусть octave  - номер октавы  (1, 2, ...);  note - номер  ноты в
октаве (до=1, до#=2, ..., си=12). Тогда:

     f := 32.625;
     for i := 1 to oktave do f := 2*f;
     for i := 1 to note do f := 1.059463094*f
     Sound (round(f));

     Второй  способ   генерации  звука  состоит   в  том,  чтобы
генерировать звуковые импульсы не  выходом таймера, а установкой
и сбросом бита 1 в регистре  РВ. Для управления задержками можно
использовать программный цикл, например:

          ;
          ; Программа генерации звука
          ; Вход: N=количество импульсов
          ;       FREQ=длительность импульса
          ;
          in        al,61h         ;порт РВ
          and       al,not         ;сброс бита 0
          mov       dx,N
Reрeat:
          or        al,2
          out       61h,al         ;установить бит 1
          mov       cx,FREQ
Wait_On:
          looр      Wait_On
          and       al,not 2       ;сбросить бит 1
          out       61h,al
          mov       cx,FREQ
Wait_Off:
          looр      Wait_Off
          dec       dx
          jnz       Reрeat

     Программирование   этого  способа   основано  на  следующих
формулах.  Если Т  - длительность  звучания в  сек, f  - частота
звука в Гц, а t - тактовая частота процессора ПЭВМ, то

     N=T*f; FREQ=t/(34*f).

     Константа 34  объясняется тем, что  длительность каждого из
циклов Wait_on и Wait_off  приблизительно равна (17*cx) машинных
тактов.

     Неудобство  этого метода  состоит в  том, что  ЦП полностью
занят  генерацией звука  - любое  прерывание испортит  временную
диаграмму  звукового  сигнала.  Однако  он  обеспечивает  точную
подстройку частоты и позволяет создавать несимметричные импульсы
варьированием задержек в циклах Wait_on и Wait_off.
@pb
@ce@e15. Программируемый периферийный интерфейс@e0

@e1@ce5.1. Описание ППИ 8255@e0

     В  состав  IBM  PC/XT  входит  программируемый периферийный
интерфейс  (ППИ)  8255  (отечественный  аналог  КР580ИК55).  ППИ
содержит  три 8-разрядных  порта (РА,  РВ и  РС) для организации
обмена между  ЦП и внешними  устройствами и регистр  управления.
Порты  сгруппированы в  две группы:  группа А  состоит из  РА и
старшей  тетрады РС,  группа В  - из  РВ и  младшей тетрады  РС.
Группа А может  работать в трех режимах (0, 1,  2); группа В - в
двух   (0  и   1).  Режимы   определяются  содержимым   регистра
управления, имеющим следующий формат:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬─┬──┐
│1 │     │     │  │    │ Биты:                         Маска:
└──┴──┼──┴──┼──┴┬─┴─┼──┘ ─────                         ──────
      │     │   │   └───> 0-1: определение группы В    a & 3
      │     │   │              (зависит от режима)
      │     │   └───────> 2: режим группы В (0 или 1)  a & 4
      │     └───────────> 3-4: определение группы А    a & 18h
      │                         (зависит от режима)
      └─────────────────> 5-6: режим группы А:         a & 60h
                                 00=режим 0
                                 01=режим 1
                                 1X=режим 2

     @u1Режим  0.@u0 В  этом режиме  группа разделяется  на два набора
(порт и  тетрада РС). Каждый  набор может использоваться  только
для  ввода.  Биты  определения   группы  в  регистре  управления
определяют, какие наборы предназначены для ввода , а какие - для
вывода (бит, равный нулю, задает набор для вывода, единица - для
ввода):

┌──────┬───────────────────────┐
│ Бит  │      Набор            │
├──────┼───────────────────────┤
│ 4    │ РА                    │
│ 3    │ Старшая тетрада РС    │
│ 1    │ РВ                    │
│ 0    │ Младшая тетрада РС    │
└──────┴───────────────────────┘

     @u1Режим 1.@u0 Порты РА и РВ используются для передачи данных, РС
- для  управляющих  сигналов.  Дальнейшее  описание  сделано  на
примере группы А. Бит 4 регистра управления задает использование
порта РА (1 = порт ввода, 0 = порт вывода).

     При вводе биты порта РС имеют следующее значение:
@pb
 Бит(ы)            Назначение
────────────────────────────────────────────────────────────────
4 (STBA)   0 = "стробировать" шину данных в порт РА
5 (IBFA)   1 = РА содержит данные, еще не выбранные процессором
6-7        если  бит 3  регистра  управления  равен 0,  то это
           линии управления периферийным  устройством; если он
           равен 1, то это линии ввода состояния устройства.
────────────────────────────────────────────────────────────────

     При выводе:

 Бит(ы)             Назначение
────────────────────────────────────────────────────────────────
4-5        то же, что 6,7 при вводе
6 (OBFA)   1 = РА содержит данные, еще не переданные
               периферийному устройству
7 (ASKA)   0 = данные из РА приняты устройством
────────────────────────────────────────────────────────────────

     С  группой А  ассоциируется  бит  3 порта  РС, обозначаемый
INTRA.  Этот  сигнал  применяется  как  линия запроса прерывания
системной шины. При  вводе в порт РА на  этом выходе формируется
1,  когда новые  данные помещаются  в РА,  и 0,  когда процессор
считывает  данные. При  выводе INTRA  = 1,  когда содержимое  РА
принято  устройством,  и  0,  когда  ЦП  загружает новые данные.
Разрешением прерываний управляют бит 4 РС в режиме ввода и бит 6
в режиме вывода (1 = разрешить прерывание).

     Для  группы  В  ввод  или  вывод  задается битом 1 регистра
управления. При вводе биты 2 и  1 порта РС именуются STBB и IBFB
(их назначение аналогично битам STBA  и IBFA). При выводе биты 2
и 1 именуются  OBFB и ASKB  (см. выше). Бит  0 становится INTRB,
разрешениями прерываний управляет бит 2.

     @u1Режим  2.@u0 Этот  режим допустим  только для  группы А. В нем
порт  А   становится  двунаправленным,  а   старшая  тетрада  РС
определяется так:

 Бит(ы)            Назначение
────────────────────────────────────────────────────────────────
4 (STBA)     0 = "стробировать" шину данных  РА
5 (IBFA)     1 = порт РА загружаются данные с шины,
             0 = процессор читает данные
6 (ACKA)     1 = устройство готово читать данные с шины
7 (OBFA)     1 = процессор загружает в порт РА данные,
             0 = данные приняты устройством
────────────────────────────────────────────────────────────────
@pb
@e1@ce5.2.Использование ППИ в IBM PC@e0

     ППИ в  IBM PC/XT занимает порты  60h - 63h. BIOS  заносит в
регистр управления (порт 63h) 99h,  т. е. программирует группы А
и В в  режим 0, причем  РА и РС  является портами ввода,  а РС -
портом вывода:

 Адрес    Операция      Назначение
────────────────────────────────────────────────────────────────
60h       чтение       Ввод из порта РА

61h       запись       Ввод в порт РВ
          чтение       Чтение последнего вывода в порт РВ

62h       чтение       Вывод из порта РС

63h       чтение/      Регистр управления ППИ
          запись
────────────────────────────────────────────────────────────────

     Содержимое порта РА: если бит 7  в РВ равен 0, то чтение из
этого  порта означает  ввод скан-кода  последней нажатой клавиши
(см.  гл. 6);  если же  бит 7  в РВ  установлен, то  РА содержит
положение DIP-переключателей колодки SW1 системной платы:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │     │     │  │  │ Биты:                           Маска:
└──┼──┴──┼──┴──┼──┴┬─┴┬─┘ ─────                           ──────
   │     │     │   │  └─>0: 1=есть НГМД                  а & 1
   │     │     │   └────>1: 1=есть сопроцессор 8087      а & 2
   │     │     └────────>2-3:размер ОЗУ системной платы: а & 0Еh
   │     │                    00=16K, 04h=32K, 0eh=64K и более
   │     └──────────────>4-5:тип дисплея:                а & 30h
   │                          00= EGA/VGA
   │                          10h=CGA, 40 столбцов
   │                          20h=CGA, 80 столбцов
   │                          30h=монохромный
   └────────────────────>6-7:количество НГМД-1           a & C0h
                              00=1, 40h=2, 80h=3, C0h=4
@pb
     Содержимое порта РВ:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
 │  │  │  │  │  │  │  └─> 0: вход GATE 2-го канала таймера:
 │  │  │  │  │  │  │         а OR 3 = вкл. звук
 │  │  │  │  │  │  │         а AND 0FCh = выкл. звук
 │  │  │  │  │  │  └────> 1: данные генератора звука
 │  │  │  │  │  └───────> 2: определяет содержимое РС
 │  │  │  │  └──────────> 3: 0=включить мотор кассетного
 │  │  │  │                    магнитофона
 │  │  │  └─────────────> 4: 0=разрешить проверку паритета ОЗУ
 │  │  └────────────────> 5: 0=разрешить сигналы об ошибках
 │  │                          в платах расширения
 │  └───────────────────> 6: 0=запретить часы клавиатуры
 └──────────────────────> 7: задает содержимое РА
                             (при вводе 1=подтверждение
                             от клавиатуры)

     Содержимое  порта РС  зависит от  бита 7  порта РВ. Если он
установлен,  то  биты  0-3   содержат  младшую  тетраду  колодки
DIP-переключателей SW2, если сброшен, то старшую:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │           │ Биты:
└┬─┴┬─┴┬─┴┬─┴──┴──┼──┴──┘ ─────
 │  │  │  │       └────>  0-3: DIP-ключи SW2 (см. ниже)
 │  │  │  └────────────>  4: ввод данных с кассетного магнитофона
 │  │  └───────────────>  5: выход OUT 2-го канала таймера
 │  └──────────────────>  6: 1=ошибка в платах расширения
 └─────────────────────>  7: 1=ошибка паритета ОЗУ

     Колодка SW2 содержит следующие ключи:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│           │           │ Биты:
└──┴──┴──┴──┴──┴──┴──┴──┘ ─────
      │           └─────> 0-3: общий размер ОЗУ
      └─────────────────> 4-7: всегда равны нулю
@pb
@ce@e1.6. Клавиатура@e0

@e1@ce6.1. Клавиатура IBM PC/XT@e0

     Связь с  клавиатурой осуществляется через  порты ППИ 60h  и
61h  (см.  5.2).  При   нажатии  клавиши  происходит  аппаратное
прерывание  IRQ1, связанное  с вектором  Int 9.  Если Вы  хотите
обрабатывать  это   прерывание  сами,  то   программа  обработки
прерывания должна иметь следующий вид:

Int_09h:
     рush      ax
     рush      di
     рush      es
     in        al,60h    ;скан. код клавиши из РА
     les       di,buffer ;адрес буфера
     stosb               ;сохранить код в буфере
     рoр       es
     рoр       di
     in        al,61h    ;ввод порта РВ
     mov       ah,al
     or        al,80h    ;установить бит "подтверждения ввода"
     out       61h,al
     xchg      ah,al     ;вывести старое значение РВ
     out       61h,al
     mov       al,20h    ;послать сигнал EOI
     out       20h,al    ;контроллеру прерываний
     рoр       ax
     iret

     Перечень скан-кодов всех клавиш приведен в приложении 1. Вы
можете запретить прерывания от  клавиатуры либо маскировкой бита
1 в регистре IMR контроллера  прерываний, либо установкой бита 6
порта РВ ППИ:

     in        al,21h    ;чтение IMR
     or        al,2      ;установка бита 1
     out       21h,al    ;запись IMR
или
     in        al,61h    ;чтение РВ
     or        al,40h    ;установка бита 6
     out       61h,al    ;запись РВ

     Для  разрешения  работы   клавиатуры  необходимо  выполнить
обратные действия.
@pb
@e1@ce6.2. Клавиатура IBM PC AT@e0

     Взаимодействие  с   клавиатурой  в  PC   AT  базируется  на
микропроцессоре  Intel 8042;  благодаря этому  программист имеет
гораздо большие возможности по  управлению клавиатурой, нежели в
PC/XT.

     Управление  клавиатурой  производится  обращением  к  порту
ввода-вывода  64h. Для  совместимости со  старыми ПЭВМ допустимо
использование  порта  60h.  Если  приведенные  ниже  примеры  не
работают на Вашей ПЭВМ, то используйте порт 60h.

     Порт  64h предназначен  для вывода  команд и  данных и  для
чтения состояния клавиатуры. Общая  схема посылки команд клавиа-
турe такова:

     cli                      ;запрет прерываний
     call      wait_kbd       ;ожидание готовности клавиатуры
     mov       al,cmd_code    ;код команды
     out       64h,al         ;вывод в порт
     sti                      ;разрешение прерываний

     Для  команд,  сопровождающихся  байтом  данных,  эта  схема
принимает вид:

     cli
     call      wait_kbd
     mov       al,cmd_code    ;код команды
     out       64h,al
     call      wait_kbd
     mov       al,data_value  ;байт данных
     out       64h,al
     sti

     Проверка ожидания готовности клавиатуры может иметь вид:

wait_kbd:
      mov      cx,2500h  ;задержка порядка 10 мсек
test_kbd:
      in       al,64h    ;читаем состояние клавиатуры
      test     al,2      ;проверка бита готовности
      looрnz   test_kbd
      ret

     Авторам  известны следующие  команды контроллера клавиатуры
(этот список, вероятно, не полон и может содержать ошибки, т. к.
собран из различных источников):

 Код команды             Описание
────────────────────────────────────────────────────────────────
0FFh           Сброс клавиатуры и запуск внутреннего теста.

0FEh           Повторить последнюю передачу.

0FDh           Вызов прерывания IRQ1.

0F6h           Привести клавиатуру в исходное состояние и
               разрешить сканирование.

0f5h           Привести клавиатуру в исходное состояние и
               запретить сканирование.

0F4h           Сбросить буфер клавиатуры и начать сканирование.

0F3h           Задать задержку и скорость ввода символов.
               Первоначально клавиатура начинает повторять
               нажатую клавишу через 0,5 сек со скоростью
               10 повторов в секунду. Вы можете изменить эти
               параметры, послав следующий байт данных:

  7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│0 │     │              │ Биты:
└──┴──┼──┴──┴──┴┬─┴──┴──┘ ─────
      │         └────────> 0-4:количеств повторов в секунду
      └──────────────────> 5-6:начальная задержка в мсек:
                               00=250, 01=500, 10=750, 11=1000

               Количество повторов задается следующей таблицей:

               ┌──────┬────────┬──────┬────────┬──────┬────────┐
               │Конст.│Скорость│Конст.│Скорость│Конст.│Скорость│
               ├──────┼────────┼──────┼────────┼──────┼────────┤
               │ 00h  │ 30.0   │ 0Bh  │ 10.9   │ 16h  │ 4.3    │
               │ 01h  │ 26.7   │ 0Ch  │ 10.0   │ 17h  │ 4.0    │
               │ 02h  │ 24.0   │ 0Dh  │  9.2   │ 18h  │ 3.7    │
               │ 03h  │ 21.8   │ 0Eh  │  8.6   │ 19h  │ 3.3    │
               │ 04h  │ 20.0   │ 0Fh  │  8.0   │ 1Ah  │ 3.0    │
               │ 05h  │ 18.5   │ 10h  │  7.5   │ 1Bh  │ 2.7    │
               │ 06h  │ 17.1   │ 11h  │  6.7   │ 1Ch  │ 2.5    │
               │ 07h  │ 16.0   │ 12h  │  6.0   │ 1Dh  │ 2.3    │
               │ 08h  │ 15.0   │ 13h  │  5.5   │ 1Eh  │ 2.1    │
               │ 09h  │ 13.3   │ 14h  │  5.0   │ 1Fh  │ 2.0    │
               │ 0Ah  │ 12.0   │ 15h  │  4.6   │      │        │
               └──────┴────────┴──────┴────────┴──────┴────────┘

0EEh           Эхо  (для диагностики). Просто возвращает 0ЕЕh.
0EDh           Управление светодиодами клавиатуры. Для включения
               или выключения светодиодов пошлите такой байт
               данных:

  7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│X  X  X  X  X │  │  │  │ Биты:
└──┴──┴──┴──┴──┴┬─┴┬─┴┬─┘ ─────
                │  │  └──> 0: 1 = включить ScrollLock
                │  └─────> 1: 1 = включить NumLock
                └────────> 2: 1 = включить CaрsLock

0DFh           Разрешить 20-битовую адресацию.
0DDh           Запретить 20-битовую адресацию.
0D1h           Запись в порт вывода 8042.
0D0h           Чтение порта вывода 8042.
0C0h           Чтение порта ввода 8042.
0AEh           Разрешение клавиатуры.
0ADh           Запрещение клавиатуры.
0ACh           Чтение ОЗУ контроллера.
0ABh           Тест синхронизации и данных.
0AAh           Внутренний тест клавиатуры.
────────────────────────────────────────────────────────────────
@pb
@ce@e17. Дисплеи@e0

@e1@ce7.1. Общее описание@e0

     Программирование  дисплея  ПЭВМ  IBM  PC определяется типом
дисплейного  адаптера  и  типом  видеомонитора,  подключенного к
этому   адаптеру.   В   этой   главе   описаны  четыре  наиболее
распространенных видеоадаптера IBM PC, а именно:

     - монохромный графический адаптер MGA;
     - цветной графический адаптер CGA;
     - расширенный графический адаптер EGA;
     - графический видеомассив VGA.

     Центральным   устройством   в   управлении   видеомонитором
является  контроллер электронно-лучевой трубки (ЭЛТ).  В IBM  PC
применяются   программируемые    контроллеры   фирмы   Motorola,
позволяющие задать все  основные параметры развертки изображения
на экране. Для понимания дальнейшего материала необходимо ввести
ряд  часто  используемых  понятий.  Режим  работы  видеомонитора
характеризуется следующими понятиями:

     -  вертикальным  разрешением  (количество  строк  растра на
экране);
     - горизонтальным разрешением (количество символов или точек
в строке);
     - представлением данных в видеопамяти;
     - атрибутами вывода, задающими цвет, мерцание и т. п.

     Горизонтальное   и  вертикальное   разрешение  определяются
последовательностью    согласованных    во    времени   сигналов
графического адаптера,  управляющих движением луча  ЭЛТ. Луч ЭЛТ
движется  с постоянной  скоростью вдоль  строки растра  и вниз с
одной  строки  растра   на  следующую,  обновляя  (разворачивая)
изображение на экране. Для перевода луча из крайней правой точки
строки  в   крайнюю  левую  точку   следующей  строки  (обратный
горизонтальный   ход   луча)   видеоадаптер   генерирует  сигнал
горизонтальной  синхронизации; для  перемещения луча  из крайней
правой  позиции нижнeй  строки  экрана  в крайнюю  левую позицию
первой  строки   (вертикальный  обратный  ход   луча)  -  сигнал
вертикальной синхронизации.

     Видеоадаптеры   всегда  программируются   так,  чтобы  вывод
видеобуфера  на экране  проходил быстрее,  чем развертка  одного
кадра. Это дает возможность  вывести на экран бордюр (overscan),
окаймляющий  изображение  и   позволяющий  центрировать  его  на
экране.

     Длительность  сигналов  развертки  принято  задавать  в так
называемых символьных тактах  (character clock). Символьный такт
- это отрезок времени, необходимый для вывода на экран 8 точек в
графическом режиме и 8 или 9 точек в алфавитно-цифровых режимах.

     Параметры  развертки  заносятся   в  определенные  регистры
контроллера   ЭЛТ;   назначение   этих   регистров   различно  в
контроллерах MGA/CGA и EGA/VGA.

@e1@ce7.2. Контроллеры ЭЛТ@e0

     Адаптеры MGA  и CGA содержат контроллер  ЭЛТ Motorola 6845,
имеющий следующие программируемые регистры:

Регистр Наименование                  Описание
────────────────────────────────────────────────────────────────
  R0  Общая длительность         Время вывода строки растра в
      строки (horizontal total)  символьных тактах.
  R1  Ширина кадра               Количество символов в строке.
      (horizontal disрlayed)
  R2  Позиция горизонтальной     Начало горизонтальной
      синхронизации (horizontal  синхронизации в символьных
      sync рosition)             тактах.
  R3  Ширина синхронизации       Длительность синхронизации
      (sync width)               (младшая тетрада - вертикальной,
                                 старшая - горизонтальной).
  R4  Размер кадра               Общее количество строк
      (vertical total)           растра в кадре.
  R5  Вертикальное выравнивание  Поправка для частоты 50 или
      (vertical adjust)          60 Гц.
  R6  Высота кадра               Количество строк
      (vertical disрlayed)       изображения в кадре.
  R7  Позиция вертикальной       Начало вертикальной
      синхронизации (vertical    синхронизации в символьных
      sync рosition)             тактах.
  R8  Биты 4-5: режим расслоения
      (interlace mode);
      биты 6-7: сдвиг (skew)
  R9  Макс. число строк растра   Количество строк растра на
                                 строку символов.
  R10 Начало курсора             Начальная строка курсора.
  R11 Конец курсора              Конечная строка курсора.
  R12\Начальный адрес            Старший байт
  R13/видеопамяти                Младший байт
  R14\Позиция                    Старший байт
  R15/курсора                    Младший байт
  R16\Позиция                    Старший байт
  R17/светового пера             Младший байт
────────────────────────────────────────────────────────────────

     Aдаптеры   EGA  и   VGA  имеют   следующие  программируемые
регистры, эмулирующие контроллер ЭЛТ:

Регистр Наименование                  Описание
────────────────────────────────────────────────────────────────
  R0  Общая длительность         Время вывода строки растра в
      строки (horizontal total)  символьных тактах.
  R1  Ширина кадра (horizontal   Количество символов в строке
      disрlay enable end)        (см. R7).
  R2  Начало горизонтального     Символьная позиция, в которой
      гашения (start horizontal  начинается горизонтальное
      blank)                     гашение луча.
  R3  Конец горизонтального      Символьная позиция, в которой
      гашения (end horizontal    заканчивается горизонтальное
      blank)                     гашение луча (в битах 0-4);
                                 разрешение сдвига (биты 5-6).
  R4  Начало обратного хода луча Символьная позиция начала
      по горизонтали (start      горизонтальной синхронизации.
      horizontal retrace)
  R5  Конец обратного хода луча  Символьная позиция окончания
      по горизонтали (end        горизонтальной синхронизации.
      horizontal retrace)

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │     │              │ Биты:
└┬─┴──┼──┴──┴──┴┬─┴──┴──┘ ─────
 │    │         └──────>  0-4: ширина обратного хода луча
 │    │                        по горизонтали
 │    └────────────────>  5-6: задержка обратного хода в
 │                             символьных тактах
 └─────────────────────>  7: 1=начинать панорамирование с
                             четного адреса, 0=с нечетного

  R6  Размер кадра               Общее количество строк
      (vertical total)           растра в кадре (см. R7).
  R7  Регистр переполнения       Содержит старшие биты других
      (overflow)                 регистров:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
 │  │  │  │  │  │  │  └─> 0: 8-й бит размера кадра (R6)
 │  │  │  │  │  │  └────> 1: 8-й бит количества строк
 │  │  │  │  │  │            отображения в кадре (R18)
 │  │  │  │  │  └───────> 2: 8-й бит начала вертикальной
 │  │  │  │  │               синхронизации (R16)
 │  │  │  │  └──────────> 3: 8-й бит начала вертикального
 │  │  │  │                  гашения луча (R21)
 │  │  │  └─────────────> 4: 8-й бит сравнения строк (R24)
 │  │  └────────────────> 5: EGA: 8-й бит R10, VGA: 9-й бит R6
 │  └───────────────────> 6: 9-й бит R18 (только VGA)
 └──────────────────────> 7: 9-й бит R16 (только VGA)

  R8  Начало растра (рreset      Первая строка растра после
      row scan)                  вертикальной синхронизации.
  R9  Макс. число строк растра   Количество строк растра на
                                 строку символов (в битах 0-4);
                                 для VGA: бит 5=9-й бит R21.
  R10 Начало курсора             Начальная строка курсора.
  R11 Конец курсора              Конечная строка курсора (биты
                                 0-4); сдвиг курсора (биты 5-6).
  R12\Начальный адрес            Старший байт
  R13/видеопамяти                Младший байт
  R14\Позиция                    Старший байт
  R15/курсора                    Младший байт
      При чтении:
  R16\Позиция                    Старший байт
  R17/светового пера             Младший байт
      При записи:
  R16 Начало обратного хода луча Символьная позиция начала
      по вертикали (start        вертикальной синхронизации.
      vertical retrace)
  R17 Конец обратного хода луча  Символьная позиция окончания
      по вертикали (end          вертикальной синхронизации.
      vertical retrace)

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │0 │  │  │           │ Биты:
└┬─┴──┴┬─┴┬─┴──┴──┼──┴──┘ ─────
 │     │  │       └────>  0-3: ширина обратного хода луча
 │     │  │                    по вертикали
 │     │  └────────────>  4: 0=очистить прерывание вертикальной
 │     │                       синхронизации
 │     └───────────────>  5: 0=разрешить прерывание вертикаль-
 │                           ной синхронизации (IRQ2)
 └─────────────────────>  7: VGA: запрет записи в R0 - R7

  R18 Количество строк отобра-   Количество строк растра,
      жения в кадре (vertical    занятых собственно изобра-
      disрlayed end)             жением
  R19 Вертикальное смещение      Количество слов данных в
      (vertical disрlayed        логической строке видеопамяти.
      adjustment)
  R20 Позиция подчеркивания      Номер строки растра (биты 0-5).
  R21 Начало вертикального       Символьная позиция, в которой
      гашения (start vertical    начинается вертикальное
      blank)                     гашение луча.
  R22 Конец вертикального        Символьная позиция, в которой
      гашения (end vertical      заканчивается вертикальное
      blank)                     гашение луча.
@pb
  R23 Управление режимами:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
 │  │  │  │  │  │  │  └─> 0: 0=режим совместимости с CGA
 │  │  │  │  │  │  │         для адресации графики
 │  │  │  │  │  │  └────> 1: выбор счетчика сканирования
 │  │  │  │  │  │            строк
 │  │  │  │  │  └───────> 2: горизонтальная синхронизация:
 │  │  │  │  │               1=двойная, 0=обычная
 │  │  │  │  └──────────> 3: длительность синхронизации при
 │  │  │  │                  регенерации слов: 1=половинная,
 │  │  │  │                  0=обычная
 │  │  │  └─────────────> 4: 1=установить высокоимпедансный
 │  │  │                     выход, 0=разрешить управление
 │  │  │                     выходом
 │  │  └────────────────> 5: режим расслоения адресов для
 │  │                        совместимости с CGA: 0=для 64К
 │  │                        ОЗУ, 1=для ОЗУ более 64К
 │  └───────────────────> 6: режим адресации: 1=байтовая,
 │                           0=словная
 └──────────────────────> 7: 0=аппаратный сброс, 1=обычная
                             работа

  R24 Сравнение строк        Строка растра, используемая в
      (line comрare)         операциях расщепления экрана.
────────────────────────────────────────────────────────────────

     В заключение этого  раздела подчеркнем, что самостоятельное
программирование контроллера ЭЛТ  чревато физическим разрушением
видеомонитора, поэтому  не следует прибегать к  нему, если Вы не
вполне  понимаете  принципы  расчета  параметров  развертки. Все
необходимые    действия   по    инициализации   дисплея   обычно
выполняются  BIOS,  поэтому   необходимость  в  непосредственном
программировании контроллера ЭЛТ возникает крайне редко.
@pb
@e1@ce7.3. Атрибуты символов@e0

     В  текстовых  режимах  видеопамять   состоит  из  пар  (код
символа,   атрибут);  код   символа  определяет   символ  ASCII,
выводимый  в соответствующей  позиции экрана,  а атрибут  - цвет
этого  символа. Соответствие  цветов атрибутам  зависит от  типа
видеоадаптера.

     Байт атрибутов для CGA имеет следующую структуру:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│Bl│r  g  b │I │R  G  B │ Биты:
└┬─┴──┴┬─┴──┴┬─┴──┴┬─┴──┘ ─────
 │     │     │     └────> 0-2: цвет символа
 │     │     └──────────> 3: 1=яркий цвет символа
 │     └────────────────> 4-6: цвет фона
 └──────────────────────> 7: 1=мерцание символа

     Таким образом, цвет  фона может варьироваться от 0  до 7, а
цвет символа с  учетом яркости - от 0  до 0Fh. Значение атрибута
задается формулой:

     16  *  цвет  фона  +  цвет  символа  (плюс 128 для мерцания
символа)

     Цвета задаются следующим образом:

┌─────────────────────┬───────────────────┐
│Номер  Цвет          │Номер  Цвет        │
├─────────────────────┼───────────────────┤
│  0    Черный        │  8    Серый       │
│  1    Синий         │  9    Ярко-синий  │
│  2    Зеленый       │ 0Ah   Ярко-зеленый│
│  3    Бирюзовый     │ 0Bh   Голубой     │
│  4    Красный       │ 0Ch   Алый        │
│  5    Сиреневый     │ 0Dh   Розовый     │
│  6    Коричневый    │ 0Eh   Желтый      │
│  7    Светло-серый  │ 0Fh   Белый       │
└─────────────────────┴───────────────────┘

     Адаптеры  EGA   и  VGA  имеют  такую   же  структуру  байта
атрибутов,  но позволяют  переопределять цвета,  перечисленные в
таблице,  перепрограммированием регистров  палитр. Поэтому  байт
атрибутов  символа определяет  одну из  64 (EGA)  или 256  (VGA)
возможных комбинаций цветов.

     Монохромные  дисплеи допускают  любые значения  байта атри-
бутов, но реально отрабатывают только следующие его значения:

     01h       Подчеркнутый символ
     07h       Обычный вывод (светлый символ на темном фоне)
     09h       Яркий подчеркнутый символ
     0Fh       Ярко-светлый символ на темном фоне
     70h       Негатив (темный символ на светлом фоне)
     81h       Мерцающий подчеркнутый символ
     87h       Мерцающий светлый символ на темном фоне
     89h       Мерцающий яркий подчеркнутый символ
     8Fh       Мерцающий ярко-светлый символ на темном фоне

     Следует  учитывать, что  старший бит  байта атрибутов может
означать  либо мерцание  символа, либо  повышенную яркость  фона
(см. 7.4 - 7.6).
@pb
@e1@ce7.4. Монохромный графический адаптер MGA@e0

     Монохромный  графический адаптер  (MGA или  Hercules) - это
графический  видеоконтроллер высокого  разрешения, совмещенный с
платой  печатающего устройства.  Для него  зарезервированы порты
ввода-вывода 3B0h - 3BFh, имеющие следующее назначение.

 Порт  Операция   Описание
────────────────────────────────────────────────────────────────
 3B4h   Запись   Регистр индекса ЭЛТ. Используется для выбора
                 регистра ЭЛТ. Для записи регистра ЭЛТ Rn нужно
                 выполнить команды:
                 out 3B4h,n  и  out 3B5h,данные.

 3B5h   Запись/  Регистр данных ЭЛТ. Позволяет записывать все
        чтение   регистры ЭЛТ и читать регистры R12 - R17.

 3B8h   Запись   Регистр режимов дисплея:

 7  6 5  4 3  2 1  0
┌──┬─┬──┬─┬──┬─┬──┬─┐
│  │X│  │X│  │X│  │X│ Бит:
└┬─┴─┴┬─┴─┴┬─┴─┴┬─┴─┘ ────
 │    │    │    └────> 1: 0=текстовый режим, 1=графический режим
 │    │    └─────────> 3: 0=очистить экран, 1=активизировать
 │    │                   экран
 │    └──────────────> 5: 1=бит 7 атрибутов - мерцание
 │                        0=бит 7 атрибутов - яркость фона
 └───────────────────> 7: номер текущей видеостраницы

 3B9h   Запись/  Вывод любого байта включает триггер светового
        Чтение   пера.

 3BAh   Чтение   Регистр состояния дисплея:

 7  6 5 4 3  2 1  0
┌──┬─┬─┬─┬──┬─┬─┬──┐
│  │X│X│X│  │X│X│  │ Бит:
└┬─┴─┴─┴─┴┬─┴─┴─┴┬─┘ ────
 │        │      └───> 0: 0=вывод изображения, 1=горизонтальная
 │        │               синхронизация
 │        └──────────> 3: 0=экран включен, 1=выключен (позволяет
 │                        проверить поступление видеосигнала на
 │                        на экран)
 └───────────────────> 7: 0=вертикальная синхронизация,
                          1=дисплей активен

 3BBh   Запись/  Вывод любого байта выключает триггер светового
        Чтение   пера.

 3BCh-3BEh   См. описание портов параллельного принтера (п. 10).

 3BFh   Запись   Регистр конфигурации. Сюда заносится новая
                 конфигурация дисплея:
                 0 (DIAG) - работа только в текстовом режиме;
                 1 (HALF) - допустима работа только с
                            графической страницей 0;
                 3 (FULL) - доступны обе графические страницы.
────────────────────────────────────────────────────────────────

     Видеопамять MGA располагается в адресах ОЗУ B0000h - BFFFFh.
В текстовом  режиме  (25  строк  по  80  символов  в строке) она
занимает  4К с  B0000h по  B0FFFh. При  этом адрес  кода символа
равен B000h : 160*L+2*C, адрес атрибута на единицу больше. Здесь
L - номер строки (0 - 24), C - номер столбца (0 - 79).

     Графический режим имеет разрешение 720 точек по горизонтали
на  348  точек  по  вертикали,  поэтому  один  графический экран
требует  32К видеопамяти.  MGA имеет  две графические  страницы:
страница 0 размещается в адресах B0000h - B7FFFh, страница 1 - в
адресах B8000h  - BFFFFh. Смещение от  начала страницы до байта,
содержащего точку с координатами (X,Y), равно

     2000h * (Y % 4) + 90 * int(Y/4) + int(X/8),

а номер соответствующего  бита  в этом байте равен  7 - (X % 8).
Здесь X - горизонтальная позиция точки  (0 - 719), Y - ее верти-
кальная позиция (0 - 347).

     В качестве  примера приведем программу  инициализации MGA в
текстовом или графическом режиме.

     ; Таблицы значений регистров ЭЛТ для двух режимов
Graрh_Tbl db   35h,2Dh,2Eh,07h,5Bh,02h,57h,57h,02h,03h,00h,00h
Text_Tbl  db   61h,50h,52h,0Fh,19h,06h,19h,19h,02h,0Dh,0Bh,0Ch

     ; Установка графического режима:
Gr_Mode:
     mov  al,2
     lea  si,Graрh_Tbl
     mov  bx,0
     mov  cx,4000h
     call Set_Mode
       .  .  .

     ; Установка текстового режима:
Txt_Mode:
     mov  al,20h
     lea  si,Text_Tbl
     mov  bx,0720h
     mov  cx,2000h
     call Set_Mode
       .  .  .

     ; Подпрограмма инициализации MGA.
     ; Вход: AL - режим
     ;       SI - адрес таблицы регистров ЭЛТ
     ;       CX - размер экрана в словах
     ;       BX - значение для очистки экрана
Set_mode  рroc near
     рush ax        ; сохранить регистры
     рush bx
     рush cx
     mov  dx,3B8h   ; регистр режимов
     out  dx,al     ; изменить режим адаптера, отключив экран
     mov  ax,cs
     mov  ds,ax     ; DS:SI = адрес таблицы
     mov  dx,3B4h   ; регистр индекса
     mov  cx,12     ; 12 регистров ЭЛТ
     xor  ah,ah
     cld
Set_CRT:
     mov  al,ah
     out  dx,al     ; номер регистра ЭЛТ
     inc  dx
     lodsb
     out  dx,al     ; содержимое регистра ЭЛТ
     dec  dx
     looр Set_CRT
     рoр  cx
     mov  ax,0B000h
     mov  es,ax
     рoр  ax
     xor  di,di     ; ES:DI => видеопамять
     reр  stosw     ; очистка экрана
     mov  dx,3B8h   ; регистр режимов
     рoр  ax
     add  al,8
     out  dx,al     ; активизировать экран
     ret
Set_Mode  endр
@pb
@e1@ce7.5. Цветной графический адаптер CGA@e0

     Цветной графический адаптер (CGA  - Color Graрhics Adaрter)
- это графический видеоконтроллер  среднего разрешения. Для него
зарезервированы   порты  ввода-вывода   3D0h  -   3DFh,  имеющие
следующее назначение.

 Порт  Операция   Описание
────────────────────────────────────────────────────────────────
 3D4h   Запись   Регистр индекса ЭЛТ. Используется для выбора
                 регистра ЭЛТ. Для записи регистра ЭЛТ Rn нужно
                 выполнить команды:
                 out 3D4h,n  и  out 3D5h,данные.

 3D5h   Запись/  Регистр данных ЭЛТ. Позволяет записывать все
        чтение   регистры ЭЛТ и читать регистры R12 - R17.

 3D8h   Запись   Регистр режимов дисплея:

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│  │  │  │  │  │  │ Бит:
└─┴─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
     │  │  │  │  │  └──>0: кол-во столбцов в текстовых режимах:
     │  │  │  │  │          0=40 столбцов, 1=80 столбцов
     │  │  │  │  └─────>1: 0=текстовый режим, 1=графический режим
     │  │  │  └────────>2: 1=запрет цвета на композитном дисплее
     │  │  └───────────>3: 0=очистить экран, 1=активизировать
     │  │                  экран
     │  └──────────────>4: разрешение по горизонтали:
     │                     0=320 точек, 1=640 точек
     └─────────────────>5: 1=бит 7 атрибутов - мерцание
                           0=бит 7 атрибутов - яркость фона

 3D9h   Запись   Регистр выбора цветов:

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│  │  │I  R  G  B │ Биты:
└─┴─┴┬─┴┬─┴──┴──┼──┴──┘ ─────
     │  │       └──────>0-3: цвет (см. 7.3): для текста - цвет
     │  │                    рамки, для графики - цвет фона
     │  └──────────────>4: яркость: для текста - яркость фона,
     │                     для графики - яркость пикселей
     └─────────────────>5: номер графической палитры (0 или 1)

     Примечание:  Выбор палитры  задает набор  основных цветов в
графическом  режиме.  Палитра  0  -  зеленый/красный/коричневый,
палитра 1  - бирюзовый/сиреневый/светло-серый (т.  е. отличается
добавлением синего цвета).
@pb
 3DAh   Чтение   Регистр состояния дисплея:

 7  6 5 4 3  2 1  0
┌─┬─┬─┬─┬──┬──┬──┬──┐
│X│X│X│X│  │  │  │  │ Бит:
└─┴─┴─┴─┴┬─┴┬─┴┬─┴┬─┘ ────
         │  │  │  └───>0: 0=вывод изображения, 1=горизонтальная
         │  │  │          или вертикальная синхронизация
         │  │  └──────>1: 1=триггер светового пера сброшен
         │  └─────────>2: 1=защелка светового пера открыта
         └────────────>3: 0=экран включен, 1=выключен (позволяет
                          проверить поступление видеосигнала на
                          на экран - если этот бит установлен,
                          вывод на экран не вызывает "хлопьев")

 3DBh   Запись/  Вывод любого байта выключает триггер светового
        Чтение   пера.

 3DCh   Запись/  Вывод любого байта включает триггер светового
        Чтение   пера.
────────────────────────────────────────────────────────────────

     Видеопамять CGA располагается в адресах ОЗУ B8000h - BFFFFh.
CGA имеет два типа текстовых режимов:  25 строк по 40 символов в
строке  и  по  80  символов  в  строке.  В  режимах 25 х 40 одна
страница занимает 800h байтов,  поэтому видеопамять состоит из 8
страниц;  в режимах  25 х  80 страница  занимает 1000h  байтов и
видеопамять состоит из 4 страниц.

     Адрес  кода  символа  в  текстовых  режимах  равен  B800h :
n*P+m*L+2*C, адрес  атрибута на единицу больше.  Здесь L - номер
строки (0 - 24), C - номер столбца (0  - 79 или 0 - 39), m = 2 *
количество столбцов режима, n = 800h при m=80 и 1000h при m=160.

     CGA  имеет  два  типа  графических  режимов: цветной режим,
имеющий  разрешение 320  точек по  горизонтали на  200 точек  по
вертикали, и  черно-белый режим с  разрешением 640 точек  на 200
точек. В режиме  320 х 200 каждый пиксель задается двумя битами,
кодирующими его цвет;  в режиме 640 х 200  цвет пикселя задается
одним  битом (белый/черный).  В графических  режимах один  экран
требует   16К   видеопамяти,   поэтому   имеется  одна  страница
видеопамяти, которая размещается в  адресах B8000h - BFFFFh. Эта
страница  расслоена  на  две  области:  область  с адреса B8000h
содержит пиксели, имеющие четные  номера строк; область с адреса
BA000h содержит пиксели из  нечетных строк. Поэтому адрес байта,
содержащего точку с координатами (X,Y), равен в цветном режиме

     B800h : 2000h * (Y % 2) + 80 * int(Y/2) + int(X/4),

а номера соответствующих битов  в этом байте равны 7 -  2 * (X %
4) и 6 - 2 * (X %  4). Здесь X - горизонтальная позиция точки (0
- 319), Y - ее вертикальная позиция (0 - 199).

     Адрес байта, содержащего точку  с координатами (X,Y), равен
в черно-белом режиме

     B800h : 2000h * (Y % 2) + 80 * int(Y/2) + int(X/8),

а номер соответствующего  бита в этом байте  равен  7 - (X % 8).
Здесь  X  -  горизонтальная  позиция  точки  (0  -  639), Y - ее
вертикальная позиция (0 - 199).
@pb
@e1@ce7.6. Расширенный графический адаптер EGA@e0

     @e17.6.1. Описание контроллера@e0

     Расширенный  графический адаптер  (EGA -  Enhanced Graрhics
Adaрter) - это  графический видеоконтроллер высокого разрешения,
программно  совместимый  с  адаптерами  CGA  и  MGA,  но имеющий
гораздо большие  возможности. В IBM  PC для EGA  зарезервированы
следующие порты ввода-вывода:

     EGA #1 - порты 3C0h - 3DFh;
     EGA #2 - порты 2C0h - 2DFh.

     EGA может  генерировать прерывание IRQ2 (Int  0Ah) в начале
вертикальной  синхронизации.  Однако,  BIOS  не  использует  эту
возможность;  мы также  не описываем  ее, т.  к. вектор  Int 0Ah
используется в  PC AT как каскад  второго контроллера прерываний
(см. п. 3).

     Все регистры EGA можно разбить на четыре группы:

     3C0h           Контроллер атрибутов (ATC)
     3C2h           Многоцелевой регистр
     3C4h-3C5h      Блок синхронизации (sequencer)
     3CAh-3CFh      Графический контроллер (GDC)
     3D4h-3DCh или  Блок управления дисплеем
     3B4h-3BCh      (адреса портов зависят от видеорежима)

     Контроллер атрибутов (ATC)  имеет 20 регистров, управляющих
цветами вывода:

Регистр Наименование                  Описание
────────────────────────────────────────────────────────────────
R0-R15 Регистры палитры         Определяют цвета соответствующих
       (только для записи)      атрибутов:

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│r │g │b │R │G │B │ Бит:
└─┴─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
     │  │  │  │  │  └──> 0: Синий 2/3 яркости
     │  │  │  │  └─────> 1: Зеленый 2/3 яркости
     │  │  │  └────────> 2: Красный 2/3 яркости
     │  │  └───────────> 3: Синий 1/3 яркости
     │  │                   (подчеркивание для MGA)
     │  └──────────────> 4: Зеленый 1/3 яркости
     │                      (яркость для MGA)
     └─────────────────> 5: Красный 1/3 яркости
@pb
  R16  Управление режимами      Имеет следующую структуру:

 7 6 5 4 3  2  1  0
┌─┬─┬─┬─┬──┬──┬──┬──┐
│X│X│X│X│  │  │  │  │ Бит:
└─┴─┴─┴─┴┬─┴┬─┴┬─┴┬─┘ ────
         │  │  │  └──> 0: Режим: 0=текстовый, 1=графический
         │  │  └─────> 1: 1=атрибуты MGA, 0=атрибуты CGA
         │  └────────> 2: Задает 9-ю точку для псевдографики:
         │                1=9-я точка совпадает с 8-й точкой
         │                0=вывод 9-й точки цветом фона
         └───────────> 3: Бит 7 байта атрибутов задает:
                          1=мерцание символов, 0=яркость фона

  R17  Цвет рамки               Устроен так же, как регистры
                                палитры.
  R18  Управление цветовыми     Имеет следующую структуру:
       плоскостями

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│     │           │ Бит:
└─┴─┴──┼──┴──┴──┼──┴──┘ ────
       │        └───────>0-3: 1=разрешить цветовую плоскость
       │                         Ci, i = 0 - 3
       └────────────────>4-5: мультиплексирование видеосигналов:
                              00=R&B, 01=b&G, 10=r&g,
                              11=не используется

  R19  Горизонтальная прокрутка Задает сдвиг экрана влево в
                                точках (0 - 15).
────────────────────────────────────────────────────────────────

     Примечания.
     1.  Регистры  палитры  задают  соответствие между значением
атрибута и его цветом. Например,  засылка значения 02h в регистр
ATC определит  его как зеленый  цвет, 10h -  как бледно-зеленый,
12h - как ярко-зеленый.

     2. Для того, чтобы цвета атрибутов совпадали с цветами CGA,
регистры палитры должны иметь следующие значения:

   ┌────────────────────┬────────────────────┐
   │ Регистр   Значение │ Регистр   Значение │
   ├────────────────────┼────────────────────┤
   │   00h        00h   │   08h        38h   │
   │   01h        01h   │   09h        39h   │
   │   02h        02h   │   0Ah        3Ah   │
   │   03h        03h   │   0Bh        3Bh   │
   │   04h        04h   │   0Ch        3Ch   │
   │   05h        05h   │   0Dh        3Dh   │
   │   06h        14h   │   0Eh        3Eh   │
   │   07h        07h   │   0Fh        3Fh   │
   └────────────────────┴────────────────────┘

     Блок   синхронизации   обеспечивает   синхронизацию  вывода
символов   с   работой   знакогенератора.   Он  имеет  следующие
программируемые регистры.

Регистр Наименование                  Описание
────────────────────────────────────────────────────────────────
  R0    Перезапуск блока         Установка и сброс бита 0 вызы-
        синхронизации            вает асинхронный перезапуск
                                 блока, установка и сброс бита 1
                                 - синхронный перезапуск. Для
                                 нормальной работы оба бита
                                 должны быть установлены.
  R1    Режим синхронизации      Имеет следующую структуру:

 7 6 5 4 3  2  1  0
┌─┬─┬─┬─┬──┬──┬──┬──┐
│X│X│X│X│  │  │  │  │ Бит:
└─┴─┴─┴─┴┬─┴┬─┴┬─┴┬─┘ ────
         │  │  │  └──> 0: Высота символов: 1=8 точек, 0=9 точек
         │  │  └─────> 1: Полоса частот ЭЛТ: 1=низкая, 0=высокая
         │  └────────> 2: 0=сдвиг всех символов, 1=только четных
         └───────────> 3: Частота генератора пикселей:
                          1=половинная, 0=обычная

   R2   Маска битовых плоскостей Установка битов 0 - 3 разрешает
                                 запись в соответствующие
                                 битовые  плоскости.
   R3   Выбор карты символов     Биты 0-1 выбирают карту B, биты
                                 2-3 - карту A; карта A относит-
                                 ся к символам, у которых бит 3
                                 атрибутов установлен, карта B -
                                 к символам, чей бит 3 сброшен.
                                 Действительно только в случае,
                                 когда ОЗУ EGA больше 64К.
   R4   Режим видеопамяти        Имеет следующую структуру:

 7 6 5 4 3  2  1  0
┌─┬─┬─┬─┬─┬──┬──┬──┐
│X│X│X│X│X│  │  │  │ Бит:
└─┴─┴─┴─┴─┴┬─┴┬─┴┬─┘ ────
           │  │  └──> 0: 1=знакогенератор текста, 0=графика
           │  └─────> 1: Размер ОЗУ EGA: 0=64K, 1=более 64К
           └────────> 2: Способ хранения пикселей:
                         1=последовательный, 0=как в CGA
                         (расслоение четных и нечетных строк)
────────────────────────────────────────────────────────────────

     Графический контроллер  (GDC) управляет работой  адаптера в
графическом режиме и имеет следующие регистры:

Регистр Наименование                  Описание
────────────────────────────────────────────────────────────────
  R0    Установка/сброс          Установка битов 0 - 3 выбирает
        битовых плоскостей       соответствующую битовую плос-
                                 кость для режима записи 00.
  R1    Разрешение установки     Управляет доступом к R0.
        и сброса
  R2    Сравнение цветов         Биты 0 - 3 выбирают цвет для
                                 режима чтения 1.
  R3    Параметры записи         Имеет следующую структуру:

 7 6 5  4  3  2  1  0
┌─┬─┬─┬──┬──┬──┬──┬──┐
│X│X│X│     │        │ Биты:
└─┴─┴─┴──┼──┴──┴┬─┴──┘ ─────
         │      └────> 0-2: Счетчик циклических сдвигов влево
         │                  для режима записи 00
         └───────────> 3-4: Способ вывода в режимах записи 00 и
                            02: 00=без изменений, 01=И, 10=ИЛИ,
                            11=исключающее ИЛИ

  R4    Выбор карты чтения       Биты 0-2 задают номер плоскости
                                 для режима чтения 1.
  R5    Регистр режима           Имеет следующую структуру:

 7 6 5  4  3  2  1  0
┌─┬─┬──┬──┬──┬──┬──┬──┐
│X│X│  │  │  │  │     │ Биты:
└─┴─┴┬─┴┬─┴┬─┴┬─┴──┼──┘ ─────
     │  │  │  │    └──> 0-1: Режим записи 0 - 2 (см. ниже)
     │  │  │  └───────> 2: 1=высокоимпедансный выход (для диаг-
     │  │  │                ностики), 0=обычная работа
     │  │  └──────────> 3: Режим чтения 0 - 1 (см. ниже)
     │  └─────────────> 4: 1=использовать расслоение видеопамяти
     │                     (ср. регистр 4 блока синхронизации)
     └────────────────> 5: 1=использовать 2 бита на пиксель, как
                           в CGA (сдвиг нечетных битов в нечет-
                           ных картах); 0=сдвиг четных битов в
                           четных картах

  R6    Управление графикой      Имеет следующую структуру:

 7 6 5 4 3  2  1  0
┌─┬─┬─┬─┬──┬──┬──┬──┐
│X│X│X│X│     │     │ Биты:
└─┴─┴─┴─┴──┼──┴┬─┴┬─┘ ─────
           │   │  └──> 0: 1=графика, 0=знакогенератор
           │   └─────> 1: Ставить нечетные карты после четных
           └─────────> 2-3: Адрес и размер видеопамяти:
                            00=A0000h (128K), 01=A0000h (64K)
                            10=B0000h (32K),  11=B8000h (32K)

  R7    Маскирование цветов      Биты 0-3 исключают соответству-
                                 ющие битовые плоскости в режиме
                                 чтения 1.
  R8    Битовая маска            Биты 0-7 задают биты, маскируе-
                                 мые во всех битовых плоскостях.
────────────────────────────────────────────────────────────────

     Примечание. Режимы чтения и записи имеют следующий смысл.
     Режимы чтения:

     0 - использовать выбранную битовую плоскость;
     1 - сравнивать  цвет пикселя с цветом в  регистре R2 и воз-
вращать 1 при их совпадении.

     Режимы записи:

     00 - циклически сдвинуть  данные,  применить способ вывода,
записать в разрешенные плоскости;
     01 - вывести в каждую плоскость значение, полученное преды-
дущим чтением;
     10 - выводить в каждую  плоскость 8 бит значения соответст-
вующих битов 0-3 данных (быстрая закраска)
     11 - недопустим.

     @e17.6.2. Порты ввода-вывода@e0

     Порты ввода-вывода EGA имеют следующее назначение.

 Порт  Операция   Описание
────────────────────────────────────────────────────────────────
 3C0h   Запись   Регистр контроллера атрибутов. Для доступа к
                 регистрам ATC подайте команды:
                 in al,3C2h   ; перейти в адресный режим
                 out 3C0h,n   ; номер регистра ATC (режим данных)
                 out 3C0h,val ; новое значение регистра
                 Биты 0-4 в n - номер регистра, бит 5 задает:
                 1=разрешить вывод на экран, 0=установка
                 регистра ATC.

 3C2h    Запись   Многоцелевой управляющий регистр:

 7  6  5  4   3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │     │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴──┼──┴┬─┴┬─┘ ────
 │  │  │  │    │   │  └───> 0: Выбор портов дисплея:
 │  │  │  │    │   │           1=3BXh (MGA), 0=3DXh (CGA)
 │  │  │  │    │   └──────> 1: 0=разрешить доступ к ОЗУ
 │  │  │  │    │               1=запретить доступ к ОЗУ
 │  │  │  │    └──────────> 2-3: Частота генератора пикселей:
 │  │  │  │                      00=14 Мгц, 01=16 Мгц,
 │  │  │  │                      10=внешний источник, 11=резерв
 │  │  │  └───────────────> 4: 1=выбрать вывод признаков,
 │  │  │                       0=выбрать внутренний источник
 │  │  └──────────────────> 5: Бит страницы при расслоенной
 │  │                          адресации видеопамяти: 0=младшая
 │  │                          страница, 1=старшая страница
 │  └─────────────────────> 6: Полярность обратного хода луча
 │                             по горизонтали: 1=отрицательная
 └────────────────────────> 7: Полярность обратного хода луча
                               по вертикали: 1=отрицательная
@pb
        Чтение   Регистр состояния 0:

 7  6  5  4   3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │     │     │X │X │X │ Бит:
└┬─┴──┼──┴──┼──┴──┴──┴──┘ ────
 │    │     └─────────────> 3-4: Частота генератора пикселей
 │    │                          (см. выше)
 │    └───────────────────> 5-6: Ввод признаков
 └────────────────────────> 7: 0=обратный ход луча по
                               вертикали

 3C4h   Запись   Регистр адреса блока синхронизации.

 3C5h   Запись   Регистр данных блока синхронизации. Для прог-
                 раммирования регистра Rn блока нужно выполнить
                 команды:
                 out 3C4h,n  и  out 3C5h,данные

 3CAh   Запись   Графическая позиция 2 (для EGA должна быть 1).

 3CCh   Запись   Графическая позиция 1 (для EGA должна быть 0).

 3CEh   Запись   Регистр адреса графического контроллера.

 3CFh   Запись   Регистр данных графического контроллера. Для
                 программирования регистра Rn нужно выполнить
                 команды:
                 out 3CEh,n  и  out 3CFh,данные

 3D4h   Запись   Регистр индекса ЭЛТ. Используется для выбора
 или             регистра ЭЛТ. Для записи регистра ЭЛТ Rn нужно
 3B4h            выполнить команды:
                 out 3X4h,n  и  out 3X5h,данные.

 3D5h/  Запись/  Регистр данных ЭЛТ. Позволяет записывать и
 3B5h   чтение   читать все регистры ЭЛТ.

 3DAh/  Запись   Биты 0 - 1 управляют выходами признаков FC0 и
 3BAh            FC1 (контакты 19 и 17 соответственно).

        Чтение   Регистр состояния 1:

 7  6 5 4 3  2 1  0
┌─┬─┬─┬─┬──┬──┬──┬──┐
│X│X│X│X│  │  │  │  │ Бит:
└─┴─┴─┴─┴┬─┴┬─┴┬─┴┬─┘ ────
         │  │  │  └───>0: 0=вывод изображения, 1=горизонтальная
         │  │  │          или вертикальная синхронизация
         │  │  └──────>1: 1=триггер светового пера сброшен
         │  └─────────>2: 1=защелка светового пера открыта
         └────────────>3: 0=экран включен, 1=выключен (EGA не
                          требует проверки этого бита при
                          выводе - в любом случае "хлопьев" не
                          будет)

 3DBh/  Запись/  Вывод любого байта выключает триггер светового
 3BBh   Чтение   пера.

 3DCh/  Запись/  Вывод любого байта включает триггер светового
 3BCh   Чтение   пера.
────────────────────────────────────────────────────────────────

     @e17.6.3. Организация видеопамяти@e0

     EGA  работает либо  в режиме  совместимости с  CGA или MGA,
либо в одном из своих собственных графических видеорежимов:

     320 х 200, 16 цветов
     640 х 200, 16 цветов
     640 х 350, черно-белый
     640 х 350, 16 цветов

     В  этих  режимах  видеопамять   разбивается  на  4  битовые
плоскости, каждая из которых содержит образ экрана для одного из
основных   цветов:   красного,   зеленого,   синего  и  яркости.
Контроллер EGA считывает биты  всех четырех плоскостей, соответ-
ствующие данному пикселю, и формирует его результирующий цвет на
экране (комбинация из 4 двоичных цифр дает 16 вариантов цветов).

     Видеопамять EGA oтображается в  адреса ОЗУ A0000h - B0000h.
Размер памяти  EGA варьируется от  64К до 256К  в зависимости от
комплектации адаптера. Однако, даже если память EGA равна 256К,
она размещается в 16К адресного пространства оперативной памяти.
Это объясняется тем, что каждая битовая плоскость отображается в
одни и те же адреса ОЗУ; для выбора битовой плоскости, с которой
Вы  хотите  обмениваться  данными,  необходимо переустанавливать
соответствующие регистры графического контроллера.
В этом режиме одному  разряду  байта  соответствует  одна  точка.
Организация отображения  видеобуфера  на  экран следующая:

        адрес         A0000   A0001   A0002..
                     ┌─────────────────────
        разряд       │765432107654321076543... <= 1-я линия

     В  графическом  режиме  640  х  200  64К оперативной памяти
разбивается  на 4  страницы по  16К каждая.  Адреса этих страниц
равны соответственно  A0000h, A4000h, A8000h  и AC000h. Смещение
от начала страницы до  байта, содержащего пиксель с координатами
(X,Y), равен  80*Y + int(X/8),  а номер соответствующего  бита в
этом байте равен  7 - (X % 8). Здесь  X - горизонтальная позиция
точки (0 - 639), Y - ее вертикальная позиция (0 - 199).

     Графический  режим 320  х 200  предоставляет пользователю 8
страниц размером  по 8К. Смещение  от начала страницы  до байта,
содержащего пиксель с координатами (X,Y), равен 40*Y + int(X/8),
а номер соответствующего  бита в этом байте  равен 7 - (X  % 8).
Здесь  X  -  горизонтальная  позиция  точки  (0  -  639), Y - ее
вертикальная позиция (0 - 199).

     В  графических режимах  640 х  350 имеются  две страницы  с
адресами A0000h и A8000h  соответственно. В остальном этот режим
аналогичен предыдущим.

     @e17.6.3.1. Режим записи 0@e0

     Регистр битовой маски GDC (3CFh, R8) определяет разряды байта,
которые могут быть изменены в видеоОЗУ при записи. Установленный
бит  в  регистре  разрешения  установки/сброса  (3CFh, R1)  при
обращении к видеоОЗУ устанавливает или сбрасывает все 8 разрядов
в зависимости  от  состояния  соотвествующего  разряда  регистра
установки/сброса битовых плоскостей (3CFh, R0).

     Байт плоскости,  не выбранной маской,  останется неизменным
(на  рис.   -  плоскость,  заполненная   "u"),  если  установлен
соответствующий разряд регистра установки/сброса и не установлен
регистр маски плоскости.

      Взаимодействие регистров графического контроллера в
                           режиме 0

               Плоскости   3    2    1    0
               видеоОЗУ   ───  ───  ───  ───
                         ───  ───  ───  ───      A000:0002
                        ┌─┐  ┌─┐  ┌─┐  ┌─┐      A000:0001
                        │ │  │ │  │ │  │ │     A000:0000
                        │ │  │ │  │ │  │ │          Адреса
                        └┬┘  └┬┘  └┬┘  └┬┘          видео-
                         │    │    │    │           ОЗУ
                 ┌─┐    ┌┴┐  ┌┴┐  ┌┴┐  ┌┴┐
              :  │0│7   │ │  │ │  │ │  │ │   : останутся
              :  │0│    │ │  │ │  │ │  │ │   : неизменными
                 │1│    │0│  │u│  │1│  │1│        /  10111101B
Регистр          │1│    │0│  │u│  │1│  │1│       <      данные
битовой          │1│    │0│  │u│  │1│  │1│ <      \ процессора
маски ---------> │1│    │0│  │u│  │1│  │1│ <
3CFh, R8         │1│    │0│  │u│  │0│  │0│ <
                 │1│0   │0│  │u│  │1│  │1│ < регистры-защелки
                 └─┘    └┬┘  └┬┘  └┬┘  └┬┘
                         │    │    │    │   u-останется
                                              неизменным

      00000000B-----> +                 + +<--10111101B
                     / / / /         \ \ \ \
3CFh, R1           ┌─────────┐     ┌─────────┐  3C5h, R2
Регистр разрешения │ 1 0 0 0 │     │ 0 0 1 1 │  Регистр
установки/сброса   └─┬─┬─┬─┬─┘     └─────────┘  маски цвета
                     │ │ │ │
                   ┌─┴─┴─┴─┴─┐
3CFh, R0  Регистр  │ 0 1 1 0 │
установки/сброса   └─────────┘
битовых плоскостей

     Важно отметить,  что обмен с  видеопамятью происходит через
регистры-защелки и  требует независимо от  производимой операции
выполнять и чтение и запись.


     @e17.6.3.2. Режим записи 2@e0

     Альтернативный  режим  установки   цвета  точки  безусловно
окрашивает выбранные разрядной маской точки видеоОЗУ, при записи
по выбранному адресу не байта данных, а 4-х разрядов атрибута.

        Взаимодействие регистров графического контроллера в
                           режиме 2

              Плоскость   3    2    1    0
              видеоОЗУ   ───  ───  ───  ───
                        ───  ───  ───  ───      A000:0002
                       ┌─┐  ┌─┐  ┌─┐  ┌─┐      A000:0001
                       │ │  │ │  │ │  │ │     A000:0000
                       │ │  │ │  │ │  │ │
                       └┬┘  └┬┘  └┬┘  └┬┘          Адреса
                        │    │    │    │            видео-
                 ┌─┐   ┌┴┐  ┌┴┐  ┌┴┐  ┌┴┐           ОЗУ
               : │0│   │ │  │ │  │ │  │ │ :
               : │0│   │ │  │ │  │ │  │ │ : <- останутся
               : │0│   │ │  │ │  │ │  │ │ :    неизменными
               : │0│   │ │  │ │  │ │  │ │ :    <= 1101B данные
                 │1│   │1│  │1│  │0│  │1│    <
Регистр        : │0│   │ │  │ │  │ │  │ │ :  <
разрядной      : │0│   │ │  │ │  │ │  │ │ :  <
маски ───────> : │0│   │ │  │ │  │ │  │ │ :  < регистры-защелки
                 └─┘   └┬┘  └┬┘  └┬┘  └┬┘
                        │    │    │    │
                     ┌──┴────┴────┴────┴──┐
                     │  1    1    1    1  │  Регистр маски
                     └────────────────────┘  цвета


     @e17.6.3.3. Режимы чтения атрибутов точки@e0

     Возможны  2 режима  чтения атрибутов  точки видеобуфера.  В
режиме чтения 0 последовательно  могут быть прочитаны абсолютные
значения разрядов каждой плоскости  видеобуфера. В режиме чтения
1, как  правило, выполняется логическое  чтение атрибутов точки,
т.  е. проверяется  факт  совпадения  атрибута читаемой  точки с
установленным значением  регистра цветового сравнения.  В случае
совпадения   в   соответствующем   разряде   байта   при  чтении
возвращается единица. Дополнительно может использоваться регистр
игнорирования  цвета при  сравнении, обеспечивающий  функцию ИЛИ
при этой логической операции.

     @e17.6.4. Примеры прогаммирования

     В  качестве  примера  приведем  три  подпрограммы  работы с
дисплеем EGA в режиме 640 х  200. Если Вы хотите использовать их
в других   режимах,  достаточно   поменять  значение   константы
PageSize на соответствующее значение.

PageSize equ   4000h     ; размер страницы для режима 640 х 200

;╔═══════════════════════════════════════════╗
;║ Подпрограмма очистки экрана.              ║
;║ Вход: CX = номер очищаемой страницы (0-3) ║
;╚═══════════════════════════════════════════╝

EGA_Cls   рroc near
     рush ax
     рush bx
     рush cx
     рush dx
     рush es
     рush di
     xor  ax,ax     ; вычисляем смещение до страницы
     mov  bx,PageSize
     jcxz Page_0
High_Page:
     add  ax,bx
     looр High_Page
Page_0:
     mov  di,ax     ; DI = адрес страницы в видеопамяти
     mov  ax,0A000h
     mov  es,ax     ; ES:DI = полный адрес страницы
     mov  ax,0FF08h
     mov  dx,3CEh   ; графический контроллер
     out  dx,ax     ; установить все битовые маски
     mov  ax,0FF02h
     mov  dx,3C4h   ; блок синхронизации
     out  dx,ax     ; разрешить запись во все плоскости
     mov  ax,3
     mov  dx,3CEh   ; графический контроллер
     out  dx,ax     ; задать нормальный режим работы
     mov  cx,PageSize
     xor  al,al
     reр  stosb     ; обнулить страницу
     рoр  di
     рoр  es
     рoр  dx
     рoр  cx
     рoр  bx
     рoр  ax
     ret
EGA_Cls   endр

;╔═══════════════════════════════════════════╗
;║ Подпрограмма вывода пикселя на экран.     ║
;║ Вход: AX = цвет пикселя                   ║
;║   BX = номер страницы                     ║
;║   CX = номер столбца (X)                  ║
;║   DX = номер строки  (Y)                  ║
;╚═══════════════════════════════════════════╝

Put_Pixel рroc near
     рush ax
     рush bx
     рush cx
     рush dx
     рush es

     рush ax
     рush cx
     рush dx
     mov  ax,dx
     mov  cx,80
     mul  cx    ; AX = 80 * Y
     рoр  dx
     рoр  cx
     рush cx
     shr  cx,1
     shr  cx,1
     shr  cx,1  ; CX = X / 8
     add  ax,cx ; AX = 80 * Y + X / 8
     mov  cx,bx ; номер страницы
     mov  bx,PageSize
     jcxz Page_Done
Next_Page:
     add  ax,bx ; учтем смещение до страницы
     looр Next_Page
Page_Done:
     рoр  cx
     mov  bx,ax ; BX = адрес байта, содержащего пиксель
     mov  ax,0A000h
     mov  es,ax ; ES:BX = полный адрес байта
     and  cl,7  ; CL = X % 7
     mov  ah,80h
     shr  ah,cl ; AH = позиция пикселя в байте
     mov  dx,3CEh
     mov  al,8
     out  dx,ax ; разрешить запись только в этот бит
     рoр  ax
     mov  ch,al ; цвет пикселя
     mov  dx,3C4h
     mov  ax,0FF02h
     out  dx,ax ; разрешить запись во все плоскости
     mov  al,es:[bx] ; читаем байт
     xor  al,al
     mov  es:[bx],al ; обнуляем пиксель
     mov  al,2
     mov  ah,ch     ; цвет
     and  ah,0Fh    ; приведем к диапазону 0-15
     out  dx,ax     ; разрешить запись в соотв. плоскости
     mov  al,es:[bx] ; читаем байт
     mov  al,0FFh
     mov  es:[bx],al ; устанавливаем пиксель
     mov  ax,0FF02h
     out  dx,ax     ; разрешить запись во все плоскости
     mov  ax,3
     mov  dx,3CEh   ; графический контроллер
     out  dx,ax     ; задать нормальный режим работы
     mov  ax,0FF08h
     out  dx,ax     ; включить все биты
     рoр  es
     рoр  dx
     рoр  cx
     рoр  bx
     рoр  ax
     ret
Put_Pixel endр

;╔═══════════════════════════════════════════╗
;║ Подпрограмма чтения цвета пикселя.        ║
;║ Вход: CX = номер столбца (X)              ║
;║   DX = номер строки  (Y)                  ║
;║ Выход:AX = цвет пикселя                   ║
;╚═══════════════════════════════════════════╝

Get_Pixel рroc near
     рush ax
     рush bx
     рush cx
     рush dx
     рush es
     рush dx
     mov  ax,205h
     mov  dx,3CEh
     out  dx,ax     ; режимы: записи=01, чтения=0
     рoр  dx
     рush cx
     рush dx
     mov  ax,dx
     mov  cx,80
     mul  cx   ; AX = 80 * Y
     рoр  dx
     рoр  cx
     рush cx
     shr  cx,1
     shr  cx,1
     shr  cx,1      ; CX = X / 8
     add  ax,cx     ; AX = 80 * Y + X / 8
     mov  cx,bx     ; номер страницы
     mov  bx,PageSize
     jcxz My_Page
Higher_Page:
     add  ax,bx     ; учтем смещение до страницы
     looр Higher_Page
My_Page:
     mov  di,ax     ; DI = адрес байта, содержащего пиксель
     mov  ax,0A000h
     mov  es,ax     ; ES:DI = полный адрес байта
     рoр  cx
     and  cl,7      ; CL = X % 7
     mov  ch,80h
     shr  ch,cl     ; CH = позиция пикселя в байте
     mov  bl,7
     sub  bl,cl
     mov  cl,bl     ; CL = номер бита в байте
     xor  bl,bl     ; накопитель цвета
     mov  ah,3      ; счетчик битовых плоскостей
     mov  al,4      ; R4 = регистр выбора плоскости
     mov  dx,3CEh   ; графический контроллер
Read_Plane:
     out  dx,ax     ; выбираем плоскость AH
     mov  bh,es:[di] ; читать байт
     and  bh,ch     ; выбрать бит
     shr  bh,cl     ; сдвинуть цвет в бит 0
     shl  bl,1      ; сдвинуть выбранные цвета
     or   bl,bh     ; и добавить считанный
     dec  ah        ; следующая плоскость
     jge  Read_Plane ; повторить для всех плоскостей
     mov  al,bl
     xor  ah,ah     ; AX = цвет пикселя
     рoр  es
     рoр  dx
     рoр  cx
     рoр  bx
     рoр  ax
     ret
Get_Pixel endр
@pb
@e1@ce7.7. Графический видеомассив VGA@e0

     Адаптер VGA (Video Graрhics Array) представляет собой даль-
нейшее  развитие  EGA.  В  основном  он  полностью  совместим  с
адаптером EGA, поэтому мы приведем только его основные отличия.

     1.  Если  EGA-дисплеи  имеют  цифровой  вход,  то VGA - это
дисплей  с  аналоговым  входом.  Поэтому  при формировании цвета
пикселя из  битовых плоскостей цвет  слагается из трех  основных
цветов (красного,  зеленого и синего),  интенсивность каждого из
которых  может  плавно  варьироваться  от  нуля до максимального
значения.

     2. VGA  имеет большее разрешение, чем  EGA, и предоставляет
пользователю три дополнительных режима:

     640 x 480, 2 цвета
     640 x 480, 16 цветов
     320 x 200, 256 цветов

     В  режимах  640  х  480  имеется  одна графическая страница
размером  153600  байт.  В  режиме  320  х  200  с  256  цветами
используется  несколько иной  метод формирования  цвета пикселя,
чем в других режимах; за счет этого видеопамять разбивается на 4
страницы  размером  по  16К.   Этот  режим  возможен  только  на
аналоговых дисплеях или дисплеях с переменной частотой.

     3.  Частота генератора  пикселей VGA  принимает значения 25
или 28 Мгц (в отличие от 14 и 16 Мгц у EGA).

     4.  VGA имеет  дополнительный порт  ввода 3CCh, позволяющий
считать  содержимое многоцелевого  регистра (см.  описание порта
3C2h в п. 7.6.2). Графические  позиции 3CAh  и 3CCh, имеющиеся в
EGA, у VGA отсутствуют.
@pb
@ce@e18. Контроллер накопителей на гибких дисках@e0

@e1@ce8.1. Основные сведения о контроллере@e0

     Управление    гибкими    дисками    в    PC-подобных   ПЭВМ
осуществляется   микросхемой  8272А   фирмы  Intel,  выполняющей
функции контроллера гибких дисков (Floррy Disk Controller, FDC).
Информация на  дискете хранится на дорожках,  дорожки разбиты на
сектора. В зависимости от типа  дисковода число дорожек на одной
стороне дискеты  может быть равно  40 или 80,  число секторов на
дорожке колеблется от 8 до  26. Кроме того существуют дисководы,
имеющие  одну  головку  чтения/записи  (при  этом вторая сторона
дискеты не  используется). Контроллер управляет  дисководами для
дискет  диаметром 8,  5.25 и  3.5 дюйма,  поддерживает запись на
дискету методами ЧМ и  МЧМ, программируемую длину секторов (128,
256,  512 или  1024 байта),  мультисекторные и  мультидорожечные
операции  обмена  с  дисками,  операции  поиска.  Одновременно к
одному контроллеру  может быть подключено  до четырех дисководов
любого   из   поддерживаемых   типов.   Обмен   с  диском  может
осуществляться  как  с  использованием  ПДП,  так  и без него. В
последнем   случае  используются   2  метода:   опрос  состояния
контроллера   через   регистры   или   использование  аппаратных
прерывания  контроллера.  FDC  генерирует  аппаратные прерывания
уровня 6 (IRQ6), связанные с вектором прерываний 0Eh. Управление
контроллером  и   накопителями  осуществляется  через   3  порта
ввода-вывода.
@pb
@e1@ce8.2. Порты контроллера накопителей на гибких дисках@e0

     Материалы данного и следующего разделов полностью описывают
возможности контроллера 8272А,  система команд которого является
базовой   для   всех   более   поздних  моделей.  Дополнительные
возможности контроллера 82072 не  описаны, т. к. этот контроллер
полностью  поддерживает   описываемую  систему  команд,   а  его
неописанные  функции практически  не используются  в стандартных
средствах.

     Назначение  портов ввода-вывода  контроллера гибких  дисков
приведено в таблице.

┌──────┬────────┬──────────────────────────────────────────────┐
│ Порт │ Режим  │              Назначение                      │
├──────┼────────┼──────────────────────────────────────────────┤
│      │        │                                              │
│ 3F2h │ запись │  Передача команд по управлению режимом работы│
│      │        │  контроллера и накопителей                   │
│      │        │                                              │
│ 3F4h │ чтение │  Чтение регистра состояния контроллера       │
│      │        │                                              │
│ 3F5h │ запись │  Передача команд по управлению накопителями  │
│      │        │                                              │
│ 3F5h │ чтение │  Чтение данных с диска в режиме работы       │
│      │        │  без ПДП                                     │
│      │        │                                              │
│ 3F5h │ запись │  Запись данных на диск в режиме работы       │
│      │        │  без ПДП                                     │
│      │        │                                              │
│ 3F5h │ чтение │  Чтение  результатов выполнения команды во   │
│      │        │  всех режимах                                │
└──────┴────────┴──────────────────────────────────────────────┘

       Порт 3F2h.

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│               │   │   │       │ Биты:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
  │   │   │   │   │   │   └───┴─> 0-1: выбор накопителя:
  │   │   │   │   │   │                00-первый
  │   │   │   │   │   │                01-второй
  │   │   │   │   │   │                10-третий
  │   │   │   │   │   │                11-четвертый
  │   │   │   │   │   └─────────> 2: 0=сброс контроллера,
  │   │   │   │   │                  1=разблокировать контроллер
  │   │   │   │   └─────────────> 3: 1=разрешить работу с ПДП и
  │   │   │   │                      прерывания контроллера
  └───┴───┴───┴─────────────────> 4-7: включить мотор:
                                       0001 - первый накопитель
                                       0010 - второй
                                       0100 - третий
                                       1000 - четвертый

     На  АТ-подобных ПЭВМ  обычно допускается  не 4,  а только 2
накопителя,  вследствии чего  комбинации, использующие  третий и
четвертый накопители, игнорируются. Бит  2, равный 0, прекращает
выполнение текущей команды в момент  вывода в порт. Если команда
не завершилась, ее выполнение  прерывается. Если не были считаны
результаты выполнения команды, они пропадают. Если не закончился
ввод команды, он  пропадает и должен быть начат  заново. В любом
случае продолжение работы возможно  только после установки этого
бита обратно в 1.

     Порт 3F4h.
     Через  этот порт  осуществляется чтение  регистра основного
состояния FDC.

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Биты:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
  │   │   │   │   └───┴───┴───┴─> 0-3: накопитель занят в режиме
  │   │   │   │                        поиска:
  │   │   │   │                       0001-первый, 0010-второй
  │   │   │   │                       0100-третий, 1000-четвертый
  │   │   │   └─────────────────> 4: 0=контроллер свободен,
  │   │   │                          1=контроллер занят выполне-
  │   │   │                            нием команды чтения или
  │   │   │                            записи
  │   │   └─────────────────────> 5: режим работы контроллера:
  │   │                              0=с использованием ПДП,
  │   │                              1=без ПДП
  │   └─────────────────────────> 6: направление обмена:
  │                                  0=процессор --> контроллер
  │                                  1=контроллер --> процессор
  └─────────────────────────────> 7: готовность к обмену:
                                     0=не готов, 1=готов

     Бит 7,  равный 1, говорит  о том, что  контроллер при вводе
команды  готов к  приему  очередного  байта команды,  при обмене
данными  в режиме  без  ПДП  готов к  приему/передаче очередного
байта данных,  при приеме результата выполнения  команды готов к
передаче очередного байта результата.
@pb
@e1@ce8.3. Команды управления накопителями@e0

     Выполнение каждой команды имеет 3 фазы:

     -фаза ввода команды;
     -фаза выполнения;
     -фаза результата.

     В  фазе  ввода  команды  контроллер  побайтно  принимает  и
накапливает команду. Фаза  команды заканчивается запуском мотора
на  соответствующем  накопителе  (это  не  относится  к командам
задания режимов и чтения состояния).

     В фазе выполнения осуществляется  обмен данными между ОЗУ и
накопителем (если команда предполагает  такой обмен). В режиме с
использованием   ПДП   перед   приемом/передачей   байта  данных
генерируется сигнал "запрос на  ПДП". Контроллер ПДП отвечает на
него сигналом подтверждения и командой приема/передачи. В режиме
работы без  ПДП при готовности  к приему/передаче каждого  байта
генерируется  прерывание. Если  прерывания запрещены,  программа
может  в  цикле  проверять  регистр  состояния  (порт  3F4h)  до
получения подтверждения готовности контроллера к обмену данными.

     По  окончании выполнения  команды генерируется  прерывание,
означающее начало фазы результата.  В фазе результата контроллер
передает  результаты  выполнения  команды.  Все байты результата
должны   быть   считаны,   либо   необходимо   выполнить   сброс
контроллера, иначе  следующая команда не  будет принята. Не  все
команды имеют фазу результата, ряд команд выполняется в 2 фазы.

     @e18.3.1. Перечень команд контроллера НГМД@e0

     Ниже  приводится   подробное  описание  команд   FDC.  Фаза
выполнения  помечена знаками  "*   *   *".  Смысл  символических
обозначений элементов  команд приведен после  описания команд. В
битовых масках биты нумеруются  справа налево. В фазе результата
все  байты  результата  приведены  в  той  последовательности, в
которой они возвращаются контроллером.

┌───────────┬────────────────────────────────────┬─────────────┐
│  Команда  │         Регистр данных             │  Назначение │
├───────────┼────────────────────────────────────┼─────────────┤
│ 1. Чтение │   MT  MF  SK  0   0   1   1   0    │ Ввод данных │
│ данных    │   X   X   X   X   X   HD  US1 US0  │ из поля дан-│
│           │                 C                  │ ных сектора │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                DTL                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 2. Чтение │   MT  MF  SK  0   1   1   0   0    │ Ввод данных │
│ удаленных │   X   X   X   X   X   HD  US1 US0  │ из поля дан-│
│ данных    │                 C                  │ ных, поме-  │
│           │                 H                  │ ченного как │
│           │                 R                  │ удаленное   │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                DTL                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 3. Запись │   MT  MF  0   0   0   1   0   1    │ Вывод данных│
│ данных    │   X   X   X   X   X   HD  US1 US0  │ в поле дан- │
│           │                 C                  │ ных сектора │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                DTL                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 4. Запись │   MT  MF  0   0   1   0   0   1    │ Запись ад-  │
│ удаленных │   X   X   X   X   X   HD  US1 US0  │ ресного мар-│
│ данных    │                 C                  │ кера удален-│
│           │                 H                  │ ных данных и│
│           │                 R                  │ занесение   │
│           │                 N                  │ символа-за- │
│           │                EOT                 │ полнителя в │
│           │                GPL                 │ поле данных │
│           │                DTL                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 5. Чтение │   0   MF  SK  0   0   0   1   0    │ Чтение полей│
│ дорожки   │   X   X   X   X   X   HD  US1 US0  │ данных сек- │
│           │                 C                  │ торов всей  │
│           │                 H                  │ дорожки     │
│           │                 R                  │             │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                DTL                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │

При выполнении данной  команды игнорируются параметры "начальный
номер  сектора" и  " номер  последнего сектора",  так как чтение
начинается  с  первого  встреченного  после  индекса  сектора  и
передается  столько  секторов,   сколько  было  запрошено.  Если
запрошенное   число  секторов   (длина  принимаемой  информации)
больше, чем имеется секторов  на дорожке, передача повторяется с
начала первого сектора дорожки.

├───────────┼────────────────────────────────────┼─────────────┤
│ 6. Чтение │   0   MF  0   0   1   0   1   0    │ Чтение пер- │
│ идентифи- │   X   X   X   X   X   HD  US1 US0  │ вого встре- │
│ катора    │           *     *     *            │ ченного     │
│ сектора   │                ST0                 │ идентифика- │
│           │                ST1                 │ тора сектора│
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 7. Форма- │   0   MF  0   0   1   1   0   1    │ Запись на   │
│ тирование │   X   X   X   X   X   HD  US1 US0  │ дорожку фор-│
│ дорожки   │                 N                  │ матирующей  │
│           │                 SC                 │ информации  │
│           │                GPL                 │             │
│           │                 D                  │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │

Перед    выполнением     команды    форматирования    необходимо
спозиционировать головку на требуемую дорожку. Данные для записи
в идентификатор  адреса  сектора  (цилиндр,  головка,  дорожка и
размер сектора)  принимаются от ПДП  или через порт  данных и не
проверяются.  Физический размер  сектора определяется параметром
"N" - код  длины сектора, задаваемым в команде  и одинаковым для
всей  дорожки. Таким  образом нельзя  иметь на  на одной дорожке
сектора разной длины. Команда не заносит в маркер данных признак
"удаленные  данные", а  заполняет поле  данных секторов  дорожки
байтом-заполнителем.

├───────────┼────────────────────────────────────┼─────────────┤
│ 8.Сканиро-│   MT  MF  SK  1   0   0   0   1    │ Сканирова-  │
│ вание до  │   X   X   X   X   X   HD  US1 US0  │ ние данных  │
│ "равно"   │                 C                  │ на указан-  │
│           │                 H                  │ ное условие │
│           │                 R                  │ и формирова-│
│           │                 N                  │ ние запроса │
│           │                EOT                 │ на прерыва- │
│           │                GPL                 │ ние при вы- │
│           │                STP                 │ полнении    │
│           │           *     *     *            │ условия     │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│ 9.Сканиро-│   MT  MF  SK  1   1   0   0   1    │ аналогично  │
│ вание до  │   X   X   X   X   X   HD  US1 US0  │ предыдущей  │
│ "больше   │                 C                  │ команде     │
│ или равно"│                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                STP                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│10.Сканиро-│   MT  MF  SK  1   1   1   0   1    │ аналогично  │
│ вание до  │   X   X   X   X   X   HD  US1 US0  │ предыдущей  │
│ "меньше   │                 C                  │ команде     │
│ или равно"│                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
│           │                EOT                 │             │
│           │                GPL                 │             │
│           │                STP                 │             │
│           │           *     *     *            │             │
│           │                ST0                 │             │
│           │                ST1                 │             │
│           │                ST2                 │             │
│           │                 C                  │             │
│           │                 H                  │             │
│           │                 R                  │             │
│           │                 N                  │             │
├───────────┼────────────────────────────────────┼─────────────┤
│11. Река-  │   0   0   0   0   0   1   1   1    │ Перемещение │
│ либровать │   Х   Х   Х   Х   Х   0   US1 US0  │ головки на  │
│           │           *     *     *            │ нулевую     │
│           │                                    │ дорожку     │
├───────────┼────────────────────────────────────┼─────────────┤
│12. Опреде-│   0   0   0   0   0   0   1   1    │ Задание     │
│    ление  │   <--- SRT --->   <--- HUT --->    │ режима      │
│           │   <--------- HLT --------->   ND   │ работы      │
│           │                                    │ дисковода   │
├───────────┼────────────────────────────────────┼─────────────┤
│13.Поиск   │   0   0   0   0   1   1   1   1    │ Позициониро-│
│           │   Х   Х   Х   Х   Х   HD  US1 US0  │ вание голов-│
│           │                NCN                 │ ки на задан-│
│           │           *     *     *            │ ную дорожку │
├───────────┼────────────────────────────────────┼─────────────┤
│14.Чтение  │   0   0   0   0   1   0   0   0    │ Чтение байта│
│ состояния │           *     *     *            │ состояния   │
│ прерывания│                ST0                 │ ST0 после   │
│           │                PCN                 │ прерываний, │
│           │                                    │ вызванных   │
│           │                                    │ изменением  │
│           │                                    │ готовности  │
│           │                                    │ дисковода   │
│           │                                    │ и операцией │
│           │                                    │ поиска      │
├───────────┼────────────────────────────────────┼─────────────┤
│15.Чтение  │   0   0   0   0   0   1   0   0    │ Чтение байта│
│ состояния │   Х   Х   Х   Х   Х   HD  US1 US0  │ состояния   │
│   НГМД    │           *     *     *            │ ST3         │
│           │                ST3                 │             │
│           │                                    │             │
├───────────┼────────────────────────────────────┼─────────────┤
│16. Несуще-│   < ошибочный код команды FDC>     │ При ошибоч- │
│ ствующая  │           *     *     *            │ ной команде │
│ команда   │                ST0                 │ возвращается│
│           │                                    │ ST0=80h     │
│           │                                    │             │
└───────────┴────────────────────────────────────┴─────────────┘

     Смысловое значение элементов команд:

     МТ=1 - многодорожечная (двусторонняя операция);

     MF=1  -  МЧМ-кодирование   (двойная  плотность)  -  пропуск
синхроимпульсов  у единичных  битов и  пропуск синхроимпульсов у
нулевых битов, стоящих после единичных;

     SK=1 - пропуск адресного маркера удаленных данных;

     HD - номер головки (0 или 1);

     US1, US0 - номер накопителя (0 - 3);

     С - номер цилиндра;

     Н - номер головки;

     R - номер сектора;

     N - код длины сектора (0 - 128,  1 - 256, 2 - 512, 3 - 1024
байтов);

     EOT - номер последнего сектора на цилиндре;

     GPL - длина межзонного промежутка  (обычно 2Ah при обмене и
50h при форматировании);

     DTL  - число  считываемых/записываемых байт  (действительно
при N = 0);

     ST0 - ST3 - байты состояния ST0-ST3;

     STP - межсекторное смещение;

     SRT - время скорости шага в миллисекундах (обычно 0Dh);

     HUT -  время разгрузки головки в  единицах по 16 миллисекунд
(обычно = 0Fh);

     HLT -  время загрузки головки  в единицах по  2 миллисекунды
(обычно = 1);

     ND=0 - режим работы с использованием ПДП, =1 - режим работы
без использования ПДП;

     NCN - номер цилиндра после поиска;

     PCN - номер текущего цилиндра;

     SC - количество секторов на цилиндре;

     D - символ-заполнитель для разметки (обычно 0F6h).
@pb
     @e18.3.2. Структура байтов состояния@e0

     Байт состояния ST0:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Биты:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
  │   │   │   │   │   │   └───┴─> 0-1: номер накопителя (0 - 3)
  │   │   │   │   │   └─────────> 2: номер головки
  │   │   │   │   └─────────────> 3: НГМД не готов при обмене
  │   │   │   └─────────────────> 4: Сигнал "ошибка" НГМД или
  │   │   │                       дорожка 0 не найдена после 77
  │   │   │                       шагов рекалибровки
  │   │   └─────────────────────> 5: команда поиска завершена
  └───┴─────────────────────────> 6: код прерывания:
                                  00-нормальное завершение команды
                                  01-ненормальное завершение
                                  10-недействительная команда
                                  11-в фазе выполнения измени-
                                     лась готовность дисковода

     Бит  2  (номер  головки)  после  выполнения  команды поиска
всегда   равен  0,   независимо  от   того,  на   какой  головке
осуществлялся поиск.

     Бит  3 будет  всегда равен   1, если  на дисководе  с одной
головкой вы попробуете обратиться  к стороне 1 (допустима только
сторона 0).

     Байт состояния ST1:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │ 0 │   │   │ 0 │   │   │   │ Бит:
└─┬─┴───┴─┬─┴─┬─┴───┴─┬─┴─┬─┴─┬─┘ ────
  │       │   │       │   │   └─> 0: 1=не найден маркер иденти-
  │       │   │       │   │          фикатора сектора
  │       │   │       │   └─────> 1: 1=дискета защищена от
  │       │   │       │            записи
  │       │   │       └─────────> 2: 1=искомый сектор не найден
  │       │   └─────────────────> 4: 1=таймаут запросов на
  │       │                          передачу данных
  │       └─────────────────────> 5: 1=ошибка CRC в поле иденти-
  │                               фикации или в поле данных
  └─────────────────────────────> 7: 1=конец цилиндра (попытка
                                  обращения к сектору после
                                  обращения к последнему сектору
                                  последнего цилиндра)
@pb
     Байт состояния ST2:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│ 0 │   │   │   │   │   │   │   │ Бит:
└───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ───
      │   │   │   │   │   │   └─> 0: 1=не найден маркер данных
      │   │   │   │   │   │          или удаленных данных
      │   │   │   │   │   └─────> 1: 1=сбойный цилиндр
      │   │   │   │   └─────────> 2: 1=сканирование выполнено
      │   │   │   │                  неудовлетворительно
      │   │   │   └─────────────> 3: 1=при сканировании выполне-
      │   │   │                      но условие "равно"
      │   │   └─────────────────> 4: 1=неверный номер цилиндра в
      │   │                          идентификаторе сектора
      │   └─────────────────────> 5: 1=ошибка CRC в поле данных
      └─────────────────────────> 6: 1=в идентификаторе сектора
                                     обнаружен адресный маркер
                                     удаленных данных

     Байт ST3:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Бит:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ────
  │   │   │   │   │   │   └───┴─> 0-1: номер накопителя
  │   │   │   │   │   └─────────> 2: номер головки
  │   │   │   │   └─────────────> 3: 1=сигнал "двусторонний"
  │   │   │   │                   от НГМД
  │   │   │   └─────────────────> 4: 1=сигнал "Дорожка 0" от
  │   │   │                       НГМД
  │   │   └─────────────────────> 5: 1=сигнал "Готовность" от
  │   │                           НГМД
  │   └─────────────────────────> 6:1=сигнал "Защита от записи"
  │                               от НГМД
  └─────────────────────────────> 7: 1=сигнал "Ошибка" от НГМД
@pb
@e1@ce8.4. Формат дорожки@e0

     Индикатором  начала  дорожки  служит  индексное  отверстие.
Запись  на  дорожку  осуществляется  в  несколько  приемов.  При
форматировании дорожка перезаписывается полностью. При операциях
записи перезаписываются  отдельные сектора, что  влечет за собой
сбой  намагниченности  диска  в   месте  обрыва  записи,  причем
физическая  длина сектора  при  его  перезаписи не  всегда точно
совпадает  с  длиной  ранее  имевшегося  на  этом месте сектора,
разница  в  длине  может  составлять  до  4  -  5  бит  даже при
перезаписи на  одном дисководе в  одно время. Для  синхронизации
после сбоев на дорожке имеются зазоры и синхрозоны. В общем виде
формат дорожки можно изобразить следующим образом:

┌────────────────────────────┐
│                            │   Определяется индексным
│          Индекс            │   отверстием
│                            │
├────────────────────────────┤
│                            │
│       Зазор индекса        │   80 байт 4Eh
│                            │
├────────────────────────────┤
│                            │  12 байтов 00h, 3 байта 0C2h,
│     Заголовок дорожки      │  1 байт 0FCh, 50 байтов 4Eh
│                            │
├────────────────────────────┤
│                            │
│        1-й сектор          │  574 байта
│                            │
├────────────────────────────┤
│                            │
│  Межсекторный промежуток   │  80 байт 4Eh
│                            │
├────────────────────────────┤

  8 или 9 секторов на дорожке

├────────────────────────────┤
│                            │
│     Последний сектор       │  574 байта
│                            │
├────────────────────────────┤
│                            │
│  Межсекторный промежуток   │   80 байт 4Eh
│                            │
├────────────────────────────┤
│                            │
│       Зазор дорожки        │   байты 4Eh до индексного
│                            │   отверстия
├────────────────────────────┤
│                            │
│          Индекс            │
│                            │
└────────────────────────────┘

        Формат сектора:

┌────────────────────────────┐
│                            │
│   Идентификатор сектора    │   22 байта
│                            │
├────────────────────────────┤
│                            │
│    Зазор идентификатора    │   22 байта 4Eh
│                            │
├────────────────────────────┤
│                            │
│        Блок  данных        │   530 байт
│                            │
└────────────────────────────┘

        Идентификатор сектора:

┌────────────────────────────┐
│                            │ 12 байтов 00, 3 байта 0A1h
│   Маркер идентификатора    │ 1 байт 0FEh
│                            │
├────────────────────────────┤
│                            │ 6 байтов: цилиндр, головка,
│Идентификатор адреса сектора│ дорожка, код длины сектора
│                            │ и 2 байта контрольной суммы
└────────────────────────────┘

        Блок данных:

┌────────────────────────────┐
│                            │ 12 байтов 00, 3 байта 0A1h,
│      Маркер данных         │ 1 байт 0FXh (Х=8 - удаленные
│                            │ данные, 0Bh - действительные
├────────────────────────────┤ данные)
│                            │
│       Поле данных          │ 512 байт
│                            │
├────────────────────────────┤
│                            │
│   Контрольная сумма поля   │ 2 байта
│          данных            │
└────────────────────────────┘
@pb
@e1@ce8.5. Отличия контроллера для АТ-подобных ПЭВМ@e0

     Архитектура  АТ-подобных  ПЭВМ  отличается  от  ХТ тем, что
контроллер гибких дисков находится на одной плате с контроллером
жестких   дисков.   К   дополнительным   возможностям  относится
возможность регулирования скорости  обмена данными и возможность
подключения  двух  контроллеров  к  одному  ПЭВМ  (в этом случае
вместо  портов  3F2h  -  3F7h  используются  порты 372h - 377h).
Функции   контроллера   гибких   дисков   на   АТ-подобных  ПЭВМ
выполняются  микросхемой 82072  фирмы Intel  (советских аналогов
нет).  Дополнительно к  описанным выше  портам имеется  еще один
порт  3F7h,  позволяющий  осуществить  доступ  к регистру выбора
скорости обмена данными (Data Rate Select Register, DSR).

     Порт 3F7h.

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Биты:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
  │   │   │   │   │   │   └───┴─> 0-1: выбор скорости обмена
  │   │   │   └───┴───┴─────────> 2-4: выбор времени
  │   │   │                            предкомпенсации
  │   │   └─────────────────────> 5: 1=разрешить внешний
  │   │                            фильтр данных
  │   └─────────────────────────> 6: 1=отключить питание
  │                                  дисковода
  └─────────────────────────────> 7: 1=программный сброс
                                     контроллера

     Возможные скорости обмена данными  в зависимости от битов 0
- 1 DSR приведены в таблице.

┌───────────────────┬──────────────────────────┐
│       Биты        │         Скорость         │
├─────────┬─────────┼─────────────┬────────────┤
│    1    │    0    │     МЧМ     │    ЧМ      │
├─────────┼─────────┼─────────────┼────────────┤
│    1    │    1    │  1 Мбит/сек │ Невозможно │
│    0    │    0    │ 500 Кбит/сек│250 Кбит/сек│
│    0    │    1    │ 300 Кбит/сек│150 Кбит/сек│
│    1    │    0    │ 250 Кбит/сек│125 Кбит/сек│
└─────────┴─────────┴─────────────┴────────────┘

     В  зависимости от  значений битов   2, 3  и 4  DSR возможны
следующие значения времени предкомпенсации:
@pb
┌────────────────────────┬─────────────────────┐
│         Биты           │       Время         │
│     4     3     2      │   предкомпенсации   │
├────────────────────────┼─────────────────────┤
│     1     1     1      │  Недопустимая       │
│                        │      комбинация     │
│     0     0     1      │     41.67 нс        │
│                        │                     │
│     0     1     0      │     83.34 нс        │
│                        │                     │
│     0     1     1      │     125.00 нс       │
│                        │                     │
│     1     0     0      │     166.00 нс       │
│                        │                     │
│     1     0     1      │     208.33 нс       │
│                        │                     │
│     1     1     0      │     250.00 нс       │
│                        │                     │
│     0     0     0      │  Взять значение     │
│                        │   по умолчанию      │
└────────────────────────┴─────────────────────┘

     Значения   по  умолчанию   для  времени   предкомпенсации  в
зависимости от скорости приведены в таблице.

┌────────────────────────┬─────────────────────┐
│       Скорость         │       Время         │
│        обмена          │   предкомпенсации   │
├────────────────────────┼─────────────────────┤
│    1 Мбит/сек          │     41.67 нс        │
│   500 Кбит/сек         │    125.00 нс        │
│   300 Кбит/сек         │    125.00 нс        │
│   250 Кбит/сек         │    125.00 нс        │
└────────────────────────┴─────────────────────┘

     Кроме  пятнадцати описанных  выше команд  контроллера 8272,
82072 поддерживает еще 4 команды:

     - изменить параметры конфигурации;
     - включение/выключение мотора;
     - относительный поиск;
     - вернуть состояние регистров контроллера.

     Описание команд приведено в таблице.
@pb
┌───────────────┬──────────────────────────────┬───────────────┐
│   Команда     │      Шина данных             │  Назначение   │
├───────────────┼──────────────────────────────┼───────────────┤
│ 1. Изменить   │ 0   0   0   1   0   0   1   1│  Команда изме-│
│ параметры     │HDSA <- MOFF->   <--- MON --->│ няет указанные│
│ конфигурации  │ 0  EIS  EF POLL <- FIFOTHR ->│ параметры     │
│               │ <--------- PRETRK ---------->│               │
│               │         *     *     *        │               │
├───────────────┼──────────────────────────────┼───────────────┤
│ 2.Включение/  │ ON/OFF US1 US0  0  1  0  1  1│  Включает/    │
│ выключение    │                              │ выключает мо- │
│ мотора        │                              │ тор на задан- │
│               │                              │ ном дисководе │
├───────────────┼──────────────────────────────┼───────────────┤
│ 3. Относитель-│ 1  DIR  0   0   1   1   1   1│  Осуществляет-│
│ ный поиск     │ 0   0   0   0   0  HD US1 US0│ ся сдвиг голо-│
│               │ <----------- RCN ----------->│ вок в заданном│
│               │         *     *     *        │ направлении на│
│               │                              │ заданное число│
│               │                              │ цилиндров     │
├───────────────┼──────────────────────────────┼───────────────┤
│ 4. Вернуть    │ 0   0   0   0   1   1   1   0│  Возвращает   │
│ состояние     │         *     *     *        │  состояние    │
│ регистров     │ <---- PCN-устр-ва 0 -------->│  внутренних   │
│               │ <---- PCN-устр-ва 1 -------->│  регистров    │
│               │ <---- PCN-устр-ва 2 -------->│  контроллера  │
│               │ <---- PCN-устр-ва 3 -------->│               │
│               │ <--- SRT --->   <--- HUT --->│               │
│               │ <--------- HLT --------->  ND│               │
│               │ <--------- SC/EOT ---------->│               │
│               │HDSA <- MOFF ->  <--- MON --->│               │
│               │ <--------- PRETRK ---------->│               │
│               │ 0 EIS EF POLL   <- FIFOTHR ->│               │
│               │                              │               │
└───────────────┴──────────────────────────────┴───────────────┘

     В таблице приняты следующие сокращения:

     US1, US0 - номер устройства;

     DIR - направление изменения (0-увеличение, 1-уменьшение);

     HD - номер головки чтения/записи;

     RCN - относительный номер цилиндра;

     PCN - текущий номер цилиндра;

     SRT - время скорости шага;

     HUT -время разгрузки головки;

     HLT - время загрузки головки;

     ND - режим без ПДП;

     SC/EOT - число секторов на дорожке/номер последнего сектора
на дорожке;

     ON/OFF - включение/выключение мотора (0/1);

     MON - задержка перед включением мотора;

     MOFF - задержка перед выключением мотора;

     EIS   =   1   -   разрешить   автоматический   поиск  перед
чтением/записью данных, по умолчанию = 0;

     EF = 1 - переводит контроллер в режим имитации 8272А;

     POLL = 1 - запрещает обращение к устройствам;

     HDSA  =  1  -   позволяет  изменять  временные  задержки  в
зависимости от скорости вращения дисковода;

     PRETRK - номер дорожки для предкомпенсации (обычно = 0).
@pb
@ce@e19. Контроллер накопителей на жестких дисках@e0

     В   данном  разделе   описывается  управление  контроллером
накопителей  на  жестких   магнитных  дисках  типа  "винчестер".
Материалы   раздела   подобраны   в   основном   из  технической
документации и программного обеспечения для жестких дисков фирмы
Seagate,  однако  данных  о  том,  что  существуют  значительные
отличия  в управлении  дисками, выпускаемыми  другими фирмами, в
настоящий  момент  не  имеется.  В  связи  с тем, что управление
жесткими   дисками  в   ХТ  и   АТ-подобных  ПЭВМ  принципиально
отличается,  описание ХТ  и АТ  контроллеров приведены  отдельно
друг от друга.

     Часть   информации,  полученная   из  анализа  программного
обеспечения,   возможно  является   неполной.  Такая  информация
помечена  звездочкой (*)  в  конкретной  строке изложения  или в
заголовке раздела.
@pb
@e1@ce9.1. Контроллер жестких дисков для ХТ-подобных ПЭВМ@e0

     Архитектура ХТ-подобных ПЭВМ допускает подключение к одному
контроллеру  до  двух  накопителей.  Обмен  с  жесткими  дисками
производится  с использованием  третьего канала  ПДП. Контроллер
генерирует  аппаратные  прерывания  5-го  уровня  (IRQ5), вектор
прерывания 0Dh. Работа с  диском осуществляется с использованием
отдельного  ПЗУ,  содержащего  процедуры  управления диском, что
является  характерной  особенностью  ХТ-подобных  ПЭВМ. Обычно в
качестве сегментного адреса ПЗУ используется 0C800h, но возможны
и другие значения  (0CA00h, 0D000h или 0D800h  для дисков ST-251
или   ST-225   фирмы   Seagate).   Имеется   16  адресов  портов
ввода-вывода,  предназначенных  для  управления  контроллером  и
накопителями (320h-32Fh),  однако реально используются  только 4
из них, например 320h-323h,  324h-327h, 328h-32Bh или 32Ch-32Fh.
Назначение портов (1-й,  2-й, 3-й и 4-й в  каждой группе) одно и
то же, поэтому далее будут описаны только порты 320h-323h.

     @e19.1.1. Порты ввода-вывода@e0

     Назначение  портов контроллера  жестких дисков  приведено в
таблице.

┌──────┬────────┬──────────────────────────────────────────────┐
│ Порт │ Режим  │          Назначение                          │
├──────┼────────┼──────────────────────────────────────────────┤
│ 320h │ запись │ Передача команд по управлению накопителями   │
│      │        │                                              │
│ 320h │ чтение │ Чтение параметров состояния после ошибок,    │
│      │        │ возникших в процессе выполнения последней    │
│      │        │ команды                                      │
│      │        │                                              │
│ 321h │ запись │ Сброс контроллера                            │
│      │        │                                              │
│ 321h │ чтение │ Чтение состояния контроллера                 │
│      │        │                                              │
│ 322h │ запись │ Разблокировка (выбор) контроллера            │
│      │        │                                              │
│ 322h │ чтение │ Чтение типа накопителя                       │
│      │        │                                              │
│ 323h │ запись │ Установка режима работы контроллера          │
│      │        │                                              │
└──────┴────────┴──────────────────────────────────────────────┘

     Порт 320h.
     Через этот порт контроллер  принимает команды по управлению
накопителями.  Команда  содержит  до  шести  байтов  информации,
первый из  которых определяет класс  и код команды,  а остальные
содержат  требуемые   для  выполнения  команды   параметры.  При
возникновении ошибки в процессе  выполнения команды (бит 1 порта
321h)  следует ввести  в порт  320h команду  "запрос состояния",
после  чего  прочитать  из  него  4  байта  состояния, первый из
которых определяет код ошибки.
@pb
     Порт 321h.
     Запись   нулевого  байта   в  этот   порт  вызывает   сброс
контроллера. При чтении состояния контроллера возможны следующие
значения битов:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│ X │ X │   │ X │   │   │   │   │ Биты:
└───┴───┴─┬─┴───┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
          │       │   ├───────┼──> 2,3:   11=готовность к приему
          │       │   │   │   │              очередного байта
          │       │   │   │   │              команды
          │       │   │   │   │           01=команда принята
          │       │   │   │   │              полностью
          │       └───┴───────┴──> 0,2,3:111=готовность к приему
          │               │                  новой команды
          │               └──────> 1: 1=ошибка
          └──────────────────────> 5: номер накопителя (0-1)

     Бит 2, равный  1, вместе с битом 0,  равным 1, указывает на
то, что контроллер готов к приему очередного байта команды. Если
в ходе  передачи  команды  бит  2  =  0,  а  бит  0  = 1, значит
контроллер считает,  что он принял  команду полностью и  не ждет
ввода новых байтов команды.

     Бит  3,  равный  1,  вместе  с  битами  0  и  1, равными 1,
указывает   на   готовность   очередного   байта  состояния  при
выполнении команды "запрос состояния". Если установлены в 1 биты
0,  2 и  3 -  это означает,  что контроллер  свободен и  готов к
приему первого байта новой команды.

     Порт 322h.
     Вывод   произвольного  байта   в  этот   порт  разблокирует
контроллер.   Операция  разблокирования   (выбора,  активизации)
контроллера  (enable controller)  должна выполняться  каждый раз
перед началом вывода через порт 320h новой команды.

     При чтении из порта 322h может быть прочитан байт 0FFh, что
не несет никакой информации,  либо тип накопителя (применительно
к данной версии ПЗУ).

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Биты:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ─────
  │   │   │   │   │   │   │   │
  │   │   └───┴───────────┴───┴──> 0,1,4,5: 1111=один накопитель
  │   │           │   │            большой емкости, иначе - тип
  │   │           │   │            второго накопителя
  └───┴───────────┴───┴──────────> 2,3,6,7: тип первого накопителя

     Если тип второго накопителя (биты 5,  4, 1 и 0) равен 1111,
это  означает,  что  к  контроллеру  подключен  один  накопитель
большой  емкости (более  32 Мбайт),  который при  форматировании
следует разбивать  на несколько логических  дисков (говорят, что
установлен  ключ разбиения  (Sрlit switch)).  Стандартное ПЗУ XT
фирмы   Seagate  может   работать  со   следующими  15-ю  типами
накопителей (номера  0 - 14),  приведенными в таблице.  Типом 15
(неопределенный  тип)  отмечаются  все  накопители,  отличные по
параметрам от описанных.

┌───┬─────────────────────────────────┬────┬───┬───┬───┬────┐
│Тип│Фирма изготовитель и модель диска│ C  │ H │ R │ B │ V  │
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 0 │ Seagate ST-225                  │615 │ 4 │ 17│ 0 │21.4│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 1 │ Seagate ST-4038                 │733 │ 5 │ 17│ 2 │31.9│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 2 │ Miniscribe-3425                 │615 │ 4 │ 17│ 0 │21.4│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 3 │ Seagate ST-212                  │306 │ 4 │ 17│ 0 │10.6│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 4 │ Priam V-150                     │987 │ 5 │ 17│ 0 │42.9│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 5 │ Priam V-170                     │987 │ 7 │ 17│ 0 │60.1│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 6 │ Miniscribe-8425,Kyocera 20A/20B │615 │ 4 │ 17│ 0 │21.4│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 7 │ Seagate ST-138                  │615 │ 6 │ 17│ 0 │32.1│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 8 │ Seagate ST-4051                 │977 │ 5 │ 17│ 2 │42.5│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 9 │ Seagate ST-251/ST-251-1         │820 │ 6 │ 17│ 0 │42.8│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 10│ HH-725                          │612 │ 4 │ 17│ 0 │21.3│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 11│ Seagate ST-4053,                │1024│ 5 │ 17│ 0 │44.5│
│   │ Miniscribe-3053/6053            │    │   │   │   │    │
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 12│ Maxtor-1085, Newbury Data-1085  │1024│ 8 │ 17│ 0 │71.3│
│   │ Miniscribe-6085                 │    │   │   │   │    │
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 13│ Seagate ST-4096                 │1024│ 9 │ 17│ 0 │80.2│
├───┼─────────────────────────────────┼────┼───┼───┼───┼────┤
│ 14│ Maxtor-1140,Newbury Data-1140   │396 │ 15│ 17│ 0 │51.7│
└───┴─────────────────────────────────┴────┴───┴───┴───┴────┘

 Здесь
     C-число цилиндров (десятичное);
     H-число головок (десятичное);
     R-число секторов на дорожке (десятичное);
     B-стандартный управляющий байт (шестнадцатиричный);
     V-емкость диска (Мбайт).
@pb
     Порт 323h.

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│    не используются    │   │   │ Бит:
└───┴───┴───┴───┴───┴───┴─┬─┴─┬─┘ ────
                          │   └───> 0: 1=разрешить работу с ПДП
                          │            0=не использовать ПДП
                          └───────> 1: 1=разрешить аппаратные
                                    прерывания от контроллера
                                    (IRQ5)

     Установка  режима   работы  производится  обычно   до  раз-
блокировки контроллера перед началом вывода команды.

     @e19.1.2. Общий формат команды и терминология@e0

     Команда  контроллера может  состоять из  1 -  6 байт. Общий
формат команды приведен на рисунке.

┌───────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
│ \ биты│     │     │     │     │     │     │     │     │
│   \   │  7  │  6  │  5  │  4  │  3  │  2  │  1  │  0  │
│байты\ │     │     │     │     │     │     │     │     │
├───────┼─────┴─────┴─────┼─────┴─────┴─────┴─────┴─────┤
│   0   │  Класс команды  │       Код операции          │
├───────┼─────┬─────┬─────┼─────────────────────────────┤
│   1   │  0  │  0  │  У  │     Номер головки           │
├───────┼─────┴─────┼─────┴─────────────────────────────┤
│       │ Цилиндр   │                                   │
│   2   │ (старшие  │         Номер сектора             │
│       │ биты)     │                                   │
├───────┼───────────┴───────────────────────────────────┤
│   3   │         Цилиндр ( младшие биты )              │
├───────┼───────────────────────────────────────────────┤
│   4   │  Фактор чередования или число секторов        │
│       │          (зависит от команды)                 │
├───────┼───────────────────────────────────────────────┤
│   5   │           Управляющий байт                    │
└───────┴───────────────────────────────────────────────┘

     Здесь и далее:

     -  класс  команды  и  код  операции  определяют код команды
контроллера;

     - У - номер устройства (0/1);

     - номер сектора - номер начального сектора для обмена;

     -  фактор  чередования  (Interleave  Factor)  задает после-
довательность  чередования  секторов   на  дорожке  (см.  формат
дорожки);

     - управляющий байт:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │ X   X   X │   │   │   │ Биты:
└─┬─┴─┬─┴───┴───┴───┴─┬─┴─┬─┴─┬─┘ ─────
  │   │               └───┴───┴─> 0-2: период импульсов сигнала
  │   │                                "шаг"
  │   └─────────────────────────> 6: 1=запретить повторное счи-
  │                                  тывание при ошибке контр.
  │                                  суммы
  └─────────────────────────────> 7: 1=запретить повторный доступ
                                     к диску при ошибке.

     Бит 7,  равный 1, разрешает  только одну попытку  доступа к
диску при  выполнении команды (иначе  разрешены 4 попытки),  при
тестировании  накопителя  должен  быть  равен  1, при нормальной
работе должен быть равен 0.

     Бит  6, равный  1, запрещает  повторное считывание секторов
при  появлении  ошибки  контрольной  суммы  после первой попытки
считывания,  если   бит  6  равен  0   -  разрешается  повторное
считывание и, если повторное считывание успешно - признак ошибки
не устанавливается, обычно равен 0.

     Биты  0 -  2 определяют  тип накопителя  и выбирают периоды
импульсов сигнала "шаг":

     значение  100 --> 200 микросекунд;
               101 -->  70 микросекунд;
               110 и 111 --> 3 миллисекунды;

     Остальные   варианты   указывают   на   неопределенный  тип
накопителя и предполагают период в 3 миллисекунды.

     При  описании  команд  использованы  следующие сокращения и
обозначения:

     0 или 1 - конкретные значения битов;
     Х - бит не используется;
     У - номер устройства (0/1);
     П  -   использовать  бит  повторных   попыток  обращения  к
накопителю (бит 7 управляющего байта);
     ПС  -   использовать  бит  повторного   считывания  (бит  6
управляющего байта);
     Ш  -  использовать  биты  задания  периодичности  импульсов
сигнала "шаг";
     ЦСБ - старшие 2 бита номера цилиндра;
     ЦМБ - младшие 8 бит номера цилиндра;
     НГ - номер головки (5 бит);
     НС - номер начального сектора (6 бит);
     ФЧ - фактор чередования (5 бит);
     ЧС - число секторов (8 бит).
@pb
      @e19.1.3. Описание команд@e0

--> Проверка готовности накопителя (класс 0, опкод 0).

     Команда  выбирает  заданный   накопитель  и  проверяет  его
готовность.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   0   0   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У   Х   Х   Х   Х   Х │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Рекалибровать (класс 0, опкод 1).

     Команда  устанавливает головки  чтения/записи на  выбранном
накопителе на нулевой цилиндр.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   0   0   1 │
        ├───────────────────────────────┤
      1 │ 0   0   У   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      2 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Запрос состояния (класс 0, опкод 3).

     Команда  подается непосредственно  после обнаружения ошибки
(бит  1 порта  321h). Команда   имеет длину  2 байта  и вызывает
передачу  контроллером четырех  байтов результата,  определяющих
параметры возникшей ошибки.

     Формат команды:

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
     0  │ 0   0   0   0   0   0   1   1 │
        ├───────────────────────────────┤
     1  │ 0   0   У   Х   Х   Х   Х   Х │
        └───┴───┴───┴───┴───┴───┴───┴───┘
@pb
        Формат результата:

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
     0  │         байт  состояния       │
        ├───────────────────────────────┤
     1  │ 0   0   У   <------ НГ ------>│
        ├───────────────────────────────┤
     2  │  ЦСБ    <-------- НС -------->│
        ├───────────────────────────────┤
     3  │<------------ ЦМБ ------------>│
        └───┴───┴───┴───┴───┴───┴───┴───┘

     Формат байта состояния:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │ 0 │   │   │   │   │   │   │ Биты:
└─┬─┴───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘
  │       │   │   │   │   │   │
  │       │   │   └───┴───┴───┴──> 0-3: код ошибки
  │       │   │
  │       └───┴──────────────────> 4-5: тип ошибки
  │
  └──────────────────────────────> 7: 1=при выполнении команды
                                        произошло обращение
                                        к накопителю

     Бит 7 байта состояния равен  1, если при выполнении команды
произошло  обращение к  накопителю, в  этом случае  байты 1  - 3
результата содержат корректную  информацию, иначе эта информация
некорректна.

        Описание возможных ошибок приведено в таблице.
@pb
┌──────┬──────┬────────────────────────────────────────────────┐
│ Тип  │ Код  │                                                │
│ошибки│ошибки│                Значение                        │
├──────┼──────┼────────────────────────────────────────────────┤
│  00  │ 0000 │ Нет ошибки (нормальное завершение команды)     │
│  00  │ 0001 │ Нет сигнала по линии "индекс"                  │
│  00  │ 0010 │ Нет сигнала по линии "поиск закончен"          │
│  00  │ 0011 │ Сигнал "ошибка записи"                         │
│  00  │ 0100 │ Накопитель не отвечает сигналом готовности     │
│      │      │ после разблокировки                            │
│  00  │ 0101 │ Не используется                                │
│  00  │ 0110 │ Нет сигнала "дорожка 0"                        │
│  00  │ 0111 │ Не используется                                │
│  00  │ 1000 │ При выполнении команды "проверка готовности    │
│      │      │ накопителя" накопитель находится в состоянии   │
│      │      │ поиска                                         │
├──────┼──────┼────────────────────────────────────────────────┤
│  01  │ 0000 │ Ошибка при считывании поля идентификации       │
│  01  │ 0001 │ Неисправимая ошибка чтения                     │
│  01  │ 0010 │ Адресный маркер не обнаружен                   │
│  01  │ 0011 │ Не используется                                │
│  01  │ 0100 │ Сектор не найден                               │
│  01  │ 0101 │ Ошибка поиска                                  │
│  01  │ 0110 │ Не используется                                │
│  01  │ 0111 │ Не описан                                      │
│  01  │ 1000 │ Неисправимая ошибка                            │
│  01  │ 1001 │ Обнаружен флаг "дефектная дорожка"             │
├──────┼──────┼────────────────────────────────────────────────┤
│  10  │ 0000 │ Неверная команда                               │
│  10  │ 0001 │ Неверный логический адрес накопителя           │
├──────┼──────┼────────────────────────────────────────────────┤
│  11  │ 0000 │ Неуспешно окончена команда "диагностика        │
│      │      │ внутреннего ОЗУ контроллера"                   │
│  11  │ 0001 │ Неуспешно окончена диагностика ППЗУ            │
│      │      │ контроллера                                    │
│  11  │ 0010 │ Неуспешно окончен тест генератора кодов        │
│      │      │ коррекции ошибок (ECC)                         │
└──────┴──────┴────────────────────────────────────────────────┘

--> Форматирование накопителя (класс 0, опкод 4).

     Команда  форматирует все  цилиндры, начиная  с заданного до
конца   накопителя и  используя    заданное   значение   фактора
чередования.   При  форматировании   перезаписываются  все  поля
идентификации, поля данных заполняются байтами-заполнителями.
@pb
        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   1   0   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ    0   0   0   0   0   0 │
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │ 0   0   0  <------ ФЧ ------->│
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Проверка секторов (класс 0, опкод 5).

     Команда проверяет возможность  считывания заданных секторов
с диска без передачи их содержимого в ОЗУ ПЭВМ.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   1   0   1 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ   <--------- НС -------->│
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │<------------ ЧС ------------->│
        ├───────────────────────────────┤
      5 │ П   ПС  0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Форматирование дорожки (класс 0, опкод 6).

     Команда форматирует  одну заданную дорожку.  В остальном ее
действие аналогично команде "форматирование накопителя".

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   1   1   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ    0   0   0   0   0   0 │
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │ 0   0   0  <------ ФЧ ------->│
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Форматирование дефектной дорожки (класс 0, опкод 7).

     Команда  форматирует  одну  заданную  дорожку, устанавливая
флаги  "дефектная   дорожка"  в  заготовках   секторов.  Никакая
информация в поля данных не записывается.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   0   1   1   1 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ    0   0   0   0   0   0 │
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │ 0   0   0  <------ ФЧ ------->│
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Чтение секторов (класс 0, опкод 8).

     Команда  считывает  запрошенное  число  секторов  начиная с
заданного. Все сектора должны находиться на одной дорожке.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   1   0   0   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ   <--------- НС -------->│
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │<------------ ЧС ------------->│
        ├───────────────────────────────┤
      5 │ П   ПС  0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Запись секторов (класс 0, опкод 0Ah).(*)

     Команда  записывает  заданное   в  блоке  параметров  число
секторов на  диск, начиная с указанного  начального сектора. Все
записываемые сектора должны находиться на одной дорожке.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   1   0   1   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ   <--------- НС -------->│
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │<------------ ЧС ------------->│
        ├───────────────────────────────┤
      5 │ П   ПС  0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Поиск цилиндра по номеру (класс 0, опкод 0Ch).(*)

     Команда осуществляет позиционирование головок накопителя на
заданный цилиндр.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   1   1   0   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ    Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Чтение внутреннего ОЗУ контроллера (класс 0, опкод 0Eh).(*)

     Команда  считывает содержимое  внутреннего ОЗУ  контроллера
(512   байт).   Данное   ОЗУ   используется   контроллером   при
чтении/записи  и содержит  информацию, считанную/записанную  при
выполнении последней команды чтения/записи секторов.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   1   1   1   0 │
        ├───────────────────────────────┤
      1 │ 0   0   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      2 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ Х   Х   Х   Х   Х   Х   Х   Х │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Запись внутреннего ОЗУ контроллера (класс 0, опкод 0Fh).(*)

     Команда обновляет содержимое внутреннего ОЗУ контроллера.
@pb
        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 0   0   0   0   1   1   1   1 │
        ├───────────────────────────────┤
      1 │ 0   0   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      2 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ Х   Х   Х   Х   Х   Х   Х   Х │
        └───┴───┴───┴───┴───┴───┴───┴───┘

-->Диагностика внутреннего ОЗУ контроллера (класс 7,опкод 0).(*)

     Команда  проверяет  правильность   работы  внутреннего  ОЗУ
контроллера.  В случае  ошибки генерируется  ошибка с  типом 3 и
кодом 0.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 1   1   1   0   0   0   0   0 │
        ├───────────────────────────────┤
      1 │ 0   0   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      2 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ Х   Х   Х   Х   Х   Х   Х   Х │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Тест устройства (класс 7, опкод 3).

     Команда проверяет состояние и работоспособность накопителя.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 1   1   1   0   0   0   1   1 │
        ├───────────────────────────────┤
      1 │ 0   0   У   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      2 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      3 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      4 │ Х   Х   Х   Х   Х   Х   Х   Х │
        ├───────────────────────────────┤
      5 │ П   Х   Х   У   Х   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Расширенный тест контроллера (класс 0, опкод 4).

     Команда   проверяет   функционирование   составных   частей
контроллера: микропроцессора, ОЗУ, ПЗУ и схем коррекции ошибок.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 1   1   1   0   0   1   0   0 │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Считывание без контроля (класс 7, опкод 5).

     Команда  выполняет  считывание  поля  данных одного сектора
вместе  с  его  контрольной  суммой.  Параметр  "число секторов"
игнорируется.  При  обнаружении  ошибки  контрольной  суммы флаг
ошибки не выставляется и коррекция не производится.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 1   1   1   0   0   1   0   1 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ   <--------- НС -------->│
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │<------------ ЧС ------------->│
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

--> Запись без контроля (класс 7, опкод 6).

     Команда выполняет  запись поля данных одного  сектора и его
контрольной   суммы,  при   этом  логика   коррекции  ошибок  не
используется. Параметр "число секторов" не используется.

        ┌───┬───┬───┬───┬───┬───┬───┬───┐
      0 │ 1   1   1   0   0   1   1   0 │
        ├───────────────────────────────┤
      1 │ 0   0   У  <------- НГ ------>│
        ├───────────────────────────────┤
      2 │  ЦСБ   <--------- НС -------->│
        ├───────────────────────────────┤
      3 │<----------- ЦМБ ------------->│
        ├───────────────────────────────┤
      4 │<------------ ЧС ------------->│
        ├───────────────────────────────┤
      5 │ П   0   0   0   0   Ш   Ш   Ш │
        └───┴───┴───┴───┴───┴───┴───┴───┘

     @e19.1.4. Разметка диска@e0

     Данные  на жесткий  диск записываются  в секторах.  Сектора
располагаются  на  дорожках.   Нумерация  дорожек  начинается  с
внешней  стороны  пластины  (там  расположена  нулевая дорожка).
Количество пластин (дисков) и головок, так же как и максимальное
число  дорожек, могут  колебаться в  довольно широких пределах и
зависят от типа конкретного накопителя.

     Дорожка обычно содержит  от 8 до 26 секторов  и для данного
конкретного  накопителя  число  секторов  на  дорожке постоянно.
Начало   дорожки   определяется   сигналом   "индекс",   который
генерируется накопителем при каждом обороте диска. Далее следует
первый сектор  дорожки. Второй сектор будет  отстоять от первого
на число секторов, равное  значению фактора чередования минус 1,
третий  еще на  столько же  и т.  д. Таким  образом при  факторе
чередования равном   3, сектора  на 17-секторной  дорожке  будут
располагаться следующим образом:

┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
│ 1│ 7│13│2 │8 │14│3 │9 │15│4 │10│16│ 5│11│17│ 6│12│
├──┴──┴──┴┬─┴──┴──┴┬─┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┤
│         │ фактор │                               │
│         │чер-ния │                               │
│<--индекс│<------>│                    индекс --> │

     Формат сектора приведен в таблице.

┌───────────┬───────────────────────────────────────────┬──────┐
│Обозначение│             Назначение                    │Длина │
│           │                                           │(байт)│
├───────────┼───────────────────────────────────────────┼──────┤
│  АМ       │ Адресный маркер                           │  4   │
│  ИНТ1     │ Интервал                                  │ 9-12 │
├───────────┼───────────────────────────────────────────┼──────┤
│           │       Поле идентификации:                 │      │
│  СИНХ1    │ Синхробайт                                │  1   │
│  ИНТ2     │ Интервал                                  │  2   │
│  СРВ      │ Байт для сравнения                        │  1   │
│  ЦСБ      │ Старший байт номера цилиндра              │  1   │
│  ЦМБ      │ Младший байт номера цилиндра              │  1   │
│  ГЛВ      │ Номер головки                             │  1   │
│  СЕКТ     │ Номер сектора                             │  1   │
│  ФЛАГ     │ Флаговый байт                             │  1   │
│  НУЛЬ     │ Нулевой байт                              │  1   │
│  КС1      │ Контрольная сумма поля идентификации      │  4   │
├───────────┼───────────────────────────────────────────┼──────┤
│  ИНТ3     │ Интервал                                  │  16  │
├───────────┼───────────────────────────────────────────┼──────┤
│           │       Область данных:                     │      │
│  СИНХ2    │ Синхробайт                                │  1   │
│  ИНТ4     │ Интервал                                  │  2   │
│  ДАННЫЕ   │ Поле данных                               │  512 │
│  КС2      │ Контрольная сумма поля данных             │  4   │
├───────────┼───────────────────────────────────────────┼──────┤
│  ИНТ5     │ Интервал                                  │  43  │
└───────────┴───────────────────────────────────────────┴──────┘

     Начало   сектора   обозначается   при   помощи   уникальной
комбинации,  называемой  адресным   маркером.  Пять  интервалов,
обозначенных в  таблице ИНТ1 - ИНТ5,  заполняются нулями, причем
длина ИНТ2  и ИНТ4 постоянна  и равна 2  байтам, в то  время как
ИНТ1, ИНТ3 и ИНТ5 могут иметь разную длину, немного отличающуюся
от   значений,  приведенных   в  таблице.   Эти  три   интервала
предназначены  для подготовки  накопителя к  считыванию (записи)
следующей за  ним области, а  различие в длине  объясняется тем,
что   адресный  маркер,   поле  идентификации   и  данные  могут
записываться в  разное время поверх  ранее имевшейся информации,
что   не  обеспечивает   точного  совпадения   физической  длины
записанной  области и  ранее  имевшейся  на этом  месте области.
Отличия в длине могут  составлять несколько бит, чем объясняется
наличие   после  после   интервалов  синхробайта,   позволяющего
определить  истинную  начальную   границу  области  и  правильно
сгруппировать  все последующие  биты по  байтам. Байт  СРВ имеет
постоянное  значение  для  всех   секторов  и  используется  для
проверки  правильности считывания  поля идентификации.  Флаговый
байт  содержит   служебную  информацию,  в   частности  отмечает
дефектность сектора, если он не пригоден для записи. Контрольные
суммы служат для проверки  правильности считывания информации из
поля  идентификации и  области данных  и вычисляются специальным
генератором кодов коррекции ошибок  (Error Correction Code, ECC)
с производящим полиномом 32-й степени.
@pb
@ce@e19.2. Контроллер жестких дисков для АТ-подобных ПЭВМ@e0

     IBM PC  AT отличается от  всех предыдущих моделей  IBM PC и
совместимых ПЭВМ в следующем:

     -  стандартный BIOS  обеспечивает возможность  работы как с
накопителями на гибких, так и с накопителями на жестких дисках;

     - контроллеры жестких и  гибких дисков расположены на одной
плате;

     -  адреса портов  ввода-вывода, предназначенных  для управ-
ления жестким  диском, и назначение  портов полностью отличаются
от ХТ-подобных ПЭВМ.

     Возможно  подключение к  одному ПЭВМ  двух жестких  дисков.
Каждый  диск имеет  свой набор  портов (1F0h-1F7h  для первого и
170h-177h для второго). Ниже  будут описаны порты только первого
диска. Назначение портов второго диска аналогично первому.

     @e19.2.1. Описание портов ввода-вывода@e0

     Порт 1F0h
     Предназначен   для   обмена   данными   с   внутренним  ОЗУ
контроллера,  являющимся промежуточным  звеном между оперативной
памятью ПЭВМ и накопителем.

     Порт 1F1h.
     При  чтении через  этот  порт  можно получить  информацию о
последней возникшей ошибке:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │ 0 │   │ 0 │   │   │   │ Бит:
└─┬─┴─┬─┴───┴─┬─┴───┴─┬─┴─┬─┴─┬─┘ ────
  │   │       │       │   │   └─>0: 1=адресный маркер  данных не
  │   │       │       │   │           найден
  │   │       │       │   └─────>1: 1=ошибка на нулевой  дорожке
  │   │       │       └─────────>2: 1=выполнение команды прекра-
  │   │       │                     щено  программно,  команда
  │   │       │                     не завершилась
  │   │       └─────────────────>4: 1=идентификатор  сектора  не
  │   │                             найден
  │   └─────────────────────────>6: 1=неисправимая ошибка в дан-
  │                                 ных,  ошибка   контрольной
  │                                 суммы
  └─────────────────────────────>7: 1=дефектный сектор

     Порт 1F2h.
     Чтение/запись числа секторов для последующей операции.

     Порт 1F3h.
     Чтение/запись  параметра  "номер  сектора"  для последующей
операции.

     Порт 1F4h.
     Чтение/запись старших битов номера цилиндра для последующей
операции  (биты 0  - 1  - это  биты 8  - 9  в 10-битовом  номере
цилиндра).

     Порт 1F5h.
     Чтение/запись  младших  восьми  битов  номера  цилиндра для
последующей операции.

     Порт 1F6h.
     Чтение/запись номера  устройства и головки  для последующей
операции.

     Порт 1F7h (запись).
     Вывод команды по управлению накопителем.

     Порт 1F7h (чтение).
     Чтение   состояния  накопителя   и  результатов  предыдущей
команды:

  7   6   5   4   3   2   1   0
┌───┬───┬───┬───┬───┬───┬───┬───┐
│   │   │   │   │   │   │   │   │ Бит:
└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘ ────
  │   │   │   │   │   │   │   └─>0: 1=предыдущая команда  завер-
  │   │   │   │   │   │   │         шилась с ошибкой
  │   │   │   │   │   │   └─────>1: 1=сигнал "индекс"
  │   │   │   │   │   └─────────>2: 1=данные при выполнении пос-
  │   │   │   │   │                 ледней операции были скор-
  │   │   │   │   │                 ректированы   при   помощи
  │   │   │   │   │                 алгоритма ECC
  │   │   │   │   └─────────────>3: 1=идет процесс обмена данными
  │   │   │   └─────────────────>4: 1=поиск завершен
  │   │   └─────────────────────>5: 1=ошибка записи
  │   └─────────────────────────>6: 1=устройство готово для чте-
  │                                 ния, записи или поиска
  └─────────────────────────────>7: 1=устройство занято выполне-
                                    нием  команды  ( остальные
                                    биты  не  несут  смысловой
                                    нагрузки)

     @e19.2.2. Система команд@e0

     Код  команды   заносится  в  порт  1F7h   после  того,  как
подготовлены  все параметры  в  портах  1F2h -  1F6h. Выполнение
команды  начинается  сразу  после  занесения  в  порт  1F7h кода
команды.  Команда  состоит  из  одного  байта.  Старшие  4  бита
содержат  код  требуемой  операции,  младшие содержат параметры.
Перечень  команд с  возможными значениями  параметров приведен в
таблице.
@pb
┌────────┬───────────────────────┬─────────────────────────────┐
│  Код   │     Назначение        │         Параметры           │
│операции│                       │                             │
├────────┼───────────────────────┼─────────────────────────────┤
│   1    │ Рекалибровать (сброс  │ Период импульсов сигнала    │
│        │ головок на цилиндр 0) │ "шаг"                       │
├────────┼───────────────────────┼─────────────────────────────┤
│   2    │ Чтение секторов       │ Биты, определяющие необходи-│
├────────┼───────────────────────┤ мость повторных обращений   │
│   3    │ Запись секторов       │ к диску и повторных попыток │
├────────┼───────────────────────┤ считывания при ошибках      │
│   4    │ Проверка секторов     │ контрольной суммы           │
├────────┼───────────────────────┼─────────────────────────────┤
│   5    │ Форматирование дорожки│ Параметр = 0                │
├────────┼───────────────────────┼─────────────────────────────┤
│   7    │ Поиск цилиндра        │ Период импульсов сигнала    │
│        │                       │ "шаг"                       │
├────────┼───────────────────────┼─────────────────────────────┤
│   9    │ Диагностика           │ Параметр = 0                │
│        ├───────────────────────┼─────────────────────────────┤
│        │ Установка параметров  │ Параметр = 1                │
│        │ накопителя (максималь-│                             │
│        │ ное число головок и   │                             │
│        │ секторов)             │                             │
└────────┴───────────────────────┴─────────────────────────────┘
@pb
@ce@e110. Печатающее устройство@e0

     Устройство   печати  IBM   PC-подобных  компьютеров  обычно
подключается   к  параллельному   интерфейсу.  Для   подключения
используется стандартный разъем Centronix, имеющий 36 контактных
выходов (отечественный аналог ИРПР-М). Допускается три  варианта
подключения принтеров к ПЭВМ:

     -  адаптер  принтера  может  находится  на  одной  плате  с
адаптером  монохромного  дисплея,  при  этом  используются порты
3BCh - 3BEh;

     -  к  ПЭВМ  могут  подключены  два  отдельных  адаптера для
управления  принтерами, использующие  порты 378h  - 37Ah (первый
адаптер) и 278h - 27Ah (второй адаптер).

     При  программировании принтера  важно знать  адрес базового
порта  ввода-вывода  (первого  порта  из  трех);  адреса базовых
портов хранятся  в области данных BIOS,  начиная с адреса 0:408h
(LPT1) и далее по слову  на принтер до LPT4. Дальнейшее описание
предполагает, что базовый адрес принтера равен 378h.

 Порт  Операция   Описание
────────────────────────────────────────────────────────────────
 378h   Запись   Регистр данных - сюда засылается байт, посылае-
                 мый на печать
        Чтение   Регистр данных - позволяет считать последний
                 байт, переданный принтеру

 379h   Чтение   Регистр состояния принтера:

 7  6  5  4  3  2 1 0
┌──┬──┬──┬──┬──┬─┬─┬─┐
│  │  │  │  │  │X│X│X│ Биты:
└┬─┴┬─┴┬─┴┬─┴┬─┴─┴─┴─┘ ─────
 │  │  │  │  └─────────> 3: 0=при печати возникла ошибка
 │  │  │  └────────────> 4: 0=принтер в автономном режиме
 │  │  └───────────────> 5: 1=сигнал "конец бумаги"
 │  └──────────────────> 6: 0=принтер готов к печати
 │                            следующего символа
 └─────────────────────> 7: 0=принтер занят, находится в
                            автономном режиме или
                            произошла ошибка
@pb
 37Ah   Чтение/  Регистр управления принтером:
        Запись

 7 6 5 4  3  2  1  0
┌─┬─┬─┬──┬──┬──┬──┬──┐
│X│X│X│  │  │  │  │  │ Биты:
└─┴─┴─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ─────
       │  │  │  │  └───> 0: бит запуска печати (см. ниже)
       │  │  │  └──────> 1: 1=после возврата каретки выводить
       │  │  │               перевод строки (в MS-DOS должен
       │  │  │               быть сброшен)
       │  │  └─────────> 2: 1=инициализировать принтер
       │  └────────────> 3: 1=разрешить вывод на печать (должен
       │                      быть всегда установлен)
       └───────────────> 4: 1=разрешить прерывания от принтера
────────────────────────────────────────────────────────────────

     Примечания.
     1.  Для  запуска  печати  символа  нужно  на короткое время
установить бит 0 регистра управления, а затем сбросить его.

     2.  Прерывание происходит  по окончании  вывода символа  на
печать:  для  первого  принтера  на седьмом уровне   контроллера
прерываний (IRQ7, вектор прерывания 0Fh), для второго принтера -
на пятом уровне  (IRQ5, вектор 0Dh). Следует отметить также, что
IRQ5 используется  XT-контроллером жестких дисков  для генерации
своих    прерываний.   Обычно    этот   бит    не   используется
(сбрасывается), а  проверка готовности принтера  производится на
основании опроса регистра состояния.

     Типичная последовательность  действий для вывода  на печать
одного символа такова:

     - вывести передаваемый байт в регистр данных;

     - в цикле проверять состояние  принтера до устaновки бита 7
регистра состояния (здесь возможно использование таймаута);

     - проверить биты 3-5 регистра состояния на наличие ошибки;

     -  установить  и  сразу  же  сбросить  нулевой бит регистра
управления,  для  этого  подходит  следующая  последовательность
команд:

     mov  dx,37Ah        ;адрес регистра управления
     mov  al,00001101b   ;установить биты 0,2 и 3
     out  dx,al          ;вывести команду
     xor  al,1           ;сбросить бит 0
     out  dx,al          ;повторно вывести команду

     -  далее   можно  прочитать  и   запрограммировать  регистр
состояния и перейти к печати следующего символа.

     Несмотря  на простоту  управления, принтер  представляет из
себя достаточно сложное устройство, имеющее свой микропроцессор,
ПЗУ и ОЗУ. Микропроцессор используется для обработки управляющих
последовательностей и управления  печатью. ПЗУ содержит описание
рисунков символов в зависимости от их кода и выбранной таблицы и
программы   на   языке    используемого   микропроцессора.   ОЗУ
используется   для  временного   хранения  введенных   данных  и
спроектированных  пользователем символов.  Ряд принтеров, помимо
интерфейса  Centronix, могут  подключаться и  к последовательному
интерфейсу.  Принтер обрабатывает  ряд спецсимволов  (таких, как
звонок, забой, горизонтальная и вертикальная табуляция), а также
имеет  достаточно сложную  систему команд  для изменения режимов
работы и управления печатью.

     Обычно команды начинаются  с символа ESC (шестнадцатиричный
код  1Bh)  и  имеют  длину  от  двух  байт  и  более (существуют
командные  последовательности, включающие  по несколько килобайт
информации,    например   команды    загрузки   спроектированных
пользователем  шрифтов). Спецсимволы  и байты  команд передаются
принтеру  так  же,  как  и  обычные  символы, предназначенные для
печати,  описанным  выше  способом.  Подобный  способ управления
удобен  для  программного  изменения  режимов работы устройства.
Учитывая, что выпуском принтеров  для ПЭВМ занимается достаточно
большое  число   компаний  и  возможности   принтеров  постоянно
совершенствуются,  нет  смысла  приводить  полностью  какую-либо
систему  команд,  так  как,  во-первых,  она  в  разных марках и
моделях  принтеров  различна,  и,  во-вторых,  достаточно  полно
описывается в документации на каждый конкретный принтер.

     Существует 2 основных стандарта на систему команд и таблицу
используемых  символов  (стандарты  IBM   и  EPSON),  которых  в
основном  придерживаются фирмы-изготовители,  оставляя за  собой
право вносить  в них изменения  и дополнения. Единого  стандарта
как на систему команд, так  и на расположение и рисунки символов
второй половины таблицы ASCII (коды 129-255) нет. Наиболее часто
используемые команды:

     - установка вида шрифта и режима печати;

     -  черновой  текстовый  (draft)  нормальной  ширины (рica),
узкий (condensed) или средней ширины (elita).

     - качественный  шрифт (NLQ, Proрortional,  Orator, Scriрt и
т. д.);

     -выбор  таблицы символов  из ПЗУ  (обычно имеется несколько
таблиц, отличающихся расположением управляющих кодов, наличием и
расположением псевдографических символов или курсива);

     -  загрузка в  ОЗУ принтера  спроектированных пользователем
шрифтов и  работа с ОЗУ  принтера (именно в  этой группе команд,
имеются наибольшие различия между разными моделями);

     - управление принтером в режиме точечной графики;

     -   установка  служебных   параметров  (размеры   отступов,
страницы, шаг табуляции, расстояние  между строками) и изменение
характеристик (сброс, включение/отключение датчика конца бумаги,
печать в одну или в две стороны и т. п.).

     Ряд  характеристик и  режимов работы  может выбираться  как
программно, так и аппаратно с  использованием кнопок и клавиш на
лицевой панели и  DIP-переключателей. Существуют характеристики,
изменить которые  можно только аппаратно  (например, возможность
загрузки  шрифтов или  размер используемого  ОЗУ).
@pb
@ce@e111.Последовательный интерфейс RS-232@e0

@ce@e111.1. Общие сведения@e0

     В состав  IBM PC могут  входить до четырех  последовательных
интерфейсов, работающих в стандарте RS-232 (отечественный аналог
- стык С2) и именуемых СОМ1 - СОМ4. Им выделены следующие адреса
в области портов ввода-вывода:

     СОМ1:   3F8h-3FFh          COM3:    338h-33Fh
     COM2:   2F8h-2FFh          COM4:    238h-23Fh

(интерфейсы СОМ3 и СОМ4 поддерживаются только в моделях PS/2).

     Каждый интерфейс связан  с определенным уровнем контроллера
прерываний:

     СОМ1 вызывает прерывание IRQ4 (Int 0Ch)
     COM2 вызывает прерывание IRQ3 (Int 0Bh)
     СОМ3 и СОМ4 не имеют стандартных векторов прерываний.

     Каждое  из устройств  RS-232 представляет  собой контроллер
8250, оснащенный 25- или 9- штырьковым разъемом на задней стенке
корпуса ПЭВМ.  Этот разъем может  использоваться для подключения
мыши,  графопостроителя   или  организации  связи   между  ПЭВМ.
Контакты стыка RS-232 имеют следующие наименования.

┌────────┬─────────┬──────────────┬───────────────────┬────────┐
│Название│ Имя цепи│Номер контакта│ Назначение        │Направ- │
│сигнала ├───┬─────┼─────┬────────┤                   │ление   │
│        │EIA│CCITT│9-шт.│ 25-шт. │                   │        │
├────────┼───┼─────┼─────┼────────┼───────────────────┼────────┤
│ DCD    │CF │ 109 │  1  │   8    │Связь модемов      │В ПЭВМ  │
│        │   │     │     │        │установлена        │        │
│ RX     │BB │ 104 │  2  │   3    │Принимаемые данные │В ПЭВМ  │
│ TX     │BA │ 103 │  3  │   2    │Передаваемые данные│Из ПЭВМ │
│ DTR    │CD │108/2│  4  │  20    │Готовность ПЭВМ к  │Из ПЭВМ │
│        │   │     │     │        │работе             │        │
│ SG     │AB │ 102 │  5  │   7    │Сигнальная земля   │ ────   │
│ DSR    │CC │ 107 │  6  │   6    │Готовность модема к│В  ПЭВМ │
│        │   │     │     │        │работе             │        │
│ RTS    │CA │ 105 │  7  │   4    │Запрос на передачу │Из ПЭВМ │
│ CTS    │CB │ 106 │  8  │   5    │Готовность модема к│В ПЭВМ  │
│        │   │     │     │        │ к передачи        │        │
│ RI     │CE │ 125 │  9  │  22    │Индикатор вызова   │В ПЭВМ  │
│ FG     │AA │ 101 │ ──  │   1    │Защитная земля     │ ────   │
└────────┴───┴─────┴─────┴────────┴───────────────────┴────────┘

     Контроллер стыка RS-232  является полностью программируемым
устройством;  вы  можете   задать  следующие  параметры  обмена:
количество битов  данных и стоп-битов,  вид четности и  скорость
обмена в бодах (бит/с).
@pb
@ce@e111.2. Описание портов@e0

     Ниже описаны порты ввода-вывода  для СОМ1, имеющего базовый
адрес  3F8h.  Обратите  внимание,  что  порты  3F8h и 3F9h имеют
разное назначение в зависимости от бита  7 порта 3F8h (т. н. бит
DLAB - Divisor Latch Access Bit).

 Порт  Операция   Описание
────────────────────────────────────────────────────────────────
 3F8h   Запись   Регистр передатчика - сюда засылается байт для
                 передачи
        Чтение   Регистр приемника - отсюда извлекается принятый
                 байт
        Запись   Если DLAB=1, то сюда засылается младший байт
                 скорости обмена (см. порт 3F9h)

 3F9h   Запись   Если DLAB=1, то сюда засылается старший байт
                 скорости обмена. Скорость задается значением
                 делителя, равным 115200/V, где V - скорость
                 в бодах. Например, для скорости 9600 бод
                 делитель равен 115200/9600=12=0Ch, поэтому
                 нужно вывести 0Ch в порт 3F8h и 0 в порт 3F9h.
        Запись   Регистр управления прерываниями (1 = разрешить
                 прерывание):

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│0 │0 │0 │ 0│  │  │  │  │ Бит:
└──┴──┴──┴──┴┬─┴┬─┴┬─┴┬─┘ ────
             │  │  │  └─> 0: прерывание по приему символа
             │  │  └────> 1: прерывание по завершению передачи
             │  │            символа
             │  └───────> 2: прерывание по обрыву линии или
             │               или ошибке в линии
             └──────────> 3: прерывание по изменению состояния
                             модема (любой из линий CTS, DSR, RI
                             и DCD)

 3FAh   Чтение   Регистр идентификации прерывания. Когда
                 произошло прерывание, здесь содержится причина,
                 вызвавшая его:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│0 │0 │0 │ 0│ 0│     │  │ Бит:
└──┴──┴──┴──┴──┴──┼──┴┬─┘ ────
                  │   │
                  │   └──> 0: 0=есть отложенные прерывания
                  └──────> 1-2: причина прерывания:
                                11=ошибка или обрыв линии;
                                  сбрасывается чтением регистра
                                  состояния линии (порт 3FDh)
                                10=принят символ; сбрасывается
                                  чтением приемника (порт 3F8h)
                                01=передан символ; сбрасывается
                                  записью символа в регистр
                                  передатчика (порт 3F8h)
                                00=изменение состояния модема
                                  (линий CTS, DSR, RI или DCD);
                                  сбрасывается чтением регистра
                                  состояния модема (порт 3FEh)

 3FBh   Чтение/  Регистр управления линией:
        Запись

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │     │  │     │ Биты:
└┬─┴┬─┴┬─┴──┼──┴┬─┴──┼──┘ ─────
 │  │  │    │   │    │
 │  │  │    │   │    └───> 0-1: число битов данных:
 │  │  │    │   │               00=5, 01=6, 10=7, 11=8
 │  │  │    │   └────────> 2: число стоп-битов:
 │  │  │    │                 0=1, 1=1.5 при 5 битах данных
 │  │  │    │                 и 2 в противном случае
 │  │  │    └────────────> 3-4: тип четности:
 │  │  │                        X0=нет,
 │  │  │                        01=нечетная,
 │  │  │                        11=четная
 │  │  └─────────────────> 5: постоянная четность
 │  │                         0=отмена постоянной четности
 │  │                         1=постоянный бит четности,
 │  │                           зависит от битов 3-4:
 │  │                           биты 3-4=01 - бит четности
 │  │                                         всегда 1
 │  │                           биты 3-4=11 - бит четности
 │  │                                         всегда 0
 │  │                           биты 3-4=X0 - без бита четности
 │  └────────────────────> 6: 1=имитировать обрыв линии
 │                              (посылка нулей)
 └───────────────────────> 7: бит DLAB:
                              1=порты 3F8h и 3F9h для загрузки
                                скорости обмена;
                              0=порты 3F8h и 3F9h в обычном
                                режиме

 3FCh   Запись  Регистр управления модемом

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│ 0│ 0│ 0│  │  │  │  │  │ Бит:
└──┴──┴──┴┬─┴┬─┴┬─┴┬─┴┬─┘ ───
          │  │  │  │  └─> 0: 1=установить выход DTR
          │  │  │  └────> 1: 1=установить выход RTS
          │  │  └───────> 2: 1=установить OUT1 (не используется)
          │  └──────────> 3: 1=установить OUT2 (разрешить преры-
          │                    вания от RS-232)
          └─────────────> 4: 1=диагностический режим (посылать
                              выход на вход стыка).

 3FDh   Чтение    Регистр состояния линии. Биты 1-4 вызывают
                  прерывания по ошибке, если оно разрешено:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│ 0│  │  │  │  │  │  │  │ Бит:
└──┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ───
    │  │  │  │  │  │  └─> 0:1=данные приняты. Сбрасывается
    │  │  │  │  │  │          чтением приемника
    │  │  │  │  │  └────> 1:1=потеря предыдущего символа
    │  │  │  │  └───────> 2:1=ошибка четности
    │  │  │  └──────────> 3:1=неверный стоп-бит
    │  │  └─────────────> 4:1=обнаружен обрыв линии
    │  └────────────────> 5:1=сдвиговый регистр передатчика пуст.
    │                         Можно передавать след. символ
    └───────────────────> 6:1=регистр передатчика пуст. Нет
                              обрабатываемых данных.

 3FEh   Чтение    Регистр состояния модема. Биты 0-3 вызывают
                  прерываниe по изменению состояния модема,
                  если оно разрешено:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Бит:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ───
 │  │  │  │  │  │  │  │
 │  │  │  │  │  │  │  └──> 0:1=изменилось состояние линии CTS
 │  │  │  │  │  │  └─────> 1:1=изменилось состояние линии DSR
 │  │  │  │  │  └────────> 2:1=изменилось состояние линии RI
 │  │  │  │  └───────────> 3:1=изменилось состояние линии DCD
 │  │  │  └──────────────> 4: состояние линии CTS
 │  │  └─────────────────> 5: состояние линии DSR
 │  └────────────────────> 6: состояние линии RI
 └───────────────────────> 7: состояние линии DCD

     Примечание:  "Изменилось состояние  линии..." означает, что
данная линия стыка RS-232 изменила свое состояние по сравнению с
последним чтением этого регистра.
@pb
@ce@e111.3. Порядок инициализации 8250@e0

     Для  подготовки   контроллера  8250  к   работе  необходимо
выполнить следующие шаги.

     1.  Установить  бит  DLAB  порта  3FBh  и заслать делитель,
задающий скорость обмена, в порты 3F8h и 3F9h.

     2. Инициализировать регистр  управления линией (порт 3FBh);
при этом сбросить бит DLAB.

     3. Инициализировать регистр управления модемом (порт 3FCh).

     4.  Инициализировать регистр  управления прерываниями (порт
3F9h) и,  если прерывания разрешены,  установить адрес программы
обработки прерываний от стыка RS-232.

     В качестве примера  приведем набор подпрограмм, обеспечива-
ющих обмен через порт COM1 в дуплексном режиме со скоростью 1200
бод.

          title     RS232
_DATA     segment   рara рublic
Buf_Size  equ  1024           ; размер буфера

Source    db   Buf_Size+2 duр (0) ; буфер приема символов
Src_рtr   dw   Source         ; указатель позиции в буфере
Count     dw   0              ; количество символов в буфере
Ser_iр    dw   0              ; старый адрес Int 0Ch
Ser_cs    dw   0
Save_ds   dw   0              ; служебные переменные
Int_sts   db   0
Overrun   db   0
_DATA     ends

_TEXT     segment   рara рublic
          assume    cs:_TEXT, ds:_DATA
          рublic    Ser_Ini:near, Ser_Rst:near
          рublic    Get_Chr:near, Out_Chr:near
;╔════════════════════════════════════════════════════════════╗
;║        Подпрограмма инициализации стыка COM1.              ║
;╚════════════════════════════════════════════════════════════╝
Ser_Ini   рroc near
          рush ax        ; сохранить регистры
          рush dx
          рush bx
          рush es
          in   al,21h    ; IMR 1-го контролера прерываний
          or   al,10h    ; запретить прерывание IRQ4 от COM1
          out  21h,al
          mov  al,0Ch
          mov  ah,35h
          int  21h       ; взять вектор Int 0Ch в es:bx
          mov  Ser_iр,bx ; и сохранить его
          mov  Ser_cs,es
          mov  al,0Ch
          mov  dx,offset Ser_int
          рush ds
          mov  bx,cs
          mov  ds,bx
          mov  ah,25h
          int  21h       ; установить Int 0Ch = ds:dx
          рoр  ds
          рoр  es
          рoр  bx
          cli            ; запретить прерывания
          in   al,21h    ; IMR 1-го контроллера прерываний
          and  al,not 10h
          out  21h,al    ; разрешить прерывания от COM1
          mov  dx,3FBh   ; регистр управления линией
          in   al,dx
          or   al,80h    ; установить бит DLAB
          out  dx,al
          mov  dx,3F8h
          mov  al,60h
          out  dx,al     ; младший байт для скорости 1200 бод
          inc  dx
          mov  al,0
          out  dx,al     ; старший байт скорости
          mov  dx,3FBh   ; регистр управления линией
          mov  al,00000011b ; 8 бит, 2 стоп-бита, без четности
          out  dx,al
          mov  dx,3F9h   ; регистр разрешения прерываний
          mov  al,1      ; разрешить прерывания по приему
          out  dx,al
          noр            ; и чуть-чуть подождать
          noр
          mov  dx,3FCh   ; регистр управления модемом
          mov  al,00001011b ; установить DTR, RTS и OUT2
          out  dx,al
          sti            ; разрешить прерывания
          mov  dx,3F8h   ; регистр данных
          in   al,dx     ; сбросить буфер приема
          рoр  dx
          рoр  ax
          ret
Ser_Ini   endр
;╔════════════════════════════════════════════════════════════╗
;║       Подпрограмма отключения стыка COM1.                  ║
;╚════════════════════════════════════════════════════════════╝
Ser_Rst   рroc near
          рush ax        ; сохранить регистры
          рush dx
Wait_Free:
          mov  dx,3FDh   ; регистр состояния линии
          in   al,dx
          jmр  short $+2 ; короткая задержка
          test al,60h    ; передача окончена?
          jz   Wait_Free ; ждем, если нет
          mov  dx,3F9h   ; регистр разрешения прерываний
          mov  al,0      ; запретить прерывания
          out  dx,al
          jmр  short $+2 ; еще подождем...
          jmр  short $+2
          mov  dx,3FCh   ; регистр управления модемом
          mov  al,00000011b ; активировать DTR и RTS
          out  dx,al
          jmр  short $+2
          jmр  short $+2
          рush bx
          mov  al,0Ch
          mov  dx,Ser_iр
          рush ds
          mov  bx,Ser_cs
          mov  ds,bx
          mov  ah,25h
          int  21h       ; восстановить вектор Int 0Ch
          рoр  ds
          рoр  bx
          cli            ; запрет прерываний
          in   al,21h    ; читать маску прерываний
          jmр  short $+2
          or   al,10h    ; запретить IRQ4
          out  21h,al
          sti            ; разрешение прерываний
          рoр  dx
          рoр  ax
          ret
Ser_Rst   endр
;╔════════════════════════════════════════════════════════════╗
;║        Подпрограмма обработки прерываний от COM1.          ║
;╚════════════════════════════════════════════════════════════╝
Ser_Int   рroc far
          рush ax
          рush dx
          рush ds
          mov  ax,seg _DATA
          mov  ds,ax
          mov  dx,3FAh   ; регистр идентификации прерываний
          in   al,dx
          mov  Int_Sts,al; сохраним его содержимое
          test al,1      ; есть отложенные прерывания?
          jz   Is_Int    ; да
          рoр  Save_ds   ; нет, передаем управление
          рoр  dx        ; старому обработчику Int 0Ch
          рoр  ax
          рush Ser_cs
          рush Ser_iр
          рush Save_ds
          рoр  ds
          ret            ; длинный переход
Is_Int:
          mov  al,64h    ; послать EOI для IRQ4
          out  20h,al    ; в 1-й контроллер прерываний
          test Int_Sts,4 ; прерывание по приему?
          jnz  Read_Char ; да
No_Char:
          sti            ; нет, разрешить прерывания
          jmр  Int_Ret   ; и закончить обработку Int 0Ch
Read_Char:
          mov  dx,3FDh   ; регистр состояния линии
          in   al,dx
          and  al,2
          mov  Overrun,al; ovvrrun<>0, если была потеря символа
          mov  dx,3F8h   ; регистр данных
          in   al,dx     ; вводим символ
          or   al,al     ; если принят нуль,
          jz   No_Char   ; то игнорируем его
          рush bx
          mov  ah,Overrun
          or   ah,ah     ; предыдущий символ потерян?
          jz   Save_Char ; нет
          mov  ah,al     ; да,
          mov  al,7      ; заменяем его на звонок (07h)
Save_Char:
          mov  bx,Src_рtr; заносим символ в буфер
          mov  [bx],al
          inc  Src_рtr   ; и обновляем счетчики
          inc  bx
          cmр  bx,offset Src_рtr-2 ; если конец буфера
          jb   Ser_Int_1
          mov  Src_рtr,offset Source ; то "зацикливаем" на начало
Ser_Int_1:
          cmр  Count,Buf_Size ; буфер полон?
          jae  Ser_Int_2 ; да
          inc  Count     ; нет, учесть символ
Ser_Int_2:
          or   ah,ah     ; если была потеря символа
          jz   Ser_Int_3
          mov  al,ah     ; то занести в буфер сам символ
          xor  ah,ah
          jmр  short Save_Char
Ser_Int_3:
          рoр  bx
          sti            ; разрешить прерывания
Int_Ret:
          рoр  ds
          рoр  dx
          рoр  ax
          iret
Ser_Int   endр
;╔════════════════════════════════════════════════════════════╗
;║ Подпрограмма вывода символа AL в порт.                     ║
;║ При ошибке возвращает CF=1, иначе CF=0.                    ║
;╚════════════════════════════════════════════════════════════╝
Out_Chr   рroc near
          рush ax
          рush cx
          рush dx
          mov  ah,al
          sub  cx,cx
Wait_Line:
          mov  dx,3FDh   ; регистр состояния линии
          in   al,dx
          test al,20h    ; стык готов к передаче?
          jnz  Outрut    ; да
          jmр  short $+2
          jmр  short $+2
          looр Wait_Line ; нет, ждем
          рoр  dx
          рoр  cx
          рoр  ax
          stc            ; нет готовности порта
          ret
Outрut:
          mov  al,ah
          mov  dx,3F8h   ; регистр данных
          jmр  short $+2
          out  dx,al     ; вывести символ
          рoр  dx
          рoр  cx
          рoр  ax
          clc            ; нормальный возврат
          ret
Out_Chr   endр
;╔════════════════════════════════════════════════════════════╗
;║ Подпрограмма ввода символа из порта в AL.                  ║
;║ Если буфер пуст, возвращает CF=1, иначе CF=0.              ║
;╚════════════════════════════════════════════════════════════╝
Get_Chr   рroc near
          cmр  Count,0   ; буфер пуст?
          jne  loc_1729  ; нет
          stc            ; да, возврат по ошибке
          ret
loc_1729:
          рush si
          cli            ; запретим прерывания
          mov  si,Src_рtr
          sub  si,Count
          cmр  si,offset Source
          jae  loc_1730
          add  si,Buf_Size
loc_1730:
          mov  al,[si]   ; выберем символ
          dec  Count     ; и уменьшим счетчик
          sti            ; разрешение прерываний
          рoр  si
          clc            ; и нормальный возврат
          ret
Get_Chr   endр
_TEXT     ends
          end
@pb
@ce@e112. Игровой адаптер@e0

     Игровой  адаптер  -  это  аналого-цифровой преобразователь,
который может  использоваться для подключения  к ПЭВМ аналоговых
устройств (например,  джойстика или измерительных  приборов). Он
принимает до  четырех цифровых входов  типа "включено/выключено"
(например, для  нажатия кнопок) и  до четырех аналоговых  входов
(таких,  как  координаты  джойстика  или  показания электронного
термометра). Игровой  адаптер подключен в  IBM PC к  порту ввода
201h. Байт, введенный из этого порта, имеет следующий формат:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│B2 B1 A2 A1│By Bx Ay Ax│ Биты:
└──┴──┼──┴──┴──┴──┼──┴──┘ ─────
      │           └──────> 0-3: координаты (аналоговые входы)
      └──────────────────> 4-7: триггеры (цифровые входы)

     Для чтения триггеров используются команды:

     mov    dx,201h
     out    dx,al     ;инициировать обмен, AL -любой байт
     in     al,dx     ;читать порт, биты 4-7 - 0=кнопка нажата
                      ;                        1=отпущена

     Аналоговые  входы считываются  путем отслеживания времени,в
течениe которого соответствующий бит установлен в единицу, после
команды OUT 201h,XXX. Пример чтения координаты X устройства А:

     mov    dx,201h
     out    dx,al     ;инициировать обмен, AL-любой байт
     mov    cx,-1     ;счетчик для цикла
Again:
     in     al,dx
     inc    cx        ;увеличить счетчик
     test   al,1      ;бит AX сброшен?
     jne    Again     ;нет, ждем

     Результат в СX указывает  координаты Х. Этот способ зависит
от тактовой частоты ЦП,  поэтому аккуратней было бы использовать
не счетчик цикла, а системный таймер.
@pb
@ce@e113. КМОП (CMOS)@e0

@ce@e113.1. Доступ к КМОП@e0

     В состав IBM PC AT входят часы реального времени (RTC) и 64
байта неразрушающейся оперативной памяти (КМОП или CMOS), питаю-
щиеся  от  автономного  источника  питания.  При  включении ПЭВМ
содержимое КМОП  анализируется BIOS,  который  извлекает  из нее
конфигурацию системы и текущие дату и время.

     Для  доступа к  данным КМОП  используются порты  70h и 71h.
Чтение байта КМОП производится следующим образом:

     mov     al,XXh
     out     70h,al    ;выбрать адрес КМОП XX
     jmр     $+2       ;небольшая задержка
     in      al,71h    ;ввод байта из КМОП

     Запись байта в КМОП производится аналогично:

     mov     al,XXh
     out     70h,al
     jmр     $+2
     in      al,71h

     Адреса  КМОП  с  10h  по  20h  защищены контрольной суммой,
хранящейся  по адресу  2Eh. Поэтому  изменения содержимого  этих
адресов   необходимо   сопровождать   пересчетом   и  изменением
контрольной суммы.

     Порт 70h применяется не только  для задания адреса КМОП, но
и для разрешения или запрещения NMI (немаскируемого прерывания).
Если бит  7 равен 0, то  NMI разрешается, если 1  - запрещается,
например:

     mov  al,2Dh    ;2Dh -резервный адрес КМОП
     out  70h,al    ;разрешить NMI
     mov  al,0ADh
     out  70h,al    ;запретить NMI
@pb
@ce@e113.2. Содержимое КМОП@e0

     Краткая схема содержимого КМОП такова:

 Адрес      Содержимое
────────────────────────────────────────────────────────────────
00h-0Dh    Данные часов реального времени (RTC)
0Eh        Байт результатов начального тестирования
0Fh        Состояние перезагрузки
10h        Тип НГМД
11h        Резерв
12h        Тип жесткого диска
13h        Резерв
14h        Байт оборудования
15h-16h    Размер базовой памяти
17h-18h    Размер дополнительной памяти
19h-1Ah    Типы жестких дисков
1Bh-2Dh    Резерв
2Eh-2Fh    Контрольная сумма КМОП
30h-31h    Размер дополнительной памяти
32h        Текущее столетие
33h        Разная информация
34h-3Fh    Резерв
───────────────────────────────────────────────────────────────

     Приведем полное описание всех полей КМОП.

 Адрес  Описание                                   Примечание
────────────────────────────────────────────────────────────────
  0    Текущее время RTC, секунды          Все данные RTC
  1    Время побудки, секунды              хранятся в двоично-
  2    Текущее время, минуты               десятичном формате
  3    Время побудки, минуты               (BCD)
  4    Текущее время, часы
  5    Время побудки, часы
  6    Текущий день недели
  7    Текущий день месяца
  8    Текущий месяц
  9    Текущий год
────────────────────────────────────────────────────────────────
 0Ah   Регистр A состояния RTC:

 7  6  5  4   3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │        │           │ Биты:
└┬─┴──┴─┬┴──┴──┴──┼──┴──┘ ─────
 │      │         └───────> 0-3:скорость отсчета (равна 0110)
 │      └─────────────────> 4-6: делитель (равен 010)
 └────────────────────────> 7: флаг обновления (0=можно читать)
@pb
 0Bh   Регистр B состояния RTC:

 7  6  5  4   3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Биты:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ─────
 │  │  │  │  │  │  │  └───> 0: тип времени (равен 0)
 │  │  │  │  │  │  └──────> 1: 12- или 24-часовое время
 │  │  │  │  │  │              (равен 1=24 часа)
 │  │  │  │  │  └─────────> 2: формат данных: 0=BCD,
 │  │  │  │  │                 1=двоичный (равен 0)
 │  │  │  │  └────────────> 3: 1=разрешить прямоугольный
 │  │  │  │                    импульс (равен 0)
 │  │  │  └───────────────> 4: 1=разрешить прерывание по
 │  │  │                       концу обновления (равен 0)
 │  │  └──────────────────> 5: 1=разрешить прерывание
 │  │                          побудки (равен 0)
 │  └─────────────────────> 6: 1=разрешить периодические
 │                             прерывания (равен 0)
 └────────────────────────> 7: флаг обновления (0=можно читать)

 0Ch    Регистр С состояния RTC: биты состояния прерываний,
        только для чтения.
 0Dh    Регистр D состояния RTC. Бит 7=1, если КМОП получает
        питание; 0=нет питания от автономного источника.
────────────────────────────────────────────────────────────────
 0Eh    Байт результатов начального тестирования:

 7  6  5  4   3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │0 │0 │ Биты:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴──┴──┘ ─────
 │  │  │  │  │  └─────────> 2: 1=формат текущего времени
 │  │  │  │  │                 и даты верен
 │  │  │  │  └────────────> 3: 1=жесткий диск не является
 │  │  │  │                    загружаемым
 │  │  │  └───────────────> 4: 1=размер ОЗУ неверен
 │  │  └──────────────────> 5: 1=оборудование не соответствует
 │  │                          конфигурации КМОП
 │  └─────────────────────> 6: 1=неверна контрольная сумма КМОП
 └────────────────────────> 7: 1=неисправен автономный источник
                               питания КМОП
────────────────────────────────────────────────────────────────
 0Fh    Байт состояния перезагрузки. Этот байт считывается после
        сброса ЦП, чтобы определить не был ли сброс вызван для
        вывода 80286 из защенного режима. Он принимает значения:

        0 = теплый рестарт (по Ctrl-Alt-Del) или неожиданный
            останов
        1 = останов после определения размера ОЗУ
        2 = останов после тестирования памяти
        3 = останов по ошибке паритета памяти
        4 = рестарт по запросу начального загрузчика
        5 = рестарт по сбросу контроллера прерываний и
            JMP FAR PTR [0:467h]
        6, 7, 8 = останов после теста защищенного режима
        9 = рестарт по JMP FAR PTR [0:467h]
────────────────────────────────────────────────────────────────
 10h    Тип НГМД А и В:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│           │           │ Биты:
└──┴──┼──┴──┴──┴──┼──┴──┘ ─────
      │           └───────> 0-3: тип дисковода А
      └───────────────────> 4-7: тип дисковода В:
                                 0 = нет дисковода или его тип
                                     неизвестен
                                 1 = 360 К, 5 1/4 дюйма
                                 2 = 1.2 M, 5 1/4 дюйма
                                 3 = 720 К, 3 1/2 дюйма
────────────────────────────────────────────────────────────────
 12h    Тип жестких дисков C и D:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│           │           │ Биты:
└──┴──┼──┴──┴──┴──┼──┴──┘ ─────
      │           └───────> 0-3: тип дисковода C
      └───────────────────> 4-7: тип дисковода D:
                                 0000 = диска нет
                                 1111 = см. адреса 19h и 1Ah
                                 прочие=тип диска
                                        (см. приложение 2)
─────────────────────────────────────────────────────────────────
 14h    Байт оборудования:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │     │X │X │  │  │ Биты:
└──┼──┴──┼──┴──┴──┴┬─┴┬─┘ ────
   │     │         │  └──> 0: 1=есть НГМД
   │     │         └─────> 1: 1=есть сопроцессор 80287
   │     └───────────────> 4-5: тип дисплея:
   │                             00 - EGA или VGA
   │                             01 - CGA, 40 столбцов
   │                             10 - CGA, 80 столбцов
   │                             11 - монохромный
   └─────────────────────> 6-7: количество НГМД - 1
────────────────────────────────────────────────────────────────
 15h-16h   Размер базовой памяти (0100h=256 K, 0200h=512 K,
           0280h=640 K)
 17h-18h   Размер дополнительной памяти, Кб (от 0 до 3C00h)
────────────────────────────────────────────────────────────────
   19h     Тип диска С, если его тип в 12h равен 0Fh
   1Ah     Тип диска D, если его тип в 12h равен 0Fh
────────────────────────────────────────────────────────────────
2Eh-2Fh    Контрольная сумма адресов КМОП с 10h по 20h (обычная
           16-битовая сумма этих байтов; 2Eh содержит старший
           байт КС)
────────────────────────────────────────────────────────────────
30h-31h   Размер дополнительной памяти, Кб (0-3C00h), опреде-
          ленный при начальном тестировании
────────────────────────────────────────────────────────────────
32h       Двоично-десятичный номер столетия
────────────────────────────────────────────────────────────────
33h       Разная информация. Бит 7: 1=установлена опция 128К ОЗУ
          Бит 6 используется программой SETUP
────────────────────────────────────────────────────────────────
@pb
@ce@e114. Прочие порты@e0

     В этом разделе приведено  описание портов, не относящихся к
конкретным устройствам.

 Адрес    Операция      Назначение
────────────────────────────────────────────────────────────────
80h       запись       Используется в AT на этапе начального
                       тестирования для накопления информации об
                       ошибках.
────────────────────────────────────────────────────────────────
90h       запись       Управляющий порт центрального арбитра PS/2
────────────────────────────────────────────────────────────────
91h       чтение       Обратная связь с выбранной платой PS/2
────────────────────────────────────────────────────────────────
92h       запись       Управляющий порт A PS/2
────────────────────────────────────────────────────────────────
94h       запись       Установка параметров системной платы PS/2
────────────────────────────────────────────────────────────────
96h, 97h  запись       Выбор коннектора каналов в PS/2
────────────────────────────────────────────────────────────────
0A0h      запись       Разрешение или запрещение NMI в PC/XT:
                       out 0A0h,80h - разрешает NMI;
                       out 0A0h,0   - запрещает NMI.
────────────────────────────────────────────────────────────────
0F0h      запись       Вывод любого байта сбрасывает защелку
                       сопроцессора 80287, которая включается по
                       незамаскированной ошибке сопроцессора.

0F1h      запись       Вывод любого байта сбрасывает сопроцессор
                       80287 из защищенного режима в реальный.

0F8h-0FCh   ───        Эти порты используются процессором 80286
                       для обмена данными с сопроцессором.
────────────────────────────────────────────────────────────────
210h      запись       Управляющий порт блока расширения XT.
213h      запись       Разрешение блока расширения XT.
215h      запись       Регистр шины данных блока расширения XT.
215h      запись       Регистр адреса блока расширения XT
                       (старший байт).
216h      запись       Регистр адреса блока расширения XT
                       (младший байт).
────────────────────────────────────────────────────────────────
@pb
@ce@e1Приложение 1. Скан-коды клавиш@e0

     Всякий  раз,   когда  клавиатура  вызывает  прерывание   по
нажатию или отпусканию  клавиши, она передает  обработчику этого
прерывания "скан-код" данной клавиши,  т. е. ее порядковый номер
на клавиатуре. Скан-коды клавиш различных клавиатур кодируются с
некоторыми отличиями.

     83-клавишная клавиатура PC/XT:
     Скан-код клавиши является семибитовым, а старший бит байта,
содержащего скан-код,  сообщает причину прерывания:  0 - клавиша
нажата, 1 - клавиша отпущена.  Скан-коды клавиш приведены в таб-
лице:

      ┌────────┬─────────────┬────────┬─────────────┐
      │Скан-код│   Клавиша   │Скан-код│  Клавиша    │
      ├────┬───┼─────────────┼────┬───┼─────────────┤
      │01h │ 1 │    Esc      │2Bh │ 43│    \ |      │
      │02h │ 2 │    1 !      │2Ch │ 44│     Z       │
      │03h │ 3 │    2 @      │2Dh │ 45│     X       │
      │04h │ 4 │    3 #      │2Eh │ 46│     C       │
      │05h │ 5 │    4 $      │2Fh │ 47│     V       │
      │06h │ 6 │    5 %      │30h │ 48│     B       │
      │07h │ 7 │    6 ^      │31h │ 49│     N       │
      │08h │ 8 │    7 &      │32h │ 50│     M       │
      │09h │ 9 │    8 *      │33h │ 51│    , <      │
      │0Ah │ 10│    9 (      │34h │ 52│    . >      │
      │0Bh │ 11│    0 )      │35h │ 53│    / ?      │
      │0Ch │ 12│    - _      │36h │ 54│правый Shift │
      │0Dh │ 13│    = +      │37h │ 55│  PrtSc *    │
      │0Eh │ 14│  BackSрace  │38h │ 56│   Alt       │
      │0Fh │ 15│    Tab      │39h │ 57│  пробел     │
      │10h │ 16│     Q       │3Ah │ 58│ CaрsLock    │
      │11h │ 17│     W       │3Bh │ 59│    F1       │
      │12h │ 18│     E       │3Ch │ 60│    F2       │
      │13h │ 19│     R       │3Dh │ 61│    F3       │
      │14h │ 20│     T       │3Eh │ 62│    F4       │
      │15h │ 21│     Y       │3Fh │ 63│    F5       │
      │16h │ 22│     U       │40h │ 64│    F6       │
      │17h │ 23│     I       │41h │ 65│    F7       │
      │18h │ 24│     O       │42h │ 66│    F8       │
      │19h │ 25│     P       │43h │ 67│    F9       │
      │1Ah │ 26│    [ {      │44h │ 68│    F10      │
      │1Bh │ 27│    ] }      │45h │ 69│  NumLock    │
      │1Ch │ 28│   Enter     │46h │ 70│ ScrollLock  │
      │1Dh │ 29│   Ctrl      │47h │ 71│   Home [7]  │
      │1Eh │ 30│     A       │48h │ 72│стр. вверх[8]│
      │1Fh │ 31│     S       │49h │ 73│   PgUр [9]  │
      │20h │ 32│     D       │4Ah │ 74│     -       │
      │21h │ 33│     F       │4Bh │ 75│   <-  [4]   │
      │22h │ 34│     G       │4Ch │ 76│   [5]       │
      │23h │ 35│     H       │4Dh │ 77│    -> [6]   │
      │24h │ 36│     J       │4Eh │ 78│     +       │
      │25h │ 37│     K       │4Fh │ 79│   End [1]   │
      │26h │ 38│     L       │50h │ 80│стр. вниз [2]│
      │27h │ 39│    ; :      │51h │ 81│   PgDn [3]  │
      │28h │ 40│    ' "      │52h │ 82│    Ins [0]  │
      │29h │ 41│    ` ~      │53h │ 83│    Del [.]  │
      │2Ah │ 42│ левый Shift │54h │ 84│   SysReq    │
      └────┴───┴─────────────┴────┴───┴─────────────┘
@pb
     84-клавишная клавиатура AT:
     Отличается  от  клавиатуры  PC/XT  наличием  дополнительной
клавиши SysReq  (см. таблицу выше).  Кроме того, при  отпускании
клавиши  передается не  ее скан-код  + 80h,  а 2-байтовая после-
довательность: 0F0h, скан-код.

     101-клавишная клавиатура:
     Эта  клавиатура  имеет  три  набора отображения скан-кодов;
номер набора выбирается через порт 64h. При включении клавиатура
начинает работать в наборе  2, который существенно отличается от
скан-кодов предыдущих клавиатур. Однако, скан-коды транслируются
аппаратным  интерфейсом   клавиатуры  прежде,  чем   они  станут
доступны  программам, читающим  ввод с  клавиатуры. В результате
все  приведенные выше  скан-коды остаются  действительными и для
101-клавишной клавиатуры.  Клавиши, уникальные для  этой клавиа-
туры, кодируются следующим образом:

    ┌─────────────────────────┬───────────────────────┐
    │Клавиша                  │Последовательность     │
    ├─────────────────────────┼───────────────────────┤
    │F11                      │57h                    │
    │F12                      │58h                    │
    │правый Alt               │E0h 38h                │
    │правый Ctrl              │E0h 1Dh                │
    │PrintScreen              │E0h 2Ah E0h 37h        │
    │Shift-PrintScreen(SysReq)│E0h 37h                │
    │Ctrl-PrintScreen (SysReq)│E0h 37h                │
    │Alt-PrintScreen          │54h                    │
    │Pause                    │E1h 1Dh 45h E1h 9Dh C5h│
    │Ctrl-Pause (Break)       │E0h 46h E0h C6h        │
    │Insert                   │E0h 53h                │
    │Shift-Insert             │E0h AAh E0h 52h        │
    │Delete                   │E0h 53h                │
    │Shift-Delete             │E0h AAh E0h 53h        │
    │стрелка влево            │E0h 4Bh                │
    │Shift-стрелка влево      │E0h AAh E0h 4Bh        │
    │Home                     │E0h 47h                │
    │Shift-Home               │E0h AAh E0h 47h        │
    │End                      │E0h 4Fh                │
    │Shift-End                │E0h AAh E0h 4Fh        │
    │стрелка вверх            │E0h 48h                │
    │Shift-стрелка вверх      │E0h AAh E0h 48h        │
    │стрелка вниз             │E0h 50h                │
    │Shift-стрелка вниз       │E0h AAh E0h 50h        │
    │PageUр                   │E0h 49h                │
    │Shift-PageUр             │E0h AAh E0h 49h        │
    │PageDown                 │E0h 51h                │
    │Shift-PageDown           │E0h AAh E0h 51h        │
    │стрелка вправо           │E0h 4Dh                │
    │Shift-стрелка вправо     │E0h AAh E0h 4Dh        │
    │правая Enter             │E0h 1Ch                │
    │правая /                 │E0h 35h                │
    │Shift- правая /          │E0h AAh E0h 35h        │
    └─────────────────────────┴───────────────────────┘

     Обратите внимание, что у  клавиш, имеющих аналоги на старых
клавиатурах,   второй   код   последовательности   совпадает  со
скан-кодом  старой  клавиши.  Поэтому  во  многих  случаях можно
просто игнорировать префикс E0h.
@pb
@ce@e1Приложение 2. Типы жестких дисков@e0

     В  этом приложении  приведена информация  о жестких дисках,
поддерживаемых  BIOS IBM  PC AT  в порядке  их номеров, присваи-
ваемых   в  КМОП.   Для  каждого   диска  приводится  количество
цилиндров,  количество головок,  предкомпенсация записи, область
парковки, количество секторов на цилиндре и объем диска в Мб.

──────────────────────────────────────────────────────────────
Номер Кол-во    Кол-во  Предкомп. Область  Кол-во   Объем
типа  цилиндров головок записи    парковки секторов диска, Мб
───────────────────────────────────────────────────────────────
  1      306       4      128       305       17        10,1
  2      615       4      300       615       17        20,4
  3      615       6      300       615       17        30,6
  4      940       8      512       940       17        62,4
  5      940       6      512       940       17        46,8
  6      615       4      нет       615       17        20,4
  7      462       8      256       511       17        30,6
  8      733       5      нет       733       17        30,4
  9      900      15      нет       901       17       112,0
 10      820       3      нет       820       17        20,4
 11      855       5      нет       855       17        35,4
 12      855       7      нет       855       17        49,6
 13      306       8      128       319       17        20,3
 14      733       7      нет       733       17        42,5
 15                Зарезервирован - см. 13.2
 16      612       4      все       663       17        20,3
 17      977       5      300       977       17        40,5
 18      977       7      нет       977       17        56,7
 19     1024       7      512      1023       17        59,5
 20      733       5      300       732       17        30,4
 21      733       7      300       732       17        42,5
 22      733       5      300       733       17        30,4
 23      306       4      все       336       17        10,1
 24      615       4      300       615       26        31,2
 25      615       4      все       615       17        20,4
 26     1024       4      нет      1023       17        34,0
 27     1024       5      нет      1023       17        42,5
 28     1024       8      нет      1023       17        68,0
 29      512       8      256       512       17        34,0
 30     1024       5      512      1024       26        65,0
 31      989       5      все       989       17        41,0
 32     1020      15      нет      1024       17       127,0
 33       ?        ?       ?         ?         ?         ?
 34       ?        ?       ?         ?         ?         ?
 35     1024       9     1024      1024       17        76,5
 36     1024       5      512      1024       17        42,5
 37      830      10      нет       830       17        68,8
 38      823      10      256       824       17        68,3
 39      615       4      128       664       17        20,4
 40      615       8      128       664       17        40,8
 41      917      15      нет       918       17       114,1
 42     1023      15      нет      1024       17       127,3
 43      823      10      512       823       17        68,3
 44      820       6      нет       820       17        40,8
 45     1024       8      нет      1024       17        68,0
 46      925       9      нет       925       17        69,1
 47      699       7      256       700       17        40,6
───────────────────────────────────────────────────────────────

     Примечания.
     1.  Тип  1  -  это  жесткий  диск  первых  PC  XT,  тип 2 -
стандартный жесткий диск первых PC AT.

     2. Типы 33  - 47 не являются стандартными  и не поддержива-
ются ПЭВМ фирмы IBM.
@pb
@e1@ceПриложение 3. Подготовка ПЭВМ к работе@e0

     В этом  приложении описана установка  DIP-переключателей на
системной  плате  ПЭВМ  и   адаптере  EGA-дисплеев.  Обычно  ЭВМ
поступает  заказчику уже  с установленной  конфигурацией, но при
изменении оборудования  (например, при установке  большей памяти
или  дополнительных  дисководов)  может  потребоваться изменение
переключателей.

     Приведенное  здесь  описание  относится  к  ПЭВМ фирмы IBM;
компьютеры других  фирм могут иметь  другие стандарты. Например,
переключатели  Comрaq Portable  имеют  другой  смысл и  нигде не
описаны. Переключатели Deskрro подписаны внутри корпуса ЭВМ.

     Переключатели IBM PC
     ────────────────────

     Первоначальная модель  IBM PC,  имевшая 64К ОЗУ на системной
плате  (далее  называемая  PC-1),  настраивается  двумя колодками
переключателей,  помеченными SW1  и SW2.

           SW1
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │   │   │   ║
    ╙╥┴╥┴─┴─┴─┴─┴─┴─╜
     ║ ║ ╚╦╝ ╚╦╝ ╚═╩═  7-8: количество НГМД
     ║ ║  ║   ╚══════  5-6: активный дисплей
     ║ ║  ╚══════════  3-4: размер ОЗУ на системной плате
     ║ ╚═════════════  2:   наличие сопроцессора 8087
     ╚═══════════════  1:   наличие НГМД

           SW2 (PC-1)

 ON  ╓1┬2┬3┬4┬5┬6┬7┬8╖
     ║       │▄│▄│▄│▄║
     ╙─┴─┴─┴─┴─┴─┴─┴─╜
      ╚══╦══╝ ╚═════╩═  5-8: всегда OFF
         ╚════════════  1-4: полный размер ОЗУ

     Более  поздняя  версия  IBM  PC  (называемая  здесь   PC-2)
интерпретирует переключатели несколько иначе. Точнее говоря, SW1
имеет то же назначение, а SW2 показано ниже:

       SW 2  (PC-2)
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║         │▄│▄│▄║
    ╙─┴─┴─┴─┴─┴─┴─┴─╜
     ╚═══╦═══╝ ╚═══╩═  6-8: всегда OFF
         ╚═══════════  1-5: полный размер ОЗУ

     Опишем подробно назначение переключателей.
@pb
     Количество накопителей на гибких дисках (НГМД):
     ───────────────────────────────────────────────

          SW1
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖           ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▄│ │ │ │ │ │▀│▀║ 1 НГМД       ║▄│ │ │ │ │ │▀│▄║ 3 НГМД
    ╙─┴─┴─┴─┴─┴─┴─┴─╜              ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖           ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▄│ │ │ │ │ │▄│▀║ 2 НГМД       ║▄│ │ │ │ │ │▄│▄║ 4 НГМД
    ╙─┴─┴─┴─┴─┴─┴─┴─╜              ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Примечание. Ключ 1 в позиции ON означает отсутствие НГМД.

     Активный дисплей:
     ─────────────────

           SW1
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │ │ │▀│▀│ │ ║ Нет или EGA
    ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │ │ │▄│▀│ │ ║ 40x25 CGA
    ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │ │ │▀│▄│ │ ║ 80x25 CGA
    ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │ │ │▄│▄│ │ ║ Монохромный адаптер (MDA) либо и MDA, и CGA
    ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Наличие сопроцессора 8087:
     ─────────────────────────

           SW1
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖            ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │▄│ │ │ │ │ │ ║ есть 8087     ║ │▀│ │ │ │ │ │ ║ нет 8087
    ╙─┴─┴─┴─┴─┴─┴─┴─╜               ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Размер ОЗУ на системной плате:
     ──────────────────────────────

           SW1
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║ │ │▄│▄│ │ │ │ ║ 64K или больше
    ╙─┴─┴─┴─┴─┴─┴─┴─╜


     Полный размер ОЗУ (SW2 для PC-1):
     ─────────────────────────────────

     Для PC-1 ключи  5 - 8 всегда в  положении OFF. Максимальный
размер ОЗУ - 544К.
@pb
       SW2  (PC-1)
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖         ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▀│▀│ │ │ │ ║ 64K        ║▀│▄│▀│▄│ │ │ │ ║ 384K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜            ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖         ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▄│▀│▀│ │ │ │ ║ 128K       ║▀│▀│▄│▄│ │ │ │ ║ 448K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜            ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖         ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▄│▀│ │ │ │ ║ 192K       ║▀│▄│▄│▄│ │ │ │ ║ 512K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜            ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖         ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▄│▄│▀│ │ │ │ ║ 256K       ║▄│▄│▄│▄│ │ │ │ ║ 544K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜            ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▀│▄│ │ │ │ ║ 320K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Полный размер ОЗУ (SW2 для PC-2):
     ─────────────────────────────────

     Для PC-2 ключи  6 - 8 всегда в  положении OFF. Максимальный
размер ОЗУ -  640К. Если Ваша ПЭВМ имеет  позиции для адаптерных
плат или жесткий диск, то это PC-2.

       SW2  (PC-2)
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖          ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▀│▀│▀│ │ │ ║ 64K         ║▀│▄│▀│▄│▀│ │ │ ║ 384K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜             ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖          ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▄│▀│▀│▀│ │ │ ║ 128K        ║▀│▀│▄│▄│▀│ │ │ ║ 448K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜             ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖          ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▄│▀│▀│ │ │ ║ 192K        ║▀│▄│▄│▄│▀│ │ │ ║ 512K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜             ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖          ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▄│▄│▀│▀│ │ │ ║ 256K        ║▀│▀│▀│▀│▄│ │ │ ║ 576K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜             ╙─┴─┴─┴─┴─┴─┴─┴─╜
 ON ╓1┬2┬3┬4┬5┬6┬7┬8╖          ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
    ║▀│▀│▀│▄│▀│ │ │ ║ 320K        ║▀│▄│▀│▀│▄│ │ │ ║ 640K
    ╙─┴─┴─┴─┴─┴─┴─┴─╜             ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Примечания:

     1. Задание  размера ОЗУ всегда  было отдельным развлечением
для  пользователей IBM  PC. Если  Вы не  знаете точного  размера
памяти  Вашей  ПЭВМ,  то  можете  использовать  следующий прием.
Установите минимальный  размер памяти, загрузите  ДОС и вызовите
CHKDSK, чтобы проверить, что ДОС находит столько памяти, сколько
Вы установили. Затем увеличивайте размер ОЗУ до тех пор, пока не
произойдет ошибка.

     2. Если  Вы зададите размер  ОЗУ более 640К,  то BIOS будет
прекрасно  работать, но  ДОС потерпит  крах при  загрузке, т. к.
часть COMMAND.COM грузится в старшие адреса памяти.

     Переключатели IBM PC XT
     ───────────────────────

     IBM PC XT имеет одну колодку переключателей (SW1):

      SW1 (XT)
ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
   ║▄│ │   │   │   ║
   ╙╥┴╥┴─┴─┴─┴─┴─┴─╜
    ║ ║ ╚╦╝ ╚╦╝ ╚═╩═  7-8: количество НГМД
    ║ ║  ║   ╚══════  5-6: активный дисплей
    ║ ║  ╚══════════  3-4: размер ОЗУ на системной плате
    ║ ╚═════════════  2:   наличие 8087
    ╚═══════════════  1:   всегда OFF

     Ключи 2, 5-6 и 7-8 имеют тот же смысл, что на IBM PC. Ключи
3-4 задают размер ОЗУ на системной плате:

       SW1 (XT)
ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
   ║ │ │▄│▀│ │ │ │ ║  128K
   ╙─┴─┴─┴─┴─┴─┴─┴─╜
ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
   ║ │ │▀│▄│ │ │ │ ║  192K
   ╙─┴─┴─┴─┴─┴─┴─┴─╜
ON ╓1┬2┬3┬4┬5┬6┬7┬8╖
   ║ │ │▄│▄│ │ │ │ ║  256K
   ╙─┴─┴─┴─┴─┴─┴─┴─╜

     Примечание.  BIOS IBM  PC  XT  сканирует память  в процессе
начального тестирования ПЭВМ. Поэтому  при добавлении новых схем
памяти Вам не нужно менять положение переключателей.

     Переключатели IBM PC AT
     ───────────────────────

     IBM  PC   AT  не  имеет   DIP-переключателей.  Конфигурация
оборудования  хранится в  КМОП и  может быть  изменена с помощью
программы SETUP. Описание КМОП см. в п. 13.

     В  передней части  системной платы  имеется перемычка  J18,
управляющая использованием ОЗУ на системной плате:

  ╔J18╗
1 ║┌o┐║  Разрешить второй банк емкостью 256K
2 ║└o┘║  (512К на системной плате)
3 ║ o ║
  ╚═══╝
  ╔J18╗
1 ║ o ║  Запретить второй банк емкостью 256K
2 ║┌o┐║  (256К на системной плате)
3 ║└o┘║
  ╚═══╝

     Еще один переключатель, помеченный  SW1, находится в задней
части системной платы и задает первичный дисплей ПЭВМ:

 ╔SW1╗
 ║▐█▌║ ON     ON (назад) - CGA
 ║   ║ OFF
 ╚═══╝
 ╔SW1╗
 ║   ║ ON
 ║▐█▌║ OFF    OFF (вперед) - монохромный адаптер
 ╚═══╝

     Примечание. Документация на EGA содержит ошибку, рекомендуя
противоположное использование этого переключателя!

     Переключатели адаптера EGA
     ──────────────────────────

     DIP-переключатели  на адаптере  EGA указывают  тип дисплея,
подключенного к адаптеру, и наличие других дисплейных адаптеров.
Ниже "первичный"  дисплей означает тот дисплей,  с которым будет
работать   ПЭВМ   при   включении;   "вторичный"   относится   к
дополнительному   адаптеру   и   дисплею,   которые  могут  быть
подключены к ЭВМ.

     Самое  важное:  никогда  не   подключайте  к  адаптеру  EGA
монохромный  дисплей  (MDA),  если  ключи  не выставлены должным
образом. Вы можете физически разрушить дисплей!

ON ╓4┬3┬2┬1╖ Первичный EGA с цветным монитором 40x25
   ║▀│▄│▄│▀║ Вторичный MDA
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный EGA с цветным монитором 80x25
   ║▀│▄│▄│▄║ Вторичный MDA
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный EGA с расширенным цветным монитором
   ║▄│▀│▀│▀║ (эмуляция CGA)
   ╙─┴─┴─┴─╜ Вторичный MDA
ON ╓4┬3┬2┬1╖ Первичный EGA с расширенным цветным монитором
   ║▄│▀│▀│▄║ (в режиме EGA)
   ╙─┴─┴─┴─╜ Вторичный MDA
ON ╓4┬3┬2┬1╖ Первичный EGA с монохромным монитором
   ║▄│▀│▄│▀║ Вторичный CGA с цветным монитором 40х25
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный EGA с монохромным монитором
   ║▄│▀│▄│▄║ Вторичный CGA с цветным монитором 80х25
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный MDA
   ║▀│▀│▀│▀║ Вторичный EGA с цветным монитором 40х25
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный MDA
   ║▀│▀│▀│▄║ Вторичный EGA с цветным монитором 80х25
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный MDA
   ║▀│▀│▄│▀║ Вторичный EGA с расширенным цветным монитором
   ╙─┴─┴─┴─╜ (эмуляция CGA)
ON ╓4┬3┬2┬1╖ Первичный MDA
   ║▀│▀│▄│▄║ Вторичный EGA с расширенным цветным монитором
   ╙─┴─┴─┴─╜ (в режиме EGA)
ON ╓4┬3┬2┬1╖ Первичный CGA с цветным монитором 40х25
   ║▀│▄│▀│▀║ Вторичный EGA с монохромным монитором
   ╙─┴─┴─┴─╜
ON ╓4┬3┬2┬1╖ Первичный CGA с цветным монитором 80х25
   ║▀│▄│▀│▄║ Вторичный EGA с монохромным монитором
   ╙─┴─┴─┴─╜

     EGA имеет три перемычки (P1 - P3):

    ╔P1═╗
  1 ║┌o┐║ Поддержка расширенного цветного монитора
  2 ║└o┘║ (640x350 и 64 цвета)
  3 ║ o ║
    ╚═══╝
    ╔P1═╗
  1 ║ o ║
  2 ║┌o┐║ Поддержка стандартного цветного монитора
  3 ║└o┘║ (640x200 и 16 цветов)
    ╚═══╝

    P2 (не показанный здесь) - это коннектор светового пера.

    ╔P3═╗
  1 ║┌o┐║ Задает порты в/в EGA в адресах 3xxH
  2 ║└o┘║ (стандартная установка)
  3 ║ o ║
    ╚═══╝
    ╔P3═╗
  1 ║ o ║
  2 ║┌o┐║ Задает порты в/в EGA в адресах 2xxH
  3 ║└o┘║ (не поддерживается BIOSом EGA)
    ╚═══╝
@pb
@ce@e1Глоссарий@e0

     Адаптер (adaрter).
     См. контроллер.

     Ассемблер (assembly language).
     Язык  программирования   на  уровне   команд   центрального
процессора.

     Байт (byte).
     Минимальная адресуемая единица памяти ЭВМ размером 8 бит.

     Бит (bit).
     Двоичный разряд, принимающий значения 0 или 1.

     Блок (block).
     Совокупность данных, которые вводятся или выводятся за одну
операцию ввода-вывода.

     Дисплей (disрlay).
     Устройство отображения символьной и графической информации.

     Интерфейс (interface).
     Аппаратное  сопряжение  двух  устройств,  обеспечивающее их
электрическое и логическое согласование.

     Интерфейс параллельный (рarallel interface).
     Сопряжение  ПЭВМ  с  внешним  устройством, при котором байт
информации  передается  одновременно  по  восьми  линиям. Обычно
используется для подключения печатающих устройств.

     Интерфейс последовательный (serial interface);
     Сопряжение  ПЭВМ   с  внешним   устройством,  при   котором
информация  передается  побитно.  Используется  для  подключения
мыши, графопостроителя и для межмашинной связи.

     Канал (channel).
     Устройство или  независимая часть  устройства, используемое
для передачи данных между ЭВМ и периферией.

     Контроллер (controller).
     Микропроцессорное  устройство,  обеспечивающее  связь ЭВМ с
периферийным устройством.

     Накопитель дисковый (disk drive).
     Устройство внешней памяти на магнитных дисках, подключается 
к ЭВМ через контроллер. Диски ПЭВМ делятся на гибкие (дискеты) и 
жесткие (винчестерские).

     Память оперативная, ОЗУ (random access memory, RAM).
     Часть  ЭВМ,  используемая  для  хранения  данных в процессе
работы ЭВМ. При выключении ЭВМ содержимое ОЗУ теряется.

     Память постоянная, ПЗУ (read-only memory, ROM).
     Часть ЭВМ,  используемая для  хранения неизменяемой  инфор-
мации и доступная только для чтения.

     Порт ввода-вывода (i/o рort).
     Адрес в пространстве ввода-вывода, обеспечивающий доступ  к
связанному с данным портом регистром внешнего устройства.

     Позиции адаптерных плат (exрansion slots).
     Свободные  позиции  в  корпусе  ЭВМ,  в  которые могут быть
вставлены платы контроллеров устройств ввода-вывода.

     Прерывание (interruрt).
     Внешнее событие, вызывающее прерывание работы ЦП и передачу
управления программе обработки данного прерывания.

     Прямой доступ в память, ПДП (direct memory access, DMA).
     Способ  доступа  к  памяти  ЭВМ,  при  котором периферийный
процессор работает  с памятью,  "воруя" циклы  шины у  централь-
ного процессора.

     Регистры (registers).
     Аппаратные  компоненты  ЭВМ,  предназначенные для обработки
данных с высокой скоростью.

     Слово (word).
     Адресуемая  единица  машинной  памяти,  состоящая  из  двух
соседних байтов.

     Центральный процессор, ЦП (central рrocessing unit, CPU).
     Основное   устройство    ЭВМ,    осуществляющее    выборку,
декодирование   и   исполнение   команд,   а   также  управление
периферийными устройствами через системную шину.

     DIP-переключатели (DIP-switchs).
     Переключатели  на  контактных  колодках  плат,  позволяющие
изменить конфигурацию соответствующего устройства.
@pb
@e1
@ceПеречень рекомендуемых материалов цикла
@ce"ПРОГРАММНО-АППАРАТНЫЕ СРЕДСТВА
@ceПЕРСОНАЛЬНЫХ ЭВМ СЕМЕЙСТВА IBM PC"
@e0


А1. Микропроцессоры фирмы Intel.

А3. Базовая система ввода-вывода (BIOS).

Б1. MS-DOS. Справочник пользователя.

Б2. MS-DOS. Справочник программиста.

Г2. Макроассемблер.

Г6. Средства отладки программ.
