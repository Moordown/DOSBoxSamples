.pb
             3. 32-разрядный микропроцессор 80386
                   3.1. Техническое описание

     3.1.1. Общая характеристика

     32-разрядный  МП  Intel  80386  предназначен для реализации
многозадачных операционных систем и прикладных программ, требую-
щих  высокой  производительности   процессора.  Он  обеспечивает
работу с 32-разрядными данными и адресами, обеспечивая адресацию
4 Гбайт физической  памяти и до 64  Терабайт (2^46)  виртуальной
памяти. Его  тактовая частота - 16  или 20 Мгц в  зависимости от
исполнения, что дает фактическую производительность 4 - 5 милли-
онов операций в секунду.

     МП 80386  имеет три режима работы:  режим реального адреса,
защищенный режим и режим виртуального процессора 8086 (далее для
краткости называемые реальным,  защищенным и виртуальным режимом
соответственно).

     Разводка контактов корпуса МП 80386 приведена на рис. 3.1.

    P   N   M   L   K   J   H   G   F   E   D   C   B   A
  ┌───────────────────────────────────────────────────────┐
 1│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │ 1
  │A30 A27 A26 A23 A21 A20 A17 A16 A15 A14 A11  A8 Vss Vcc│
 2│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │ 2
  │Vcc A31 A29 A24 A22 Vss A16 Vcc Vss A13 A10  A7  A5 Vss│
 3│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │ 3
  │D30 Vss Vcc A28 A25 Vss A19 Vcc Vss A12  A9  A6  A4  A3│
 4│ o   o   o                                   o   o   o │ 4
  │D29 Vcc Vss                                  A2 н/к н/к│
 5│ o   o   o                                   o   o   o │ 5
  │D26 D27 D31                                 Vcc Vss Vcc│
 6│ o   o   o                                   o   o   o │ 6
  │Vss D25 D28                                 н/к н/к Vss│
 7│ o   o   o                                   o   o   o │ 7
  │D24 Vcc Vcc                                н/к INTR Vcc│
 8│ o   o   o                                   o   o   o │ 8
  │Vcc D23 Vss                             PEREQ NMI ERROR│
 9│ o   o   o                                   o   o   o │ 9
  │D22 D21 D20                              RESET BUZY Vss│
10│ o   o   o                                   o   o   o │10
  │D19 D17 Vss                                LOCK W/R Vcc│
11│ o   o   o                                   o   o   o │11
  │D18 D16 D15                                 Vss Vss D/C│
12│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │12
  │D14 D12 D10 Vcc  D7 Vss D0 Vcc CLK2 BEO Vcc Vcc н/кM/IO│
13│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │13
  │D13 D11 Vcc  D8  D5 Vss D1 READY н/к н/к NA BE1 BE2 BE3│
14│ o   o   o   o   o   o   o   o   o   o   o   o   o   o │14
  │Vss D9 HLDA  D6  D4  D3  D2 Vcc VssADS HOLD BS16Vss Vcc│
  └───────────────────────────────────────────────────────┘

     Рис. 3.1.  Разводка контактов  коpпуса МП  80386 (площадки,
помеченные н/к, подключать нельзя).

.pb
В следующей таблице  пpиведена кpаткая хаpактеpистика  входных и
выходных линий МП 80386.

Обозначение Вход/выход            Описание
────────────────────────────────────────────────────────────────
   CLK2     ВХОД       СИНХРОНИЗАЦИЯ
  D0-D31    ВХ/ВЫХ-3   ШИНА ДАННЫХ: Эти линии вводят и выводят
                       данные.
BE0#-BE3#   ВЫХОД      РАЗРЕШЕНИЕ БАЙТОВ: Указывают, какие линии
                       данных участвуют в пеpедаче:
                       BE0# относится к D0-D7;
                       BE1# относится к D8-D15;
                       BE2# относится к D16-D23;
                       BE3# относится к D24-D31.
  A2-A31    ВЫХ-3      ШИНА АДРЕСОВ: Обеспечивает адpесацию
                       памяти и поpтов ввода-вывода
   W/R#     ВЫХ-3      ЧТЕНИЕ/ЗАПИСЬ: Различает циклы чтения и
                       записи.
   D/C#     ВЫХ-3      УПРАВЛЕНИЕ/ДАННЫЕ: Различает циклы данных
                       и упpавляющие циклы
   M/IO#    ВЫХ-3      ПАМЯТЬ/ВВОД-ВЫВОД: Различает циклы памяти
                       и ввода-вывода.
   LOCK#    ВЫХ-3      ЗАХВАТ ШИНЫ: Различает блокиpованные и
                       неблокиpованные циклы шины
   ADS#     ВЫХ-3      СОСТОЯНИЕ АДРЕСА: Сообщает, что на шину
                       выставлен адpес (линии A2-A31, W/R, D/C,
                       M/IO и BE0-BE3).
 READY#     ВХОД       ПОДТВЕРЖДЕНИЕ ПЕРЕДАЧИ: Сообщает, что
                       цикл шины завеpшен.
   NA#      ВХОД       ЗАПРОС СЛЕДУЮЩЕГО АДРЕСА: Сообщает, что
                       система готова пpинять следующий адpес.
   BS16#    ВХОД       16-РАЗРЯДНАЯ ШИНА: Позволяет МП pаботать
                       с 32- и 16-pазpядной шинами.
   HOLD     ВХОД       Запросы шины от других ведуших. ЦП не
                       получает управления шиной до снятия
                       этого сигнала.
   HDLA     ВЫХОД      Разрешение шины запрашивающему ведущему.

  PEREQ     ВХОД       Сопpоцессоp запpашивает пеpедачу данных.
  BUZY#     ВХОД       Сопpоцессоp занят выполнением команды.
  ERROR#    ВХОД       Пpи выполнении сопpоцессоpом пpедыдущей
                       команды пpоизошла незамаскиpованная
                       ошибка.
   INTR     ВХОД       ЗАПРОС МАСКИРУЕМОГО ПРЕРЫВАНИЯ.
   NMI      ВХОД       ЗАПРОС НЕМАСКИРУЕМОГО ПРЕРЫВАНИЯ.
  RESET     ВХОД       СБРОС: Сбpос МП в начальное состояние.
   Vss       ---       земля
   Vcc       ---       напряжение питания +5 В
────────────────────────────────────────────────────────────────

     Состояние щины МП 80386 определяется следующим образом:

M/IO# D/C# W/R#   Инициируемый цикл шины
───────────────────────────────────────────────────────────────
 0     0    0   Подтверждение прерывания
 0     0    1   Запрещенная комбинация
 0     1    0   Чтение ввода-вывода
 0     1    1   Запись ввода-вывода
 1     0    0   Выбоpка кодов из памяти
 1     0    1   Останов или выключение
 1     1    0   Чтение данных из памяти
 1     1    1   Запись данных в память
───────────────────────────────────────────────────────────────

.pb
     3.1.2. Функциональное описание

     МП 80386  логически состоит из  шести устройств:

     - устройства сопряжения канала (УСК или BIU - Bus Interface
Unit);
     -  устройства  предвыборки  команд  (УПК  или  CPU  -  Code
Prefetch Unit);
     - устройства декодировки команд  (УДК или IDU - Instruction
Decode Unit);
     - устройства сегментации (УС или SU - Segmentation Unit);
     - устройства  страничной организации (УСО  или PU -  Paging
Unit);
     - устройства  обработки  (УО  или  EU - Execution Unit).

     Устройство  обработки  состоит,  в  свою  очередь,  из трех
подустройств:

     - управляющего устройства;
     - устройства работы с данными;
     - устройства проверки защиты.

     Блок-схема МП приведена на рис. 3.2.

     УСК является интерфейсом между МП 80386 и прочими устройст-
вами,  а  именно:  обрабатывает  запросы  на  выборку  команд  и
передачу данных  в порядке их  приоритетов и генерирует  сигналы
для выполнения текущего цикла шины.

     УПК обеспечивает  выборку команд и  помещение их в  очередь
размером 16 байтов.

     УДК  выполняет декодировку  команд, находящихся  в очереди,
включая загрузку и сохранение операндов.

     УС  преобразует логические  адреса операндов  в линейные по
требованию УО.

     Если разрешена  страничная организация, то  УСО преобразует
линейные адреса в физические.

     УО   исполняет   команды,    извлеченные   из   очереди   и
декодированные; его подустройства выполняют следующие функции:

     -  управляющее   устройство  обеспечивает  микропрограммное
ускорение  выполнения операций  умножения, деления  и вычисления
исполнительного адреса;
     - устройство работы  с данными содержит арифметико-логичес-
кое  устройство  (АЛУ),  восемь  регистров  общего  назначения и
64-разрядный  сдвиговый  регистр  для   выполнения  сдвигов   на
несколько байтов за один такт;
      -  устройство  проверки  защиты  обеспечивает   микропрог-
раммную проверку нарушений сегментации.

  Устpойство      Устpойство      Устpойство
  обpаботки      сегментации     стpаничной оpганизации
┌───────────┐   ┌───────────┐   ┌───────────┐
│ Регистpы  │   │           │   │           │
├───────────┤   │ Регистpы  │   │ Буфеp     │
│ Сдвиговый │   │ сегментов │   │ тpансляции│
│ pегистp   │   │           │   │           │
├───────────┤   ├───────────┤   ├───────────┤
│ Умножение │   │           │   │           │
│ и деление │   │ Тpанслатоp│   │ Тpанслатоp│
├───────────┤   │ сегментов │   │ стpаниц   │
│   АЛУ     ╞══>│           ╞══>│           │   Устpойство
└───────────┘   └───────────┘   └───────────┘   сопpяжения
 / \/ \              / \             / \          канала
  ║  ║                ║               ║        ┌───────────┐
  ║  ║               \ /             \ /       │ Интеpфейс │
  ║  ╚═════════════════════════════════════════│ с шиной   │
  ║         / \               / \              └───────────┘
  ║          ║                 ║                    / \
  ║         \ /               \ /                    ║
  ║    ┌───────────┐     ┌───────────┐               ║
  ║    │ Декодеp   │<════╡ Очеpедь   │               ║
  ║    │           │     │пpедзагp-ки│               ║
  ║    ├───────────┤     ├───────────┤               ║
  ╚════╡ Очеpедь   │     │ Пpедзаг-  │<══════════════╝
       │ команд    │     │ pузчик    │
       └───────────┘     └───────────┘
         Устpойство        Устpойство
        декодиpовки       пpедзагpузки

     Рис. 3.2. Блок-схема МП 80386
.pb
     3.1.3. Организация памяти

     МП 80386 обеспечиваeт 32-битовую адресацию к байтам памяти.
Тем самым возможно использование 4 Гбайтов памяти, адресуемой от
00000000h  до  FFFFFFFFh.  Возможны  несколько  моделей  памяти,
определяемых системным программным  обеспечением. С точки зрения
прикладного программиста  память может рассматриваться  либо как
линейный массив байтов с адресами от 0 до 2^32-1, либо как сово-
купность сегментов.

     В сегментной модели  памяти адресное пространство программы
(называемое логическим адресным пространством) может занимать до
2^64 байтов. При этом логическая память представляется как набор
сегментов   определенной  длины.   Количество  сегментов   может
достигать 16383, а  размер сегмента варьируется от 1  байта до 4
Гбайтов. Адрес в сегментной  модели задается парой селектор:сме-
щение, где

     - селектор сегмента -  это 16-разрядное поле, идентифициру-
ющее сегмент;

     - смещение - это 32-разрядное поле, адресующее байт относи-
тельно начала сегмента.

     МП 80386 преобразует  логический адрес вида селектор:смеще-
ние в  линейный адрес на  основе системных таблиц  дескрипторов.
Если страничная организация памяти  выключена, то линейный адрес
совпадает  с  физическим;  в  противном  случае физический адрес
вычисляется по  линейному адресу с  помощью механизма страничной
адресации.

.pb
     3.1.4. Регистры и флаги
     3.1.4.1. Регистры, используемые прикладными программами

     Регистры  МП 80386  можно разбить  на две  группы. К первой
группе  относятся следующие  регистры, используемые  прикладными
программами:

              31              15     8 7      0
              ┌───────────────┬───────┬───────┐
Регистры   EAX│               │  AH  AX  AL   │ Аккумулятор
              ├───────────────┼───────┼───────┤
обшего     EBX│               │  BH  BX  BL   │ База
              ├───────────────┼───────┬───────┤
назначения ECX│               │  CH  CX  CL   │ Счетчик
              ├───────────────┼───────┼───────┤
           EDX│               │  DH  DX  DL   │ Данные
              └───────────────┴───────┴───────┘
              ┌───────────────┬───────────────┐
Регистры-  ESP│                      SP       │ Указатель стека
              ├───────────────┼───────────────┤
указатели  EBP│                      BP       │ Указатель базы
              ├───────────────┼───────────────┤
Индексные  ESI│                      SI       │ Индекс источника
              ├───────────────┼───────────────┤
регистры   EDI│                      DI       │ Индекс приемника
              └───────────────┴───────────────┘
              ┌───────────────┬───────────────┐
           EIP│                      IP       │ Указатель команд
              ├───────────────┼───────────────┤
        EFLAGS│                    FLAGS      │ Флаги условий
              └───────────────┴───────────────┘
              ┌───────────────┐
Сегментные    │      CS       │ Сегмент кодов
              ├───────────────┤
              │      DS       │ Сегмент данных
              ├───────────────┤
регистры      │      SS       │ Сегмент стека
              ├───────────────┤
регистры      │      ES       │ Дополнительные сегменты
              ├───────────────┤
              │      FS       │
              ├───────────────┤
              │      GS       │
              └───────────────┘

     Регистры  общего  назначения  -  это 32-разрядные регистры,
которые используются для  выполнения арифметических и логических
операций.В  некоторых  командах   они  используются  специальным
образом. Каждый  из них может рассматриваться  как двойное слово
(EAX,  EBX,  ECX,  EDX),  как  слово  (AX  и  т. д.) или как два
отдельных байта  (AL и AH  и т. д.).

     Регистры-указатели  (EBP, ESP)  и индексные  регистры (ESI,
EDI)  обычно  содержат  смещения,  используемые  для  вычисления
адресов операндов  в сегменте. Они также  могут использоваться в
арифметических  и логических  операциях. Кроме  того, ESI  и EDI
имеют особое применение в  операциях над строками. Разница между
указателями и индексами состоит в том, что смещение в указателях
берется относительно сегмента стека, а в индексах - относительно
сегмента данных. Младшие слова этих регистров имеют наименования
BP, SP, SI и DI.

     Сегментные  регистры предназначены  для хранения селекторов
соответствующих  сегментов.  Абсолютный  адрес  любого  операнда
вычисляется как сумма базового 32-разрядного адреса его сегмента
и смещения  относительно  начала  этого  сегмента.  При этом бит
переноса не учитывается, т. е. за самым старшим адресом сегмента
следует его самый младший  сегмент. Символически так формируемый
адрес принято записывать в виде сегмент:смещение.

.pb
Регистр  Сегмент      Правила обращения к сегменту
────────────────────────────────────────────────────────────────
  CS     Коды       Все команды автоматически выбираются отсюда.
  SS     Стек       Операции со стеком (PUSH и POP) и адресация
                    относительно регистра BP.
  DS     Данные     Обрашение к данным.
  ES     Дополни-   Приемник строковых команд; используется как
         тельный    дополнительный сегмент данных.
  FS     Дополни-   Дополнительный сегмент данных.
         тельный
  GS     Дополни-   Дополнительный сегмент данных.
         тельный
────────────────────────────────────────────────────────────────

     Указатель команд содержит  адрес текущего байта исполняемой
команды относительно  сегмента кодов. Изменение  его содержимого
происходит автоматически при выборке  очередного байта команды и
при выполнении команд передачи управления.

     Регистр  флагов условий  отображает информацию  о состоянии
процессора. Он имеет  следующий вид (биты  18 - 31  зарезервиро-
ваны):

 1  1  1 1  1 1   1  1
┌7─┬6─┬5┬4─┬3┬2─┬─1┬─0┬─9┬─8┬─7┬─6┬5┬─4┬3┬─2┬1┬─0┐
│VM│RF│*│NT│IOPL│OF│DF│IF│TF│SF│ZF│*│AF│*│PF│*│CF│ Бит:
└┬─┴┬─┴─┴┬─┴─┼──┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴─┴┬─┴─┴┬─┴─┴┬─┘
 │  │    │   │   │  │  │  │  │  │    │    │    └──> 0: CF
 │  │    │   │   │  │  │  │  │  │    │    └───────> 2: PF
 │  │    │   │   │  │  │  │  │  │    └────────────> 4: AF
 │  │    │   │   │  │  │  │  │  └─────────────────> 6: ZF
 │  │    │   │   │  │  │  │  └────────────────────> 7: SF
 │  │    │   │   │  │  │  └───────────────────────> 8: TF
 │  │    │   │   │  │  └──────────────────────────> 9: IF
 │  │    │   │   │  └─────────────────────────────>10: DF
 │  │    │   │   └────────────────────────────────>11: OF
 │  │    │   └────────────────────────────────────>12-13: IOPL
 │  │    └────────────────────────────────────────>14: NT
 │  └─────────────────────────────────────────────>16: RF
 └────────────────────────────────────────────────>17: VM

     Назначение флагов условий следующее:

     CF устанавливается, если  при выполнении сложения возникает
перенос,  а при  выполнении вычитания  - заем  из старшего  бита
результата;

     PF устанавливается, если сумма по модулю два младшего байта
результата равна нулю;

     АF устанавливается, если  при выполнении сложения возникает
перенос,  а  при  выполнении  сложения  -  заем из старшего бита
младшей тетрады результата;

     ZF устанавливается, если результат операции равен нулю;

     SF  устанавливается, если  старший бит  результата операции
равен нулю;

     Установка бита TF  переводит МП в пошаговый режим,  т. е. в
режим,  вызывающий прерывание  Int 01h  после выполнения  каждой
команды процессора;

     Установка бита  IF разрешает маскируемые  прерывания работы
МП, т. е. прерывания от внешних устройств;

     Если  бит  DF  установлен,  то  строковые команды уменьшают
адрес операндов; если он сброшен, то увеличивают;

     OF устанавливается, если  возникает переполнение результата
арифметической операции;  иными словами, при  сложении возникает
перенос  в старший  бит и   нет переноса  из старшего  бита, или
наоборот; при вычитании - возникает  заем из старшего бита и нет
заема в старший бит, или наоборот.

     Поле  IOPL, уровень  привилегий ввода-вывода,  используется
для  того,  чтобы  не  допустить  выполнения команд ввода-вывода
задачей,  не  имеющей  на  это  права.  Значение IOPL изменяется
командой  POPF, выполняющейся  на уровне  0, и  при переключении
задач.

     Флаг  NT  указывает  вложенность  текущей  задачи  в другую
задачу. Если  он установлен, то текущая  задача имеет правильную
обратную связь с предыдущей  задачей. Значение этого флага изме-
няется  при  передаче  управления   через  шлюзы,  прерывания  и
ловушки.

     Флаг  RF  временно  запрещает  отладочные прервыания, чтобы
команда, вызвавшая такое прерывание,  могла быть повторно выпол-
нена без генерации отладочного прерывания.

     Установка  флага  VM  означает,  что  задача  исполняется в
режиме виртуального процессора 8086.

     Отметим, что прикладные программы должны оперировать только
флагами CF, AF, PF, ZF, SF, OF и DF.

     3.1.4.2. Системные регистры

     Описанные  в  этом  разделе  регистры  используются  только
системными программистами.  К ним относятся  регистры управления
памятью,  управляющие регистры,  отладочные регистры  и тестовые
регистры.

     Четыре  регистра управления  памятью содержат  указатели на
определенные системные таблицы:

     GDTR - регистр глобальной таблицы дескрипторов;
     LDTR - регистр локальной таблицы дескрипторов;
     IDTR - регистр таблицы дескрипторов прерываний;
     TR - регистр текущей задачи.

     Четыре управляющих регистра CR0 - CR3 доступны только через
привилегированные варианты команды MOV, например

     MOV  EAX,CR0
     MOV  CR3,EBX

     CR0 соответствует  слову состояния машины (MSW)  МП 80286 и
имеет следующую структуру:

 3  3
┌1─┬0┬─────┬5┬4─┬─3┬─2┬─1┬─0┐
│PG│* . . . *│ET│TS│EM│MP│PE│ Бит:
└┬─┴─┴─┴─┴─┴─┴┬─┴┬─┴┬─┴┬─┴┬─┘
 │            │  │  │  │  └──> 0: Защищенный режим
 │            │  │  │  └─────> 1: Наличие сопроцессора
 │            │  │  └────────> 2: Эмуляция сопроцессора
 │            │  └───────────> 3: Переключение задач
 │            └──────────────> 4: Тип сопроцессора
 └───────────────────────────>31: Страничная организация памяти



     Установка бита  PE переводит МП  в защищенный режим,  сброс
его возвращает МП в реальный режим.

     Если  бит  MP  установлен,  то  при отсутствии сопроцессора
команда WAIT будет генерировать Int 07h.

     Установка бита  EM разрешает эмуляцию  сопроцессора. В этом
случае  по инструкции  ESC  будет  генерироваться Int  07h, если
сопроцессор отсутствует.

     Если бит  TS установлен, то первая  команда, обращающаяся к
сопроцессору, вызовет Int 07h, позволяя программному обеспечению
проверить, принадлежит ли  текущий контекст сопроцессора текущей
задаче. Автоматически устанавливается при переключении задач.

     Бит ET устанавливается или сбрасывается МП по сигналу RESET
автоматически в зависимости от  входа ERROR; если он установлен,
то  МП  использует  32-битовый  протокол  работы с сопроцессором
80387; если сброшен, то  16-битовый протокол сопроцессора 80287.
Этот бит может быть изменен командой MOV CR0,src.

     Установка бита PG  включает механизм страничной организации
памяти; в этом случае линейные адреса транслируются в физические
адреса на основе системных таблиц, описывающих страницы.

     Регистр CR1 является зарезервированным; обращения к нему не
допускаются.

     CR2 и  CR3 используются только  при установленном бите  PG.
CR2  предназначен  для  обработки  ошибок  механизма  страничной
организации; в  него заносится линейный  адрес памяти, вызвавший
ошибку.  CR3 позволяет  процессору найти  каталог таблиц страниц
текущей задачи и имеет вид:

 31                    12 11            0
┌────────────────────────┬──────────────┐
│         PDBR           │   Резерв     │
└────────────────────────┴──────────────┘

     Здесь PDBR - 20-разрядный  базовый регистр каталога страниц
(см. п. 3.1.9.2).


     Отладочные  (DR0 -  DR6) и  тестовые (TR6  - TR7)  регистры
описаны в п. ...

     3.1.5. Методы адресации

     МП  80386  имеeт  несколько  режимов  адресации,  обеспечи-
вающих доступ к операндам,  хранящимся в памяти и/или регистрах,
а именно:

     1. Регистровая  адресация:  операндом  является  содержимое
регистра, указанного  в команде, например ADD  EAX,EBX заносит в
EAX сумму EAX и EBX.

     2. Неявная регистровая адресация: операндом является содер-
жимое регистра, заданного кодом  команды, например AAM корректи-
рует содержимое регистра AX.

     3. Непосредственная адресация:  операнд задается в команде,
напринер MOV AX,1 засылает в регистр AX единицу.

     4. Прямая адресация: в  команде задается либо адрес памяти,
либо адрес порта ввода-вывода;  например, JMP 1000h осуществляет
переход по адресу памяти 1000h, a IN AL,60h вводит байт из порта
60h.

     5. Косвенная  регистровая  адресация: исполнительный  адрес
операнда задается  как смещение, равное  сумме содержимого базо-
вого  регистра,  индексного  регистра  и  смещения,  заданного в
команде (любое из слагаемых может отсутствовать). Примеры:

     MOV mem,AL
     MOV mem[BX],AL
     MOV mem[BX][SI],AL

Здесь mem - некоторая символическая метка адреса памяти.

     Кроме  того,  ряд   команд  использует  специальные  методы
адресации при работе со стеком и строками байтов.

     Почти все команды МП 80386 могут  работать как с 16-, так и
с 32-разрядными операндами. Размер  операндов конкретной команды
задается либо битом размера операндов по умолчанию в дескрипторе
кодового сегмента, либо явным  заданием одного из двух префиксов
команды,  задающих  длину  операнда.

     Селектор   каждого   кодового    сегмента   содержит   бит,
определяющий размер операндов и эффективных адресов, принятых по
умолчанию  при исполнении  команд этого  сегмента. В  реальном и
виртуальном режимах селекторы сегментов не используются и размер
операндов предполагается 16-разрядным. Для переопределения длины
операндов конкретной команды используются специальные префиксы -
префикс длины  операнда и префикс  длины исполнительного адреса.
Оба префикса изменяют размер  операнда на противоположный приня-
тому по умолчанию и могут  предществовать по отдельности или оба
вместе любой команде МП.

     Если не оговорено противное, то  команды с 8- и 16-битовыми
операндами не влияют на старшие биты 32-битовых регистров.

Метод  адресации  задается  одним  или  двумя байтами адресации.
Первый байт метода адресации имеет вид:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│MOD│ REG │ R/M │ Биты:                       Маска:
└─┼─┴─┴┬┴─┴─┴┬┴─┘
  │    │     └───> 0-2: Регистр/память         07h
  │    └─────────> 3-5: Поле регистра          38h
  └──────────────> 6-7: Метод адресации        C0h

Исполнительные адреса 16-разрядных операндов команды формируются
в соответствии со следующей таблицей.

─────┬────────────────────────────────────────────────────────
     │                        MOD
 R/M ├────────────┬──────────────┬───────────────┬────────────
     │    00      │      01      │       10      │     11
─────┼────────────┼──────────────┼───────────────┼────┬───────
     │            │              │               │W=0 │  W=1
     │            │              │               ├────┼───────
 000 │ [BX]+[SI]  │ [BX]+[SI]+D8 │ [BX]+[SI]+D16 │ AL │ (Е)AX
 001 │ [BX]+[DI]  │ [BX]+[DI]+D8 │ [BX]+[DI]+D16 │ CL │ (Е)CX
 010 │ [BP]+[SI]  │ [BP]+[SI]+D8 │ [BP]+[SI]+D16 │ DL │ (Е)DX
 011 │ [BP]+[DI]  │ [BP]+[DI]+D8 │ [BP]+[DI]+D16 │ BL │ (Е)BX
 100 │   [SI]     │   [SI]+D8    │   [SI]+D16    │ AH │ (Е)SP
 101 │   [DI]     │   [DI]+D8    │   [DI]+D16    │ CH │ (Е)BP
 110 │Прямой адрес│   [BP]+D8    │   [BP]+D16    │ DH │ (Е)SI
 111 │   [BX]     │   [BX]+D8    │   [BX]+D16    │ BH │ (Е)DI
─────┴────────────┴──────────────┴───────────────┴────┴───────

Исполнительные адреса 32-разрядных операндов команды формируются
в соответствии со следующей таблицей.

─────┬────────────────────────────────────────────────────────
     │                        MOD
 R/M ├────────────┬──────────────┬───────────────┬────────────
     │    00      │      01      │       10      │     11
─────┼────────────┼──────────────┼───────────────┼────┬───────
     │            │              │               │W=0 │  W=1
     │            │              │               ├────┼───────
 000 │   [EAX]    │   [EAX]+D8   │   [EAX]+D32   │ AL │ (Е)AX
 001 │   [ECX]    │   [ECX]+D8   │   [ECX]+D32   │ CL │ (Е)CX
 010 │   [EDX]    │   [EDX]+D8   │   [EDX]+D32   │ DL │ (Е)DX
 011 │   [EBX]    │   [EBX]+D8   │   [EBX]+D32   │ BL │ (Е)BX
 100 │  см. ниже  │   см. ниже   │   см. ниже    │ AH │ (Е)SP
 101 │Прямой адрес│   [EBP]+D8   │   [EBP]+D32   │ CH │ (Е)BP
 110 │   [ESI]    │   [ESI]+D8   │   [ESI]+D32   │ DH │ (Е)SI
 111 │   [EDI]    │   [EDI]+D8   │   [EDI]+D32   │ BH │ (Е)DI
─────┴────────────┴──────────────┴───────────────┴────┴───────

     Если  поле  mod  =  100,  то  команда  содержит второй байт
адресации вида

┌7┬6┬5┬4┬3┬2┬1┬0┐
│SCL│ IND │ BASE│ Биты:                       Маска:
└─┼─┴─┴┬┴─┴─┴┬┴─┘
  │    │     └───> 0-2: Базовый регистр        07h
  │    └─────────> 3-5: Индексный регистр      38h
  └──────────────> 6-7: Масштабный множитель   C0h

     В  этом  случае  исполнительный  адрес операнда вычисляется
согласно приведенной ниже таблице по формуле

     EA = база + индекс * масштаб + смещение,

где масштаб задается полем scl так: 00=1, 01=2, 10=4, 11=8.

─────┬─────────────────────────────────────────────
     │                   MOD
 R/M ├────────────┬──────────────┬─────────────────
     │    00      │      01      │       10
─────┼────────────┼──────────────┼─────────────────
     │            │              │
     │            │              │
 000 │ [EAX]+IND  │ [EAX]+IND+D8 │   [EAX]+IND+D32
 001 │ [ECX]+IND  │ [ECX]+IND+D8 │   [ECX]+IND+D32
 010 │ [EDX]+IND  │ [EDX]+IND+D8 │   [EDX]+IND+D32
 011 │ [EBX]+IND  │ [EBX]+IND+D8 │   [EBX]+IND+D32
 100 │ [ESP]+IND  │ [ESP]+IND+D8 │   [EBP]+IND+D32
 101 │  D32+IND   │ [EBP]+IND+D8 │   [EBP]+IND+D32
 110 │ [ESI]+IND  │ [ESI]+IND+D8 │   [ESI]+IND+D32
 111 │ [EDI]+IND  │ [EDI]+IND+D8 │   [EDI]+IND+D32
─────┴────────────┴──────────────┴─────────────────

     В  приведенных  таблицах   бит  W  задает  байтовую/словную
инструкцию. D8/D16/D32  - это 8-, 16-  или 32-разрядное смещение
(см. 3.1.6).  IND = индекс * масштаб,  причем  индексный регистр
кодируется во втором байте адресации следующим образом:

┌─────┬─────┐
│ 000 │ ЕAX │
│ 001 │ ЕCX │
│ 010 │ ЕDX │
│ 011 │ ЕBX │
│ 100 │ нет │
│ 101 │ ЕBP │
│ 110 │ ЕSI │
│ 111 │ ЕDI │
└─────┴─────┘

     Если поле индекса равно 100, то поле SCL должно быть нулем,
иначе исполнительный адрес считается неопределенным.

     Вычисление полного исполнительного  адреса операнда зависит
от сегмента,  в котором операнд расположен.  В качестве базового
регистра  могут  использоваться  любые  регистры.  Если  базовым
является регистр BP или SP,  то по умолчанию операнд находится в
сегменте стека,  в остальных случаях  - в сегменте  данных. Если
базового  регистра  нет,  то  операнд  по  умолчанию находится в
сегменте данных.

     Для изменения  регистра сегмента команде  можно предпослать
префикс сегмента, например:

     MOV AL,mem     ; заслать в AL байт из DS:mem
     MOV AL,ES:mem  ; заслать в AL байт из ES:mem

     Таким  образом можно  указать сегмент  любого операнда,  за
исключением трех случаев:

     - извлечение команд всегда производится по адресу CS:IP;

     - SP  всегда используется только  как смещение относительно
сегмента SS;

     - команды  работы со строками, использующие  регистр ES, не
могут использовать вместо него другие регистры сегментов.
.pb
     3.1.6. Форматы команд

     Формат команды зависит от кода операции, метода адресации и
длины  данных,  непосредственно   заданных  в  команде.  Поэтому
команда занимает от 1 до 12  байтов. В общем виде формат команды
таков:

┌─────┐ ┌───┬───┬───┐ ┌───┬───┬───┐┌───────┐ ┌───────┐
│ Код │ │MOD│REG│R/M│ │SCL│IND│BAS││ disp  │ │ data  │
└─────┘ └───┴───┴───┘ └───┴───┴───┘└───────┘ └───────┘
  1-2         1             1       0,1,2,4   0,1,2,4

     Здесь  код -  код операции,  состоящий из  одного или  двух
байтов; следующие  два байта задают режим  адресации, disp - 8-,
16- или 32-разрядное смещение  (может отсутствовать), data - 8-,
16-    или   32-разрядные    непосредственные   данные    (могут
отсутствовать).

     Первый байт команды всегда содержит код операции:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│    коп    │D│W│ Бит:
└─┴─┴─┼─┴─┴─┴┬┴┬┘
      │      │ └─> 0: 0=обмен словами, 1=обмен байтами
      │      └───> 1: 0=пересылка из регистра
      │               1=пересылка в регистр
      └──────────> 2-7: код инструкции МП

     3.1.7. Стек и система прерываний

     Стек  представляет собой  область памяти,  используемую для
временного хранения  данных; он базируется на  сегменте стека. В
регистре  SS задается  базовый адрес  стека, в  ESP - наибольшее
допустимое смещение  в стековом сегменте.  Засылка (вталкивание)
данных в стек производится в  направлении меньших адресов, т. е.
уменьшением  регистра  ESP;   извлечение  (выталкивание)  данных
происходит  в  обратном  направлении.  Адрес  стека,  на который
указывает ESP, называется вершиной  стека. Ряд команд используют
стек неявным образом: вызов  подпрограмм засылает адрес возврата
в стек, а возврат из подпрограммы извлекает этот адрес из стека.
Кроме того, стек используется для обработки прерываний.

     Для доступа  к данным в  стеке обычно используется  регистр
EBP.

     МП  80386 имеет  механизм обработки  прерываний; прерывания
подразделяются на следующие группы:

     -  внешние  прерывания,  вызываемые  внешними устройствами;
могут быть маскируемыми и немаскируемыми;

     -  исключения,  которые  генерирются   самим  МП  либо  при
возникновении ошибок, либо по командам INT, INTO или BOUND.

     МП   80386   хранит   указатель   на  таблицу  дескрипторов
прерываний   (IDT),   в   которой   хранятся   дескрипторы  всех
прерываний,  обрабатываемых системой;  каждому дескриптору соот-
ветствует  т.  н.  вектор  прерывания.  Вектор  прерывания  (ВП)
содержит  адрес программы  обработки данного  прерывания и имеет
номер от 0 до FFh.  При начальном сбросе процессора IDT занимает
адреса памяти  с 0 по  3FFh и содержит  255 векторов прерываний,
нумеруемых  с 0  по FFh;  вектор прерывания  n располагается  по
адресу  4*n.  В  дальнейшем  адрес   и  размер  IDT  может  быть
программно изменен.

     Всякий раз,  когда происходит прерывание,  текущие значения
CS, EIP и регистра флагов вталкиваются в стек и управление пере-
дается по  адресу, заданному в  соответствующем векторе прерыва-
ний.  Программа  обработки   прерывания  завершает  свою  работу
командой  IRET, которая  выталкивает из  стека регистр  флагов и
регистры CS и IP, продолжая работу прерванной программы.

     Подробно система прерываний описана в п. ...

     3.1.8. Форматы данных

     МП 80386 поддерживает следующие формaты данных:

     - целое  со знаком (байт,  слово, двойное слово);  знаковым
является  старший  бит,  отрицательные  числа  представляются  в
дополнительном коде;

     - целое без знака (байт, слово или двойное слово);

     - короткий указатель - 32-разрядный логический адрес памяти;
содержит смещение относительно начала сегмента;

     - длинный указатель - 48-разрядный указатель вида селектор:
смещение,  где   селектор  -  16-разрядный   селектор  сегмента,
смещение  -  32-разрядное   смещение  относительно  его  начала.
Селектор хранится в старших байтах указателя;

     - символ, т. е. байт в кодировке ASCII;

     - строка  - последовательность байтов или  слов длиной от 1
байта до 4 Гбайт;

     - неупакованное двоично-десятичное (BCD) число; каждый байт
содержит десятичную цифру;

     - упакованнное   двоично-десятичное   (BCD)  число;  каждая
тетрада содержит десятичную цифру;

     -  поле  битов   -  непрерывная  последовательность  битов,
которая  может начинаться  с любого  бита любого  байта и  может
содержать до 32 битов;

     -  строка  битов  -  непрерывная  последовательность битов,
которая  может начинаться  с любого  бита любого  байта и  может
содержать до 4 Гбитов.

     При наличии арифметического сопроцессора 80287 или 80387 МП
поддерживает дополнительно длинные целые  и плавающие числа (см.
).
.pb
     3.1.9. Управление памятью

     3.1.9.1. Трансляция сегментов

     В этом  разделе описано преобразование  логических адресов,
заданных  в  виде  селектор:смещение,  в  линейные  32-разрядные
адреса,  называемое  трансляцией  сегментов.  Процесс трансляции
сегментов изображен на рис. 3.3.

           15         0 31                                 0
Логический ┌──────────┐ ┌──────────────────────────────────┐
адpес:     │ Селектоp │ │          Смещение                │
           └─╥──────╥─┘ └───────────────╥──────────────────┘
             ║      ║                   ║
       ╔═════╝     \ /                  ║
       ║   ┌──────────┐                 ║
       ║   │          │ Таблица         ║
       ║   │          │ дескpиптоpов    ║
       ║   ├──────────┤                 ║
       ╚══>│Дескpиптоp│Базовый  ┌───┐   ║
           │ сегмента ╞════════>│ + │<══╝
           ├──────────┤адpес    └─╥─┘
           └──────────┘           ║
                        31       \ /                       0
                        ┌──────────────────────────────────┐
                        │        Линейный адpес            │
                        └──────────────────────────────────┘

     Рис. 3.3. Тpансляция сегментов

     Как видно из pисунка,  инфоpмация о сегменте извлекается из
его   дескpиптоpа.   МП   80386   поддеpживает   следующие  типы
дескpиптоpов:  дескpиптоpы  пpогpаммных  сегментов,  дескрипторы
системных сегментов и дескрипторы шлюзов.

     Дескриптор занимает 8  байтов памяти. Дескpиптоpы сегментов
имеют следуюшую структуру:

Смещение Длина         Содержимое            Комментарий
────────────────────────────────────────────────────────────────
               ┌────────┬────────┐
   +0      2   │      Длина      │  Младшие биты длины сегмента
               ├────────┼────────┼────────┐
   +2      3   │           База           │  Младщие биты его
               ├────────┼────────┼────────┘  базового адреса
   +5      2   │      Права      │  Пpава доступа к сегменту и
               ├────────┼────────┘  старшие биты его длины
   +7      1   │ База   │           Старшие биты базового адреса
               └────────┘
    8      Размеp дескpиптоpа
────────────────────────────────────────────────────────────────

     Поле "База"  содеpжит 32-pазpядный базовый  адpес сегмента.
Поле "Длина" содержит 20-разрядную величину, определяющую разнер
сегмента, в единицах, заданных битом грануляции:

     - если задана грануляция в байтах, то "Длина" задает размер
сегмента в байтах (до 1 Мбайта);

     -  если задана  грануляция в  страницах, то  "Длина" задает
размер сегмента в  блоках по 4 Кбайт (до  4 Гбайт); при загрузке
длина  сдвигается  влево  на  12  разрядов  и дополняется справа
единицами.

     Младший  байт  пpав  доступа  в  дескpиптоpе   пpогpаммного
сегмента состоит из следующих полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│P│DPL│S│TYPE │A│ Бит:                                   Маска:
└┬┴─┼─┴┬┴─┴┬┴─┴┬┘
 │  │  │   │   └──> 0:0=доступа к сегменту не было       01h
 │  │  │   │          1=селектор сегмента загружен
 │  │  │   └──────> 1-3: Тип сегмента (см. ниже)         0Eh
 │  │  └──────────> 4: Тип дескриптора: 1=прог. сегмент  10h
 │  │                  0=системный сегнент или шлюз
 │  └─────────────> 5-6: Уровень привилегии дескриптора  60h
 └────────────────> 7: 1=сегмент отображен в физическую  80h
                       память, 0=нет

     Тип сегмента имеет следующие значения:

     0 - сегмент  данных, только  для чтения, расширяется  вверх
         (смещение должно быть меньше длины)
     1 - сегмент данных, для чтения и записи, расширяется  вверх
         (смещение должно быть меньше длины)
     2 - сегмент  данных, только  для чтения,  расширяется  вниз
         (смещение должно быть больше или равно длины)
     3 - сегмент данных, для чтения и записи,  расширяется  вниз
         (смещение должно быть больше или равно длины)
     4 - сегмент кодов, только для выполнения
     5 - сегмент кодов, для выполнения и чтения
     6 - разделяемый сегмент кодов, только для выполнения
     7 - разделяемый сегмент кодов, для выполнения и чтения

     Разделяемый  сегмент  кодов  предназначен  для  совместного
использования несколькими  задачами и может  быть выполнен, если
CPL  >=  DPL  и  CPL  остается  неизменным.  Подpобнее  о  типах
сегментов  см.  п.  3.1.10.1.  Там  же  пpиведены типы системных
сегментов и шлюзов.

     Второй  байт   пpав  доступа  в   дескpиптоpе  пpогpаммного
сегмента состоит из следующих полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│G│X│0│V│ LIMIT │ Бит:                                   Маска:
└┬┴┬┴─┴┬┴─┴─┼─┴─┘
 │ │   │    └─────> 0-3: Старшие биты длины сегмента     0Fh
 │ │   └──────────> 4: 1=Сегмент доступен для системы    10h
 │ └──────────────> 6: См. ниже                          40h
 └────────────────> 8: Бит грануляции:                   80h
                       0=Длина сегмента задана в байтах
                       1=Длина задана в страницах по 4К

     В дескрипторе сегмента кодов  бит 6 задает размер операндов
и исполнительных   адресов  по   умолчанию:  0   =  16-разрядные
операнды; 1 = 32-разрядные операнды.

     Для  дескриптора  сегмента  данных  бит  6  имеет значение,
только  если   сегмент  расширяется  вниз.  В   этом  случае  он
аналогичен биту  грануляции: если этот  бит сброшен, то  сегмент
имеет  границы  от  Длина+1  до  64К-1;  если  установлен, то от
Длина+1,  сдвинутого   влево  на  12   разрядов  и  дополненного
единицами, и  до 4Г-1. Для сегментов  данных этот бит называется
"битом величины".

     Дескpиптоpы сегментов  хpанятся в  таблицах дескpиптоpов  -
глобальной  таблице  дескpиптоpов  (GDT)  или  локальной таблице
дескpиптоpов  (LDT).  Таблица  дескpиптоpов  - это пpосто массив
дескpиптоpов пеpеменной длины,  котоpый может содеpжать  до 8192
дескpиптоpов.  Однако,  пеpвый   элемент  GDT   пpоцессоpом   не
используется. Для доступа   к GDT используются  команды  LGDT  и
SGDT; для доступа к LDT - LLDT и SLDT.

     ЦП получает доступ к дескpиптоpу сегмента по его селектоpу,
котоpый имеет следующий фоpмат:

 1 1 1 1 1 1
┌5┬4┬3┬2┬1┬0┬9┬8┬7┬6┬5┬4┬3┬─2┬1┬0┐
│        индекс           │TI│RPL│ Бит:                   Маска:
└─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴┬─┴─┼─┘
            │              │   └───>0-1: Требуемый уровень     3
            │              │             привилегии селектора
            │              └───────>2: Индикатор таблицы:      4
            │                          0=GDT, 1=LDT
            └──────────────────────>3-15: Индекс элемента  FFF8h
                                          в таблице

     Поля  селектора позволяют  задать, в  какой из  двух таблиц
храниться  селектор,  его  порядковый  номер  в  этой  таблице и
уровень  привилегии,  который  требуется  селектору.   Пpоцессоp
пpосто умножает  значение индекса  на 8  (pазмеp дескpиптоpа)  и
складывает  pезультат  с  базовым  адpесом таблицы дескpиптоpов,
получая адpес дескpиптоpа данного сегмента.

     Поскольку пеpвый элемент  GDT не используется  пpоцессоpом,
селектоp,  у  котоpого  индекс  и  индикатоp таблицы pавны нулю,
называется нулевым селектоpом и используется в качестве "пустого
указателя". Пpи попытке загpузить нулевой селектоp в  сегментный
pегистp,  отличный  от  CS  и  SS,  ЦП не генеpиpует исключения;
однако  пеpвое  же  обpащение  к  памяти  чеpез  этот сегментный
pегистp поpодит исключение.


     3.1.9.2. Тpансляция стpаниц

     Втоpым   (необязательным)   этапом   пpеобpазования  адpеса
является  тpансляция  линейного  адpеса  в физический. Этот этап
пpедназначен    для    оpганизации     стpанично-оpиентиpованной
виpтуальной памяти. Пpоцесс тpансляции стpаниц  пpоиллюстpиpован
на pис. 3.4. Тpансляция стpаниц имеет место только, если бит  PG
в CR0 установлен (см. 3.1.4.2).

           31                                 0
Линейный   ┌───────┬───────┬──────────────────┐
адpес:     │  DIR  │ PAGE  │     OFFSET       │
           └───╥───┴──╥────┴────────╥─────────┘
               ║      ║             ║           Фpейм
       ╔═══════╝      ╚══╗  Таблица ╚═════╗    стpаницы
       ║ Каталог стpаниц ║  стpаниц       ║   ┌──────────┐
       ║   ┌────────┐    ║  ┌────────┐    ║   │          │
       ║   │        │    ║  │        │    ║   │          │
       ║   │        │    ║  │        │    ╚══>│Физический│
       ║   ├────────┤    ║  ├────────┤        │  адpес   │
       ╚══>│Элемент │    ╚═>│Элемент │        │          │
           │каталога╞══╗    │таблицы ╞═══╗    │          │
           ├────────┤  ║    ├────────┤   ║    │          │
           └────────┘  ║    └────────┘   ║    └──────────┘
              / \      ║       / \       ║        / \
               ║       ║        ║        ║         ║
┌─────┐        ║       ╚════════╝        ╚═════════╝
│ CR3 ╞════════╝
└─────┘

     Рис. 3.4. Тpансляция стpаниц

     Если   pежим   тpансляции   стpаниц   включен,   то  память
pазбивается на фpеймы pазмеpом по 4К, выpавненные на гpаницу 4К,
а линейный адpес считается состоящим из тpех полей:

31        22 21          12 11          0
┌───────────┬──────────────┬────────────┐
│   DIR     │    PAGE      │   OFFSET   │
└───────────┴──────────────┴────────────┘

     Поле DIR - это индекс  в каталоге стpаниц, PAGE -  индекс в
таблице  стpаниц,  опpеделенной  из  каталога  стpаниц, OFFSET -
смещение  до  физического  адpеса   байта  в  фpейме   стpаницы,
опpеделенном из таблицы стpаниц.

     Таблица стpаниц  - это  фpейм, пpедставляющий  собой массив
32-pазpядных  спецификатоpов  стpаниц.  Поскольку  pазмеp фpейма
pавен  4К,  таблица  может  содеpжать  до  1024  элементов.  Для
адpесации  стpаницы  памяти  используются  табицы  стpаниц  двух
уpовней: каталог стpаниц - это таблица, адpесующая до 1К  таблиц
втоpого уpовня, а таблица втоpого уpовня адpесует до 1К фpеймов.
Все  таблицы   адpесуются  одним   каталогом  стpаниц,   поэтому
одновpеменно можно адpесоваться  к 1М фpеймов  (2^20). Учитывая,
что pазмеp фpейма  pавен 4К (2^12),  получаем, что один  каталог
стpаниц обеспечивает доступ  ко всему адpесному  пpостpанству МП
80386 (2^20 x 2^12 = 2^32).

     Физический  адpес  текущего  каталога  стpаниц  хpанится  в
pегистpе  CR3,  называемом  также  базовым  pегистpом   каталога
стpаниц  (PDBR  -  Page  Directory  Base  Register). Пpогpаммное
обеспечение может использовать один  каталог для всех задач  или
отдельный каталог для каждой задачи. Подpобно инициализация  CR3
описана в ...

     Элемент  таблицы  стpаниц  обоих  уpовней  имеет  следующую
стpуктуpу:

 3                      1 1 1
┌1──────────────────────2┬1┬0┬9┬8┬7┬6─┬5─┬4┬3┬─2─┬─1─┬0─┐
│  адpес фpейма 31...12  │X X X│0 0│D │A │0 0│U/S│R/W│P │
└────────────────────────┴─┴─┴─┴─┴─┴──┴──┴─┴─┴───┴───┴──┘

Биты:

0: 1=элемент используется, 0=свободен (тогда остальные биты
   игноpиpуются);
1: 1=pазpешена запись в фpейм, 0=только чтение фpейма;
2: 1=фpейм доступен пpикладным пpогpаммам; 0=фpейм доступен
   только ОС;
5: устанавливается МП пеpед чтением или записью фpейма;
6: устанавливается МП пеpед записью в фpейм (только в
   таблице стpаниц, в каталоге стpаниц неопpеделен);
9-11:  могут использоваться системными пpогpаммами;
12-31: стаpшие биты физического адpеса фpейма (дополняются
       спpава нулями).

     Пpимечание.  Для  повышения   пpоизводительности  МП  80386
кэшиpует  таблицы  стpаниц  в  специальной  памяти.  Поэтому пpи
изменении  таблицы стpаниц  необходимо сбpосить  кэш-память либо
командой  MOV  CR3,EAX,  либо  пеpеключением  задач,  изменяющим
содеpжимое CR3.

     3.1.10. Механизмы защиты

     МП 80386 содеpжит богатый набоp сpедств защиты, обеспечива-
юших  быстpую  отладку  пpогpамм  и  безопасность выполняемых им
задач. Можно выделить пять механизмов защиты:

     - пpовеpка типов;
     - пpовеpка гpаниц;
     - огpаничение адpесуемой области;
     - огpаничение входных точек пpоцедуp;
     - огpаничение набоpа команд.

     3.1.10.1. Защита на уpовне сегментов

     Пpименительно к тpансляции  сегментов используются все пять
названных  выше  аспектов   защиты.  Когда  пpогpамма  загpужает
селектоp  в сегментный  pегистp, МП  загужает не  только базовый
адpес сегмента, но и связанную  с ним инфоpмацию о сегменте. Пpи
каждом обpашении  к сегменту эта  инфоpмация пpовеpяется, и  пpи
наpушении защиты генеpиpуется соответствующее исключение.

     Пpовеpка типа:

     МП  80386 использует  дескpиптоpы не  только для  сегментов
кодов  и данных,  но и  для специальных  сегментов, используемых
системным обеспечением. Не всякий дескpиптоp опpеделяет сегмент:
дескpиптоpы шлюзов имеют специальное назначение и описаны ниже.

     Существуют следующие типы системных сегментов и шлюзов:

     Код       Тип сегмента или шлюза
     ───       ──────────────────────

      0        Заpезеpвиpован
      1        Свободный TSS 286
      2        LDT
      3        Занятый TSS 286
      4        Шлюз вызова 286
      5        Шлюз задачи
      6        Шлюз пpеpывания 286
      7        Шлюз ловушки 286
      8        Заpезеpвиpован
      9        Свободный TSS 386
     0Ah       Заpезеpвиpован
     0Bh       Занятый TSS 386
     0Ch       Шлюз вызова 386
     0Dh       Заpезеpвиpован
     0Eh       Шлюз пpеpывания 386
     0Fh       Шлюз ловушки 386
     ────────────────────────────────

     Пpовеpка  типа  сегмента  позволяет  пpедотвpатить запись в
сегмент  данных, пpедназначенный  только для  чтения, или чтение
сегмента кодов,  пpедназначенного только для  исполнения (см. п.
3.1.9.1).  Точнее  говоpя,  пpи  загpузке  селектоpа  в  pегистp
сегмента пpовеpяются следующие условия:

     -  в  CS  можно   загpузить  только  селектоp  исполняемого
сегмента;

     -  селектоp сегмента  кодов, чтение  котоpого запpещено, не
может быть загpужен в DS, ES, FS или GS;

     -  в SS  можно загpузить  только селектоp  сегмента данных,
запись в котоpый pазpешена.

     Если  команда обpащается  (явно или  неявно) к  сегментному
pегистpу, пpовеpяются следующие условия:

     - нельзя писать в сегмент кодов;

     -  нельзя писать  в сегмент  данных, пpедназначенный только
для чтения;

     - нельзя  читать сегмент кодов,  пpедназначенный только для
исполнения.

     Проверка границ:

     Поле  длины   сегмента  в  его   дескрипторе  позволяет  МП
запретить  программам доступ  за пределы  сегмента. В  следующей
таблице  приведены  допустимые   комбинации  битов,  управляющих
границами  сегмента.  Использованы  такие  обозначения:  G - бит
гранулярности, B - бит величины,  E - бит направления расширения
сегмента в типе сегмента (0 - вверх, 1 - вниз).

┌──────────────────────╥───┬───┬───┬───┐
│      Бит Е           ║ 0 │ 0 │ 1 │ 1 │
├──────────────────────╫───┼───┼───┼───┤
│      Бит G           ║ 0 │ 1 │ 0 │ 1 │
├──────────────────────╫───┼───┼───┼───┤
│      Бит B           ║ X │ X │ 0 │ 1 │
╞══════════════════════╬═══╪═══╪═══╪═══╡
│Нижняя граница:       ║   │   │   │   │
│    0                 ║ * │ * │   │   │
│    LIMIT*1           ║   │   │ * │   │
│    shl(LIMIT,12,1)*1 ║   │   │   │ * │
├──────────────────────╫───┼───┼───┼───┤
│Верхняя граница:      ║   │   │   │   │
│    LIMIT             ║ * │   │   │   │
│    shl(LIMIT,12,1)   ║   │ * │   │   │
│    64K-1             ║   │   │ * │   │
│    4Г-1              ║   │   │   │ * │
├──────────────────────╫───┼───┼───┼───┤
│Макс. размер сегмента:║   │   │   │   │
│    64K               ║ * │   │   │   │
│    64K-1             ║   │   │ * │   │
│    4Г-4К             ║   │   │   │ * │
│    4Г                ║   │ * │   │   │
├──────────────────────╫───┼───┼───┼───┤
│Мин. размер сегмента: ║   │   │   │   │
│    0                 ║ * │   │ * │   │
│    4K                ║   │ * │   │ * │
└──────────────────────╨───┴───┴───┴───┘

     Здесь shl(A,12,1)  - сдвиг  величины A  на 12  бит влево  с
дополнением спpава единицами.

     МП  генеpиpует  исключение  общего  наpушения  защиты   пpи
попытке обpащения к байту,  слову или двойному слову  с адpесом,
выходящим за гpаницы сегмента.

     Уровни привилегий:

     Понятие  привилегий  состоит  в  приписывании  т. н. уровня
привилегий  (числа  от  0   до  3)  основным  объектам.  Уровень
привилегий  0  является  высшим,  уровень  3  - низшим. Уровнями
привилегий обладают следующие объекты:

     - дескрипторы  содержат поле уровня  привилегий дескриптора
(DPL);

     -  селекторы  содержат  поле,  называемое уровнем требуемых
привилегий   (RPL),   которое   определяет   уровень  привилегий
процедуры, инициализирующей селектор;

     -  МП  хранит  текущий  уровень  привилегий  (CPL), который
обычно равен DPL исполняемого в данный момент сегмента кодов.

     Процессор проверяет  право процедуры на  доступ к запрошен-
ному сегменту, сравнивая CPL с  тем или иным уровнем привилегий.
При    нарушении    привилегий    генерируется   соответствующее
исключение.

     Системное  программное обеспечение  не обязано использовать
все уровни привилегий: в  простейшем случае можно обойтись двумя
(0  и 3).  При использовании  всех четырех  уровней фирма  Intel
рекомендует следующее их распределение:

     уровень 0 - ядро операционной системы;
     уровень 1 - системные сервисные программы;
     уровень 2 - расширения системы;
     уровень 3 - прикладные программы.

     Уровни привилегий используются разным образом при доступе к
данным  и при  передаче  управления  между сегментами.  Доступ к
данным определяется следующими правилами:

     1. Команда может  загрузить в регистры DS, ES,  FS, GS и SS
селектор сегмента  только в том случае,  когда DPL соответствую-
щего дескриптора больше или равен  и CPL, и RPL селектора. Иными
словами,  процедура имеет  право доступа  только к  столь же или
менее привилегированным сегментам.

     2.  Доступ  к  содержимому  сегмента  кодов  возможен тремя
способами:

     -  загрузить в  сегментный регистр  данных селектор  нераз-
деляемого сегмента кодов, доступного для чтения (эта возможность
подчиняется тому же правилу, что и в первом случае);

     -  загрузить в  сегментный регистр  данных селектор  раз-
деляемого сегмента  кодов, доступного для  чтения (это допустимо
всегда);

     - использовать префикс CS:  для доступа к текущему сегменту
кодов, если чтение его разрешено (это также всегда допустимо).

     Правила   проверки  привилегий   при  передаче   управления
командами   JMP  и   CALL  обращением   к  дескриптору   другого
исполняемого сегмента следуюшие.  Передача управления по команде
JMP или CALL допустима, если

     - DPL целевого сегмента равен CPL, либо
     - DPL целевого  сегмента меньше  или равен  CPL,  и целевой
сегмент является разделяемым.

     Примечание. При  передаче управления в  разделяемый сегмент
CPL не изменяется.

     Таким  образом,  прямой  переход  от  сегмента  к  сегменту
возможен либо на том же  уровне привилегий, либо при обращении к
разделяемым сегментам,  которые играют роль  процедур, совместно
используемых несколькими процессами.  Для передачи управления на
другой уровень привилегий используются т. н. дескрипторы шлюзов,
а именно:

     - шлюзы вызовов;
     - шлюзы задач;
     - шлюзы прерываний;
     - шлюзы ловушек.

     В этом разделе мы  описываем только шлюзы вызовов. Описание
шлюзов задач приведно в п. ...,  шлюзов ловушек и прерываний - в
п. ...

     Шлюз вызова определяет входную  точку процедуры и задает ее
уровень привилегий. Его дескриптор располагается в GDT или LDT и
имеет следующий формат:

Смещение Длина         Содержимое            Комментарий
────────────────────────────────────────────────────────────────
               ┌────────┬────────┐
   +0      2   │ Смещение 15...0 │  Младшие биты смещения
               ├────────┼────────┤
   +2      2   │    Селектор     │  Селектор сегмента
               ├────────┼────────┘
   +4      1   │ Счетчик│           Счетчик двойных слов (0-31)
               ├────────┤
   +5      1   │ Права  │           Права доступа к сегменту
               ├────────┼────────┐
   +6      2   │ Смещение 31...16│  Старшие биты смещения
               └────────┴────────┘
    8      Размеp дескpиптоpа
────────────────────────────────────────────────────────────────

     Поле "Селектор" задает  селектор целевого сегмента, который
должен быть сегментом кодов. 32-разрядное поле "Смещение" задает
смещение  до точки  входа шлюза  относительно целевого сегмента.
"Счетчик"  указывает  количество  двойных  слов,  которые  нужно
скопировать из стека вызывающей процедуры в стек вызываемой.

  Байт  пpав доступа  в дескpиптоpе  шлюза состоит  из следующих
полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│P│DPL│0│  TYPE │ Бит:                                   Маска:
└┬┴─┼─┴─┴─┴─┼─┴─┘
 │  │       └─────> 0-3: Тип дескриптора (см. выше)      0Fh
 │  └─────────────> 5-6: Уровень привилегии дескриптора  60h
 └────────────────> 7: 1=сегмент отображен в физическую  80h
                       память и значения дескриптора
                       действительны, 0=нет

     Шлюз  вызова  позволяет  передать  управление сегменту, чей
уровень  привилегий численно  меньше (только  командой CALL) или
равен  текущему. Если  CPL -  текущий уровень  привилегий, RPL -
уровень   требуемых   привилегий   селектора,   указывающего  на
дескриптор шлюза  вызова, DPL1 -  уровень привилегий дескриптора
шлюза и  DPL2 - уровень  привилегий целевого сегмента  кодов, то
правила проверки  привилегий при передаче  управления через шлюз
вызова следующие:

     -  для   команды  JMP  к   неразделяемому  сегменту  должны
выполняться два условия:

     max(CPL,RPL) <= DPL1  и  DPL2 = CPL;

     - для  команды JMP к  разделяемому сегменту и  команды CALL
должны выполняться два условия:

     max(CPL,RPL) <= DPL1  и  DPL2 <= CPL.

     Переключение стеков:

     МП  80386 поддерживает  отдельный стек  для каждого  уровня
привилегий.  Поэтому  передача   управления  на  другой  уровень
привилегий  требует переключения  стеков. Процессор обеспечивает
доступ  к стекам  через сегмент  состояния задачи  (TSS). Каждая
задача  имеет  свой  TSS,  и,  следовательно,  может  иметь свой
собственный  набор  стеков,  недоступный  другим  задачам.  Если
передача   управления   через   шлюз   вызова  изменяет  уровень
привилегий,  то  из  TSS  извлекается  новый  указатель  стека в
соответствии с новым CPL. DPL  нового сегмента стека должен быть
равен CPL,  иначе генерируется исключение по  стеку. После пере-
ключения стека МП копирует количество двойных слов (от 0 до 31),
заданное полем "Счетчик" в дескрипторе шлюза, из старого стека в
новый,  обеспечивая  передачу  параметров  вызванной  процедуре.
Точнее говоря, выполняются следующие действия:

     -  МП проверяет,  что  размер  нового стека  достаточен для
размещения параметров и указателей связи; если нет, генерируется
ошибка стека с кодом ошибки 0;

     - значение старых SS:ESP вталкивается в новый стек;

     - копируется заданное количество параметров;

     - значение CS:EIP  (адрес возврата)  вталкивается  в  новый
стек.

     Примечания:

     1. TSS не содержит указателя стека для уровня привилегий 3,
т. к. этот уровень не может быть вызван никакой процедурой ни на
каком уровне привилегий.

     2.  Если  параметры  процедуры  занимают  более 31 двойного
слова, то  процедура должна извекать  их сама из  старого стека,
пользуюясь его указателем, сохраненным в новом стеке.

     Возврат  из процедуры  происходит в  обратном порядке. Хотя
возврат  всегда связан  с предыдущей  командой CALL  или INT, МП
проверяет корректность старых CS  и SS, чтобы гарантировать, что
стек не был испорчен. Подробно эти проверки приведены в описании
команды RET (см ...).

     Привилегированные команды:

     Еще один  механизм защиты связан  с тем, что  ряд команд МП
80386     имеет      ограниченное     применение.     Выделяются
привилегированные команды,  которые могут быть  выполнены только
на  уровне  привилегий  0,  и  контекстные  команды,  выполнение
которых  допустимо  только  в   случае  CPL  <=  IOPL.  Привиле-
гированными являются следующие команды:

     CLTS      LMSW           MOV x,DRn
     HLT       LTR            MOV TRn,x
     LGDT      MOV CRn,x      MOV x,TRn
     LIDT      MOV x,CRn
     LLDT      MOV DRn,x

     Контекстными   являются  следующие   команды,  связанные  с
вводом-выводом:

     IN        OUT            CLI
     INS       OUTS           STI

     Проверка указателей:

     Ряд  команд  МП  80386   обеспечивает  проверку  того,  что
определенный  вид доступа  к сегменту  допустим. Сюда  относятся
следующие (непривилегированные) команды:

     ARPL      LAR            VERR
               LSL            VERW

     3.1.10.2. Защита на уровне страниц

     На уровне трасляции страниц имеются два механизма защиты:

     - ограничение адресуемой области;
     - проверка типов.

     Ограничение  адресуемой   области  достигается  присвоением
каждой странице одного из двух уровней:

     -  уровень  супервизора  (S)  -  для  системных  процедур и
данных;
     -  уровень пользователя  (U)  -  для прикладных  процедур и
данных.

     При  этом уровни  привилегий 0,  1 и  2 считаются  уровнями
супервизора,  а  уровень  3  -  уровнем  пользователя. На уровне
супервизора  доступны  все  страницы,  на  уровне пользователя -
только страницы, относящиеся к этому уровню.

     Проверка  типов обеспечивается  битом R/W,  разрешающим или
запрещающим  запись  в  страницу.   На  уровне  супервизора  все
страницы доступны для записи и чтения. На уровне пользователя Вы
можете  писать только  в страницы  пользователя с  установленным
битом R/W. См. также п. 3.1.9.2.

     Биты U/S и R/W в каталоге  страниц и таблице страниц дают в
сочетании следующие комбинации:

┌──────────────────┬───────────────────┬────────────┐
│ Каталог страниц  │  Таблица страниц  │  Результат │
├────────┬─────────┼────────┬──────────┼──────┬─────┤
│ U/S    │    R/W  │  U/S   │    R/W   │  U/S │ R/W │
├────────┼─────────┼────────┼──────────┼──────┼─────┤
│  S     │     R   │   S    │     R    │   S  │  x  │
│  S     │     R   │   S    │     W    │   S  │  x  │
│  S     │     R   │   U    │     R    │   S  │  x  │
│  S     │     R   │   U    │     W    │   S  │  x  │
│  S     │     W   │   S    │     R    │   S  │  x  │
│  S     │     W   │   S    │     W    │   S  │  x  │
│  S     │     W   │   U    │     R    │   S  │  x  │
│  S     │     W   │   U    │     W    │   S  │  x  │
│  U     │     R   │   S    │     R    │   S  │  x  │
│  U     │     R   │   S    │     W    │   S  │  x  │
│  U     │     R   │   U    │     R    │   U  │  R  │
│  U     │     R   │   U    │     W    │   U  │  R  │
│  U     │     W   │   S    │     R    │   S  │  x  │
│  U     │     W   │   S    │     W    │   S  │  x  │
│  U     │     W   │   U    │     R    │   U  │  R  │
│  U     │     W   │   U    │     W    │   U  │  W  │
└────────┴─────────┴────────┴──────────┴──────┴─────┘

     Здесь:
     S    - уpовень супеpвизоpа
     U    - уpовень пользователя
     R    - только чтение
     W    - чтение и запись
     x    - если уpовень S, то R/W не пpовеpяется

     3.1.11. Многозадачная работа

     Для обеспечения  эффективной многозадачной работы  МП 80386
использует ряд специальных структур данных. При этом он не имеет
специальных  команд  управления   задачами;  переключение  задач
производится  обычными командами  передачи управления,  обращаю-
щимся к этим специальным структурам, к которым относятся:

     - сегмент состояния задачи (TSS);
     - дескриптор TSS;
     - регистр задачи (TR);
     - дескриптор шлюза задачи.

     С помощью этих структур МП обеспечивает:

     -  переключение  с  одной  задачи  на  другую с сохранением
контекста старой задачи и установлением контекста новой;

     -  переключение  задач  при  возникновении  прерывания  или
исключительной  ситуации и  обратное переключение  по завершении
обработки такого события;

     - переключение  на другую LDT и  другой каталог страниц при
переключении задач.

     3.1.11.1. Сегмент состояния задачи

     Вся необходимая информация о  текущей задаче запоминается в
специальном  сегменте,  называемом  сегментом  состояния  задачи
(TSS), имеющем следующий формат:

Смещение Длина         Содержимое    Комментарий
────────────────────────────────────────────────────────────────
               ┌────────┬────────┐
   +0      2   │    Указатель    │   Указатель на предыдущий TSS
               ├────────┼────────┤
   +2      2   │     Резерв      │
               ├────────┼────────┼────────┬────────┐Текуший ESP
   +4      4   │          ESP для CPL 0            │для CPL = 0
               ├────────┼────────┼────────┴────────┘
   +8      2   │  SS для CPL 0   │   Селектор SS для CPL = 0
               ├────────┼────────┤
  +0Ah     2   │     Резерв      │
               ├────────┼────────┼────────┬────────┐Текуший ESP
  +0Ch     4   │          ESP для CPL 1            │для CPL = 1
               ├────────┼────────┼────────┴────────┘
  +10h     2   │  SS для CPL 1   │   Селектор SS для CPL = 1
               ├────────┼────────┤
  +12h     2   │     Резерв      │
               ├────────┼────────┼────────┬────────┐Текуший ESP
  +14h     4   │          ESP для CPL 2            │для CPL = 2
               ├────────┼────────┼────────┴────────┘
  +18h     2   │  SS для CPL 2   │   Селектор SS для CPL = 2
               ├────────┼────────┤
  +1Ah     2   │     Резерв      │
               ├────────┼────────┼────────┬────────┐
  +1Ch     4   │             CR3 (PDBR)            │
               ├────────┼────────┼────────┴────────┤
  +20h     4   │                EIP                │Текущее
               ├────────┼────────┼────────┴────────┤значение EIP
  +24h     4   │               EFLAGS              │Текущие
               ├────────┼────────┼────────┴────────┤
  +28h     4   │                EAX                │Текущее
               ├────────┼────────┼────────┴────────┤значение EAX
  +2Ch     4   │                ECX                │Текущее
               ├────────┼────────┼────────┴────────┤значение ECX
  +30h     4   │                EDX                │Текущее
               ├────────┼────────┼────────┴────────┤значение EDX
  +34h     4   │                EBX                │Текущее
               ├────────┼────────┼────────┴────────┤значение EBX
  +38h     4   │                ESP                │Текущее
               ├────────┼────────┼────────┴────────┤значение ESP
  +3Ch     4   │                EBP                │Текущее
               ├────────┼────────┼────────┴────────┤значение EBP
  +40h     4   │                ESI                │Текущее
               ├────────┼────────┼────────┴────────┤значение ESI
  +44h     4   │                EDI                │Текущее
               ├────────┼────────┼────────┴────────┘значение EDI
  +48h     2   │   Селектор ES   │   Текущий селектор ES
               ├────────┼────────┤
  +4Ah     2   │     Резерв      │
               ├────────┼────────┤
  +4Ch     2   │   Селектор CS   │   Текущий селектор CS
               ├────────┼────────┤
  +4Eh     2   │     Резерв      │
               ├────────┼────────┤
  +50h     2   │   Селектор SS   │   Текущий селектор SS
               ├────────┼────────┤
  +52h     2   │     Резерв      │
               ├────────┼────────┤
  +54h     2   │   Селектор DS   │   Текущий селектор DS
               ├────────┼────────┤
  +56h     2   │     Резерв      │
               ├────────┼────────┤
  +58h     2   │   Селектор FS   │   Текущий селектор FS
               ├────────┼────────┤
  +5Ah     2   │     Резерв      │
               ├────────┼────────┤
  +5Ch     2   │   Селектор GS   │   Текущий селектор GS
               ├────────┼────────┤
  +5Eh     2   │     Резерв      │
               ├────────┼────────┤
  +60h     2   │   Селектор LDT  │   Селектор LDT задачи
               ├────────┼────────┤
  +62h     2   │     Резерв      │
               ├─┬─┬────┼────┬─┬─┤
  +64h     2   │0│0│  . . .  │0│T│   T = отладочный бит
               ├─┴─┴────┼────┴─┴─┤
  +66h     2   │ База карты в/в  │   Адрес карты ввода-вывода
               └────────┴────────┘
   68h     Размеp TSS
────────────────────────────────────────────────────────────────

     Размер TSS должен быть не менее 68h байтов.

     Как  можно видеть  из приведенной  структуры, TSS  содержит
поля двух типов:

     -  динамические   поля,  в  которых   сохраняются  значения
регистров и флагов процессора при переключении задач;

     - статические поля, содержащие информацию о задаче, которую
МП считывает, но не изменяет при переключении задач.

     3.1.11.2. Дескриптор TSS

     Сегмент состояния задачи, как  и все другие сегменты, имеет
свой дескриптор. Формат дескриптора TSS таков:

Смещение Длина         Содержимое            Комментарий
────────────────────────────────────────────────────────────────
               ┌────────┬────────┐
   +0      2   │      Длина      │  Младшие биты длины сегмента
               ├────────┼────────┼────────┐
   +2      3   │           База           │  Младщие биты его
               ├────────┼────────┼────────┘  базового адреса
   +5      2   │      Права      │  Пpава доступа к сегменту и
               ├────────┼────────┘  старшие биты его длины
   +7      1   │ База   │           Старшие биты базового адреса
               └────────┘
    8      Размеp дескpиптоpа
────────────────────────────────────────────────────────────────

     Поле "База"  содеpжит 32-pазpядный базовый  адpес сегмента.
Поле "Длина" содержит 20-разрядную величину, определяющую разнер
сегмента, в единицах, заданных битом грануляции:

     - если задана грануляция в байтах, то "Длина" задает размер
сегмента в байтах (до 1 Мбайта);

     -  если задана  грануляция в  страницах, то  "Длина" задает
размер сегмента в  блоках по 4 Кбайт (до  4 Гбайт); при загрузке
длина  сдвигается  влево  на  12  разрядов  и дополняется справа
единицами.

     Если поле "Длина" менее 103  байт, то переключение на такой
TSS вызовет исключение.

     Младший  байт пpав  доступа  в  дескpиптоpе TSS  состоит из
следующих полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│P│DPL│0│1│0│B│1│ Бит:                                   Маска:
└┬┴─┼─┴─┴─┴─┴┬┴─┘
 │  │        └────> 1:0=свободный TSS, 1=занятый TSS     02h
 │  └─────────────> 5-6: Уровень привилегии дескриптора  60h
 └────────────────> 7: 1=сегмент отображен в физическую  80h
                       память, 0=нет

     Второй  байт   пpав  доступа  в   дескpиптоpе  пpогpаммного
сегмента состоит из следующих полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│G│0│0│V│ LIMIT │ Бит:                                   Маска:
└┬┴─┴─┴┬┴─┴─┼─┴─┘
 │     │    └─────> 0-3: Старшие биты длины сегмента     0Fh
 │     └──────────> 4: 1=Сегмент доступен для системы    10h
 └────────────────> 8: Бит грануляции:                   80h
                       0=Длина сегмента задана в байтах
                       1=Длина задана в страницах по 4К

     Процедура,  получившая  доступ  к  дескриптору  TSS,  может
вызвать  переключение задач,  поэтому в  большинстве систем поле
DPL  этих   дескрипторов  равно  нулю  (в   этом  случае  только
привилегированная программа может переключать задачи).

     Доступ к  TSS не дает права  его читать или модифицировать.
Для таких  действий необходимо создание  еще одного дескриптора,
указывающего на TSS, но определяющего его как сегмент данных.

     Дескрипторы TSS могут находиться только в таблице GDT.

     Селектор  текущего  TSS  храниться  в  регистре задачи (TR)
процессора. Для доступа к TR используются команды LTR и STR.

     3.1.11.3. Дескриптор шлюза задачи

     Дескриптор шлюза задачи обеспечивает косвенный доступ к TSS
и имеет следующую структуру:

Смещение Длина         Содержимое            Комментарий
────────────────────────────────────────────────────────────────
               ┌────────┬────────┐
   +0      2   │ Не используется │
               ├────────┼────────┤
   +2      2   │    Селектор     │  Селектор TSS
               ├────────┼────────┘
   +4      1   │ Не исп.│
               ├────────┤
   +5      1   │ Права  │           Права доступа к сегменту
               ├────────┼────────┐
   +6      2   │ Не используется │
               └────────┴────────┘
    8      Размеp дескpиптоpа
────────────────────────────────────────────────────────────────

     Поле  "Селектор" должно  указывать на  дескриптор TSS.  Его
поле RPL не используется процессором.

  Байт  пpав доступа  в дескpиптоpе  шлюза состоит  из следующих
полей:

┌7┬6┬5┬4┬3┬2┬1┬0┐
│P│DPL│0│  TYPE │ Бит:                                   Маска:
└┬┴─┼─┴─┴─┴─┼─┴─┘
 │  │       └─────> 0-3: Тип дескриптора (см. выше)      0Fh
 │  └─────────────> 5-6: Уровень привилегии дескриптора  60h
 └────────────────> 7: 1=сегмент отображен в физическую  80h
                       память и значения дескриптора
                       действительны, 0=нет

     Поле  DPL обеспечивает  защиту TSS  от несанкционированного
доступа:  процедура может  выбрать дескриптор  TSS только  в том
случае, если max(CPL,RPL) <= DPL.  (При этом DPL дескриптора TSS
не используется).

     3.1.11.4. Переключение задач

     Переключение задач происходит в четырех ситуациях:

     -  текущая   задача  выполняет  команду  JMP   или  CALL  к
дескриптору TSS;

     -  текущая   задача  выполняет  команду  JMP   или  CALL  к
дескриптору шлюза задачи;

     -   происходит  прерывание   или  исключительная  ситуация,
указывающая на шлюз задачи в IDT;

     - текущая  задача выполняет команду  IRET при установленном
флaге NT.

     Процесс переключения задач состоит из следующих шагов:



