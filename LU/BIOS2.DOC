@np@pl66@lm1@rm64@tm4@bm60@ff1
@np@dh1@ce- @pa -
@pb123
@ce@e13. Прерывания, обслуживаемые BIOS@e0

@ce@e13.1. Прерывания, генерируемые центральным процессором@e0

     Вектора  прерываний 0  - 4  зарезервированы для  внутренних
прерываний процессора. Все они не маскируются сбросом флага IF.

     @e13.1.1. Int 00h - Деление на нуль@e0

     Прерывание 0 происходит всякий раз, когда результат команды
деления  (DIV  или  IDIV)  не  помещается  в операнд-приемник (в
частности, при делении на нуль). Пример:

     mov  ax,4000h       ; делимое
     mov  bl,2           ; делитель
     div  bl             ; 4000h/2=2000h не помещается в AL,
                         ; поэтому выполняется Int 00h

или просто

     mov  bx,0
     div  bx             ; деление на нуль

     Когда генерируется Int 00h, BIOS выводит на экран сообщение
"Divide by Zero" и передает управление операционной системе.

     При  написании своей  программы обработки  Int 00h  следует
учитывать, что МП  8086 и 8088 вталкивают в  стек CS:IP команды,
следующей за командой деления,  вызвавшей прерывание, а МП 80286
и 80386 - CS:IP самой команды DIV  или IDIV. Кроме того, 80286 и
80386  способны выдать  наибольшее отрицательное  число (80h или
8000h) в качестве частного, а  8086/8088 в этой ситуации генери-
рует Int 00h.

     @e13.1.2. Int 01h - Пошаговое прерывание@e0

     Если установлен флаг TF, то после выполнения каждой команды
МП  генерирует  это  прерывание.   Однако,  при  входе  в  любое
прерывание  этот   флаг  автоматически  сбрасывается,   так  что
программа обработки прерываний выполняется  в обычном режиме. По
исполнении команды IRET восстанавливаются старые флаги условий и
пошаговый режим возобновляется.

     Это  прерывание обычно  используется отладчиками  для трас-
сировки  отлаживаемых программ.  Для перехода  в пошаговый режим
обычно используется следующий метод:

     рushf
     рoр  ax             ; AX=флаги условий
     or   ax,100h        ; установить бит TF
     рush ax             ; втолкнуть в стек
     mov  ax,new_cs      ; занести в стек
     рush ax             ; адрес, на который нужно
     mov  ax,new_iр      ; передать управление
     рush ax             ; в стек
     iret                ; и вытолкнуть CS:IP и флаги

     @e13.1.3. Int 02h - Немаскируемое прерывание (NMI)@e0

     Прерывание 2  связано с входом  МП NMI и  является наиболее
приоритетным немаскируемым прерыванием. Это единственное внешнее
прерывание, которое не маскируется  инструкцией CLI. Фирма Intel
резервировала его для катастрофических  сбоев, таких, как потеря
питания.  Однако,  в  IBM  PC  оно  аппаратно  генерируется  при
нарушении   паритета   памяти    и   при   неустранимой   ошибке
арифметического  сопроцессора  (8087,  80287  или 80387), причем
после  сообщения  об  ошибке   ПЭВМ  зависает.  Остается  только
благодарить  специалистов из  IBM  за  то, что  искажение одного
байта памяти приводит к потере всего ее содержимого.

     Обработчик Int 02h, расположенный в  BIOS PC, XT, AT и PS/2
модель  30, выводит  на экран  сообщение "PARITY  ERROR 1", если
произошла ошибка  паритета памяти на системной  плате, и "PARITY
ERROR  2", если  нарушен паритет  памяти в  канале ввода-вывода.
Затем он пытается обнаружить адрес памяти, по которому произошел
сбой.   Если  это   ему  удается,   на  экран   выводится  адрес
соответствующего  сегмента;  если  нет,  то  "?????". Затем ПЭВМ
входит в бесконечный  цикл и Вам остается только  выключить ее и
снова включить.

     В PS/2, кроме модели 30,  вместо "PARITY ERROR 1" и "PARITY
ERROR 2"  выводятся коды ошибки 110  и 111 соответственно. Кроме
того, NMI вызывается еще двумя ошибками. Коды ошибок следующие:

     110  Сбой памяти на системной плате
     111  Сбой памяти канала ввода-вывода
     112  Таймаут сторожа (watchdog)
     113  Таймаут шины прямого доступа в память (ПДП)

     Таймаут  сторожа  происходит,  если  включен  сторож  и  не
произошло ожидаемого прерывания от таймера (IRQ 0). Таймаут шины
ПДП   генерируется   центральным   арбитром,   если  устройство,
использующее прямой доступ к памяти, занимает шину более, чем на
7.8 мсек.

     Это  же прерывание  генерируется арифметическими  сопроцес-
сорами  при  обнаружении   неустранимой  ошибки  (например,  при
делении  на  нуль).  МП   8087  непосредственно  генерирует  это
прерывание, а  80287 и 80387 для  совместимости с ним генерируют
IRQ13 (Int 75h), а тот в свою очередь вызывает Int 02h.

     Если  Вы хотите  сами обрабатывать  NMI, то  Ваша программа
должна выполнять следующие действия:

     -  считывать порт  62h, чтобы  выяснить причину прерывания:
если  биты 6  или 7  установлены, то  произошла ошибка  паритета
памяти;  в  этом  случае  программа  должна  передать управление
системному обработчику NMI;

     -  если  ошибки  паритета  нет,  то  источником  прерывания
является  сопроцессор;  нужно  выполнить  команду  FNSAVE, чтобы
выяснить причину ошибки, и FNCLEX, чтобы сбросить ошибку.

     Примечания:

     1.  В   PCjr  это  прерывание  связано   с  прерыванием  от
клавиатуры.

     2.  В PC  Convertible Int  02h связано  с дискетами, часами
реального времени, клавиатурой и приостановом системы.

     @e13.1.4. Int 03h - Прерывание по точке останова@e0

     Это   прерывание    вызывается   специальной   однобайтовой
инструкцией INT 3 и предназначено для установки точек останова в
отлаживаемой     программе.    Обычно     используется    только
программами-отладчиками.

     @e13.1.5. Int 04h - Переполнение@e0

     Прерывание  4   происходит,  если  установлен   флаг  OF  и
выполняется    инструкция   INTO.    Это   облегчает   написание
подпрограмм-ловушек арифметических переполнений. Пример:

     mov  ax,var_1
     add  ax,var_2
     into           ; 2-байтовый тест на переполнение
     . . .

     @e13.1.6. Int 05h - Печать экрана@e0

     Вопреки фирме Intel, которая зарезервировала это прерывание
для  команды BOUND,  в IBM  PC Int  05h используется  для вывода
содержимого  экрана на  первый параллельный  принтер (LPT1). Оно
вызывается  обработчиком  прерываний  от  клавиатуры  по нажатию
клавиш  Shift+PrtSc. Результат  операции сообщается  в байте  по
адресу 00500h и может принимать следующие значения:

     00h  Печать экрана завершилась успешно
     01h  Печать экрана происходит в данный момент
     FFh  Во время печати произошла ошибка

     Примечания:

     1.  Позиция  курсора  сохраняется  перед  началом  печати и
восстанавливается по ее завершении.

     2. Во время печати экрана прерывания разрешены.

     3. Во время печати  дополнительные запросы на печать экрана
игнорируются.

     4.  BIOS адаптеров  EGA и  VGA имеет  свою программу печати
экрана, которую можно подключить вызовом Int 10h, фн 12h.

     5.   Команда  ДОС   GRAPHICS  подменяет   обработчик  этого
прерывания   на  программу,   позволяющую  печатать  графические
экраны.

     6.  На  PC  Convertible  при  возникновении  ошибки  печать
прекращается  и  раздается  звуковой  сигнал. Нажатие Ctrl+Break
прерывает печать экрана.

     @e13.1.7. Int 06h - Неверный код команды (AT)@e0

     Это  прерывание генерируется  МП  80286  и 80386,  если они
встречают несуществующий  код машинной команды  или недопустимый
операнд  в  команде  (например,  межсегментный  JMP с операндом-
регистром).  В   стек  вталкивается  адрес   команды,  вызвавшей
прерывание.
@pb
@ce@e13.2. Прерывания от контроллера прерываний #1@e0

     Прерывания 08h - 0Fh связаны с выходами первого контроллера
прерываний IRQ 0 - IRQ 7 соответственно.

     @e13.2.1. Int 08h - Прерывание от системного таймера@e0

     Это  прерывание  генерируется  системным  таймером  (IRQ 0)
18.21 раз  в секунду (каждые 55  мсек). Его обработчик выполняет
следующие действия:

     1. Увеличивает на единицу счетчик таймера по адресу 0046Ch;
по достижении  24 часов устанавливает  в 1 флаг  переполнения по
адресу 00470h и обнуляет счетчик таймера.

     2. Уменьшает на единицу  счетчик выключения двигателей НГМД
по  адресу 00440h.  Если  счетчик  станет равен  нулю, двигатель
выключается  и информация  об  этом  заносится в  байт состояния
двигателей НГМД по адресу 0043Fh.

     3.  Вызывает  Int  1Ch  (пользовательское обслуживание тай-
мера).

     4. На PC Convertible вызывает Int 4Ah, если наступило время
побудки.

     Если Вы хотите сами  обрабатывать прерывания от таймера, не
забудьте  поместить  в   конец  обработчика  следующие  команды,
сообщающие  контроллеру  прерываний,  что  обработка  прерывания
завершена:

     mov  al,20h
     out  20h,al

     Впрочем,   большинство   программистов   предпочитают  дать
возможность  выполнить это  действие системному  обработчику Int
08h.  Они  сохраняют  его  адрес  в  двойном  слове, например, в
CS:Old_Int_08h,  а  затем  при  обработке  прерывания  выполняют
следующие действия:

     рushf                         ; смоделировать INT
     call dword рtr cs:Old_Int_08h ; вызвать обработчик BIOS
     .  .  .                       ; выполнить свои действия
     iret                          ; и завершить работу

     На самом деле предпочтительней  перехватывать не Int 08h, а
Int 1Ch,  предназначенный именно для  пользовательской обработки
прерываний таймера.

     См. также: Int 1Ah, фн 06h
                Int 1Ch
                Данные BIOS
@pb
     @e13.2.2. Int 09h - Прерывание от клавиатуры@e0

     Это прерывание генерируется клавиатурой (IRQ 1) всякий раз,
когда происходит нажатие или  отпускание клавиши. Его обработчик
выполняет следующие действия:

     1. Если нажата обычная клавиша,  то ее ASCII-код и скан-код
заносятся  в буфер  клавиатуры  по  адресу, хранящемуся  в слове
0041Ch. Затем это слово увеличивается на 2 и, если оно указывает
за   конец   буфера,   переустанавливается   на   начало  буфера
клавиатуры. Отпускание этих клавиш игнорируется.

     2. Если нажата или отпущена клавиша Ctrl, Alt или Shift, то
обновятся байты состояния клавиатуры по адресу 00417h, 00418h и
00496h.

     3. Если нажата комбинация Ctrl+Alt+Del, то по адресу 00472h
засылается слово  1234h и управление  передается программе POST.
На  PC Convertible  вместо перехода  на POST  производится сброс
процессора, что приводит к тому же результату.

     4.  Если  нажата  клавиша   Pause  (или  Ctrl+NumLock),  то
начинается   бесконечный  цикл,   который  прерывается  нажатием
алфавитно-цифровой   клавиши.   На   PC   Convertible  при  этом
вызывается Int 15h, фн 41h (ожидание внешнего события).

     5. Если нажата комбинация Shift+PrtSc, вызывается Int 05h.

     6. Если нажата комбинация Ctrl+Break, вызывается Int 1Bh.

     7. На XT от 01/10/86 и  позже, AT, XT-286, PC Convertible и
PS/2 вызывается Int 15h, фн 91h с AL=02h (прерывание завершено),
сигнализирующее, что  клавиша принята. На  этих же ПЭВМ  нажатие
или отпускание клавиши SysReq вызывает Int 15h, фн 85h.

     8. На AT от 06/10/85 и позже, XT-286, PC Convertible и PS/2
после считывания  скан-кода клавиши из порта  60h вызывается Int
15h, фн 4Fh, позволяющая пользователю переопределить или удалить
клавишу.

     Для  выборки  кодов  клавиш  из  буфера  клавиатуры следует
использовать Int 16h.

     Если  Вы хотите  обрабатывать  Int  09h сами,  то программа
обработки прерывания должна иметь следующий вид:

Int_09h:
     рush      ax
     рush      di
     рush      es
     in        al,60h    ;скан- код клавиши из РА
     les       di,buffer ;адрес буфера
     stosb               ;сохранить код в буфере
     рoр       es
     рoр       di
     in        al,61h    ;ввод порта РВ
     mov       ah,al
     or        al,80h    ;установить бит "подтверждения ввода"
     out       61h,al
     xchg      ah,al     ;вывести старое значение РВ
     out       61h,al
     mov       al,20h    ;послать сигнал EOI
     out       20h,al    ;контроллеру прерываний
     рoр       ax
     iret

     См. также: Int 16h, фн 00h
                Данные BIOS
                POST

     @e13.2.3. Int 0Ah - Каскад со вторым контроллером
               прерываний (AT)@e0

     Это прерывание (IRQ 2) не используется в ПЭВМ, имеющих один
контроллер прерываний (PC и XT).  В остальных ПЭВМ оно аппаратно
используется   для   каскадирования   со   вторым   контроллером
прерываний.

     Некоторые  сетевые адаптеры  используют это  прерывание для
обслуживания ЛВС. В этом случае  вместо IRQ 2 используется IRQ 9
(Int 71h) для сохранения совместимости ПЭВМ.

     @e13.2.4. Int 0Bh, Int 0Ch - Прерывания от RS-232C@e0

     Эти   прерывания   генерируются   стыками   COM2   и   COM1
соответственно,  если они  запрограммированы на  работу в режиме
прерываний.  BIOS  их  не  использует,  т.  к.  он ведет обмен с
RS-232C  в  режиме  опроса  (прерывания  от  стыков  запрещены).
Поэтому  пользователь,  желающий   повысить  скорость  обмена  с
RS-232C, должен отказаться от использования функций BIOS и прог-
раммировать COM1 и COM2 на уровне портов ввода-вывода, включая и
написание своих подпрограмм для обработки прерываний от них.

     Примечание. На PS/2 порты  COM2 - COM8 разделяют прерывание
0Bh. На многих ПЭВМ, оснащенных более, чем двумя стыками RS-232,
COM3 разделяет Int 0Ch, COM4 - Int 0Bh.

     @e13.2.5. Int 0Dh - Прерывание от жесткого диска (PC/XT)@e0

     Это  прерывание  (IRQ  5)  связано  с контроллером жесткого
диска  в  PC/XT.  Оно  генерируется  контроллером  по завершении
очередной операции с диском.  Обработчик BIOS засылает по адресу
0048Eh код  FFh (операция выполнена).

     На XT от 01/10/86 и позже затем вызывается Int 15h, фн 91h,
сообщающая, что прерывание обработано.

    AT и PS/2 используют это прерывание для принтера LPT2.

     См. также: Int 76h

     @e13.2.6. Int 0Eh - Прерывание от НГМД@e0

     Это  прерывание  (IRQ  6)  генерируется  контроллером НГМД.
BIOS,  обрабатывая его,  просто  устанавливает  бит 7  по адресу
0043Eh,  указывая,   что  идет  поиск  дорожки   на  дискете.  В
дальнейшем  этот  бит  используется  функциями  Int  13h,  чтобы
проверить,   нужна  ли   рекалибровка  НГМД   перед  выполнением
очередной операции с дискетой.

     @e13.2.7. Int 0Fh - Прерывание от принтера@e0

     Это  прерывание  (IRQ  7)  генерируется  принтером  LPT1 по
завершении   печати  символа.   BIOS  запрещает   прерывания  от
принтера, поэтому  им Int 0Fh  не используется. Если  контроллер
прерываний запрограммирован  неверно, в системе  могут возникать
ошибочные прерывания; они направляются в этот вектор.
@pb
@ce@e13.3. Прерывания от контроллера прерываний #2@e0

     @e13.3.1. Int 70h - Прерывание от часов реального времени@e0

     Это  прерывание  (IRQ   8)  генерируется  часами  реального
времени (RTC) в  AT, XT-286 и PS/2.

     Int   70h   обслуживает   две   функции.   Во-первых,   это
периодическое  прерывание,  которое  генерируется,  когда задана
временная задержка.  Прерывание происходит 1024  раза в секунду.
Счетчик микросекунд уменьшается на 976 микросекунд (1/1024 сек).
Когда он становится меньше или равен нулю, устанавливается бит 7
в заданном байте. Для Int 15h, фн 83h этот байт задается пользо-
вательской программой. Для Int 15h, фн  86h - это байт по адресу
004A0h. Подробности см. в описании Int 15h, фн 83h и 86h.

     Во-вторых,  это обслуживание  побудки: когда  текущее время
RTC совпадает с временем побудки, генерируется Int 4Ah.

     Примечания:

     1. Часы  реального времени в PC  Convertible генерируют Int
02h, но обслуживают те же функции.

     2.   На  PS/2   модель  30   периодическое  прерывание   не
поддерживается.

     См. также: Int 15h, фн 83h
                Int 15h, фн 86h
                Int 4Ah

     @e13.3.2. Int 71h - Переназначение IRQ 2@e0

     Это прерывание  (IRQ 9) используется  некоторыми адаптерами
ЛВС и генерирует Int 0Ah  (IRQ 2). Это сделано для совместимости
с PC и XT, имеющими один контроллер прерываний.

     @e13.3.3. Int 74h - Прерывание от мыши@e0

     Это прерывание (IRQ 12)  используется  на PS/2 моделей 50 и
выше для мыши.

     @e13.3.4. Int 75h - Прерывание от сопроцессора@e0

     Это прерывание (IRQ 13)  вызывается сопроцессором 80287 или
80387  при обнаружении  неустранимой ошибки.  Оно генерирует Int
02h.  Программы, работающие  с 80287,  должны перехватывать этот
вектор.

     См. также: Int 02h

     @e13.3.5. Int 76h - Прерывание от жесткого диска AT@e0

     Это  прерывание (IRQ  14) связано  с контроллером  жесткого
диска  в AT,  XT-286, PC  Convertible и  PS/2. Оно  генерируется
контроллером   по  завершении   очередной  операции   с  диском.
Обработчик  BIOS засылает  по  адресу  0048Eh код  FFh (операция
выполнена). Затем  вызывается Int 15h,  фн 91h, сообщающая,  что
прерывание обработано.

     См. также: Int 0Dh

@ce@e13.4. Таблицы и пользовательские прерывания@e0

     @e13.4.1. Int 1Bh - Обработка нажатия Ctrl+Break@e0

     Это  прерывание  генерируется  обработчиком  прерываний  от
клавиатуры, если  нажата комбинация клавиш  Ctrl+Break. При этом
байт по адресу 00471h устанавливается в единицу.

     BIOS  засылает  в  этот  вектор  просто  указатель на IRET.
MS-DOS  заменяет  его  на   адрес  своего  обработчика,  который
устанавливает внутренний  флаг ДОС, свидетельствующий  о нажатии
Ctrl+Break. Обнаружив этот флаг,  ДОС выводит на экран сообщение
"^C", флаг сбрасывается и вызывается Int 23h.

     См. также: Int 09h
                Данные BIOS

     @e13.4.2. Int 1Ch - Пользовательская обработка таймера@e0

     Это прерывание генерируется обработчиком int 08h при каждом
прерывании от системного таймера (18.21 раз в секунду или каждые
55 мсек). BIOS засылает в  этот вектор просто указатель на IRET.
Пользователь  может  подменить  его  на  адрес  своей  программы
обработки прерываний от таймера.

     Следует помнить, что это  прерывание вызывается раньше, чем
BIOS  сообщит контроллеру  прерываний о  завершении обслуживания
прерывания.  Поэтому  обработчик  Int   1Ch  ограничен  в  своих
возможностях, т. к. во время его работы все прерывания запрещены
(в частности,  он не может  вводить символы с  клавиатуры). Если
Вас  это  не  устраивает,  перехватывайте  Int  08h. Подробности
описаны в п. 3.2.1.

     См. также: Int 08h
@pb
     @e13.4.3. Int 1Dh - Адрес таблицы параметров дисплея@e0

     Этот  вектор  содержит  адрес  таблицы  текущих  параметров
дисплея. Эта таблица используется Int  10h, фн 00h при изменении
видеорежима и имеет следующий формат.

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       16  Значения R0-R15 контроллера ЭЛТ для режимов 40х25
+10h       16  Значения R0-R15 контроллера ЭЛТ для режимов 80х25
+20h       16  Значения R0-R15 для графических режимов
+30h       16  Значения R0-R15 для монохромного адаптера
+40h        2  Размер страницы экрана для режимов 40х25
+42h        2  Размер страницы экрана для режимов 80х25
+44h        2  Размер страницы экрана для графики 320х200
+46h        2  Размер страницы экрана для графики 640х200
+48h        8  Число столбцов экрана для видеорежимов 0 - 7
+50h        8  Содержимое порта 3x8h для видеорежимов 0 - 7
 58h        Длина таблицы
────────────────────────────────────────────────────────────────

     Примечание:  x   определяется  типом  адаптера -  3B8h  для
монохромного адаптера, 3D8h для цветного адаптера.

     Приведем типичное содержимое этой таблицы:

     db   38h, 28h, 2Dh, 0Ah, 1Fh, 06h, 19h, 1Ch
     db   02h, 07h, 06h, 07h, 00h, 00h, 00h, 00h
     db   71h, 50h, 5Ah, 0Ah, 1Fh, 06h, 19h, 1Ch
     db   02h, 07h, 06h, 07h, 00h, 00h, 00h, 00h
     db   38h, 28h, 2Dh, 0Ah, 7Fh, 06h, 64h, 70h
     db   02h, 01h, 06h, 07h, 00h, 00h, 00h, 00h
     db   61h, 50h, 52h, 0Fh, 19h, 06h, 19h, 19h
     db   02h, 0Dh, 0Bh, 0Ch, 00h, 00h, 00h, 00h
     dw   800h, 1000h, 4000h, 4000h
     db   28h, 28h, 50h, 50h, 28h, 28h, 50h, 50h
     db   2Ch, 28h, 2Dh, 29h, 2Ah, 2Eh, 1Eh, 29h

     Вы  можете  подменить  содержимое  Int  1Dh  на адрес своей
таблицы.  После  этого   смена  видеорежима  будет  использовать
значения  из Вашей  таблицы. Помните,  что задание  недопустимых
значений  регистров  контроллера  ЭЛТ  может физически повредить
монитор!
@pb
     @e13.4.4. Int 1Eh - Адрес таблицы параметров НГМД@e0

     Этот вектор содержит адрес таблицы параметров НГМД, которые
используются функциями  Int 13h при работе  с дискетами. Таблица
имеет следующее строение (приведены типичные, но не обязательные
значения параметров).

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое  Комментарий
────────────────────────────────────────────────────────────────
                ┌───┐
+00h       1    │CFh│       Первый байт параметров НГМД
                ├───┤       (см. ниже)
+01h       1    │02h│       Второй байт параметров НГМД
                ├───┤       (см. ниже)
+02h       1    │25h│       Счетчик выключения двигателя
                ├───┤       (в единицах по 55 мсек)
+03h       1    │02h│       Размер сектора в байтах
                ├───┤       (0=128, 1=256, 2=512, 3=1024)
+04h       1    │08h│       Последний сектор на дорожке
                ├───┤
+05h       1    │2Ah│       Длина межсекторного промежутка
                ├───┤       для чтения и записи
+06h       1    │FFh│       Максимальная длина передаваемых
                ├───┤       данных
+07h       1    │50h│       Длина межсекторного промежутка
                ├───┤       для форматирования
+08h       1    │F6h│       Символ-заполнитель для операции
                ├───┤       форматирования
+09h       1    │19h│       Время установки головки (в мсек)
                ├───┤
+0Ah       1    │04h│       Время запуска двигателя
                └───┘       (в единицах по 1/8 сек)
 0Bh       Длина таблицы
────────────────────────────────────────────────────────────────

     Первый байт параметров содержит следующую информацию:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│           │           │ Биты:
└──┴──┼──┴──┴──┴──┼──┴──┘ ────
      │           └──────> 0-3: время шагового двигателя
      └──────────────────> 4-7: время разгрузки головок

     Второй байт параметров содержит следующую информацию:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│                    │  │ Биты:
└──┴──┴──┴──┼──┴──┴──┴┬─┘ ────
            │         └──> 0: 0=использовать ПДП
            └────────────> 1-7: время загрузки головок

     ДОС изменяет  эту таблицу для  повышения скорости обмена  с
дискетами. Вы можете подменить эту  таблицу на свою, но лучше не
делать  этого,  если  Вы  не  знаете  досконально, как подбирать
параметры НГМД.

     Примечание. IBM PC и  многие совместимые ПЭВМ  содержат эту
таблицу по адресу F000h:EFC7h.

     @e13.4.5. Int 1Fh - Адрес таблицы графических символов@e0

     При  выводе символов  в графическом  режиме адаптер дисплея
использует для символов с ASCII-кодами  от 0 до 127 изображения,
хранящиеся в его ПЗУ. Для вывода символов с кодами от 128 до 255
такой  таблицы в  ПЗУ нет;  поэтому если  Вы хотите  выводить на
экран  русские буквы,  Вам  нужно  сформировать такую  таблицу в
памяти. Адрес  таблицы символов с  кодами 128 -  255 должен быть
заслан в вектор Int 1Fh.

     Первоначально этот вектор содержит адрес F000h:0000h, т. е.
старшие  символы выводятся  в виде  случайного "мусора". Команда
ДОС GRAFTABL устанавливает в память таблицу для Int 1Fh, но она,
естественно,  не содержит  изображений русских  букв. Вы  можете
создать  свою  таблицу  символов,  которая  должна быть устроена
следующим образом.

     Таблица символов должна состоять  из 128 матриц символов по
8 байтов  на   символ.  Каждый  байт   представляет  собой  одну
горизонтальную  линию (8  пикселей, старший  бит означает  левую
точку), причем первый байт  соответствует верхней линии символа,
восьмой - нижней линии.

     Примечание: Младшие  128 символов хранятся  в ПЗУ с  адреса
F000h:FA6Eh. Этот адрес недокументирован, но остается постоянным
для  всех  ПЭВМ  производства  IBM.  Вы  не можете подменить эту
таблицу (за  исключением адаптеров EGA и  VGA, которые позволяют
переопределить весь шрифт).

     @e13.4.6. Int 40h - Управление НГМД@e1

     Это прерывание используется BIOS многих жестких дисков, ко-
торые засылают в него адрес  первоначального обработчика функций
управления НГМД (исходный Int 13h). При этом в Int 13h заносится
адрес обработчика функций Int 13h для жестких дисков.

     @e13.4.7. Int 41h, Int 46h - Таблицы параметров жестких
               дисков@e0

     Вектор  Int 41h  содержит адрес  таблицы параметров первого
жесткого диска,  а Int 46h  - второго диска,  если он есть.  Эти
таблицы используются функциями Int 13h при выполнении операций с
жестким  диском. На  XT они  определяются DIP-переключателями на
плате  контроллера,  на  остальных  ПЭВМ  формируются  на основе
содержимого CMOS.

     Таблица параметров  жесткого диска для XT,  AT, XT-286 и PC
Convertible имеет следующее строение:
@pb
────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое  Комментарий
────────────────────────────────────────────────────────────────
                ┌───┬───┐
+00h       2    │       │   Максимальное число цилиндров
                ├───┼───┘
+02h       1    │   │       Максимальное число головок
                ├───┼───┐
+03h       2    │       │   XT: Начало редуцированной записи
                ├───┼───┤   остальные: не используется
+05h       2    │       │   Начальный цилиндр предкомпенсации
                ├───┼───┘   записи
+07h       1    │   │       XT: Макс. длина пакета данных ECC
                ├───┤       остальные: не используется
+08h       1    │   │       Управляющий байт (см. ниже)
                ├───┤
+09h       1    │   │       XT: Стандартный таймаут
                ├───┤       остальные: не используется
+0Ah       1    │   │       XT: Таймаут для форматирования
                ├───┤       остальные: не используется
+0Bh       1    │   │       XT: Таймаут для проверки диска
                ├───┼───┐   остальные: не используется
+0Ch       2    │       │   XT: не используется
                ├───┼───┘   остальные: зона парковки
+0Eh       1    │   │       XT: не используется
                ├───┤       остальные: число секторов на дорожке
+0Fh       1    │   │       Резерв
                └───┘
 10h       Длина таблицы
────────────────────────────────────────────────────────────────

     Управляющий байт для XT имеет вид:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │0  0  0 │        │ Биты:
└┬─┴┬─┴──┴──┴──┴──┴┬─┴──┘ ────
 │  │              └─────> 0-2: Опция диска
 │  └────────────────────> 6: 1= запрет повторов ECC
 └───────────────────────> 7: 1= запрет повторов доступа к диску

     На остальных ПЭВМ управляющий байт имеет вид:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │X │  │X  X  X │ Биты:
└┬─┴┬─┴┬─┴──┴┬─┴──┴──┴──┘ ────
 │  │  │     └───────────> 3: 1=более 8 головок
 │  │  └─────────────────> 5: 1=карта дефектных блоков хранится
 │  │                           за максимальным цилиндром
 │  └────────────────────> 6: 1= запрет повторов
 └───────────────────────> 7: 1= запрет повторов

     На PS/2  кроме модели 30 таблица  параметров жесткого диска
имеет вид:

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое  Комментарий
────────────────────────────────────────────────────────────────
                ┌───────┐
+00h       2    │       │   Длина таблицы параметров (41 байт)
                ├───────┴──────┐
+02h      22    │   .  .  .    │ Строка "IBM HARDFILE TYPE xxx",
                ├───┬──────────┘ xxx - номер типа диска
+18h       1    │   │       Номер типа диска
                ├───┼───┐
+19h       2    │       │   Максимальное число цилиндров
                ├───┼───┘
+1Bh       1    │   │       Максимальное число головок
                ├───┼───┐
+1Ch       2    │       │   Зарезервировано
                ├───┼───┤
+1Eh       2    │       │   Начало редуцированной записи
                ├───┼───┘
+20h       1    │   │       Зарезервировано
                ├───┤
+21h       1    │   │       Управляющий байт (см. ниже)
                ├───┼───┬───┐
+22h       3    │           │ Зарезервировано
                ├───┼───┼───┘
+25h       2    │       │   Зона парковки
                ├───┼───┘
+27h       1    │   │       Число секторов на дорожке
                ├───┤
+28h       1    │   │       Зарезервировано
                └───┘
 29h       Длина таблицы
────────────────────────────────────────────────────────────────

     Управляющий байт для PS/2 имеет вид:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │X │  │X  X  X │ Биты:
└┬─┴┬─┴┬─┴──┴┬─┴──┴──┴──┘ ────
 │  │  │     └───────────> 3: 1=более 8 головок
 │  │  └─────────────────> 5: 1=есть карта дефектных блоков
 │  └────────────────────> 6: 1= запрет повторов
 └───────────────────────> 7: 1= запрет повторов

     Таблица  параметров  жестокого  диска  в  PS/2 храниться на
самом диске в секторе 2 дорожки 0 головки 0.


     @e13.4.8. Int 42h - Управление дисплеем@e1

     Это прерывание используется BIOS адаптеров EGA, VGA и PS/2,
которые засылают в него  адрес первоначального обработчика функ-
ций управления дисплеем (исходный Int 10h).  При этом в Int 10h
заносится адрес обработчика функций Int 10h данного адаптера.

     @e13.4.9. Int 4Ah - Прерывание побудки@e0

     Это прерывание генерируется  часами реального времени (RTC)
на AT,  XT-286, PC Convertible и  PS/2, когда наступает заданное
время побудки.

     BIOS  засылает  в  этот  вектор  просто  указатель на IRET.
Пользователь может  подменить его на адрес  своей программы. Это
нужно сделать до вызова Int 1Ah, фн 06h, задающей время побудки.

     См. также: Int 1Ah
                Int 70h
@pb
@ce@e14. Область данных BIOS@e0

     Можно выделить три области данных BIOS:

     -   рабочая  область,   которая  занимает   256  байтов   с
абсолютного адреса 00400h;

     - дополнительная область данных (только в PS/2);

     - таблицы и данные BIOS, хранящиеся в ПЗУ.

@ce@e14.1. Рабочая область данных@e0

     @e14.1.1. Описание рабочей области@e0

     Содержимое   рабочей  области   данных  можно   представить
следующей схемой:

Адрес  Длина   Содержимое
────────────────────────────────────────────────────────────────
400h     8     Базовые адреса портов RS-232C
408h     8     Базовые адреса портов принтеров
410h     2     Список оборудования ПЭВМ
412h     1     Результат POST для PC Convertible
413h     2     Размер памяти ПЭВМ
415h     2     Состояние батареи PC Convertible
417h    27h    Первая область данных клавиатуры
43Eh    0Bh    Область данных НГМД
449h    1Еh    Первая область данных дисплея
467h     5     Первая область системных данных
46Ch     5     Область данных таймера
471h     3     Вторая область системных данных
474h     4     Область данных жесткого диска
478h     4     Значения таймаутов для принтеров
47Ch     4     Значения таймаутов для RS-232C
480h     4     Вторая область данных клавиатуры
484h     7     Вторая область управления дисплеем
48Bh    0Bh    Управляющие данные дисководов
496h     2     Третья область данных клавиатуры
498h     9     Область данных часов реального времени
4A1h     7     Резерв для сетевых адаптеров AT
4A8h     4     Указатель на таблицы параметров EGA
4ACh    44h    Резерв
4F0h    10h    Область межпрограммной коммуникации
────────────────────────────────────────────────────────────────

     Кроме того, BIOS использует несколько байтов с  абсолютного
адреса 00500h в области, которая традиционно называется "область
данных ДОС". Структура этой области данных такова:
@pb
Адрес  Длина   Содержимое
────────────────────────────────────────────────────────────────
500h     1     Состояние печати экрана
501h     3     Резерв
504h     1     Флаг фантомного диска
505h    0Bh    Резерв
510h    11h    Используется интерпретатором Бейсика
521h    0Fh    Резерв
530h     3     Используется командой MODE
────────────────────────────────────────────────────────────────

     @e14.1.2. Содержимое рабочей области@e0

     В  этом  разделе  приведено  детальное описание содержимого
рабочей области BIOS.

@u1400h   Базовые адреса портов RS-232C@u0

     Длина: 8 байтов (4 слова)

     Сюда  в  процессе  POST  заносятся  базовые  адреса  портов
четырех последовательных  интерфейсов RS-232C. Если  адрес порта
равен нулю,  то соответствующего адаптера  нет в ПЭВМ.  При этом
нулевые адреса портов всегда помещаются в конце списка.

     400h - последовательный интерфейс #1 (COM1)
     402h - последовательный интерфейс #2 (COM2)
     404h - последовательный интерфейс #3 (COM3)
     406h - последовательный интерфейс #4 (COM4)

     См. также: Int 14h

@u1408h   Базовые адреса портов параллельных принтеров@u0

     Длина: 8 байтов (4 слова)

     Сюда  в  процессе  POST  заносятся  базовые  адреса  портов
четырех параллельных принтеров. Если  адрес порта равен нулю, то
соответствующего адаптера  нет в ПЭВМ.  При этом нулевые  адреса
портов всегда помещаются в конце списка.

     408h - параллельный принтер #1 (LPT1)
     40Ah - параллельный принтер #2 (LPT2)
     40Ch - параллельный принтер #3 (LPT3)
     40Eh - параллельный принтер #4 (LPT4)

     Примечание: LPT4 не поддерживается в PS/2.

     См. также: Int 17h

@u1410h   Список оборудования ПЭВМ@u0

     Длина: 2 байта (1 слово)

     Содержит  список оборудования,  установленного в  ПЭВМ. Это
слово формируется в процессе POST и имеет следующую структуру:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │     │X │  │  │  │ Биты:
└──┼──┴──┼──┴──┴┬─┴┬─┴┬─┘ ────
   │     │      │  │  └──> 0: 1=есть НГМД
   │     │      │  └─────> 1: 1=есть сопроцессор 8087/287
   │     │      └────────> 2: 1=есть мышь (PS/2)
   │     └───────────────> 4-5: тип дисплея:
   │                             00 - EGA или VGA
   │                             01 - CGA, 40 столбцов
   │                             10 - CGA, 80 столбцов
   │                             11 - монохромный
   └─────────────────────> 6-7: количество НГМД - 1

 1  1  1  1  1  1
 5  4  3  2  1  0  9  8
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │  │  │        │X │ Биты:
└──┼──┴┬─┴┬─┴──┴┬─┴──┴──┘ ────
   │   │  │     └────────> 9-11: количество стыков RS-232C
   │   │  └──────────────> 12: 1=есть игровой адаптер
   │   └─────────────────> 13: 1=есть встроенный модем (PC Conv)
   └─────────────────────> 14-15: количество адаптеров принтеров

     Примечания:

     1. Для чтения этой информации используйте Int 11h.

     2.  На IBM  PC, XT  и PCjr  биты 2-3  содержат объем ОЗУ на
системной плате в блоках по 16К (например, 00=16К, 11=64К).

     3. Бит 2 не используется на PC, XT, AT и PC Convertible. На
XT-286 и  PS/2 он указывает  на наличие устройства  графического
ввода (рointing device).

     4. Бит 12 всегда установлен в 1 на PCjr.

     5.  Бит  13  указывает  наличие  встроенного  модема  на PC
Convertible, последовательного принтера на PCjr и зарезервирован
на остальных ПЭВМ.

     6. Если DIP-переключатели в PC  и XT выставлены неверно, то
BIOS не определит наличие сопроцессора. Для проверки того, имеет
ли ЭВМ сопроцессор, лучше всего  выполнить его команду и проана-
лизировать результат.

     См. также: Int 11h

@u1412h   Результат POST для PC Convertible@u0

     Длина: 1 байт

     Этот байт содержит следующую информацию:

     PC Convertible - состояние начального тестирования ЭВМ;
     PCjr - счетчик  ошибок  передачи  при инфракрасной  связи с
     клавиатурой;
     прочие ПЭВМ - не используется.

     См. также: Сканирование ПЗУ

@u1413h   Размер ОЗУ в Кб (0 - 640)@u0

     Длина: 2 байта (1 слово)

     Содержит размер ОЗУ в блоках  по 1К (до 640К), определенный
в процессе  POST   анализом  DIP-переключателей  на   PC/XT  или
содержимого  CMOS   на  AT.  Для   доступа  к  этой   информации
используйте Int 12h.

      Примечание.  Для  определения  размера  расширенной памяти
используйте   Int   15h,   фн   88h.   Для  определения  размера
дополнительной памяти используйте Int 67h, фн 42h.

     См. также: Int 12h
                Int 15h, фн 88h
                Int 67h, фн 42h

@u1415h   Состояние батареи PC Convertible@u0

     Длина: 2 байта

     Эти  два  байта  не  используются  ни  одной  ПЭВМ, кроме PC
Convertible,  которая хранит  в первом  из них  (415h) состояние
встроенного   аккумулятора.  Этот   же  байт   используется  для
накопления ошибок при заводском тестировании ПЭВМ.

@u1417h   Состояние клавиатуры 1@u0

     Длина: 1 байт

     Этот байт содержит состояние регистров клавиатуры:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Биты:                           Маска:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────                            ──────
 │  │  │  │  │  │  │  └──> 0: 1=нажата правая клавиша Shift a&01
 │  │  │  │  │  │  └─────> 1: 1=нажата левая клавиша Shift  a&02
 │  │  │  │  │  └────────> 2: 1=нажата клавиша Ctrl         a&04
 │  │  │  │  └───────────> 3: 1=нажата клавиша Alt          a&08
 │  │  │  └──────────────> 4: 1=нажата клавиша ScrollLock   a&10
 │  │  └─────────────────> 5: 1=нажата клавиша NumLock      a&20
 │  └────────────────────> 6: 1=нажата клавиша CaрsLock     a&40
 └───────────────────────> 7: 1=нажата клавиша Ins          a&80

     См. также:  Int 16h, фн 02h
@pb
@u1418h   Состояние клавиатуры 2@u0

     Длина: 1 байт

     Этот байт содержит состояние регистров клавиатуры:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Биты:                           Маска:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────                            ──────
 │  │  │  │  │  │  │  └──> 0: 1=нажата левая клавиша Ctrl  a&01h
 │  │  │  │  │  │  └─────> 1: 1=нажата левая клавиша Alt   a&02h
 │  │  │  │  │  └────────> 2: 1=нажата клавиша SysReq      a&04h
 │  │  │  │  └───────────> 3: 1=нажата клавиша Pause       a&08h
 │  │  │  └──────────────> 4: 1=нажата клавиша ScrollLock  a&10h
 │  │  └─────────────────> 5: 1=нажата клавиша NumLock     a&20h
 │  └────────────────────> 6: 1=нажата клавиша CaрsLock    a&40h
 └───────────────────────> 7: 1=нажата клавиша Ins         a&80h

     Примечания:

     1.  Биты 0-2  имеют  смысл  только на  101-клавишных клави-
атурах.

     2. На PCjr бит 2  указывает, что включен щелчок при нажатии
клавиш.

     См. также: Int 16h, фн 12h

@u1419h   Буфер ввода числовых кодов@u0

     Длина: 1 байт

     В этом  байте накапливается код, вводимый  с клавиатуры при
нажатой клавише Alt. При отпускании  Alt код символа заносится в
буфер клавиатуры и этот байт обнуляется.

@u141Ah   Указатель извлечения из буфера клавиатуры@u0

     Длина: 2 байта (1 слово)

     Это слово указывает на  следующую пару ASCII-код/скан-код в
буфере  клавиатуры. Если  оно равно  содержимому 41Ch,  то буфер
пуст.

     См. также: Int 16h, фн 00h

@u141Ch   Указатель занесения в буфер клавиатуры@u0

     Длина: 2 байта (1 слово)

     Это  слово  указывает  на  позицию  в  буфере клавиатуры, в
которую  должен быть  занесен следующий  введенный символ. После
занесения символа оно увеличивается на  2 и при достижении конца
буфера "зацикливается" на его  начало. Если этот указатель равен
содержимому 41Ah, то буфер клавиатуры пуст.

     См. также: Int 16h, фн 00h

@u141Eh   Буфер клавиатуры@u0

     Длина: 32 байтов (16 слов)

     Этот буфер содержит для каждой нажатой клавиши ее ASCII-код
в четном байте  и скан-код в  последующем нечетном байте.  Буфер
может содержать до 16 символов.

     См. также: Скан-коды клавиш

@u143Eh   Состояние головок НГМД@u0

     Длина: 1 байт

     Этот  байт  указывает,  требуется  ли  рекалибровка головок
НГМД, т. е. их сброс на нулевую дорожку. Он имеет вид:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │X  X  X │  │  │  │  │ Биты:                           Маска:
└┬─┴──┴──┴──┴┬─┴┬─┴┬─┴┬─┘ ────                            ──────
 │           │  │  │  └──> 0: 0=рекалибровать диск 0       a&01h
 │           │  │  └─────> 1: 0=рекалибровать диск 1       a&02h
 │           │  └────────> 2: 0=рекалибровать диск 2       a&04h
 │           └───────────> 3: 0=рекалибровать диск 3       a&08h
 └───────────────────────> 7: флаг прерывания от НГМД      a&80h

     Примечания:

     1. Если требуется рекалибровка  дисковода и выдан запрос на
поиск, то перед поиском диск будет рекалиброван.

     2.  Int  13h,  фн  00h  сбрасывает  биты  0  -  3, вынуждая
рекалибровку дисков.

     3.  Бит  7  устанавливается  обработчиком  Int  0Eh,  когда
происходит прерывание от НГМД.

     См. также: Int 13h, фн 00h
                Int 0Eh

@u143Fh   Состояние двигателей дисководов@u0

     Длина: 1 байт

    Этот байт  указывает какой дисковод НГМД  выбран и двигатели
каких дисководов сейчас включены:
@pb
 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │X │     │  │  │  │  │ Биты:                           Маска:
└┬─┴──┴──┼──┴┬─┴┬─┴┬─┴┬─┘ ────                            ──────
 │       │   │  │  │  └──> 0: 1=включен двигатель диска 0  a&01h
 │       │   │  │  └─────> 1: 1=включен двигатель диска 1  a&02h
 │       │   │  └────────> 2: 1=включен двигатель диска 2  a&04h
 │       │   └───────────> 3: 1=включен двигатель диска 3  a&08h
 │       └───────────────> 4-5: выбранный диск (0-3)       a&10h
 └───────────────────────> 7: 1=операция чтения/записи     a&80h

     Обработчик  прерываний  таймера  (Int  08h) сбрасывает биты
0 - 3, когда счетчик выключения двигателя (440h) достигает нуля.

     См. также: Int 08h

@u1440h   Счетчик выключения двигателя@u0

     Длина: 1 байт

     Содержит  количество тиков  (18.2 тика  в секунду), которое
нужно  выждать  до  выключения  двигателя  дисководов НГМД. Если
двигатель включен,  то Int 08h при  каждом вызове уменьшает этот
байт  на  единицу.  При   достижении  счетчиком  нуля  двигатель
выключается.  При  запуске  любой  операции  с  НГМД  этот  байт
устанавливается равным 37 (примерно 2 секунды).

     См. также: Int 08h

@u1441h   Статус последней операции с НГМД@u0

     Длина: 1 байт

     Этот байт содержит  статус последней операции  с НГМД.   Он
совпадает со  значением AH,  которое возвращает  Int 13h,  подфн
2/3, а именно:

00h = нет ошибки
01h = неверная команда
02h = не найден адресный маркер
03h = попытка записи на диск, защищенный от записи
04h = сектор не найден
06h = активна линия смена дискеты
08h = ошибка контроллера ПДП
09h = попытка прямого доступа к памяти через границу 64К
0Ch = не найден тип носителя
10h = ошибка CRC индексных ECC
20h = сбой контроллера
40h = ошибка поиска
80h = таймаут (нет ответа диска)

     Для получения этой информации используйте Int 13h, фн 01h.

     См. также: Int 13h, фн 01h

@u1442h   Информация о состоянии НГМД@u0

     Длина: 7 байтов

     Эта область используется как буфер для формирования команды
контроллера НГМД и для приема его байтов состояния.

@u1449h   Текущий режим экрана@u0

     Длина: 1 байт

     Этот байт содержит текущий режим экрана.

     Примечание.  Для  установки  режима  экрана используйте Int
10h,  фн 00h;  для чтения  текущего режима  - Int  10h, фн  0Fh.
Подробно режимы экрана описаны в п. 7.2.

     См. также: Int 10h, фн 00h
                Int 10h, фн 0Fh

@u144Ah   Количество столбцов на экране@u0

     Длина: 2 байта (1 слово)

     Содержит количество столбцов текста в текущем режиме экрана
(40 или 80). Для чтения  этой информации используйте Int 10h, фн
0Fh.

     См. также: Int 10h, фн 0Fh

@u144Ch   Размер буфера регенерации@u0

     Длина: 2 байта (1 слово)

     Содержит  размер  одной  дисплейной  страницы  для текущего
режима  экрана. Например,  для CGA  в режиме  2 это  слово равно
4096.

@u144Eh   Начальный адрес буфера регенерации@u0

     Длина: 2 байта (1 слово)

     В этом слове содержится  смещение от начала экранной памяти
до начала текущей дисплейной страницы. Это значение равно номеру
текущей страницы (462h), умноженному на содержимое слова 44Ch.

@u1450h   Текущие позиции курсора@u0

     Длина: 16 байтов (8 слов)

     Здесь  хранятся  позиции  курсоров  для  каждой  из  восьми
дисплейных  страниц.  Позиция  курсора   хранится  в  виде  пары
(столбец, строка).

     450h - позиция курсора в странице 0
     452h - позиция курсора в странице 1
     454h - позиция курсора в странице 2
     456h - позиция курсора в странице 3
     458h - позиция курсора в странице 4
     45Ah - позиция курсора в странице 5
     45Ch - позиция курсора в странице 6
     45Eh - позиция курсора в странице 7

     Примечание: Для чтения позиции курсора используйте Int 10h,
фн 03h.

     См. также: Int 10h, фн 03h

@u1460h   Текущая форма курсора@u0

     Длина: 2 байта

     Содержит форму  аппаратного курсора дисплея.  Форма курсора
задается начальной  и конечной линиями. При  этом конечная линия
хранится в младшем байте, начальная линия - в старшем.

     Примечание: Для  чтения формы курсора  используйте Int 10h,
фн 03h; для задания формы курсора - Int 10h, фн 01h.

     См. также: Int 10h, фн 01h
                Int 10h, фн 03h

@u1462h   Текущая страница дисплея@u0

     Длина: 1 байт

     Содержит номер текущей дисплейной страницы.

     Примечания: Для чтения номера страницы используйте Int 10h,
фн 0Fh. Для задания номера страницы используйте Int 10h, фн 05h.

     См. также: Int 10h, фн 0Fh
                Int 10h, фн 05h

@u1463h   Базовый адрес контроллера ЭЛТ@u0

     Длина: 2 байта (1 слово)

     Содержит  базовый адрес  контроллера ЭЛТ,  т. е.  адрес его
индексного регистра. Пользуясь им,  легко определить тип дисплея
Вашей ПЭВМ:

     3B4h - монохромный дисплей;
     3D4h - цветной дисплей.

@u1465h   Текущее содержимое регистра режима@u0

     Длина: 1 байт

     Содержит  текущее значение  регистра режима  дисплея, т. е.
порта:

     3B8h для монохромного дисплея;
     3D8h для цветного дисплея.

@u1466h   Текущее содержимое регистра цвета@u0

     Длина: 1 байт

     Содержит  текущее значение  регистра цвета  дисплея, т.  е.
порта:

     3B9h для монохромного дисплея;
     3D9h для цветного дисплея.

     Примечание: адаптер монохромного дисплея не использует порт
3B9h, поэтому здесь хранится содержимое регистра цвета для CGA.

@u1467h   Зарезервировано@u0

     Длина: 5 байтов

     PC  и  PCjr  используют  эти  пять  байтов  для  управления
кассетным магнитофоном.

     PS/2, кроме модели 30, по  адресу 467h хранят двойное слово
- указатель на флаг перезагрузки, т. е. 40h:72h.

@u146Ch   Счетчик таймера@u0

     Длина: 4 байта (1 двойное слово)

     Содержит   количество   тиков,   соответствующее   текущему
времени. Каждый тик таймера (18.2 раза в секунду) генерирует Int
08h,  обработчик  которого  увеличивает  это  значение  на 1. По
истечении 24  часов (1800B0h), счетчик  сбрасывается, а байт  по
адресу 470h устанавливается в 1.

     Примечание:  Int   1Ah,  фн  00h   позволяет  прочесть  это
значение.   При   этом   флаг   переполнения   по   адресу  470h
сбрасывается.

     См. также: Int 1Ah, фн 00h
                Int 08h

@u1470h   Флаг переполнения таймера@u0

     Длина: 1 байт

     Устанавливается в  единицу, когда с  момента включения ПЭВМ
проходит 24 часа.

     Примечания:

     1. Этот байт является флагом,  содержащим значение 0 или 1.
Поэтому он  не позволяет отслеживать  временные периоды, большие
суток.

     2. Для чтения флага переполнения используйте
Int 1Ah, фн 00h. Помните, что после чтения флаг сбрасывается.

     См. также: Int 1Ah, фн 00h

@u1471h   Состояние Ctrl-Break@u0

     Длина: 1 байт

     Позволяет  определить,  была  ли  нажата  комбинация клавиш
Ctrl+Break.   При   нажатии   Ctrl+Break   бит   7  этого  байта
устанавливается   в  единицу.   Учтите,  что   BIOS  никогда  не
сбрасывает этот бит.

@u1472h   Флаг перезагрузки@u0

     Длина: 2 байта (1 слово).

     Указывает  причину  перезагрузки  ПЭВМ  и  может  принимать
следующие значения:

Значение  Смысл
────────  ─────
 1234h    Обойти тест памяти
 4321h    Сохранить память (PS/2, кроме модели 30)
 5678h    Приостанов системы (PC Convertible)
 9ABCh    Режим заводской диагностики (PC Convertible)
 ABCDh    Режим циклического тестирования (PC Convertible)

     Если пользователь нажал клавиши  Ctrl+Alt+Del, то это слово
устанавливается  в  1234h   и  управление  передается  программе
начального тестирования, которая  проверяет и инициализирует все
устройства ПЭВМ.  Эта программа проверяет  данное слово и,  если
оно  равно  1234h,  обходит  тест  памяти  ЭВМ  и  перезагружает
систему.

     В PC Convertible были добавлены три новых режима. Первый из
них,  режим  приостанова   системы,  устанавливается,  если  ЭВМ
запущена  из состояния  приостанова  по  потере питания.  В этом
случае   тест  памяти   обходится,  устройства   возвращаются  в
предыдущее  состояния и  управление передается  приостановленной
программе.

     Остальные режимы не представляют интереса для пользователя.

@u1474h   Статус последней операции с жестким диском@u0

     Длина: 1 байт

     Этот  байт  содержит  статус  последней  операции с жестким
диском.  Он совпадает  со значением  AH, которое  возвращает Int
13h, подфн 2/3, а именно:

00h = нет ошибки
01h = неверная команда
02h = не найден адресный маркер
03h = попытка записи на диск, защищенный от записи
04h = сектор не найден
05h = неудачный сброс дисковода
07h = сбой активности параметров диска
08h = ошибка контроллера ПДП
09h = попытка прямого доступа к памяти через границу 64К
0Ah = обнаружен флаг дефектного сектора
0Bh = обнаружена дефектная дорожка
10h = неисправимая по ECC ошибка данных
11h = исправимая по ECC ошибка данных
20h = сбой контроллера
40h = ошибка поиска
80h = таймаут (нет ответа диска)
AAh = дисковод не готов к работе
BBh = неопределенная ошибка
CCh = ошибка записи на устройстве
E0h = ошибка статуса (регистр статуса содержит нуль)
FFh = неудача операции опознавания

     Для получения этой информации используйте Int 13h, фн 01h.

     См. также: Int 13h, фн 01h

@u1475h   Количество жестких дисков@u0

     Длина: 1 байт

     Содержит количество жестких дисков ПЭВМ.

     Примечание: Используйте Int 13h,  фн 08h для получения этой
информации.

     См. также: Int 13h, фн 08h

@u1476h   Зарезервировано@u0

     Длина: 1 байт

     Этот  байт зарезервирован  на всех  ЭВМ, кроме  XT, где  он
используется для управления жестким диском.

@u1477h   Зарезервировано@u0

     Длина: 1 байт

     Этот  байт зарезервирован  на всех  ЭВМ, кроме  XT, где  он
содержит  смещение  базового  порта  контроллера  жесткого диска
относительно порта 320h.
@pb
@u1478h   Значения таймаутов для принтеров@u0

     Длина: 4 байта

    Эти  байты  содержат  значения  таймаутов  для  параллельных
принтеров. Обычно  они равны 14h (20).  На PC и XT  эти значения
представляют   количество   секунд,   которые   система  ожидает
готовность принтера перед тем, как выдать ошибку таймаута. На AT
эти значения  в цикле проверки  таймаута умножаются на  4, чтобы
скомпенсировать   скорость   процессора.   В   действительности,
количество  секунд  до  выдачи  таймаута  примерно  вдвое больше
хранящегося здесь значения.

                478h - таймаут параллельного принтера LPT1
                479h - таймаут параллельного принтера LPT2
                47Ah - таймаут параллельного принтера LPT3
                47Bh - таймаут параллельного принтера LPT4

     Примечание. В PS/2 байт 47Bh не используется.

@u147Ch   Значения таймаутов для стыков RS-232C@u0

     Длина: 4 байта

    Эти байты  содержат значения таймаутов  для последовательных
интерфейсов. Обычно они равны 14h (20).  На PC и XT эти значения
представляют   количество   секунд,   которые   система  ожидает
готовность принтера перед тем, как выдать ошибку таймаута. На AT
эти значения  в цикле проверки  таймаута умножаются на  4, чтобы
скомпенсировать   скорость   процессора.   В   действительности,
количество  секунд  до  выдачи  таймаута  примерно  вдвое больше
хранящегося здесь значения.

               47Ch - Таймаут стыка COM1
               47Dh - Таймаут стыка COM2
               47Eh - Таймаут стыка COM3
               47Fh - Таймаут стыка COM4

@u1480h   Указатель на начало буфера клавиатуры@u0

     Длина: 2 байта (1 слово)

    Этот  слово содержит  смещение до  начало буфера  клавиатуры
относительно  базового  адреса  400h.  Стандартное  его значение
равно  1Eh,  что  соответствует  адресу  буфера  41Eh. Вы можете
переместить буфер в памяти,  увеличить или уменьшить его размер,
изменяя это значение.

@u1482h   Указатель на конец буфера клавиатуры@u0

     Длина: 2 байта (1 слово)

    Этот  слово содержит  смещение до  начало буфера  клавиатуры
относительно  базового  адреса  400h.  Стандартное  его значение
равно 3Eh, что соответствует адресу конца буфера 43Eh. Вы можете
переместить буфер в памяти,  увеличить или уменьшить его размер,
изменяя это значение.

@u1484h   Количество строк на экране@u0

     Длина: 1 байт

    Этот байт используется адаптерами EGA,  VGA и PGA и содержит
количество строк минус 1 для текущего режима экрана.

@u1485h   Высота символов@u0

     Длина: 2 байта (1 слово)

    Этот слово используется адаптерами EGA, VGA и PGA и содержит
высоту  символов  экрана,  т.  е.  количество байтов, занимаемых
одним  символом (или,  что  то  же самое,  количество скан-линий
экрана на один символ).

@u1487h   Текущее состояние видеоадаптера@u0

     Длина: 2 байта

     Эти  два  байта  используются  адаптерами  EGA  и  VGA  для
хранения информации о текущем состоянии адаптера. Байт по адресу
487h имеет вид:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │     │X │  │  │  │  │ Биты:                           Маска:
└┬─┴──┼──┴──┴┬─┴┬─┴┬─┴┬─┘ ────                            ──────
 │    │      │  │  │  └──> 0: 1=разрешена эмуляция курсора a&01h
 │    │      │  │  └─────> 1: 1=монохромный дисплей        a&02h
 │    │      │  └────────> 2: 1=выводить в видеопамять     a&04h
 │    │      │                  только при обратном ходе луча
 │    │      └───────────> 3: 1=EGA/VGA не активен         a&08h
 │    └──────────────────> 5-6: размер ОЗУ на плате EGA:   a&60h
 │                              0=64K, 1=128K, 2=192K, 3=256K
 └───────────────────────> 7: 1=старший бит видеорежима    a&80h
                                (1=экран не очищался)

     Байт по адресу 488h содержит следующую информацию:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│           │           │ Биты:
└──┴──┼──┴──┴──┴──┼──┴──┘ ────
      │           └──────> 0-3: положение DIP-переключателей
      │                         (см. ниже)
      └──────────────────> 4-7: Характеристики (feature bits):
                                  бит 4 = FEAT0 (контакт 19);
                                  бит 5 = FEAT1 (контакт 17);
                                  биты 6-7 - зарезервированы.

     Положения   DIP-переключателей   задают   тип   дисплея   и
необязательного вторичного дисплея следующим образом:

────────────────────────────────────────────────────────────────
0Fh Первичный MDA
    Вторичный EGA с цветным монитором 40х25

0Eh Первичный MDA
    Вторичный EGA с цветным монитором 80х25

0Dh Первичный MDA
    Вторичный EGA с расширенным цветным монитором (эмуляция CGA)

0Ch Первичный MDA
    Вторичный EGA с расширенным цветным монитором (в режиме EGA)

0Bh Первичный CGA с цветным монитором 40х25
    Вторичный EGA с монохромным монитором

0Ah Первичный CGA с цветным монитором 80х25
    Вторичный EGA с монохромным монитором

09h Первичный EGA с цветным монитором 40x25
    Вторичный MDA

08h Первичный EGA с цветным монитором 80x25
    Вторичный MDA

07h Первичный EGA с расширенным цветным монитором (эмуляция CGA)
    Вторичный MDA

06h Первичный EGA с расширенным цветным монитором (в режиме EGA)
    Вторичный MDA

05h Первичный EGA с монохромным монитором
    Вторичный CGA с цветным монитором 40х25

04h Первичный EGA с монохромным монитором
    Вторичный CGA с цветным монитором 80х25

03h - 00h Недопустимые комбинации
────────────────────────────────────────────────────────────────

     Примечания: Почти всю эту информацию можно получить вызовом
Int 10h, фн 12h.

     См. также: Int 10h, фн 12h

@u1489h   Зарезервировано@u0

     Длина: 2 байта
@pb
@u148Bh   Управление дискетами@u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible.  В остальных  ПЭВМ он  содержит последние  значения
скорости передачи данных и скорости шагового двигателя.

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │     │X  X  X  X │ Биты:
└──┼──┴──┼──┴──┴──┴──┴──┘ ────
   │     └───────────────> 4-5: Скорость шагового двигателя
   └─────────────────────> 6-7: Скорость передачи данных:
                                0=500 К/сек, 1=300 К/сек,
                                2=250 К/сек, 3=резерв

@u148Ch   Состояние контроллера жесткого диска@u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible. В остальных ПЭВМ  он содержит состояние контроллера
жесткого диска.

@u148Dh   Состояние ошибки контроллера жесткого диска@u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible.  В  остальных  ПЭВМ  он  содержит  состояние ошибки
контроллера жесткого диска.

@u148Eh   Флаг прерывания жесткого диска@u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible.  В  остальных  ПЭВМ  он  содержит  флаг  прерывания
жесткого диска.

@u148Fh   Зарезервировано@u0

     Длина: 1 байт

@u1490h   Состояние первого НГМД @u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible. В  остальных ПЭВМ он  содержит состояние дискеты  в
первом НГМД.
@pb
 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│     │  │  │X │        │ Биты:
└──┼──┴┬─┴┬─┴──┴──┴┬─┴──┘ ────
   │   │  │        └─────> 0-2: Тип дисковода и носителя
   │   │  │                     (см. ниже)
   │   │  └──────────────> 4: 1=дискета установлена
   │   └─────────────────> 5: 1=требуется двойной шаг
   └─────────────────────> 6-7: Скорость передачи данных:
                                0=500 К/сек, 1=300 К/сек,
                                2=250 К/сек, 3=резерв

     Тип дисковода и дискеты в нем задается следующим образом:

────────────────────────────────────────
Код  Дисковод  Дискета   Состояние
────────────────────────────────────────
 0   360К      360К      Не установлена
 1   1.2М      360К      Не установлена
 2   1.2M      1.2M      Не установлена
 3   360К      360К      Установлена
 4   1.2М      360К      Установлена
 5   1.2M      1.2M      Установлена
 6      --- Зарезервировано ---
 7     --- Прочие комбинации ---
────────────────────────────────────────

@u1491h   Состояние второго НГМД @u0

     Длина: 1 байт

    Этот байт зарезервирован  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible. В  остальных ПЭВМ он содержит  состояние дискеты во
втором НГМД. См. описание байта 490h.

@u1492h   Флаги начала операции с НГМД@u0

     Длина: 2 байта

    Эти байты зарезервированы  в PC, PCjr, PC XT  от 11/8/82 и PC
Convertible.  В  остальных  ПЭВМ   они  содержат  флаги  запуска
операции на первом и втором НГМД соответственно.

@u1494h   Текущие цилиндры НГМД@u0

     Длина: 2 байтa

    Эти байты зарезервированы в PC, PCjr,  PC XT от 11/8/82 и PC
Convertible.  В  остальных  ПЭВМ  они  содержат  номера  текущих
цилиндров первого и второго НГМД соответственно.
@pb
@u1496h   Тип и состояние клавиатуры@u0

     Длина: 1 байт

    Этот байт содержит следующую информацию о клавиатуре:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │  │  │  │  │ Биты:
└┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┘ ────
 │  │  │  │  │  │  │  └──> 0: 1=последним был скрытый код E1h
 │  │  │  │  │  │  └─────> 1: 1=последним был скрытый код E0h
 │  │  │  │  │  └────────> 2: 1=нажата правая клавиша Ctrl
 │  │  │  │  └───────────> 3: 1=нажата правая клавиша Alt
 │  │  │  └──────────────> 4: 1=101-клавишная клавиатура
 │  │  └─────────────────> 5: 1=включать NumLock, получив
 │  │                           идентификатор и KBX
 │  └────────────────────> 6: 1=последним был первый код
 │                              идентификатора
 └───────────────────────> 7: 1=идет чтение идентификатора

     Примечания:

     1.  Используйте Int  16h, фн  12h для  получения части этой
информации.

     2.  Дополнительная  информация  о  клавиатуре  содержится в
адресах 417h и 418h.

     См. также: Int 16h, фн 12h

@u1497h   Состояние светодиодов клавиатуры@u0

     Длина: 1 байт

     Содержит состояние светодиодов клавиатуры:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │  │  │  │0 │  │  │  │ Биты:
└┬─┴┬─┴┬─┴┬─┴──┴┬─┴┬─┴┬─┘ ────
 │  │  │  │     │  │  └──> 0: 1=включен индикатор ScrollLock
 │  │  │  │     │  └─────> 1: 1=включен индикатор NumLock
 │  │  │  │     └────────> 2: 1=включен индикатор CaрsLock
 │  │  │  └──────────────> 4: 1=получено квитирование
 │  │  └─────────────────> 5: 1=прием повторной посылки
 │  └────────────────────> 6: 1=обновление индикатора режимов
 └───────────────────────> 7: 1=сбой обмена с клавиатурой

@u1498h   Указатель на пользовательский флаг события@u0

     Длина: 4 байта (1 двойное слово)

     Этот  длинный  указатель  содержит  адрес пользовательского
флага события, используемого в Int 15h, фн 83h.

     См. также: Int 15h, фн 83h

@u149Ch   Счетчик временной задержки@u0

     Длина: 4 байта (1 двойное слово)

     Это двойное целое слово содержит счетчик временной задержки
в микросекундах  до установки  пользовательского флага  события,
используемого  в  Int  15h,  фн  83h.  Именно здесь производится
отсчет заданного времени.

     См. также: Int 15h, фн 83h

@u14A0h   Флаги ожиданий@u0

     Длина: 1 байт

     Содержит информацию об утилитах часов реального времени:

 7  6  5  4  3  2  1  0
┌──┬──┬──┬──┬──┬──┬──┬──┐
│  │X  X  X  X │  │  │  │ Биты:
└┬─┴──┴──┴──┴──┴┬─┴┬─┴┬─┘ ────
 │              │  │  └──> 0: 1=идет ожидание истечения задан-
 │              │  │            ного интервала
 │              │  └─────> 1: 1=обработка отложенного пользова-
 │              │               тельского прерывания побудки
 │              └────────> 2: 1=включение питания по отложенной
 │                              побудке
 └───────────────────────> 7: 1=интервал ожидания истек
                                и зарегистрирован

     Примечания:

     1. Бит 0 используется Int 15h, фн 86h.

     2.  Биты  1-2  используются  только  в  PC  Convertible для
обслуживания Int 4Ah.

     3. Бит 7 используется Int 15h, фн 83h.

     См. также: Int 15h, фн 83h
                Int 15h, фн 86h
                Int 4Ah

@u14A1h   Зарезервировано@u0

     Длина: 7 байтов

    Этa область зарезервирована для сетевого адаптера на AT.

@u14A8h   Указатель на таблицы параметров EGA@u0

     Длина: 4 байта (1 двойное слово)

     Этот  длинный  указатель  содержит  адрес следующей таблицы
параметров для адаптеров EGA и VGA.

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌────────┬───────┐
+00h       4    │смещение│сегмент│ Адрес таблицы видеопараметров
                ├────────┼───────┤
+04h       4    │смещение│сегмент│ Адрес области сохранения
                ├────────┼───────┤динамических параметров
+08h       4    │смещение│сегмент│ Адрес вспомогательного знако-
                ├────────┼───────┤генератора текстовых режимов
+0Ch       4    │смещение│сегмент│ Адрес вспомогательного знако-
                ├────────┼───────┤генератора графических режимов
+10h       4    │смещение│сегмент│ Адрес второй таблицы видео-
                ├────────┼───────┤параметров (только для PS/2)
+14h       4    │смещение│сегмент│ Резерв (всегда 0:0)
                ├────────┼───────┤
+18h       4    │смещение│сегмент│ Резерв (всегда 0:0)
                └────────┴───────┘
 1Ch       Длина таблицы
────────────────────────────────────────────────────────────────

     Адрес таблицы видеопараметров.

     Первоначально   этот  указатель   содержит  адрес   таблицы
видеопараметров, хранящейся в ПЗУ адаптера EGA/VGA. В дальнейшем
программы пользователя могут переустановить его на свои таблицы,
но  этот  указатель  всегда   должен  указывать  на  достоверную
информацию!

     Таблица   видеопараметров  состоит   из  последовательности
таблиц  длиной   по  64  байта  для   каждого  из  видеорежимов.
Количество видеорежимов  в таблице зависит от  типа адаптера: 23
для  EGA  и  33  для  VGA.  (Видеорежимы  с номерами, более 13h,
зарезервированы для будущих  адаптеров). 64-байтовая таблица для
каждого режима имеет следующую НЕДОКУМЕНТИРОВАННУЮ структуру:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Количество столбцов на экране
+01h       1       Количество строк на экране - 1
+02h       1       Количество байтов на символ
+03h       2       Длина видеостраницы в байтах
+05h       5       Регистры блока синхронизации 0-4
+0Ah      25       Регистры контроллера ЭЛТ 0-18h
+23h      20       Регистры контроллера атрибутов 0-13h
+37h       9       Регистры графического контроллера 0-8
 40h      Длина таблицы
────────────────────────────────────────────────────────────────
@pb
     Адрес области сохранения динамических параметров.

     Этот  указатель  необязателен:  если  он  равен  0:0, то не
используется. В противном случае  он должен указывать на область
ОЗУ длиной  256 байтов. Эта область  используется для сохранения
значений,   которые   BIOS   адаптера   EGA   выводит   в  порты
ввода-вывода, недоступные  для чтения. В  настоящее время формат
этой области определен так:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h      16       Текущие значения регистров палитр 0-15
+10h       1       Текущее значение регистра рамки
+11h     239       Резерв
100h     Длина таблицы
────────────────────────────────────────────────────────────────

     Примечание: Этот  указатель не используется  в PS/2, модель
30.

     Адрес вспомогательного знакогенератора текстовых режимов.

     Этот необязательный  указатель первоначально равен  0:0. Вы
можете  заслать в  него  адрес  своей таблицы  символов, которая
будет  использоваться  в  текстовых  режимах,  что позволяет Вам
создавать собственные (например, русские) шрифты. Таблица должна
иметь следующий формат:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Количество байтов на символ в шрифте (обычно
                   8 или 14)
+01h       1       Номер загружаемого блока ОЗУ (обычно 0)
+02h       2       Количество загружаемых символов (обычно 256)
+04h       2       Смещение до первого символа (обычно 0)
+06h       4       Указатель на таблицу шрифта, которая должна
                   содержать матрицы всех символов (см. Int 1Fh)
+0Ah       1       Количество строк на экране (задайте FFh,
                   чтобы BIOS сам определял количество строк).
+0Bh       ?       Список номеров видеорежимов, в которых нужно
                   использовать новый шрифт, оканчивающийся
                   байтом FFh.
────────────────────────────────────────────────────────────────

     Примечание:  Задание  этого   указателя  может  привести  к
необычной форме экранного курсора. См. Int 10h, фн 01h.

     Адрес вспомогательного знакогенератора графических режимов.

     Этот необязательный  указатель первоначально равен  0:0. Вы
можете  заслать в  него  адрес  своей таблицы  символов, которая
будет  использоваться в  графических режимах,  что позволяет Вам
создавать собственные (например, русские) шрифты. Таблица должна
иметь следующий формат:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Количество строк на экране
+01h       2       Количество байтов на символ
+03h       4       Указатель на таблицу шрифта, которая должна
                   содержать матрицы всех символов (см. Int 1Fh)
                   чтобы BIOS сам определял количество строк).
+07h       ?       Список номеров видеорежимов, в которых нужно
                   использовать новый шрифт, оканчивающийся
                   байтом FFh.
────────────────────────────────────────────────────────────────

     Адрес второй таблицы видеопараметров

     Этот указатель  имеется только в PS/2,  кроме модели 30. Он
инициализируется  адаптером  дисплея   и  не  должен  изменяться
пользователем. В нем содержится адрес следующей таблицы:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌────────┐
+00h       2    │ длина  │ Длина второй таблицы видеопараметров
                ├────────┼───────┐
+02h       4    │смещение│сегмент│ Адрес таблицы DCC
                ├────────┼───────┤
+06h       4    │смещение│сегмент│ Адрес второго знакогенератора
                ├────────┼───────┤текстовых режимов
+0Ah       4    │смещение│сегмент│ Адрес пользовательской
                ├────────┼───────┤таблицы палитр
+0Eh       4    │смещение│сегмент│ Резерв (всегда 0:0)
                ├────────┼───────┤
+12h       4    │смещение│сегмент│ Резерв (всегда 0:0)
                ├────────┼───────┤
+16h       4    │смещение│сегмент│ Резерв (всегда 0:0)
                └────────┴───────┘
 1Ah       Длина таблицы
────────────────────────────────────────────────────────────────

     Адрес таблицы DCC.

     Это  указатель   на  таблицу  комбинаций   дисплеев  (DCC),
хранящуюся в ПЗУ и имеющую следующий формат.
@pb
────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Количество элементов таблицы
+01h       1       Номер версии таблицы DCC
+02h       1       Максимальный код типа дисплея
+03h       1       Резерв
+04h       ?       2-байтовые элементы таблицы:
                   00,00 - элемент 0 -  Нет дисплеев
                   00,01 - элемент 1 -  MDPA
                   00,02 - элемент 2 -  CGA
                   02,01 - элемент 3 -  MDPA + CGA
                   00,04 - элемент 4 -  EGA
                   04,01 - элемент 5 -  EGA + MDPA
                   00,05 - элемент 6 -  MEGA
                   02,05 - элемент 7 -  MEGA + CGA
                   00,06 - элемент 8 -  PGA
                   01,06 - элемент 9 -  PGA + MDPA
                   05,06 - элемент 10 - PGA + MEGA
                   00,08 - элемент 11 - CVGA
                   01,08 - элемент 12 - CVGA + MDPA
                   00,07 - элемент 13 - MVGA
                   02,07 - элемент 14 - MVGA + CGA
                   02,06 - элемент 15 - MVGA + PGA
────────────────────────────────────────────────────────────────

     Здесь:

     MDPA = Адаптер монохромного дисплея и принтера
     CGA =  Цветной графический адаптер
     EGA =  Расширенный графический адаптер
     MEGA = EGA с монохромным дисплеем
     PGA =  Профессиональный графический адаптер
     VGA =  Графический видеомассив
     MVGA = VGA с монохромным дисплеем
     CVGA = VGA с цветным дисплеем


     Адрес второго знакогенератора текстовых режимов

     Этот необязательный  указатель первоначально равен  0:0. Вы
можете  заслать в  него  адрес  своей таблицы  символов, которая
будет   использоваться   в    текстовых   режимах   в   качестве
дополнительной таблицы  шрифтов. Таблица должна  иметь следующий
формат:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Количество байтов на символ в шрифте
+01h       1       Номер загружаемого блока ОЗУ (не нуль)
+02h       1       Резерв
+03h       4       Указатель на таблицу шрифта, которая должна
                   содержать матрицы всех символов (см. Int 1Fh)
+07h       ?       Список номеров видеорежимов, в которых нужно
                   использовать новый шрифт, оканчивающийся
                   байтом FFh.
────────────────────────────────────────────────────────────────

     Примечание:  Бит 3  байта атрибутов  символов позволяет Вам
переключаться между первой и второй таблицами шрифтов. Вы можете
задать   пользовательскую   таблицу   палитр   для  того,  чтобы
определить  свой   набор  цветов,  независимый   от  этого  бита
атрибутов.


     Адрес пользовательской таблицы палитр.

     Этот необязательный  указатель первоначально равен  0:0. Вы
можете заслать  в него адрес своей  таблицы палитр, определяющей
новые  значения цветов  для атрибутов  символов. Таблица  должна
иметь  следующий формат:

────────────────────────────────────────────────────────────────
Смещение Длина     Содержимое
────────────────────────────────────────────────────────────────
+00h       1       Флаг подчеркивания (1=включен, -1=выключен,
                   0=игнорировать; по умолчанию 0)
+01h       3       Резерв
+04h       2       Счетчик внутренней палитры (0 - 17,
                   по умолчанию 17)
+06h       2       Индекс внутренней палитры (0 - 16,
                   по умолчанию 0)
+08h       4       Указатель на внутреннюю палитру
+0Ch       2       Счетчик внешней палитры (0 - 256,
                   по умолчанию 256)
+0Eh       2       Индекс внешней палитры (0 - 255,
                   по умолчанию 0)
+10h       4       Указатель на внешнюю палитру
+14h       ?       Список номеров видеорежимов, в которых нужно
                   использовать палитры пользователя, оканчива-
                   ющийся байтом FFh.
────────────────────────────────────────────────────────────────

@u14ACh   Зарезервировано@u0

     Длина: 44 байта

@u14F0h   Область межпрограммной коммуникации (ICA)@u0

     Длина: 16 байтов

    Эти  16  байтов,   называемые  область  межпрограммной  ком-
муникации  (ICA -  Inter-Aррlication Communication  Area), могут
использоваться любыми  программами. Обычно они  используются для
передачи данных  между программами. Если  Вы хотите использовать
их с  этой целью, то Вам  придется проверять достоверность своих
данных  с  помощью  контрольных  сумм  и  т. п., поскольку может
оказаться, что ICA используют не только Ваши программы.

@u1500h   Состояние печати экрана@u0

     Длина: 1 байт

     Содержит информацию о последней или текущей операции печати
экрана. Этот байт может принимать следующие значения:

00h           Печать экрана завершена
01h           Печать экрана происходит в данный момент
FFh           Последняя печать экрана не была завершена из-за
              ошибки

     См. также: Int 05h

@u1501h   Зарезервировано@u0

     Длина: 3 байта


@u1504h   Флаг фантомного диска@u0

     Длина: 1 байт

     Сообщает состояние  гибкого дисковода в ПЭВМ  с одним НГМД.
Проверка  этого  байта  позволяет  программисту обойти системное
сообщение

     Insert disk for drive B:

работая с дисководами  A и B на такой  ЭВМ. Значения этого байта
следующие:

00h           НГМД является диском A
01h           НГМД является диском B
FFh           НГМД является диском A

     Последнее  значение (FFh)  НЕДОКУМЕНТИРОВАНО. Оно означает,
что система еще не производила переключения на фантомный диск и,
поэтому,  обращение  к  НГМД  как   к  диску  A  будет  работать
корректно.

     Примечание: для определения количества НГМД используйте Int
11h.

     См. также: Int 11h
@pb
@ce@e14.2. Дополнительная область данных@e0

     Дополнительная  область данных  BIOS имеется  только в ПЭВМ
PS/2. В  процессе POST под нее  выделяется область определенного
размера в  старших адресах основной  памяти (ниже 640К).  Размер
памяти по адресу 00413h уменьшается  на размер этой области, а в
первый байт области заносится ее длина в килобайтах.

     Для доступа  к дополнительной области  используйте Int 15h,
фн C1h, которая возвращает адрес базового сегмента этой области.
Для проверки  того, выделяется ли  на Вашей ПЭВМ  дополнительная
область данных, вызовите Int 15h, фн C0h.

     К сожалению,  мы не располагаем  описанием содержимого этой
области данных.
@pb
@ce@e14.3. Область данных ПЗУ@e0

     Микросхемы  ПЗУ,  расположенные  на  системной  плате  и  в
адаптерах внешних  устройств, помимо программ  BIOS содержат ряд
таблиц  и  данных.  Однако,  почти   все  эти  данные  не  имеют
документированных адресов  и мы настоятельно  предостерегаем Вас
от   их   непосредственного   использования.  Документированными
являются следующие адреса ПЗУ.

@u1F000:FFF0h  Переход на программу начального тестирования (POST)@u0

     Длина: 5 байтов

     При включении питания управление всегда передается по этому
адресу (т.  к. при подаче  питания на микропроцессоры  семейства
8086 в регистр CS заносится FFFFh, в регистр IP - 0000h. Поэтому
здесь  находится   команда  передачи  на   программу  начального
тестирования ПЭВМ вида

     jmр  far  рtr  POST

     Для перезагрузки ПЭВМ достаточно выполнить команду передачи
управления  по   этому  адресу.  Если   Вы  хотите  обойти   при
перезагрузке  тестирование  памяти,  предварительно  зашлите  по
адресу 00472h слово 1234h.

@u1F000:FFF5h  Дата версии BIOS@u0

     Длина: 8 байтов

     Содержит  текстовую  строку,   соответствующую  дате  Вашей
версии BIOS, например '06/10/85'.

     Примечание: Последние ПЭВМ Comрaq хранят дату BIOS с адреса
F000h:FFF6h.

@u1F000:FFFCh  Не используются@u0

     Длина: 2 байта
@pb
@u1F000:FFFEh  Идентификатор ПЭВМ@u0

     Длина: 1 байт

    Этот байт определяет тип Вашей ПЭВМ:

─────────────────────────────────────────────────────────
Идентификатор       Модель ПЭВМ
─────────────────────────────────────────────────────────
FFh                 Первые PC
FEh                 Более поздние PC, XT или Portable PC
FDh                 PCjr
FCh                 AT, XT-286, PS/2 моделей 50 и 60
FBh                 Более поздние XT
FAh                 PS/2, модель 30
F9h                 PC Convertible
F8h                 PS/2, модель 80
─────────────────────────────────────────────────────────

    Используйте Int  15h, фн C0h  для более точного  определения
модели  и подмодели  ПЭВМ (это  может быть  необходимо, т.  к. у
некоторых моделей идентификаторы совпадают).

     См. также: Int 15h, фн C0h
                Идентификация ПЭВМ
@pb
@ce@e15. Дополнительные сведения@e0

@ce@e15.1. Начальное тестирование ПЭВМ (POST)@e0

     @e15.1.1. Порядок тестирования@e0

     Программа  начального  тестирования  (Power-On  Self Test -
POST) - это программа, прошитая  в ПЗУ BIOS, которая выполняется
при включении ПЭВМ. Она выполняет следующие действия:

     -  анализирует  установку  DIP-переключателей  (PC/XT)  или
содержимое памяти CMOS (AT  и PS/2) для определения конфигурации
подключенного к ПЭВМ оборудования и устанавливает соответственно
флаги оборудования в области данных BIOS;

     -  выполняет тестирование  ОЗУ, записывая  и считывая опре-
деленные данные во все адреса памяти;

     - исполняет тесты основных компонент ПЭВМ (контроллеров ПДП,
прерываний, клавиатуры, дисководов и т. д.);

     -  выполняет  сканирование  ПЗУ  для инициализации дополни-
тельных адаптеров (см. 5.1.2);

     - вызывает  программу начальной загрузки  операционной сис-
темы или Бейсик, прошитый в ПЗУ.

     См. также: Int 11h
                Int 19h

     @e15.1.2. Сканирование ПЗУ@e0

     BIOS   позволяет  подключить   к  системе   ПЗУ  адаптеров,
вставленных в свободные позиции адаптерных плат ПЭВМ. В процессе
POST  все   вектора  прерываний  устанавливаются   на  программы
обработки соответствующих прерываний,  прошитые в BIOS системной
платы.  Затем  BIOS  производит  поиск дополнительных адаптеров,
называемый сканированием ПЗУ.  Обнаружив адаптер, имеющий собст-
венное  ПЗУ, он  вызывает его  программу инициализации,  которая
может переустановить нужные ей  вектора прерываний и подготовить
соответствующее внешнее устройство к работе.

     Примечание: сканирование ПЗУ отсутствует в самых ранних PC,
имеющих не более 64К ОЗУ на системной плате.

     Сначала сканируются абсолютные адреса  с C0000h по C7FFFh с
шагом  2К (800h)  в поисках  адаптеров, требующих  инициализации
(например, ПЗУ  видеоадаптеров). Затем просматриваются  адреса с
C8000h  по  DFFFFh  с  шагом  2К  в  поисках  устройств, имеющих
собственное ПЗУ.
@pb
     ПЗУ адаптера должно иметь следующую структуру:

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌───────┐
+00h       2    │ AA55h │  "Роспись" модуля ПЗУ
                ├───┬───┘
+02h       1    │len│  Длина модуля в блоках по 512 байт (0-7Fh)
                ├───┴───┐
+03h       ?    │ . . . │   Исполняемый код
                └───────┘
────────────────────────────────────────────────────────────────

     Обнаружив  роспись адаптера,  BIOS подсчитывает контрольную
сумму блока:  сумма всех его  байтов по модулю  100h должна быть
равна нулю.  Если контрольная сумма правильна,  то BIOS передает
управление на адрес 0003h этого  сегмента командой FAR CALL. ПЗУ
адаптера   выполняет   необходимую   инициализацию   устройства,
устанавливает  свои вектора  прерываний и  возвращает управление
BIOS командой RETF.

     Дополнительные микросхемы ПЗУ U17  и U37 на системной плате
AT адресуются с абсолютного  адреса E0000h. Их сканирование идет
с шагом  64К. Если  модуль ПЗУ  есть, то  он должен начинаться с
росписи AA55h, неиспользуемого байта  длины, исполняемого кода и
иметь  контрольную сумму  0 по  модулю 100  для адресов E0000h -
EFFFFh.

     В  PC   Convertible  первое  сканирование   ПЗУ  использует
следующий протокол  для определения видеоадаптера:  при возврате
из инициализации очередного адаптера BH должен содержать одно из
следующих значений:

     0    - это не видеоадаптер
     2    - видеоадаптер цветного графического дисплея
     4    - видеоадаптер монохромного дисплея

     Если ПЗУ адаптера PC  Convertible в процессе самотестирова-
ния обнаруживает ошибку, то оно должно выполнить перед возвратом
управления BIOS следующие действия:

     - установить бит 4 по адресу 00412h (статус POST);
     - заслать номер устройства в AH;
     - заслать код ошибки в AL.

     Если  тестирование  устройства  прошло  успешно,  бит  4 по
адресу 00412h должен быть сброшен.

     В  PS/2  ПЗУ  видеоадаптеров   содержит  информацию  о  типе
адаптера. Если  в процессе POST  оказалось, что содержимое  CMOS
испорчено, ПЭВМ находит первый видеоадаптер в диапазоне C0000h -
C7FFFh  и в  соответствии с  ним устанавливает  параметры выбора
программируемых опций  (POS). Информация об  адаптере начинается
со смещения 0Ch и имеет вид:

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌───────┐
+0Ch       2    │ CC77h │  "Роспись" ПЗУ видеоадаптера
                ├───┬───┼───┬───┬───┐
+0Eh       5    │'V'│'I'│'D'│'E'│'O'│
                ├───┼───┼───┼───┼───┘
+13h       4    │ P1│ P2│ P3│ P4│  Байты POS 1 - 4
                └───┴───┴───┴───┘
────────────────────────────────────────────────────────────────
@pb
@ce@e15.2. Рекомендации по написанию прикладных программ@e0

     Используйте  приведенные ниже  рекомендации при  разработке
прикладных программ для ПЭВМ семейства  IBM PC. Помните, что, по
мере  возможности, Вы  должны использовать  BIOS для  управления
внешними устройствами. Это обеспечит Вашим программам максималь-
ную переносимость между  PC-подобными ЭВМ разных фирм-производи-
телей.

     @e15.2.1. Обработка аппаратных прерываний@e0

     При  написании  программ  обработки  аппаратных  прерываний
необходимо учитывать различие в  архитектуре между ЭВМ класса PC
и класса  PS/2, связанные  с особенностями  шины Micro  Channel.
Обработка прерываний  в ПЭВМ IBM PC  управляется фронтом сигнала
(edge-sensitive),  тогда  как  в  PS/2  она  управляется уровнем
сигнала (level-sensitive).

     В системе прерываний,  управляемой фронтом, программируемый
контроллер прерываний (ПКП)  сбрасывает внутренний признак "Идет
обработка прерывания", получив команду EOI (конец прерывания) от
программы   обработки   прерываний.   Сигнал   EOI   принимается
независимо  от  того,  поступил  в  контроллер  запрос не другое
прерывание или нет.

     В  системе  прерываний,   управляемой  уровнем,  внутренний
признак  "Идет обработка  прерывания" доступен  для чтения через
порты   ввода-вывода.   Он   считывается   программой  обработки
прерывания  и может  быть  сброшен  либо операцией  чтения, либо
явным сбросом.

     Примечание:  Разработчики   оборудования  могут  ограничить
количество  устройств, разделяющих  уровень прерывания,  в целях
повышения производительности.

     ПКП  в  системах,  управляемых  уровнем,  требует,  чтобы в
момент посылки  EOI запрос на  прерывание не был  активен, иначе
"новое" прерывание будет распознано и сгенерировано.

     Во  избежание  этой  проблемы  обработчик прерываний должен
сбросить  признак прерывания  (обычно чтением  или записью порта
ввода-вывода   устройства,   вызвавшего   прерывание),   а  затем
выполнить команду

     JMP SHORT $+2  ; короткая задержка

перед  посылкой  EOI  в  ПКП.  Это  гарантирует,  что  запрос на
прерывание  будет сброшен  прежде,  чем  ПКП получит  EOI. После
посылки EOI,  но до команды  STI нужно еще  раз выполнить ту  же
команду. Дело в том,  что команда STI, следующая непосредственно
за операцией ввода-вывода,  не обеспечивает достаточного времени
для  выполнения  некоторых  операций  системной  платы  и канала
ввода-вывода.  Команда  JMP  SHORT  $+2 обеспечивает достаточную
задержку.

     Примечания:

     1.  Команды  типа  MOV  AL,AH  не  обеспечивают достаточной
задержки. Правильная последовательность команд такова:

               OUT        IO_ADD,AL
               JMP        SHORT $+2
               MOV        AL,AH
               STI

     2. Перед  любым программированием ПКП  необходимо запретить
прерывания  командой CLI.  Это относится  к записи  IMR, посылке
EOI и  передаче в ПКП  как инициализирующих, так  и операционных
управляющих слов.

     В  системах, управляемых  уровнем, предусмотрена аппаратная
защита от перевода ПКП в режим управления фронтом.

     В PS/2 для каскадирования  первого ПКП со вторым определено
прерывание  IRQ9 вместо  IRQ2. IRQ2  (Int 0Ah)  используется для
программного разделения  прерываний. Для того,  чтобы обеспечить
совместимость  с  использованием  IRQ2  в  IBM  PC,  выполняется
следующая процедура:

     1. Устройство выставляет запрос на прерывание IRQ2.

     2. Этот запрос аппаратно  отображается на вход IRQ9 второго
ПКП.

     3. Когда прерывание происходит, центральный процессор пере-
дает его обработчику Int 71h (IRQ9).

     4.  Этот  обработчик  посылает  сигнал  EOI  второму  ПКП и
передает управление обработчику Int 0Ah (IRQ2).

     5.   Обработав  прерывание,   этот  обработчик   заставляет
устройство сбросить запрос на прерывание и посылает EOI ведущему
ПКП, завершая обработку IRQ2.

     См. также: Разделение прерываний

     @e15.2.2. Написание мобильных программ@e0

     Наилучшим способом создания мобильных программных продуктов
является написание  их на языках  высокого уровня (Си,  Паскаль,
Фортран, Кобол, Бейсик и т. д.) с использованием надежных систем
программирования  на этих  языках (можно  уверенно рекомендовать
компиляторы фирм IBM, Microsoft и Borland).

     Если  Ваша программа  использует специфические  особенности
оборудования,   то   она   может   оказаться   непригодной   для
использования  на определенных  ПЭВМ. Для  повышения мобильности
своих программ используйте приведенные ниже рекомендации.

     Если Вам нужно отслеживать временные задержки, то Вы должны
читать  показания таймера  путем запроса  к операционной системе
или  к функции  используемого языка  программирования (например,
TIME$  в  Бейсике).  Использование  циклов  для  задержки  может
приводить  к  непереносимости  программ  из-за  разной  тактовой
частоты процессоров.

     Все операции ввода-вывода следует выполнять путем обращения
к функциям  ОС.  Если  же  ОС  не  поддерживает  необходимых Вам
функций или Вас не устраивают ее параметры (например, скорость),
то ввод-вывод должен происходить через  запросы к BIOS. При этом
помните следующее:

     -   следует  избегать   обращения  в   своих  программах  к
абсолютным адресам ОЗУ или ПЗУ, если вместо этого можно восполь-
зоваться программным прерыванием;

     - BIOS  позволяет Вам избежать  зависимости от особенностей
конкретного   устройства:  новые   устройства  оснащаются  новым
BIOS'ом,   обеспечивающим   прежний   программный   интерфейс  с
устройством;

     - в  тех случаях, когда BIOS  использует таблицы параметров
(например, для  дисков или дисплеев),  программа может подменить
такую таблицу, создав новую ее  копию и изменив указатель на эту
таблицу; при этом рекомендуется  скопировать таблицу BIOS в свою
память и изменить в ней только те поля, которые Вам действитель-
но нужно изменить;

     -   если  Ваша   программа  подменяет   какие-либо  вектора
прерываний, используемые  BIOS или ОС,  она обязана восстановить
их прежние значения перед своим завершением.

     @e15.2.3. Программирование НГМД@e0

     Таблица параметров НГМД, адрес  которой хранится в Int 1Eh,
состоит из 11 параметров,  необходимых для операций с дискетами.
Мы  рекомендуем Вам  использовать таблицу,  содержащуюся в BIOS.
Если же  Вам необходимо изменить  какие-либо содержащиеся в  ней
параметры, создайте новую  таблицу и зашлите ее адрес  в Int 1Eh
(0:78h).

     Параметры НГМД подобраны так, чтобы обеспечить:

     - на  IBM PC поддержку  дисководов 5.25 дюйма  емкостью как
1.2М, так и 360К;

     - на  IBM PS/2 поддержку дисководов  3.5 дюйма емкостью как
1.44М, так и 720К.

     Опишем использование основных параметров НГМД.

     Длина  межзонного  промежутка   не  всегда  извлекается  из
таблицы параметров:  для операций чтения, записи  и проверки она
берется из BIOS контроллера  НГМД. Однако, длина межзонного про-
межутка при форматировании извлекается из таблицы параметров.

     Если  время разгрузки  головки в  таблице равно  нулю, то в
операциях   записи  и   форматирования  используются   следующие
значения, принятые по умолчанию:

Тип диска       Время разгрузки головки
───────────────────────────────────────
НГМД 5.25 дюйма:
     360К и менее        20 мсек
     1.2М                15 мсек

НГМД 3.5 дюйма:
     720К                20 мсек
     1.44М               15 мсек
───────────────────────────────────────

     Операции  чтения  и  проверки  используют  время  разгрузки
головки, заданное в таблице параметров.

     Если время ожидания запуска  двигателя в таблице параметров
менее 500 мсек (1 сек для PS/2), то в операциях форматирования и
проверки используется  величина 500 мсек  (1 сек для  PS/2), a в
операциях чтения и записи - время, заданное в таблице.

     Если действия  Вашей программы зависят от  типа дискеты, то
определить тип дискеты можно с помощью следующей процедуры:

     1.  Проверьте 1  сектор на  дорожке 0,  головке 0, сектор 1
(Int  13h, фн  04h). Это  позволит BIOS  определить, может ли он
распознать тип  дискеты. Если проверка  закончилась неудачей, то
выполните  рекалибровку  НГМД  (Int  13h,  фн  00h)  и повторите
проверку. Повторный сбой означает,  что дискета испорчена или не
отформатирована.

     2. Проверьте  1 сектор на  дорожке 0, головке  0, сектор 16
(Int  13h, фн  04h). Если  проверка окончилась  неудачей, то это
либо  дискета  5.25  дюйма  двойной  плотности,  либо  3.5 дюйма
емкостью 720К.  Для их различения проверьте  1 сектор на дорожке
78,  головке 1,  сектор 1.  Успешная проверка  означает, что это
3.5-дюймовая  дискета емкостью  720К. Неудача  означает, что это
5.25-дюймовая  дискета; ее  параметры можно  уточнить средствами
ДОС (анализом описателя носителя в FAT).

     3. Прочтите состояние контроллера НГМД, хранящееся с адреса
00442h. Пятый байт состояния  содержит номер головки, на которой
закончилась операция. Если он равен 1, то это дискета 5.25 дюйма
емкостью 1.2М;  если он равен  0, то дискета  3.5 дюйма емкостью
1.44М.

     См. также: Int 1Eh
                Данные BIOS

     @e15.2.4. Программирование дисплеев@e0

     Наибольшие  проблемы при  написании мобильных  программ для
ПЭВМ  возникают,  по-видимому,  при  программировании дисплейных
адаптеров. В этом разделе приводятся рекомендации по определению
типов видеоадаптеров, подключенных к Вашей ПЭВМ.

     Для  того, чтобы  определить, какой  дисплейный адаптер (или
адаптеры) имеется в ПЭВМ, выполните следующие шаги.

     1.  Вызовите Int  10h  с  AX=1A00h (чтение  кода комбинации
дисплеев). Если  на выходе AL  не равно 1Ah,  то эта функция  не
поддерживается BIOS  и необходимо выполнить шаг  2. Если AL=1Ah,
то в BX содержится информация о видеоадаптерах ПЭВМ и дальнейшие
шаги не нужны.

     2. Для  проверки наличия адаптера EGA  вызовите Int 10h, фн
12h с BL=10h  (чтение информации о EGA). Если  на выходе BL=10h,
то адаптера EGA нет и необходимо выполнить шаг 3. Если на выходе
BL отлично от 10h, то адаптер EGA присутствует и в CL содержится
установка его DIP-переключателей, позволяющая определить наличие
второго дисплейного адаптера (цветного или монохромного). В этом
случае шаг 3 не нужен.

     3. На этот шаг мы  попадаем, если в ПЭВМ установлен адаптер
CGA, монохромного  дисплея или оба. Выполните  запись и чтение в
их  буфера видеопамяти  (B8000h и  B0000h соответственно), чтобы
проверить наличие каждого из них.


     Для переключения между  цветным и монохромным видеорежимами
также   нужно  определить   конфигурацию  видеоадаптеров   ПЭВМ.
Возможны три таких конфигурации:

     1.  Один  видеоадаптер,  работающий  только  в  монохромном
режиме, либо только в цветном режиме. В этом случае переключение
видеорежимов невозможно.

     2.  Два дисплейных  адаптера -  цветной и  монохромный. Для
переключения  из  одного  режима  в  другой  (т.  е.  для  смены
активного   адаптера)  программа   должна  переустановить   биты
видеорежима  в  байте  оборудования  ПЭВМ  (биты  4-5  по адресу
00410h) и вызвать Int 10h, фн 00h (сменить текущий режим).

     3. Один видеоадаптер, который может работать как в цветном,
так и  в монохромном режиме.  Для того, чтобы  проверить наличие
такого  адаптера  в  ПЭВМ  вызовите  Int  10h,  фн  1Bh (вернуть
информацию о видеосистеме) и проанализируйте результаты.

     Если  на  выходе  AL  не  равно  1Bh,  то  эта  функция  не
поддерживается BIOS  и интересующая нас  конфигурация исключена.
Если же AL=1Bh, то проверьте  бит "Все режимы на всех дисплеях".
Если он  установлен, то адаптер поддерживает  оба режима работы.
Для  переключения из  одного режима  в другой  (т. е.  для смены
активного   адаптера)  программа   должна  переустановить   биты
видеорежима в байте оборудования ПЭВМ и вызвать Int 10h, фн 00h.

     См. также: Int 10h, фн 00h
                Int 10h, фн 12h
                Int 10h, фн 1Ah
                Int 10h, фн 1Bh
                Данные BIOS

     @e15.2.5. Работа с клавиатурой@e0

     Расширенные функции Int 16h (10h  - 12h) были добавлены для
поддержки 101/102-клавишных клавиатур.  Скан-коды этих клавиатур
можно разбить на три категории:

     -  если  клавиша  не  продублирована  на  клавиатуре, то ее
скан-код тот же, что и на стандартной (84-клавишной) клавиатуре;

     - если клавиша продублирована на клавиатуре (например, PgDn
и PageDown),  то одна  из клавиш  генерирует тот  же код,  что и
стандартная   клавиатура,  а   вторая  -   уникальный  скан-код,
позволяющий различать эти клавиши;

     -   клавишам,  отсутствующим   на  стандартной  клавиатуре,
присвоены новые скан-коды.

     Расширенные  функции позволяют  программам использовать все
преимущества  расширенной клавиатуры,  сохраняя совместимость со
старыми клавиатурами.

     Если BIOS  Вашей ПЭВМ не  поддерживает расширенные функции,
то для  получения ASCII- и скан-кодов  нажимаемых клавиш следует
использовать фн 00h и 01h.

     Если же BIOS поддерживает расширенные функции, то:

     -  фн 10h  и 11h   возвращают коды  клавиш такими,  как они
занесены в буфер клавиатуры, различая коды дублирующихся клавиш;

     - фн 00h и 01h извлекают коды клавиш из буфера клавиатуры и
преобразуют  их к  кодам стандартной  клавиатуры; при  этом коды
клавиш,  отсутствующих  на  стандартной  клавиатуре удаляются из
буфера;

     - фн 12h возвращает  информацию о нажатии клавиш регистров,
включая правые клавиши Ctrl и Alt;

     Для  того, чтобы  определить, поддерживает  ли данная  ПЭВМ
расширенные функции, рекомендуется следующая процедура:

     - с помощью Int 16h, фн  05h занести в буфер клавиатуры код
FFFFh; если на выходе AL=0, то код занесен в буфер;

     -  выполнить  до  16  попыток  чтения  буфера  клавиатуры с
помощью  фн 10h;  если  при  очередной попытке  будет возвращено
AX=FFFFh, то BIOS поддерживает расширенные функции.

     Полный перечень скан-кодов и  ASCII-кодов клавиш приведен в
п. 7.3.

     См. также: Int 16h
                ASCII-коды и скан-коды клавиш

     @e15.2.6. Идентификация ПЭВМ@e0

     Любая  версия BIOS  содержит идентификатор  модели ПЭВМ  по
адресу F000h:FFFEh. На некоторых ПЭВМ, кроме того, BIOS содержит
идентификатор подмодели и номер  ревизии BIOS. Все эти параметры
можно узнать, вызвав Int 15h, фн C0h.

──────────────────────────────────────────────────────
                              Ид-р    Ид-р      Номер
 Модель ПЭВМ      Дата BIOS  модели подмодели  ревизии
──────────────────────────────────────────────────────
 PC               04/24/81     FF       -         -
 PC               10/19/81     FF       -         -
 PC               10/27/82     FF       -         -
 PC XT            11/08/82     FE       -         -
 PC XT            01/10/86     FB       00        01
 PC XT            05/09/86     FB       00        02
 PC jr            06/01/83     FD       -         -
 AT               01/10/84     FC       -         -
 AT               06/10/85     FC       00        01
 AT               11/15/85     FC       01        00
 XT-286           04/21/86     FC       02        00
 PC Convertible   09/13/85     F9       00        00
 PS/2 модель 30   09/02/86     FA       00        00
 PS/2 модель 50      -         FC       04        00
 PS/2 модель 60      -         FC       05        00
 PS/2 модель 80      -         F8       00        00
 PS/2 модель 80      -         F8       01        00
──────────────────────────────────────────────────────

     См. также: Int 15h, фн C0h
@pb
@ce@e15.3. Многозадачная работа@e0

     BIOS  обеспечивает определенную  поддержку для  организации
многозадачной работы путем за  счет программных "ловушек", т. е.
возможности  программного  перехвата  управления  с  последующим
возвратом в BIOS.

     Всякий раз,  когда BIOS входит  в цикл ожидания  готовности
устройства, он обеспечивает  программам возможность вклиниться в
этот цикл и выполнить свои действия. Аналогичная ловушка имеется
в обслуживании   некоторых   прерываний.   Вы   можете  написать
программу,  которая  будет  использовать  эти  ловушки для своих
целей.

     Все  нижеследующее справедливо,  если процессор  работает в
режиме  реального  адреса.  Программа  несет  ответственность за
корректность  использования  циклов   ожидания  и  завершения  и
правильную  последовательность  доступа  к  драйверам устройств.
Помните, что программы BIOS не являются повторно-входимыми.

     Многозадачный   диспетчер  должен   соблюдать  следующие  4
требования:

     1. Запуск.
     Программа запуска  перехватывает Int 15h.  Диспетчер должен
отслеживать  коды  функций  90h  (начало  цикла  ожидания) и 91h
(конец ожидания), обрабатывать их нужным ему образом и завершать
обработку   командой   IRET.   Все   остальные   функции  должны
передаваться предыдущему обработчику Int 15h.

     2. Последовательный доступ.
     Многозадачная   система  должна   гарантировать,  что  коды
драйверов  устройств используются  последовательно. Многократный
вход в драйвер приведет к ошибкам ввиду его нереентерабельности.

     3. Ожидание.
     Всякий раз,  когда BIOS намеревается войти  в цикл ожидания
готовности  устройства,  он  генерирует  Int  15h,  фн  90h. Эта
функция  сигнализирует о  начале  цикла  ожидания. В  этой точке
диспетчер  должен сохранить  контекст текущей  задачи и передать
управление другой задаче.  Тем самым обеспечивается переключение
задач  в то  время. когда  оборудование занято.  Для этого  BIOS
выполняет следующие действия:

     mov      ax,90xxh        ; xx=код устройства
     int      15h
     jc       TimeOut         ; CF=1 - произошел таймаут

     4. Конец ожидания.
     Всякий раз, когда BIOS  устанавливает флаг прерывания, сви-
детельствующий о готовности устройства, генерируется Int 15h, фн
91h.  Это  сигнал  о  завершении  цикла  ожидания. В этот момент
диспетчер должен отметить отложенную задачу как готовую к работе
и вернуть управление  программе обработке прерывания.  Для этого
BIOS выполняет следующие команды:

     mov      ax,91xxh        ; xx=код устройства
     int      15h

     Коды устройств, для которых возможен цикл ожидания, разбиты
на три класса:

     - коды 00h - 7Fh отведены для устройств, которые могут быть
последовательно повторно-используемы; это означает, что доступ к
драйверам этих  устройств должен быть ограничен  одной задачей в
каждый  момент,  и  операционная  система  должна  гарантировать
постановку запросов к устройству в очередь;

     - коды  80h -BFh отведены  для повторно-входимых устройств,
для  которых  нет  ограничений   на  число  задач,  одновременно
обращающихся  к  устройству;  ES:BX  указывает на дополнительную
информацию, позволяющую различить запросы от разных задач;

     -  коды C0h  - FFh  отведены для  запросов на  ожидание без
прерывания от  устройства; диспетчер должен  выполнить действия,
ликвидирующие причину ожидания, и  выйти из цикла ожидания. Для
этих кодов нет события  "конец ожидания", они управляются только
временем таймаута, зависящим от устройства.

     Для правильной обработки  таймаутов многозадачный диспетчер
должен  отслеживать  текущее  время.  Каждое  устройство  должно
находиться в цикле ожидания определенное время; превышение этого
времени  означает  ошибку  устройства.  В  этом случае диспетчер
должен вернуться в цикл ожидания BIOS с установленным битом CF.
@pb
@ce@e15.4. Разделение прерываний@e0

     @e15.4.1. Общее описание@e0

     В этом разделе описан протокол разделения прерываний, т. е.
рекомендованный   способ,   позволяющий   нескольким   адаптерам
использовать один  и тот же  вектор прерывания ПЭВМ.  Изложенная
информация относится как к ПЭВМ класса IBM PC, так и PS/2.

     Описанный протокол имеет следующие ограничения:

     -  он предназначен  только  для  работы в  режиме реального
адреса, но не в  защищенном или виртуальном режимах центрального
процессора;

     -  он  не  применим  к  разделению  уровня прерывания между
обработчиками  прерывания, один  из которых  работает в реальном
режиме, а второй - в защищенном;

     -  он  может  быть  несовместим  с некоторыми операционными
системами;

     -  перед  передачей  управления  следующему  обработчику  в
списке   прерывания   должны   быть   запрещены;  это  позволяет
обработчику получить  управление в тех же  условиях, как если бы
он получил его непосредственно по прерыванию от устройства;

     -   перед  посылкой   неспецифицированного  сигнала  "конец
прерывания"  (EOI) прерывания  должны быть  запрещены вплоть  до
выполнения команды  IRET; эта команда  восстановит флаги условий
из стека, тем самым разрешая прерывания;

     -  все обработчики  прерываний должны  содержать программу,
которая может быть выполнена по включению питания для запрещения
прерываний от соответствующих адаптеров;

     - обработчики  прерываний обязаны хранить  данные в формате
микропроцессоров  фирмы  Intel;   например  слово  424Bh  должно
храниться в памяти как байты 4Bh, 42h.

     @e15.4.2. Сброс запросов на прерывание@e0

     Обработка  прерываний  в  ПЭВМ  IBM  PC управляется фронтом
сигнала  (edge-sensitive), тогда  как в  Micro Channel  PS/2 она
управляется   уровнем    сигнала   (level-sensitive).   Механизм
управления   уровнем   упрощает   аппаратную   часть  адаптеров,
отвечающую за генерацию и обработку прерываний.

     В IBM  PC запрос на прерывание  сбрасывается просто фронтом
сигнала; в Micro Channel он должен быть явно сброшен программным
обработчиком прерываний. Это не  так, если аппаратура устройства
сама сбрасывает запрос на  прерывание, как это делает, например,
системный таймер. Подробно  различие между обработкой прерываний
в IBM PC и PS/2 описано в п. 5.2.1.

     @e15.4.3. Программная обработка разделяемого прерывания@e0

     Все  программы обработки  разделяемых прерываний  для Micro
Channel должны сбрасывать запрос  на прерывание. Кроме того, они
должны   содержать   специальную   16-байтовую   структуру   для
связывания обработчиков одного вектора прерываний  в список.

     Обработчики прерываний для всех адаптеров, разделяющих один
уровень  запросов  на  прерывание,  должны  следовать описанному
здесь протоколу разделения прерываний. В многозадачной среде они
должны  обеспечивать включение  обработчика прерываний  задачи в
список  других обработчиков,  разделение им  прерывания на время
активности задачи  и исключение его из  цепочки при переключении
задач.

     Для  включения обработчика  в список  активированная задача
заменяет  содержимое  вектора   прерываний  указателем  на  свой
обработчик этого прерывания и сохранить старое содержимое вектора
в качестве указателя на следующий обработчик в цепочке.

     Когда происходит аппаратное  прерывание, каждый обработчик в
списке  определяет, его  ли адаптером  было вызвано  прерывание,
путем чтения регистра состояния прерываний адаптера.

     Если оказывается, что адаптер не генерировал прерывания, то
обработчик передает управление  следующему обработчику в списке.
В противном случае он обязан  обслужить прерывание, сбросить бит
запроса   на   прерывание,   послать   неспецифицированный   EOI
контроллеру прерываний и выполнить команду IRET.

     Обработчик удаляется  из списка задачей  следующим образом.
Задача  просматривает  список,  начиная  с  содержимого  вектора
прерываний, до тех пор, пока не найдет свой обработчик (при этом
она должна проверять "роспись"  обработчика, равную 424Bh, чтобы
убедиться в корректности ссылки  на следующий обработчик). Затем
она удаляет  свой обработчик из  списка, просто переустанавливая
указатель на него равным указателю на следующий элемент цепочки.

     Задача   должна  содержать   процедуру  восстановления  при
обнаружении того, что список обработчиков испорчен.

     При  перезагрузке  системы  для  каждого обработчика должна
быть выполнена программа, запрещающая прерывания от соответству-
ющего устройства.

     Операционные     системы,     поддерживающие    динамическое
перемещение  программ  в  памяти,   должны  брать  на  себя  все
управление  процессом   разделения  прерываний,  т.   к.  к  ним
описанный протокол неприменим.

     @e15.4.4. Цепочки программ обработки прерывания@e0

     Структура данных, используемая  для связывания обработчиков
прерываний в список, имеет следующий формат:

entry:  jmр         short Past      ; переход на начало кода
        fрtr        dd    0         ; адрес след. обработчика
        signature   dw    424Bh     ; "роспись" обработчика
        flags       db    0         ; байт флагов
        jmр         short Reset     ; переход на сброс
        res_bytes   db    duр 7(0)  ; резервные байты
Past:   .  .  .                     ; начало кодов обработчика

     Эта  структура  начинается  с  третьего  байта  обработчика
прерываний, сразу после команды ее обхода.

     Байт флагов должен принимать следующие значения:

     00h -  не первый элемент спискa;
     80h -  первый элемент спискa.

     Программа  сброса  (метка   Reset  выше)  должна  запрещать
прерывания  от  адаптера  и  возвращать  управление операционной
системе.

     @e15.4.5. Требования к ПЗУ адаптеров@e0

     Обработчики прерываний  от адаптеров, расположенные  в ПЗУ,
должны сохранять указатель FPTR  в портах адаптера. Если адаптер
разделяет уровень прерываний IRQ7 или  IRQ15, то он должен также
сохранять  флаг  80h,  указывающий,  что  он  -  первый  в  цепи
обработчиков. Кроме  того, он должен  содержать "роспись" 0000h,
начиная  с  седьмого  байта  от  точки  входа,  чтобы можно было
отличить его от обработчика, расположенного в ОЗУ.

     @e15.4.6. Примеры реализации@e0

     В  этом  разделе  приведен  пример  разделения  прерываний.
Напомним,  что   порт  21h  -  это   регистр  масок  контроллера
прерываний, а  порт 20h -  его регистр команд,  в который должен
посылаться сигнал EOI (обычный,  равный 20h, или специфицирован-
ный, равный 6Nh, где N - номер уровня прерываний).

     Включение в список:
     ───────────────────

_TEXT     SEGMENT PARA PUBLIC
          ASSUME cs:_TEXT,ds:_TEXT
          рush   es
          cli                      ; Запретить прерывания
; Сохранить указатель из вектора прерывания
          рush   es
          mov    ax,350Fh          ; Считать вектор Int 0Fh
          int    21h               ; в ES:BX
          mov    si,offset cs:fрtr ; указатель на поле FPTR
          mov    cs:[si],bx        ; занести в него
          mov    cs:[si+2],es      ; адрес обработчика
          cmр    es:byte рtr[bx],0CFh ; он равен IRET?
 IF IRET_TEST_ONLY_IS_NEEDED       ; см. примечание ниже
          jne    setvectr
 ELSE
          je     frstvctr
          cmр    es:word рtr[bx+6],424Bh ;проверка "росписи"
          je     setvectr
          mov    ax,es
          cmр    ax,0F000h         ; адрес в BIOS?
          jne    setvectr
          cmр    bx,word рtr es:[0FF01h] ; указатель на "пусто"?
          jne    setvectr          ; да, отметить первым
frstvctr:
 ENDIF
          mov    cs:flags,first    ;первый в списке
setvectr: рoр    es
          рush   ds
; Задать новый адрес в векторе прерываний
          mov    dx,offset entry   ; точка входа в обработчик
          mov    ax,seg _TEXT
          mov    ds,ax
          mov    ax,250Fh          ; установить вектор
          int    21h
          рoр    ds
; разрешить прерывания
          in     al,imr            ; читаем IMR
          jmр    $+2               ; задержка
          and    al,07fh           ; разрешить IRQ7
          out    imr,al
          mov    al,sрc_eoi        ; специфицированный EOI
          jmр    $+2
          out    ocr,al
          sti                      ; разрешить прерывания
          рoр    es

     Примечания:

     1. Операционная система должна проверять, что старый вектор
указывает на правильный обработчик  прерываний, либо на IRET для
уровней 7 и 15.

     2. Обработчики, расположенные в  ПЗУ, должны в процессе его
сканирования (см. 5.1.2) проверять старый вектор, как показано в
ветке  "ELSE",  чтобы  определить,  не  являются  ли  они первым
обработчиком   в  списке.   То  же   относится  и   к  остальным
обработчикам   прерываний,   отличным   от   IRQ7.   Вы   можете
ограничиться проверкой только на  IRET только в обработчике IRQ7
и только после того, как ОС уже загружена.

     Обработчик прерываний
     ─────────────────────

your_card equ  XXXXX     ; Регистр состояния Вашего адаптера
isb       equ  XX        ; Бит прерывания в нем
rearm     equ  2F7h      ; Порт глобального сброса для IRQ7
sрc_eoi   equ  67h       ; Специфицированный EOI для IRQ7
eoi       equ  20h       ; Обычный EOI
ocr       equ  20h       ; Регистр команд ПКП
imr       equ  21h       ; Регистр масок ПКП

entry     рroc    far
          jmр     short рast    ; Точка входа в обработчик
fрtr      dd      0             ; Структура для связи
signature dw      424Bh
flags     db      0
first     equ     80h
          jmр     short reset
res_bytes db      7 duр (0)
рast:     sti
          рush    ...           ; Сохранить регистры
          mov     dx,your_card
          in      al,dx         ; Читаем регистр состояния
          test    al,isb        ; Ваша плата вызвала прерывание?
          jnz     service       ; Да, обслужить его
          test    cs:flags,first ; Мы первые в списке?
          jnz     exit
          рoр     ...           ; Восстановить регистры
          cli                   ; Запрет прерываний
          jmр     dword рtr cs:fрtr ; К следующему обработчику
service:  ...                   ; Обслужили прерывание
exit:
          cli                   ; Запрет прерываний
          mov     al,eoi
          out     ocr,al        ; Обычный EOI
          mov     dx,rearm      ; Сброс плат для Вашего IRQ
          out     dx,al
          рoр     ...
          iret
reset:    ...                   : Запретить прерывания от платы
          retf                  ; Возврат в ОС
entry     endр

     Исключение из списка
     ────────────────────

          рush  ds
          рush  es
          cli                      ; Запрет прерываний
          mov   ax,350Fh           ; Читаем вектор в ES:BX
          int   21h
          mov   cx,es
; Наш обработчик первый в списке?
          mov   ax,cs

          cmр   bx,offset entry    ; Сравним смещения
          jne   unchain_a
          cmр   ax,cx              ; и сегменты
          jne   unchain_a
; Меняем вектор прерывания на FPTR
          рush  ds
          mov   dx,word рtr cs:fрtr
          mov   ds,word рtr cs:fрtr[2]
          mov   ax,250Fh           ; Установить новый вектор
          int   21h
          рoр   ds
          jmр   unchain_x
unchain_a:    ;bx = fрtr OFFSET, es = fрtr SEGMENT, cx = cs
          cmр   es:[bx+6],424Bh      ; Обработчик?
          jne   EXCEPTION            ; Нет, исключительная
                                     ; ситуация
          lds   si,es:[bx+2]         ; Ищем наш обработчик
          cmр   si,offset entry

          jne   unchain_b
          mov   cx,ds
          cmр   ax,cx

          jne   unchain_b
          mov   ax,word рtr cs:fрtr  ; Берем следующий...
          mov   es:[bx+2],ax

          mov   ax,word рtr cs:fрtr[2] ; Переустанавливаем
          mov   es:[bx+4],ax           ; указатели

          mov   al,cs:flags
          and   al,first
          or    es:[bx+6],al

          jmр   unchain_x
unchain_b:
          mov   bx,si
          рush  ds
          рoр   es
          jmр   unchain_a
unchain_x:
          sti                        ; Разрешим прерывания
          рoр   es
          рoр   ds
@pb
@ce@e16.Приложения@e0

@ce@e16.1. Работа с драйвером мыши@e0

     @e16.1.1. Общее описание@e0

     В этом разделе приведено описание программного интерфейса с
загружаемыми  драйверами устройства  "мышь". Все  такие драйверы
следуют единому стандарту, определенному фирмой Microsoft для ее
драйвера  MOUSE.COM  в  документе  "Mouse  User's Guide". Точнее
говоря,  эти  драйверы  обязаны  поддерживать определенный набор
функций,  но,  помимо  того,  они  могут  иметь и дополнительные
возможности. Мы описываем здесь  только те функции, которые под-
держиваются  всеми драйверами  мыши, известными  авторам (в  том
числе MOUSE, GMOUSE, QMOUSE, WMOUSE, AVMOUSE).

     Обмен с драйвером мыши осуществляется обращением к Int 33h;
параметры функций задаются  в регистрах AX, BX, CX  и DX. Прежде
чем  вызывать  функции  драйвера,  прикладная  программа  должна
проверить,  что драйвер  мыши установлен.  Для этого  она должна
выполнить следующие действия:

     - прочитать содержимое вектора Int 33h (адрес 0:0CCh); если
он  равен  0:0  или  указывает  на  команду  IRET, то драйвер не
установлен;

     - если  содержимое вектора отлично  от нуля, то  вызвать фн
00h; если эта фн вернет AX=-1, то драйвер установлен и мышь ини-
циализирована.

     Доступ   к  драйверу   мыши  посредством   Int  33h   может
использоваться как ассемблерными программами, так и программами,
написанными на языках высокого уровня, например, на Бейсике, Си,
Паскале, Фортране или Коболе.

     @e16.1.2. Текстовый и графический курсоры@e0

     Драйвер  мыши  поддерживает  три  типа  курсоров на экране:
текстовый аппаратный, текстовый программный и графический. Тип и
характеристики  курсора определяются  фн  09h  и 0Ah.  Вы можете
переключаться  с  одного  курсора  на  другой  в процессе работы
программы;  при этом  на экране  в каждый  момент времени  может
находиться только один курсор.

     @e16.1.2.1. Графический курсор@e0

     Графический   курсор   представляет   собой  прямоугольник,
движущийся по графическому экрану. В режимах высокого разрешения
он состоит из  16 х 16 пикселей, в 4-цветном  режиме 320 х 200 -
из 8 х  16 пикселей, в 16-цветном режиме  320 х 200 - из  4 х 16
пикселей.

     При движении курсора по экрану  формируется его фон и цвет.
Они задаются двумя массивами размером 16 х 16 бит: маской экрана
и маской курсора. Маска экрана определяет, какие пиксели курсора
относятся к  его фону (0),  а какие к  цвету (1). Маска  курсора
указывает, какие пиксели участвуют в формировании цвета курсора.
Каждое слово маски определяет  несколько пикселей строки, причем
младший бит соответствует самому правому пикселю.

     Вывод курсора на экран состоит в выполнении двух операций:

     - выполняется логическое "И"  (AND) над содержимым экранной
памяти и маской экрана;

     -  выполняется "Исключающее  ИЛИ" (XOR)  над результатом  и
маской курсора.

     Результат этих операций можно описать следующей таблицей.

┌──────────────┬───────────────┬───────────────────────────┐
│ Маска экрана │ Маска курсора │ Результирующий бит экрана │
├──────────────┼───────────────┼───────────────────────────┤
│      0       │      0        │       0                   │
│      0       │      1        │       1                   │
│      1       │      0        │       не изменяется       │
│      1       │      1        │       инвертируется       │
└──────────────┴───────────────┴───────────────────────────┘

     Следует  помнить,  что  "позиция  курсора"  понимается  как
позиция  на экране  определенной его  точки, называемой  горячей
точкой  курсора   (hot  sрot).  По   умолчанию,  горячей  точкой
считается верхний левый угол прямоугольника курсора.

     @e16.1.2.2. Текстовый курсор@e0

     Текстовый  курсор  используется  в  текстовых видеорежимах.
Поддерживаются  два  варианта  текстового  курсора: аппаратный и
программный.

     Аппаратный  курсор  выводится   видеоадаптером;  его  форма
задается посредством Int  10h, фн 01h и зависит  от типа видеоа-
даптера ПЭВМ.

     Программный курсор - это символ или атрибут, заменяющий или
модифицирующий символ в той позиции экрана, где он находится. Он
задается  двумя  16-разрядными  масками  (маска  экрана  и маска
курсора), имеющими следующий формат:

 1 1 1 1 1 1
 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
│ │r g b│ │R G B│               │ Биты:
└┬┴─┴┬┴─┴┬┴─┴┬┴─┴─┴─┴─┴─┼─┴─┴─┴─┘ ─────
 │   │   │   │          └───────> 0-7:  код символа
 │   │   │   └──────────────────> 8-10: цвет символа
 │   │   └──────────────────────> 11: 1=яркость символа
 │   └──────────────────────────> 12-14:цвет фона
 └──────────────────────────────> 15: 1=мерцание символа

     Маска   экрана  задает,   какие  атрибуты   символа  должны
сохраняться.  Маска  курсора  определяет,  какие  характеристики
символа изменяются при выводе курсора.

     Вывод курсора на экран состоит в выполнении двух операций:

     - выполняется логическое "И"  (AND) над содержимым экранной
памяти и маской экрана;

     -  выполняется "Исключающее  ИЛИ" (XOR)  над результатом  и
маской курсора.

     Следует  помнить,  что  "позиция  курсора"  понимается  как
позиция на экране соответствующего знакоместа.

     @e16.1.3. Замечания для программистов@e0

     Если  Ваша программа  должна  работать  с мышью,  Вы должны
учитывать следующие требования.

     1.  Если программа  перехватывает  Int  10h, то  она должна
гарантировать, что фн 00h  (сменить видеорежим) будет отработана
драйвером мыши.

     2. Драйвер мыши гарантирует  правильность работы с экраном,
если Ваша  программа осуществляет вывод  на экран через  Int 10h
или через ДОС. Если же вывод производится прямой записью в виде-
опамять,  то программа  должна  вызвать  фн 02h  (скрыть курсор)
перед выводом и фн 01h (показать курсор) после вывода.

     3. Вы можете работать с мышью двумя способами: явно вызывая
Int 33h или задав свою  программу обработки событий. В последнем
случае  драйвер  будет  вызывать  Вашу  подпрограмму всякий раз,
когда произойдет заданное событие (см. фн 0Ch).

     @e16.1.4. Обращение к драйверу мыши из ассемблера@e0

     Для  обращения  к  драйверу  мыши  из  программы  на  языке
ассемблера необходимо:

     -  загрузить  в  регистры  AX,  BX,  CX  и  DX  необходимые
параметры;

     - вызвать Int 33h;

     - проанализировать результаты, возвращенные в регистрах.

     Следующий  пример  устанавливает  курсор  в  позицию экрана
(150, 100):

     Mov  AX,4     ; номер функции
     Mov  CX,150   ; горизонтальная координата
     Mov  DX,100   ; вертикальная координата
     Int  51       ; обращение к драйверу мыши
@pb
     @e16.1.5. Обращение к драйверу мыши из Бейсика@e0

     Здесь описано  обращение к драйверу  мыши из интерпретатора
GWBASIC.

     Поместите в начало программы следующий текст:

    10  DEF SEG=0
    20  MSEG=256*PEEK(51*4+3)+PEEK(51*4+2)
    30  MOUSE=256*PEEK(51*4+1)+PEEK(51*4)+2
    40  DEF SEG=MSEG

     После этого вызов драйвера мыши производится оператором

    CALL MOUSE(M1%,M2%,M3%,M4%)

где M1%, ..., M4%  - целые переменные, соответствующие регистрам
AX, ..., DX.

     Следующий  пример  устанавливает  курсор  в  позицию экрана
(150, 100):

    100  M1%=4 'номер функции
    110  M3%=150 'горизонтальная координата
    120  M4%=100 'вертикальная координата
    130  CALL MOUSE(M1%,M2%,M3%,M4%)

     @e16.1.6. Функции драйвера мыши@e0

     Драйвер мыши поддерживает следующие функции:

Функция  Назначение
──────────────────────────────────────────────────────────────
00h      Инициализация мыши
01h      Показать курсор
02h      Скрыть курсор
03h      Читать положение мыши и состояние кнопок
04h      Задать положение мыши
05h      Получить информацию о нажатии кнопки
06h      Получить информацию об отпускании кнопки
07h      Задать горизонтальный диапазон
08h      Задать вертикальный диапазон
09h      Определить графический курсор
0Ah      Определить текстовый курсор
0Bh      Получить перемещение мыши
0Ch      Задать программу обработки событий
0Dh      Включить эмуляцию светового пера
0Eh      Выключить эмуляцию светового пера
0Fh      Задать чувствительность мыши
10h      Запретить вывод курсора в области экрана
13h      Задать порог двойной скорости
14h      Заменить программу обработки событий (НЕДОКУМЕНТИРОВАНО)
15h      Получить размер буфера сохранения (НЕДОКУМЕНТИРОВАНО)
16h      Сохранить состояние мыши          (НЕДОКУМЕНТИРОВАНО)
17h      Восстановить состояние мыши       (НЕДОКУМЕНТИРОВАНО)
1Dh      Задать страницу дисплейной памяти (НЕДОКУМЕНТИРОВАНО)
1Eh      Получить страницу дисплейной памяти (НЕДОКУМЕНТИРОВАНО)
──────────────────────────────────────────────────────────────

     @e16.1.6.1. Фн 00h - Инициализация мыши@e0

     Вход: AX = 00h

     Выход: AX = состояние мыши:
                 -1 - установлена;
                  0 - не установлена.
            BX = количество кнопок мыши (2 или 3)

     Описание:  Проверяет наличие  драйвера мыши  и самой  мыши.
Если  мышь не  готова к  работе, возвращает  AX=0. Если  драйвер
установлен и мышь готова к работе, то возвращает AX=-1, BX=число
кнопок мыши  и инициализирует драйвер  мыши. После инициализации
драйвер находится в следующем состоянии:

     флаг курсора = -1 (курсор скрыт);
     графический курсор = горизонтальный овал;
     горячая точка графического курсора = (-1, -1)
     текстовый курсор = негативное изображение;
     пользовательская маска событий = 0;
     эмуляция светового пера разрешена;
     вертикальных движений мыши/пиксель = 16/8;
     горизонтальных движений мыши/пиксель = 8/8;
     диапазон курсора по вертикали = 0 - высота экрана-1;
     диапазон курсора по горизонтали = 0 - ширина экрана-1;
     порог двойной скорости = 64 движения в секунду.

     Примечание: Число кнопок мыши  в BX следует  использовать с
осторожностью,  т. к. некоторые драйверы возвращают эту информа-
цию в ином виде, а именно:

     -1 - две кнопки
      0 - не две кнопки
      3 - мышь типа Mouse Systems (трехкнопочная мышь)

     @e16.1.6.2. Фн 01h - Показать курсор@e0

     Вход: AX = 01h

     Выход: нет

     Описание: Увеличивает  внутренний флаг курсора  на единицу.
Если флаг равен нулю, то курсор выводится на экран и движется по
нему в соответствии с движением мыши.

     @e16.1.6.3. Фн 02h - Скрыть курсор@e0

     Вход: AX = 02h

     Выход: нет

     Описание:  Уменьшает  внутренний  флаг  курсора на единицу.
Если  флаг  не  равен  нулю,  то  курсор  удаляется с экрана, но
продолжает отслеживать движение мыши.

     @e16.1.6.4. Фн 03h - Читать положение мыши
                 и состояние кнопок@e0

     Вход: AX = 03h

     Выход: BX = состояние кнопок
            CX = горизонтальная позиция курсора
            DX = вертикальная позиция курсора

     Описание: Сообщает позицию курсора и состояние кнопок мыши.
BX имеет следующий формат:

 7 6 5 4 3 2  1  0
┌─┬─┬─┬─┬─┬──┬──┬──┐
│X│X│X│X│X│  │  │  │ Биты:                           Маска:
└─┴─┴─┴─┴─┴┬─┴┬─┴┬─┘ ────                            ──────
           │  │  └──> 0: 1=нажата левая кнопка         a&01
           │  └─────> 1: 1=нажата правая кнопка        a&02
           └────────> 2: 1=нажата средняя кнопка       a&04
                         (только для 3-клавишной мыши)

     @e16.1.6.5. Фн 04h - Задать положение мыши@e0

     Вход: AX = 04h
           CX = горизонтальная позиция курсора
           DX = вертикальная позиция курсора

     Выход: нет

     Описание:   Задает  новую   позицию  курсора   мыши.  Новые
координаты  должны находиться  в пределах  экрана (см.  описание
видеорежимов  в п.  7.2) и  округляются до  ближайшей допустимой
позиции курсора.

     @e16.1.6.6. Фн 05h - Получить информацию о нажатии кнопки@e0

     Вход: AX = 05h
           BX = номер кнопки:
                0 - левая;
                1 - правая;
                2 - средняя

     Выход: AX = состояние кнопок
            BX = количество нажатий кнопки
            CX = горизонтальная позиция курсора
            DX = вертикальная позиция курсора

     Описание:   Сообщает  состояние   кнопок  мыши,  количество
нажатий заданной кнопки и  позицию курсора при последнем нажатии
кнопки. AX имеет следующий формат:

 7 6 5 4 3 2  1  0
┌─┬─┬─┬─┬─┬──┬──┬──┐
│X│X│X│X│X│  │  │  │ Биты:                           Маска:
└─┴─┴─┴─┴─┴┬─┴┬─┴┬─┘ ────                            ──────
           │  │  └──> 0: 1=нажата левая кнопка         a&01
           │  └─────> 1: 1=нажата правая кнопка        a&02
           └────────> 2: 1=нажата средняя кнопка       a&04
                         (только для 3-клавишной мыши)

     Количество нажатий  кнопки лежит в диапазоне  от 0 до 32767;
переполнение  не  фиксируется.  После  вызова  этой  фн  счетчик
нажатий кнопки сбрасывается.

     @e16.1.6.7. Фн 06h - Получить информацию об отпускании
                 кнопки@e0

     Вход: AX = 06h
           BX = номер кнопки:
                0 - левая;
                1 - правая;
                2 - средняя

     Выход: AX = состояние кнопок
            BX = количество отпусканий кнопки
            CX = горизонтальная позиция курсора
            DX = вертикальная позиция курсора

     Описание:   Сообщает  состояние   кнопок  мыши,  количество
отпусканий  заданной  кнопки  и  позицию  курсора  при последнем
отпускании кнопки. AX имеет следующий формат:

 7 6 5 4 3 2  1  0
┌─┬─┬─┬─┬─┬──┬──┬──┐
│X│X│X│X│X│  │  │  │ Биты:                           Маска:
└─┴─┴─┴─┴─┴┬─┴┬─┴┬─┘ ────                            ──────
           │  │  └──> 0: 1=нажата левая кнопка         a&01
           │  └─────> 1: 1=нажата правая кнопка        a&02
           └────────> 2: 1=нажата средняя кнопка       a&04
                         (только для 3-клавишной мыши)

     Количество  отпусканий  кнопки  лежит  в  диапазоне  от 0 до
32767; переполнение не фиксируется. После вызова этой фн счетчик
отпусканий кнопки сбрасывается.

     @e16.1.6.8. Фн 07h - Задать горизонтальный диапазон@e0

     Вход: AX = 07h
           CX = минимальная горизонтальная позиция курсора
           DX = максимальная горизонтальная позиция курсора

     Выход: нет

     Описание: Задает  диапазон допустимых координат  курсора по
горизонтали. Эти координаты должны  находиться в пределах экрана
(см. описание видеорежимов в п.  7.2) и округляются до ближайшей
допустимой  позиции  курсора.  Если  курсор  будет  выдвинут  за
границы заданного диапазона, то драйвер установит его на границу
допустимой  области.  Если  минимальное  значение  больше макси-
мального, то они меняются местами.

     @e16.1.6.9. Фн 08h - Задать вертикальный диапазон@e0

     Вход: AX = 08h
           CX = минимальная вертикальная позиция курсора
           DX = максимальная вертикальная позиция курсора

     Выход: нет

     Описание: Задает  диапазон допустимых координат  курсора по
вертикали.  Эти координаты  должны находиться  в пределах экрана
(см. описание видеорежимов в п.  7.2) и округляются до ближайшей
допустимой  позиции  курсора.  Если  курсор  будет  выдвинут  за
границы заданного диапазона, то драйвер установит его на границу
допустимой  области.  Если  минимальное  значение  больше макси-
мального, то они меняются местами.

     @e16.1.6.10. Фн 09h - Определить графический курсор@e0

     Вход: AX = 09h
           BX = горизонтальная позиция горячей точки (-16...+16)
           CX = вертикальная позиция горячей точки (-16...+16)
           ES:DX = указатель на маску экрана и маску курсора

     Выход: нет

     Описание:  Задает новую  форму графического  курсора. ES:DX
должны  содержать адрес  массива из  32 слов,  содержащего маску
экрана  и (следом  за ней)  маску курсора.  Подробности об  этих
масках см.  в п. 6.1.2.1.  BX и CX  определяют положение горячей
точки относительно блока курсора (внутри или вне его).

     @e16.1.6.11. Фн 0Ah - Определить текстовый курсор@e0

     Вход: AX = 0Ah
           BX = тип курсора:
                0 - программный, 1 - аппаратный
           CX = маска экрана или начальная линия курсора
           DX = маска курсора или конечная линия курсора

     Выход: нет

     Описание: Задает тип и форму текстового курсора. Если BX=1,
то   задается  аппаратный   курсор  и   его  форма  определяется
содержимым CX и DX (подробно о задании формы аппаратного курсора
см. п. 2.1.2).  Если BX=0, то задается программный  курсор и его
маски экрана и курсора задаются в CX и DX соответственно (см. п.
6.1.2.2).

     @e16.1.6.12. Фн 0Bh - Получить перемещение мыши@e0

     Вход: AX = 0Bh

     Выход: CX = перемещение по горизонтали
            DX = перемещение по вертикали

     Описание: Возвращает  перемещение мыши с  последнего вызова
этой фн.  CX положительно при перемещении  вправо и отрицательно
при перемещении  влево. DX положительно  при перемещении вниз  и
отрицательно при перемещении вверх. Оба числа находятся в диапа-
зоне  от -32768  до  32767;  переполнение не  фиксируется. После
вызова фн счетчики перемещения сбрасываются в нуль.

     Примечание. Одно  движение мыши составляет  1/200 дюйма, т.
е. примерно 0,126 мм.

     @e16.1.6.13. Фн 0Ch - Задать программу обработки событий@e0

     Вход: AX = 0Ch
           CX = пользовательская маска событий
           ES:DX = адрес программы обработки событий

     Выход: нет

     Описание: С помощью этой фн Вы можете подключить к драйверу
мыши свою  программу обработки некоторых  событий. Маска событий
определяет, в каких ситуациях Ваша программа будет вызываться, и
имеет вид  (единичный бит означает,  что соответствующее событие
должно вызывать пользовательскую программу):

 1 1 1 1 1 1
 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
│X X X X X X X X X│ │ │ │ │ │ │ │ Биты:
└─┴─┴─┴─┴─┴─┴─┴─┴─┴┬┴┬┴┬┴┬┴┬┴┬┴┬┘ ─────
                   │ │ │ │ │ │ └─> 0: изменение позиции курсора
                   │ │ │ │ │ └───> 1: нажатие левой кнопки
                   │ │ │ │ └─────> 2: отпускание левой кнопки
                   │ │ │ └───────> 3: нажатие правой кнопки
                   │ │ └─────────> 4: отпускание правой кнопки
                   │ └───────────> 5: нажатие средней кнопки
                   └─────────────> 6: отпускание средней кнопки


     Подпрограмма обработки событий должна соблюдать два следую-
щих соглашения о связях (НЕДОКУМЕНТИРОВАНО):

     - на входе подпрограммы определены следующие регистры:

     AX = причина вызова подпрограммы в формате маски событий;
     BX = состояние кнопок (см. п. 6.1.6.4);
     CX = горизонтальная позиция курсора;
     DX = вертикальная позиция курсора;
     SI = горизонтальное перемещение мыши (см. п. 6.1.6.12);
     DI = вертикальное перемещение мыши;

     - подпрограмма  вызывается командой CALL FAR  PTR и поэтому
должна оканчиваться командой длинного возврата RETF.

     Примечание. Не  забудьте перед завершением  своей программы
вызвать  эту   фн  с  CX=0,   чтобы  запретить  пользовательскую
обработку событий.

     @e16.1.6.14. Фн 0Dh - Разрешить эмуляцию светового пера@e0

     Вход: AX = 0Dh

     Выход: нет

     Описание:   Эта  фн   разрешает  эмуляцию   светового  пера
драйвером мыши. В  этом случае запросы к световому  перу (см. п.
2.1.5)  получают  в  качестве  ответа  позицию  курсора  мыши  и
состояние ее  кнопок: если все  кнопки нажаты, триггер  светового
пера считается взведенным.

     @e16.1.6.15. Фн 0Eh - Запретить эмуляцию светового пера@e0

     Вход: AX = 0Eh

     Выход: нет

     Описание:   Эта  фн   запрещает  эмуляцию   светового  пера
драйвером мыши. В  этом случае запросы к световому  перу (см. п.
2.1.5) возвращают информацию только о световом пере.

     @e16.1.6.16. Фн 0Fh - Задать чувствительность мыши@e0

     Вход: AX = 0Fh
           CX = горизонтальная чувствительность
           DX = вертикальная чувствительность

     Выход: нет

     Описание:  Задает чувствительность  мыши, т.  е. количество
движений мыши на 8 пикселей  экрана, по вертикали и горизонтали.
Эти значения должны лежать в диапазоне от 1 до 32767. По умолча-
нию принято 8 движений мыши по горизонтали и 16 движений по вер-
тикали на 8 пикселей экрана.

     Примечание. Одно  движение мыши составляет  1/200 дюйма, т.
е. примерно 0,126 мм.

     @e16.1.6.17. Фн 10h - Запретить вывод курсора
                  в области экрана@e0

     Вход: AX = 10h
           CX = левая граница
           DX = верхняя граница
           SI = правая граница
           DI = нижняя граница

     Выход: нет

     Описание:  Эта  фн  позволяет  Вам определить прямоугольную
область  экрана,  в  пределах  которой  курсор  мыши  исчезает с
экрана. Для отмены этого действия нужно вызвать фн 01h.

     @e16.1.6.18. Фн 13h - Задать порог двойной скорости@e0

     Вход: AX = 13h
           DX = порог скорости в движениях мыши в секунду

     Выход: нет

     Описание: Задает  предел, после которого  скорость движения
курсора по экрану удваивается. Для отмены двойной скорости нужно
вызвать эту фн с DX=7FFFh. DX=0 возвращает к значению по умолча-
нию, равному 64 движения мыши в секунду.

     @e16.1.6.19. Фн 14h - Заменить программу обработки событий@e0

     Вход: AX = 0Ch
           CX = пользовательская маска событий
           ES:DX = адрес программы обработки событий

     Выход: CX = предыдущая маска событий
            ES:DX = адрес предыдущей программы обработки событий

     Описание: Эта НЕДОКУМЕНТИРОВАННАЯ функция  полностью анало-
чна фн 0Ch, но в отличие  от нее возвращает параметры предыдущей
программы обработки событий.

     @e16.1.6.20. Фн 15h - Получить размер буфера сохранения@e0

     Вход: AX = 15h

     Выход: BX = размер буфера

     Описание:  Эта   НЕДОКУМЕНТИРОВАННАЯ  функция  используется
совместно с фн 16h и  17h. Она возвращает размер буфера, необхо-
димого для сохранения текущего состояния мыши.

     @e16.1.6.21. Фн 16h - Сохранить состояние мыши@e0

     Вход: AX = 16h
           ES:DX = адрес буфера сохранения

     Выход: ES:DX заполнен информацией драйвера мыши

     Описание: Эта НЕДОКУМЕНТИРОВАННАЯ функция сохраняет текущее
состояние мыши в буфере пользовательской программы.

     @e16.1.6.22. Фн 17h - Восстановить состояние мыши@e0

     Вход: AX = 17h
           ES:DX = адрес буфера сохранения

     Выход: нет

     Описание:  Эта НЕДОКУМЕНТИРОВАННАЯ  функция восстанавливает
ранее  сохраненное  состояние  мыши  из  буфера пользовательской
программы.

     @e16.1.6.23. Фн 1Dh - Задать страницу дисплейной памяти@e0

     Вход: AX = 1Dh
           BX = номер страницы

     Выход: нет

     Описание:  Эта  НЕДОКУМЕНТИРОВАННАЯ  функция  задает  номер
дисплейной страницы, в которую драйвер будет выводить курсор.

     @e16.1.6.24. Фн 1Eh - Получить страницу дисплейной памяти@e0

     Вход: AX = 1Eh

     Выход: BX = номер страницы

     Описание:  Эта НЕДОКУМЕНТИРОВАННАЯ функция возвращает номер
дисплейной страницы, в которую драйвер выводит курсор.

     @e16.1.7. Использование драйвера мыши с видеоадаптерами
               EGA и VGA@e0

     Драйверы мыши поддерживают девять дополнительных функций по
управлению видеоадаптерами,  совместимыми с EGA или  VGA. Все они
доступны через  Int 10h, управляющий  экраном (см. п.  2.1). Эти
функции таковы:

Функция  Назначение
──────────────────────────────────────────────────────────────
F0h      Читать один регистр EGA
F1h      Задать один регистр EGA
F2h      Читать порт EGA
F3h      Задать порт EGA
F4h      Читать группу регистров EGA
F5h      Задать группу регистров EGA
F6h      Сброс адаптера к начальным значениям регистров
F7h      Задать начальные значения регистров
FAh      Получить версию драйвера мыши
──────────────────────────────────────────────────────────────

     Все   функции,  работающие   с  регистрами   адаптера  EGA,
используют следующую нумерацию этих регистров:

─────────────────────────────────────────────────────────────
Имя блока/регистра     Номер Кол-во    Индексы   Адрес порта
                       порта регистров регистров ввода-вывода
─────────────────────────────────────────────────────────────
Контроллер ЭЛТ          00h    25      0 - 24       3x4h
Блок синхронизации      08h     5      0 - 4        3C4h
Графический контроллер  10h     9      0 - 8        3CEh
Контроллер атрибутов    18h    20      0 - 19       3C0h
─────────────────────────────────────────────────────────────
Многоцелевой регистр    20h     1      * * *        3C2h
Выбор характеристик     28h     1      * * *        3xAh
Графическая позиция 1   30h     1      * * *        3CCh
Графическая позиция 2   38h     1      * * *        3CAh
─────────────────────────────────────────────────────────────

     Примечания:

     1. x  принимает значение B  или D в  зависимости от дисплея
подключеннного к адаптеру (B - монохромный, D -цветной).

     2. * * * означает, что индекс регистра игнорируется.

     Для вызова любой из перечисленных функций необходимо:

     - загрузить в регистры AX - DX необходимые параметры;
     - вызвать Int 10h;
     - проанализировать результаты, возвращенные в регистрах.

     @e16.1.7.1. Фн F0h - Читать один регистр EGA@e0

     Вход: AX = F0h
           DX = номер порта
           BX = индекс регистра

     Выход: BL = содержимое запрошенного регистра

     Описание:   Возвращает  содержимое   запрошенного  регистра
адаптера. EGA  не позволяет считывать  свои внутренние регистры,
поэтому значения всех регистров  драйвер отслеживает и сохраняет
в собственном буфере.

     @e16.1.7.2. Фн F1h - Задать один регистр EGA@e0

     Вход: AX = F1h
           DX = номер порта
           BL = индекс регистра для блока регистров или
                данные для одиночного регистра
           BH = данные для блока регистров

     Выход: нет

     Описание:  Позволяет  изменить  содержимое  любого регистра
адаптера. Для засылки значения  в одиночный регистр нужно задать
номер соответствующего  порта в DX, а  новое значение регистра в
BL.  Для засылки  значения в  регистр блока  нужно задать  номер
соответствующего  порта в  DX, индекс  регистра в  блоке в  BL а
новое значение регистра в BH.

     Примечание. Эта фн может  разрушать содержимое регистров BH
и DX.

     @e16.1.7.3. Фн F2h - Читать порт EGA@e0

     Вход: AX = F2h
           DX = номер порта
           CH = индекс первого регистра
           CL = количество регистров
           ES:BX = адрес буфера

     Выход: буфер заполняется содержимым регистров

     Описание:   Возвращает  содержимое   запрошенных  регистров
заданного   блока  адаптера.   Точнее  говоря,   считываются  CL
регистров  из порта  DX с   индексами CH,  CH+1, ...,  CH+CL-1 и
заносятся в  буфер по адресу  ES:BX. EGA не  позволяет считывать
свои  внутренние  регистры,   поэтому  значения  всех  регистров
драйвер отслеживает и сохраняет в собственном буфере.

     Примечание. Эта фн может  разрушать содержимое регистра CX.

     @e16.1.7.4. Фн F3h - Задать порт EGA@e0

     Вход: AX = F3h
           DX = номер порта
           CH = индекс первого регистра
           CL = количество регистров
           ES:BX = адрес буфера со значениями регистров

     Выход: нет

     Описание: Изменяет содержимое  заданных регистров заданного
блока  адаптера.  Точнее  говоря,  CL  регистров  из  порта DX с
индексами  CH,  CH+1,  ...,  CH+CL-1  заполняются  значениями из
буфера по адресу ES:BX.

     Примечание. Эта фн может  разрушать содержимое регистра CX.

     @e16.1.7.5. Фн F4h - Читать группу регистров EGA@e0

     Вход: AX = F4h
           CX = количество регистров (более 1)
           ES:BX = адрес буфера

     Выход: буфер заполняется содержимым регистров

     Описание:   Возвращает  содержимое   запрошенных  регистров
адаптера.  Буфер   должен  состоять  из   4-байтовых  описателей
регистров следующего формата:

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое          Комментарий
────────────────────────────────────────────────────────────────
                ┌────────┬────────┐
+00h       2    │                 │ Номер порта
                ├────────┼────────┘
+02h       1    │        │          Номер индекса
                ├────────┤
+03h       1    │        │          Содержимое регистра
                └────────┘
────────────────────────────────────────────────────────────────

     Фн   заполняет  байт   по  смещению   3  каждого  описателя
содержимым соответствующего регистра EGA.

     EGA  не  позволяет   считывать  свои  внутренние  регистры,
поэтому значения всех регистров  драйвер отслеживает и сохраняет
в собственном буфере.

     Примечание. Эта фн может  разрушать содержимое регистра CX.

     @e16.1.7.6. Фн F5h - Задать группу регистров EGA@e0

     Вход: AX = F5h
           CX = количество регистров (более 1)
           ES:BX = адрес буфера

     Выход: нет

     Описание:  Устанавливает новые  значения заданных регистров
адаптера.  Буфер   должен  состоять  из   4-байтовых  описателей
регистров следующего формата:

────────────────────────────────────────────────────────────────
Смещение Длина  Содержимое          Комментарий
────────────────────────────────────────────────────────────────
                ┌────────┬────────┐
+00h       2    │                 │ Номер порта
                ├────────┼────────┘
+02h       1    │        │          Номер индекса
                ├────────┤
+03h       1    │        │          Новое содержимое регистра
                └────────┘
────────────────────────────────────────────────────────────────

     Примечание. Эта фн может  разрушать содержимое регистра CX.

     @e16.1.7.7. Фн F6h - Сброс адаптера к начальным значениям
                 регистров EGA@e0

     Вход: AX = F6h

     Выход: нет

     Описание:  Присваивает  всем  регистрам  адаптера начальные
значения,  которые  должны   быть  предварительно  определены  с
помощью фн F7h.

     @e16.1.7.8. Фн F7h - Задать начальные значения регистров@e0

     Вход: AX = F7h
           DX = номер порта
           ES:BX = таблица начальных значений

     Выход: нет

     Описание:  Определяет  начальные  значения  регистров блока
адаптера,  которые  будут  использоваться  при  вызове  фн  F6h.
Таблица  начальных  значений   должна  содержать  значения  всех
регистров данного блока в порядке увеличения их индексов.

     Примечание. Эта фн может  разрушать содержимое регистров BX
и DX.

     @e16.1.7.9. Фн FAh - Получить версию драйвера мыши@e0

     Вход: AX = FAh
           BX = 0

     Выход: ES:BX = указатель на номер версии драйвера мыши

     Описание: Возвращает  адрес двух байтов,  содержащих версию
драйвера мыши.  Если BX=0, драйвера мыши нет; в противном случае
ES:[BX] содержит номер его версии, ES:[BX+1] - номер подверсии.

     Примечание. Эта фн позволяет  узнать адрес сегмента памяти,
в который загружен драйвер (ES).
@pb
@ce@e16.2. Работа с дополнительной памятью@e0

     @e16.2.1. Общее описание@e0

     Как  известно, основная  память ПЭВМ  ограничена емкостью в
640  Кбайт. Для  программ,  требующих  больших объемом  ОЗУ, был
разработан стандарт LIM  (Lotus/Intel/Microsoft) на дополнитель-
ную память,  названный EMS (Exрanded  Memory Sрecification). Эта
память  располагается  на  дополнительной  плате,  вставляемой в
ПЭВМ,  и поставляется  вместе с  драйвером EMM  (Exрanded Memory
Manager), обеспечивающим доступ к этой памяти.

     Концепция дополнительной памяти  состоит в следующем. Часть
адресного  пространства, зарезервированного  для ПЗУ  адаптерных
плат, в области адресов C0000h  - EFFFFh размером 64К выделяется
в качестве "окна",  отображаемого на дополнительную  память. Это
окно разбивается на четыре сегмента  емкостью по 16К; любой блок
дополнительной  памяти, называемый  логической страницей,  может
быть  отображен  на  любой  из  этих  сегментов.  Это  позволяет
процессору  адресовать четыре  области дополнительной  памяти по
16К каждая.

     Для доступа  к EMS программа  должна запросить драйвер  EMM
зарезервировать для  нее один или более  сегментов. В дальнейшем
она может "считать" заданные логические страницы в эти сегменты.
Перед завершением работы программа  должна освободить выделенные
ей сегменты.

     Для  вызова  функций  EMM  программа  должна заслать нужные
значения в регистры процессора и вызвать Int 67h.

     В этом разделе описана  работа с наиболее распространенными
версиями  EMS -  EMS 3.2  и EMS  4.0, имеющей ряд дополнительных
возможностей.

     Примечание.   Не  следует   путать  дополнительную   память
(exрanded  memory)  с  расширенной  (extended  memory),  которой
комплектуются ПЭВМ на базе процессоров 80286 и 80386. О работе с
расширенной памятью см. п. 2.6 (Int 15h, фн 87h - 89h).

     @e16.2.2. Проверка наличия драйвера EMM в памяти@e0

     Перед обращением к драйверу EMM программа должна убедиться,
что  он   присутствует  в  памяти.  Для   этого  существуют  две
возможности.

     1. Имя логического устройства  EMM - "EMSXXXX0". Поэтому Вы
можете открыть  устройство с таким именем  как файл функцией ДОС
3Dh, а  затем запросить статус устройства  с помощью функции ДОС
44h (IOCTL), подфн  07h. Если статус, возвращаемый в  AL, то EMM
не установлен и  на диске по какой-то причине  существует файл с
именем EMSXXXX0.

     2.  Проще проверить  наличие  EMM  в памяти  так: извлеките
содержимое  вектора Int  67h. По  смещению 0Ah  от этого  адреса
должна храниться  текстовая строка "EMSXXXX0"  (имя устройства в
заголовке драйвера).

     @e16.2.3. Функции EMM@e0

     Драйвер EMM 3.2 поддерживает следующие функции:

──────────────────────────────────────────────────────────────
Функция  Назначение
──────────────────────────────────────────────────────────────
40h      Получить состояние EMM
41h      Получить адрес физического сегмента
42h      Получить объем памяти
43h      Открыть логический сегмент
44h      Отобразить память
45h      Закрыть логический сегмент
46h      Получить версию EMM
47h      Сохранить контекст
48h      Восстановить контекст
4Bh      Получить размер логического сегмента
4Ch      Получить число открытых сегментов
4Dh      Получить информацию о сегментах
4Eh      Управление картой памяти
4Fh      Управление частичной картой памяти          (EMS 4.0)
50h      Управление массивом страниц                 (EMS 4.0)
51h      Перераспределить страницы                   (EMS 4.0)
52h      Управление атрибутами логических сегментов  (EMS 4.0)
53h      Управление именами логических сегментов     (EMS 4.0)
54h      Получить каталог логических сегментов       (EMS 4.0)
55h      Сменить карту и перейти                     (EMS 4.0)
56h      Сменить карту и вызвать                     (EMS 4.0)
57h      Управление областью памяти                  (EMS 4.0)
58h      Получить массив отображаемых адресов        (EMS 4.0)
59h      Получить информацию об оборудовании EMS     (EMS 4.0)
5Ah      Управление распределением страниц           (EMS 4.0)
5Bh      Управление альтернативным набором регистров (EMS 4.0)
5Ch      Подготовить EMS к теплой перезагрузке       (EMS 4.0)
5Dh      Управление функциями ОС                     (EMS 4.0)
──────────────────────────────────────────────────────────────

     @e16.2.3.1. Фн 40h - Получить состояние EMM@e0

     Вход: AH = 40h

     Выход: AH = состояние EMM

     Описание:  Возвращает состояние  EMM, т.  е. код  последней
ошибки согласно следующей таблице:
@pb
────────────────────────────────────────────────────────────────
Код  Ошибка
────────────────────────────────────────────────────────────────
00h  Успешное завершение последней функции
80h  Внутренняя ошибка драйвера EMM
81h  Аппаратный сбой платы памяти EMS
82h  Драйвер EMM занят
83h  Неверный номер логического сегмента
84h  Неверный номер функции
85h  Нет свободных логических сегментов
86h  Ошибка сохранения/восстановления контекста
87h  Запрошено больше памяти, чем имеется на плате
88h  Запрошено больше памяти, чем имеется свободной
89h  Попытка открыть сегмент нулевой длины
8Ah  Ваш сегмент содержит не так много страниц
8Bh  Номер физического сегмента больше 3
8Ch  Область сохранения контекста полна
8Dh  Допустимо одно сохранение контекста для сегмента
8Eh  Восстановление контекста без предварительного сохранения
8Fh  Неверный параметр подфункции
90h  Неопределенный тип атрибута                   (EMS 4.0)
91h  Эта возможность не поддерживается драйвером   (EMS 4.0)
92h  Часть области памяти, возможно, перекрыта     (EMS 4.0)
93h  Длина одной из областей памяти превосходит длину другой
     области                                       (EMS 4.0)
94h  Перекрытие областей основной и дополнительной памяти
                                                   (EMS 4.0)
95h  Смещение внутри логической страницы больше ее длины
                                                   (EMS 4.0)
96h  Длина области памяти более 1 Мбайта           (EMS 4.0)
97h  Обе области памяти отображены в один сегмент и перекры-
     ваются                                        (EMS 4.0)
9Ah  Заданный набор регистров не поддерживается    (EMS 4.0)
9Bh  Все наборы регистров уже распределены         (EMS 4.0)
9Ch  Нет альтернативных наборов регистров          (EMS 4.0)
9Dh  Неопределенный и невыделенный набор регистров (EMS 4.0)
A0h  Нет логического сегмента с таким именем       (EMS 4.0)
A1h  Такое имя логического сегмента уже есть       (EMS 4.0)
A2h  Попытка перехода через границу 1 Мбайта основной памяти
                                                   (EMS 4.0)
A3h  Массив испорчен                               (EMS 4.0)
A4h  Доступ запрещен операционной системой         (EMS 4.0)
────────────────────────────────────────────────────────────────

     @e16.2.3.2. Фн 41h - Получить адрес физического сегмента@e0

     Вход: AH = 41h

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX = адрес сегмента (если AH=0)

     Описание: Возвращает сегментный адрес  области памяти EMS в
диапазоне адресов C0000h - EFFFFh.
@pb
     @e16.2.3.3. Фн 42h - Получить объем памяти@e0

     Вход: AH = 42h

     Выход: AH = состояние EMM (см. 6.2.3.1)
            DX = количество страниц EMS
            BX = количество свободных страниц EMS

     Описание: Возвращает общий объем дополнительной памяти в DX
и объем  свободной  памяти  в  BX.  Объем  памяти  указывается  в
страницах по 16К.

     @e16.2.3.4. Фн 43h - Открыть логический сегмент@e0

     Вход: AH = 43h
           BX = количество страниц памяти (1 - 512)

     Выход: AH = состояние EMM (см. 6.2.3.1)
            DX = номер логического сегмента

     Описание:  Открывает   новый  логический  сегмент,   т.  е.
выделяет  программе  количество  страниц  EMS  размером  по 16К,
запрошенное в BX. При удачном  завершении (AH=0) возвращает в DX
номер  открытого  сегмента,   который  должен  использоваться  в
последующих обращениях к EMM.

     @e16.2.3.5. Фн 44h - Отобразить память@e0

     Вход: AH = 44h
           AL = номер физической страницы (0 - 3)
           BX = номер логической страницы
           DX = номер логического сегмента

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание: Отображает от одной до четырех логических страниц
сегмента в физическую память. BX  должно лежать в диапазоне от 0
до n-1, где n - количество страниц в логическом сегменте.

     @e16.2.3.6. Фн 45h - Закрыть логический сегмент@e0

     Вход: AH = 45h
           DX = номер логического сегмента

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание: Освобождает память, выделенную сегменту фн 43h.

     @e16.2.3.7. Фн 46h - Получить версию EMM@e0

     Вход: AH = 46h

     Выход: AH = состояние EMM (см. 6.2.3.1)
            AL = версия драйвера EMM

     Описание: Возвращает  номер версии драйвера  EMM в двоично-
десятичном виде. Например EMM 3.2 вернет AL=0302h.

     @e16.2.3.8. Фн 47h - Сохранить контекст@e0

     Вход: AH = 47h
           DX = номер логического сегмента

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание:  Сохраняет  контекст  заданного  сегмента,  т. е.
информацию  о  текущем  отображении  его  логических  страниц  в
физические.

     @e16.2.3.9. Фн 48h - Восстановить контекст@e0

     Вход: AH = 47h
           DX = номер логического сегмента

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание:   Восстанавливает   ранее   сохраненный  контекст
заданного сегмента.

     @e16.2.3.10. Фн 4Bh - Получить размер логического сегмента@e0

     Вход: AH = 4Bh
           DX = номер логического сегмента

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX = количество страниц в сегменте (1 - 512)

     Описание: Возвращает размер  заданного сегмента в страницах
по 16К.

     @e16.2.3.11. Фн 4Ch - Получить число открытых сегментов@e0

     Вход: AH = 4Ch

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX = количество открытых сегментов

     Описание: Возвращает количество сегментов, открытых фн 43h.
Обычно эта фн вызывается перед  фн 4Dh, чтобы определить необхо-
димый размер буфера.

     @e16.2.3.12. Фн 4Dh - Получить информацию о сегментах@e0

     Вход: AH = 4Dh
           ES:DI = адрес буфера

     Выход: AH = состояние EMM (см. 6.2.3.1)
            ES:DI = адрес заполненного буфера

     Описание:  Возвращает  информацию  об  открытых сегментах в
буфере   пользовательской  программы.   Для  каждого   открытого
логического  сегмента возвращаются  два слова:  номер сегмента и
количество страниц в нем.

     @e16.2.3.13. Фн 4Eh - Управление картой памяти@e0

     Вход: AH = 4Eh
           AL = номер подфункции:
                00h - считать карту памяти
                01h - задать карту памяти
                02h - копировать карту памяти
                03h - запросить размер карты памяти
          прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн
            ES:DI = адрес заполненного буфера

     Описание:  Карта памяти  - это  массив информации, хранящий
текущие параметры регистров  EMS (ее структура недокументирована
и авторам  неизвестна). Эта  фн предназначена  для многозадачных
операционных систем и состоит из следующих подфункций.

     Подфн 00h: Считать карту памяти
     ───────────────────────────────

     Вход: ES:DI = адрес буфера

     Выход: ES:DI содержит карту памяти в буфере

     Описание: Копирует  текущую карту памяти в  буфер по адресу
ES:DI.

     Подфн 01h: Задать карту памяти
     ──────────────────────────────

     Вход: DS:SI = адрес буфера, содержащего карту памяти

     Выход: нет

     Описание: Засылает в EMS карту памяти из буфера по адресу
DS:SI.

     Подфн 02h: Копировать карту памяти
     ──────────────────────────────────

     Вход: DS:SI = адрес буфера, содержащего новую карту памяти
           ES:DI = адрес буфера для старой карты памяти

     Выход: ES:DI = адрес старой карты памяти

     Описание: Сохраняет текущую карту  памяти по адресу ES:DI и
устанавливает карту памяти из DS:SI.
@pb
     Подфн 03h: Запросить размер карты памяти
     ────────────────────────────────────────

     Вход: нет

     Выход: AL = размер буфера карты памяти в байтах

     Описание:   Возвращает  размер   буфера,  необходимого  для
сохранения карты памяти. Вызывается перед остальными подфн.

     @e16.2.3.14. Фн 4Fh - Управление частичной картой памяти
                  (EMS 4.0)@e0

     Вход: AH = 4Fh
           AL = номер подфункции:
                00h - считать частичную карту памяти
                01h - задать частичную карту памяти
                02h - запросить размер частичной карты памяти
          прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание: Строение частичной карты памяти недокументировано
и авторам  неизвестно.  Эта  фн  предназначена для многозадачных
операционных систем и состоит из следующих подфункций.

     Подфн 00h: Считать частичную карту памяти
     ─────────────────────────────────────────

     Вход: DS:SI = указатель на список сегментов
           ES:DI = адрес буфера

     Выход: ES:DI содержит карту памяти в буфере

     Описание: Копирует частичную карту памяти в буфер по адресу
ES:DI.  Выбирается  информация   о  сегментах,  перечисленных  в
списке, адрес которого задается в DS:SI.

     Подфн 01h: Задать частичную карту памяти
     ────────────────────────────────────────

     Вход: DS:SI = адрес буфера, содержащего карту памяти

     Выход: нет

     Описание: Засылает  в EMS частичную карту  памяти из буфера
по адресу DS:SI.

     Подфн 02h: Запросить размер частичной карты памяти
     ──────────────────────────────────────────────────

     Вход: нет

     Выход: AL = размер частичной карты памяти
            BX = количество сегментов в сохраненной карте

     Описание:   Возвращает   количество   сегментов   в   ранее
сохраненной частичной карте памяти.

     @e16.2.3.15. Фн 50h - Управление массивом страниц
                  (EMS 4.0)@e0

     Вход: AH = 50h
           AL = номер подфункции:
                00h - отобразить массив страниц
                01h - отменить отображение массива
           DX = номер логического сегмента
           CX = количество элементов в массиве
           DS:SI = адрес массива отображения

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание:  Включает  или  выключает  отображение  заданного
массива.

     @e16.2.3.16. Фн 51h - Перераспределить страницы
                  (EMS 4.0)@e0

     Вход: AH = 51h
           DX = номер логического сегмента
           BX = количество страниц

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX = количество страниц, фактически выделенное
                 сегменту

     Описание:   Запрашивает   изменение   количества   страниц,
выделенных данному логическому сегменту.

     @e16.2.3.17. Фн 52h - Управление атрибутами логических
                  сегментов (EMS 4.0)@e0

     Вход: AH = 52h
           AL = номер подфункции:
                00h - считать атрибуты
                01h - задать атрибуты
                02h - запросить возможные атрибуты
           DX = номер логического сегмента
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:   Управляет   атрибутами   логических  сегментов.
Атрибут сегмента может принимать следующие значения:

     00h - номер сегмент изменяем;
     01h - номер сегмента не подлежит изменениям.

     Подфн 00h: Считать атрибуты
     ───────────────────────────

     Вход: нет

     Выход: AL = атрибут

     Описание: Возвращает текущий атрибут логического сегмента.

     Подфн 01h: Задать атрибуты
     ──────────────────────────

     Вход: BL = новый атрибут

     Выход: нет

     Описание: Задает новое значение атрибута.

     Подфн 02h: Запросить возможные атрибуты
     ───────────────────────────────────────

     Вход: нет

     Выход: AL = возможные атрибуты (см. ниже)

     Описание:   Возвращает    возможные   значения   атрибутов,
поддерживаемые EMS:

     00h - поддерживаются только изменяемые номера сегментов;
     01h - поддерживаются оба атрибута номеров сегментов.

     @e16.2.3.18. Фн 53h - Управление именами логических
                  сегментов (EMS 4.0)@e0

     Вход: AH = 53h
           AL = номер подфункции:
                00h - считать имя сегмента
                01h - задать имя сегмента
           DX = номер логического сегмента
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:  Управляет именами  логических сегментов.  Каждый
сегмент может иметь уникальное 8-байтовое имя.

     Подфн 00h: Считать имя сегмента
     ───────────────────────────────

     Вход: ES:DI = адрес буфера

     Выход: ES:DI содержит имя сегмента

     Описание: Возвращает текущее имя логического сегмента.

     Подфн 01h: Задать атрибуты
     ──────────────────────────

     Вход: DS:SI = адрес нового имени сегмента

     Выход: нет

     Описание: Задает новое имя логического сегмента.

     @e16.2.3.19. Фн 54h - Получить каталог логических сегментов
                  (EMS 4.0)@e0

     Вход: AH = 54h
           AL = номер подфункции:
                00h - получить каталог сегментов
                01h - найти сегмент по имени
                02h - получить количество сегментов
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:  Эта фн имеет следующие подфункции.

     Подфн 00h: Получить каталог сегментов
     ─────────────────────────────────────

     Вход: ES:DI = адрес буфера

     Выход: ES:DI содержит каталог сегментов
            AL = количество элементов в каталоге сегментов

     Описание:  Возвращает  в  заданном  буфере каталог открытых
сегментов.

     Подфн 01h: Найти сегмент по имени
     ─────────────────────────────────

     Вход: DS:SI = адрес 8-байтового имени сегмента

     Выход: DX = номер сегмента с данным именем

     Описание:  Возвращает имя  логического сегмента  с заданным
именем.

     Подфн 02h: Получить количество сегментов
     ────────────────────────────────────────

     Вход: нет

     Выход: BX = общее количество сегментов

     Описание:  Возвращает общее  количество открытых логических
сегментов.

     @e16.2.3.20. Фн 55h - Сменить карту и перейти (EMS 4.0)@e0

     Вход: AH = 55h
           AL = номер подфункции:
                00h - перейти по номеру физической страницы
                01h - перейти по заданному адресу сегмента
           DX = номер логического сегмента
           DS:SI = адрес структуры, содержащей карту и адреса
                   перехода

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание: Эта фн позволяет сменить текущую карту и передать
управление по заданному адресу.

     @e16.2.3.21. Фн 56h - Сменить карту и вызвать (EMS 4.0)@e0

     Вход: AH = 56h
           AL = номер подфункции:
                00h - перейти по номеру физической страницы
                01h - перейти по заданному адресу сегмента
                02h - получить необходимый размер стека
           DX = номер логического сегмента (для подфн 0 и 1)
           DS:SI = адрес структуры, содержащей карту и адреса
                   перехода (для подфн 0 и 1)

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX = необходимый размер стека (для подфн 2)

     Описание: Эта фн позволяет  сменить текущую карту и вызвать
подпрограмму  по заданному  адресу. Восстановление  старой карты
производится командой RETF.

     @e16.2.3.22. Фн 57h - Управление областью памяти
                  (EMS 4.0)@e0

     Вход: AH = 57h
           AL = номер подфункции:
                00h - перенести область памяти
                01h - обменять область памяти
           DS:SI = адрес структуры, содержащей описание
                   источника и приемника

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание: Эта  фн позволяет перенести  или обменять местами
содержимое двух областей памяти.

     @e16.2.3.23. Фн 58h - Получить массив отображаемых адресов
                  (EMS 4.0)@e0

     Вход: AH = 58h
           AL = номер подфункции:
                00h - получить массив отображаемых адресов
                01h - получить количество элементов в массиве
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:  Эта фн имеет следующие подфункции.

     Подфн 00h: Получить массив отображаемых адресов
     ───────────────────────────────────────────────

     Вход: ES:DI = адрес буфера

     Выход: ES:DI содержит массив отображаемых адресов

     Описание: Возвращает в  заданном буфере массив отображаемых
адресов.

     Подфн 01h: Получить количество элементов в массиве
     ──────────────────────────────────────────────────

     Вход: нет

     Выход: CX = количество элементов

     Описание:   Возвращает  количество   элементов  в   массиве
отображаемых адресов.

     @e16.2.3.24. Фн 59h - Получить информацию об оборудовании
                  EMS (EMS 4.0)@e0

     Вход: AH = 59h
           AL = номер подфункции:
                00h - получить массив конфигурации оборудования
                01h - получить количество нераспределенных
                      страниц
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:  Эта фн имеет следующие подфункции.

     Подфн 00h: Получить массив конфигурации оборудования
     ────────────────────────────────────────────────────

     Вход: ES:DI = адрес буфера

     Выход: ES:DI содержит массив конфигурации

     Описание: Возвращает в  заданном буфере массив конфигурации
оборудования.   Эта   подфн   предназначена   для  использования
операционными системами  и может быть  в любой момент  разрешена
или запрещена ОС.
@pb
     Подфн 01h: Получить количество нераспределенных страниц
     ───────────────────────────────────────────────────────

     Вход: нет

     Выход: BX = количество нераспределенных страниц
            DX = общее количество страниц

     Описание: Возвращает информацию о количество страниц EMS.

     @e16.2.3.25. Фн 5Ah - Управление распределением страниц
                  (EMS 4.0)@e0

     Вход: AH = 5Ah
           AL = номер подфункции:
                00h - распределить стандартные страницы
                01h - распределить "сырые" страницы
           BX = требуемое количество страниц

     Выход: AH = состояние EMM (см. 6.2.3.1)
            DX = номер логического сегмента

     Описание:  Эта   фн  открывает  новый   логический  сегмент
заданного размера и возвращает его номер.

     @e16.2.3.26. Фн 5Bh - Управление альтернативным набором
                  регистров (EMS 4.0)@e0

     Вход: AH = 5Bh
           AL = номер подфункции:
                00h - получить альтернативный набор регистров
                      карты
                01h - задать альтернативный набор регистров карты
                02h - получить размер массива сохранения карты
                03h - распределить альтернативный набор
                      регистров карты
                04h - освободить альтернативный набор регистров
                      карты
                05h - распределить набор регистров ПДП
                06h - разрешить ПДП для альтернативного набора
                      регистров карты
                07h - запретить ПДП для альтернативного набора
                      регистров карты
                08h - освободить набор регистров ПДП
           прочие - зависят от подфн

     Выход: AH = состояние EMM (см. 6.2.3.1)
            прочие - определяются подфн

     Описание:   Эта   фн   имеет   следующие   подфункции.  Она
предназначена для использования  операционными системами и может
быть в любой момент разрешена или запрещена ОС.
@pb
     Подфн 00h: Получить альтернативный набор регистров карты
     ────────────────────────────────────────────────────────

     Вход: нет

     Выход: BL = номер текущего альтернативного набора или 0
            ES:DI = адрес области сохранения контекста регистров
                    карты (при BL=0)

     Описание: Возвращает номер активного набора регистров карты
в BL.  Если такого  набора нет,  то в  BL возвращается  нуль, а в
ES:DI - адрес области сохранения контекста.

     Подфн 01h: Задать альтернативный набор регистров карты
     ──────────────────────────────────────────────────────

     Вход: BL = номер нового альтернативного набора регистров
           ES:DI = адрес области сохранения контекста регистров
                   карты (при BL=0)
     Выход: нет

     Описание: Задает  номер активного набора  регистров карты в
BL. Если BL=0, то ES:DI - адрес области сохранения контекста.

     Подфн 02h: Получить размер массива сохранения карты
     ───────────────────────────────────────────────────

     Вход: нет

     Выход: DX = размер массива сохранения в байтах

     Описание: Возвращает размер массива сохранения карты.

     Подфн 03h: Распределить альтернативный набор регистров карты
     ────────────────────────────────────────────────────────────

     Вход: нет

     Выход: BL = номер альтернативного набора регистров или 0

     Описание:   Запрашивает  создание   нового  альтернативного
набора регистров карты. Если это невозможно, то в BL возвращается
нуль, иначе - номер нового набора.

     Подфн 04h: Освободить альтернативный набор регистров карты
     ──────────────────────────────────────────────────────────

     Вход: BL = номер альтернативного набора регистров

     Выход: нет

     Описание: Освобождает альтернативный  набор регистров карты
с заданным номером.
@pb
     Подфн 05h: Распределить набор регистров ПДП
     ───────────────────────────────────────────

     Вход: нет

     Выход: BL = номер набора регистров ПДП или 0

     Описание: Запрашивает создание нового набора регистров ПДП.
Если  это невозможно,  то в  BL возвращается  нуль, иначе - номер
нового набора.

     Подфн 06h: Разрешить ПДП для альтернативного набора
                регистров карты
     ───────────────────────────────────────────────────

     Вход: BL = номер набора регистров ПДП
           DL = номер канала контроллера ПДП

     Выход: нет

     Описание:  Разрешает прямой  доступ  к  памяти к  набору BL
через канал контроллера DL.

     Подфн 07h: Запретить ПДП для альтернативного набора
                регистров карты
     ───────────────────────────────────────────────────

     Вход: BL = номер набора регистров ПДП

     Выход: нет

     Описание: Запрещает прямой доступ к памяти к набору BL.

     Подфн 08h: Освободить набор регистров ПДП
     ─────────────────────────────────────────

     Вход: BL = номер набора регистров ПДП

     Выход: нет

     Описание:  Освобождает  набор   регистров  ПДП  с  заданным
номером.

     @e16.2.3.27. Фн 5Ch - Подготовить EMS к теплой перезагрузке
                  (EMS 4.0)@e0

     Вход: AH = 5Ch

     Выход: AH = состояние EMM (см. 6.2.3.1)

     Описание: Эта  фн подготавливает оборудование  EMS к теплой
перезагрузке ПЭВМ.
@pb
     @e16.2.3.28. Фн 5Dh - Управление функциями ОС (EMS 4.0)@e0

     Вход: AH = 5Dh
           AL = номер подфункции:
                00h - разрешить набор функций ОС
                01h - запретить набор функций ОС
                02h - вернуть ключ доступа
           BX:CX = возвращаемый ключ доступа

     Выход: AH = состояние EMM (см. 6.2.3.1)
            BX:CX = ключ доступа (возвращается при первом
                    обращении к фн)

     Описание: Эта фн позволяет разрешить или запретить действие
определенных функций, отведенных для операционной системы. Подфн
02h позволяет считать заданный ранее ключ доступа.
@pb
@ce@e16.3. Использование NETBIOS@e0

     @e16.3.1. Общие сведения@e0

     NETBIOS (Network  Basic Inрut/Outрut System,  т. е. базовая
система  сетевого  ввода-вывода)  -  это  программный интерфейс,
стандартизующий обмен ПЭВМ, подключенной  к локальной сети (узла
сети) с  другими узлами этой сети.  Исходно NETBIOS размещался в
ПЗУ  платы  адаптера  сети  IBM  PC  Network.  В дальнейшем были
разработаны  его многочисленные  программные аналоги,  полностью
совместимые с оригинальным NETBIOS (таков, например, загружаемый
драйвер NETBIOS.COM, входящий в состав пакета IBM PC LAN). Можно
утверждать, что  все современные сетевые  ОС для ПЭВМ  семейства
IBM  PC  включают  в  себя  эмуляторы  этого  интерфейса,  что и
привлекает к  нему внимание как  к стандарту de  facto в области
программирования ЛВС.

     Обмен  с  NETBIOS  осуществляется  обращением  к  Int  5Ch;
параметры функций задаются в т. н. управляющем блоке сети (NCB -
Network  Control  Block),  адрес  которого  задается в регистрах
ES:BX.

     Прежде чем  вызывать функции NETBIOS,  прикладная программа
должна проверить, что он установлен в памяти (либо в ПЗУ, либо в
ОЗУ). Для этого она должна выполнить следующие действия:

     - прочитать содержимое вектора Int 5Ch (адрес 0:170h); если
он  равен  0:0  или  указывает  на  команду  IRET, то NETBIOS не
установлен;

     - если  содержимое вектора отлично  от нуля, то  вызвать фн
32h (сброс адаптера) и проанализировать результат запроса.

     Для обращения  к NETBIOS из  программы на языке  ассемблера
необходимо:

     - занести в NCB необходимые параметры;

     - загрузить в регистры ES:BX адрес NCB;

     - вызвать Int 5Ch;

     - проанализировать коды ошибок, возвращенные в NCB.

     @e16.3.2. Управляющий блок сети (NCB)@e0

     NCB  -  это  64-байтовая  структура  данных,  состоящая  из
следующих полей:
@pb
────────────────────────────────────────────────────────────────
Смещение Длина   Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌───┐
+00h       1    │FUN│            Код функции
                ├───┤
+01h       1    │RET│            Код завершения
                ├───┤
+02h       1    │LSN│            Локальный номер сеанса
                ├───┤
+03h       1    │NUM│            Номер имени
                ├───┴────┬────────┐
+04h       4    │     BUFADDR     │ Длинный адрес буфера
                ├────────┼────────┘
+08h       2    │ BUFLEN │          Размер буфера
                ├────────┴────────┐
+0Ah      16    │    CALLNAME     │ Имя вызываемого узла
                ├─────────────────┤
+1Ah      16    │    LOCALNAME    │ Имя локального узла
                ├───┬─────────────┘
+2Ah       1    │RTO│            Таймаут приема
                ├───┤
+2Bh       1    │STO│            Таймаут передачи
                ├───┴────┬────────┐
+2Ch       4    │    POSTADDR     │ Длинный адрес программы
                ├───┬────┴────────┘ завершения
+30h       1    │LAN│            Номер адаптера
                ├───┤
+31h       1    │CCF│            Флаг завершения команды
                ├───┴─────────────┐
+32h      14    │     .  .  .     │ Зарезервировано
                └─────────────────┘
 40h       Длина таблицы
────────────────────────────────────────────────────────────────

     Примечание.   Содержимое   полей    NCB   имеет   следующее
назначение.

     FUN.
     Сюда  прикладная программа  заносит код  вызываемой функции
NETBIOS.  Если  старший  бит  кода  функции  сброшен, то NETBIOS
возвращает  управление  вызвавшей  его  программе  по завершении
выполнения  запрошенной  команды   (вызов  с  ожиданием).  Чтобы
избежать  возможных "зависаний",  каждую функцию,  кроме фн 32h,
35h  и 70h,  можно  вызвать  без ожидания  завершения, установив
старший бит кода  функции, т. е. увеличив ее код  на 80h. В этом
случае  NETBIOS  немедленно  возвращает  в  AL  код завершения и
начинает  выполнение  команды,  точнее,  помещает  ее  в очередь
команд, ожидающих выполнения  (очередь отложенных команд). После
выполнения команды NETBIOS заносит код  ее завершения в поля RET
и CCF  и,  если  поле  POSTADDR  не  нулевое, вызывает программу
завершения по этому адресу.

     RET.
     В это поле NETBIOS заносит  код завершения команды после ее
выполнения. Список всех кодов завершения приведен в п. 6.3.4.

     LSN.
     В  это поле  заносится локальный  номер сеанса,  к которому
относится функция. NETBIOS  присваивает сеансам последовательные
номера по модулю 255; значения 0 и 255 зарезервированы.

     NUM.
     Сюда заносится номер имени  узла во внутренней таблице имен
NETBIOS,  к которому  относится команда.  Элементы таблицы имеют
номера  с  1  по  254;  при  этом  элемент  с номером 1 содержит
аппаратно прошитое имя данного адаптера.

     BUFADDR.
     Сюда  прикладная  программа  должна  заносить  адрес своего
буфера обмена.

     BUFLEN.
     В это поле заносится размер буфера обмена в байтах.

     CALLNAME.
     Сюда  помещается  16-байтовое  имя  узла  сети,  к которому
обращен  запрос  (некоторые  функции  используют  это  поле иным
образом).

     LOCALNAME.
     В это поле заносится  16-байтовое имя узла сети, вызвавшего
функцию.

     RTO.
     При  начале  сеанса  сюда  заносится  величина таймаута для
передачи в  половинных долях секунды.  Нулевое значение означает
отсутствие таймаута.

     STO.
     При  начале  сеанса  сюда  заносится  величина таймаута для
приема  в половинных  долях секунды.  Нулевое значение  означает
отсутствие таймаута.

     POSTADDR.
     Сюда пользователь  заносит адрес своей  программы обработки
завершения  команды (см.  описание поля  FUN). Эта  подпрограмма
должна быть оформлена как PROC  FAR и завершаться командой IRET.
Адрес NCB передается ей в  регистрах ES:BX. Следует помнить, что
при  входе в  эту программу  прерывания запрещены.  Она может, в
свою очередь, вызывать функции  NETBIOS, но не должна обращаться
к функциям    DOS    (или    иным    функциям,   не   являющимся
повторно-входимыми).

     LAN.
     Сюда  заносится  номер   адаптера,  к  которому  адресована
функция.  IBM PC  может содержать  до двух  сетевых адаптеров  с
номерами 0 и 1.

     CCF.
     Если функция была вызвана  без ожидания, сюда заносится код
0FFh;  в  противном  случае  NETBIOS  заносит  в  это  поле  код
завершения команды.

     @e16.3.3. Функции NETBIOS@e0

     NETBIOS поддерживает следующие функции:

Функция  Назначение
──────────────────────────────────────────────────────────────
10h,90h  Начать сеанс
11h,91h  Приготовиться к началу сеанса
12h,92h  Окончить сеанс
14h,94h  Послать данные
15h,95h  Принять данные
16h,96h  Принимать данные от всех узлов
17h,97h  Послать цепочку
20h,A0h  Послать сообщение
21h,A1h  Принять сообщение
22h,A2h  Послать сообщение всем узлам
23h,A3h  Принять сообщение для всех узлов
30h,B0h  Добавить имя
31h,B1h  Удалить имя
32h      Сброс адаптера
33h,B3h  Получить состояние адаптера
34h,B4h  Получить состояние сеанса
35h      Отменить команду
36h,B6h  Добавить имя группы
70h      Разорвать связь
71h,F1h  Послать данные без квитирования
72h,F2h  Послать цепочку без квитирования
──────────────────────────────────────────────────────────────

     При описании  функций мы используем  обозначения полей NCB,
приведенные в п. 6.3.2.

     @e16.3.3.1. Фн 10h - Начать сеанс@e0

     Вход: FUN       = 10h - с ожиданием
                       90h - без ожидания
           CALLNAME  = имя вызываемого узла
           LOCALNAME = имя вызывающего узла
           RTO       = таймаут для передачи
           STO       = таймаут для приема
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            LSN      = локальный номер сеанса
            CCF      = флаг завершения запроса

     Описание: Эта  фн начинает сетевой сеанс  узла, заданного в
поле LOCALNAME, с узлом, заданным в поле CALLNAME. Для успешного
начала сеанса узел CALLNAME должен иметь отложенный запрос "При-
готовиться к началу сеанса" (фн 11h).

     Сеанс может быть установлен между любыми двумя узлами сети,
причем  Вы можете  начать  несколько  сеансов между  одной парой
имен.  Если фн  завершается успешно,  то в  NCB заносится  номер
нового сеанса.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 09h, 0Bh, 11h, 12h, 14h, 15h,
                   18h, 19h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.2. Фн 11h - Приготовиться к началу сеанса@e0

     Вход: FUN       = 11h - с ожиданием
                       91h - без ожидания
           CALLNAME  = имя вызываемого узла
           LOCALNAME = имя вызывающего узла
           RTO       = таймаут для передачи
           STO       = таймаут для приема
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET       = код завершения запроса
            LSN       = локальный номер сеанса
            CCF       = флаг завершения запроса
            LOCALNAME = имя узла, с которым начат сеанс

     Описание: Эта  фн начинает сетевой сеанс  узла, заданного в
поле LOCALNAME,  с узлом, заданным в  поле CALLNAME. Если первый
символ  CALLNAME равен  '*',  то  сеанс устанавливается  с любым
узлом, вызвавшим фн 10h.

     Сеанс может быть установлен между любыми двумя узлами сети,
причем  Вы можете  начать  несколько  сеансов между  одной парой
имен.  Если фн  завершается успешно,  то в  NCB заносится  номер
нового сеанса.  Если CALLNAME начинался со  звездочки, то в него
заносится имя узла, с которым установлена связь.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 09h, 0Bh, 11h, 15h, 18h, 19h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.3.3. Фн 12h - Окончить сеанс@e0

     Вход: FUN       = 12h - с ожиданием
                       92h - без ожидания
           LSN       = локальный номер сеанса
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание: Эта фн завершает сетевой сеанс с номером LSN. Все
отложенные запросы на прием  аварийно завершаются, но запросы на
передачу доводятся до завершения (нормального или аварийного).

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 08h, 0Ah, 18h, 21h-23h, 4Xh,
                   50h-FEh

     @e16.3.3.4. Фн 14h - Послать данные@e0

     Вход: FUN       = 14h - с ожиданием
                       94h - без ожидания
           LSN       = локальный номер сеанса
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание: Эта фн передает  пакет данных из заданного буфера
узлу,  заданному  полем  LSN.   Не  делайте  много  запросов  на
передачу,  если  нет  ответных  запросов  на  прием,  т.  к. это
приводит к напрасному расходованию ресурсов сети.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 07h, 08h, 0Ah, 0Bh, 18h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.3.5. Фн 15h - Принять данные@e0

     Вход: FUN       = 15h - с ожиданием
                       95h - без ожидания
           LSN       = локальный номер сеанса
           BUFADDR   = адрес буфера для приема данных
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            BUFLEN   = длина принятых данных

     Описание: Эта фн принимает пакет данных в заданный буфер от
узла,  заданного полем  LSN. Передача  начинается, когда  второй
узел вызовет фн 14h или 17h. Если размер буфера недостаточен для
приема данных, происходит частичный прием  и выход из фн с кодом
06h. Остаток  данных можно принять, повторно  обратившись к этой
фн.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 06h, 07h, 08h, 0Ah, 0Bh, 18h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.3.6. Фн 16h - Принимать данные от всех узлов@e0

     Вход: FUN       = 16h - с ожиданием
                       96h - без ожидания
           NUM       = номер имени узла или 0FFh
           BUFADDR   = адрес буфера для приема данных
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            BUFLEN   = длина принятых данных

     Описание:  Эта  фн  принимает   данные  в  заданный  буфер,
направленные  узлу, заданному  полем NUM,  независимо от  номера
сеанса.  Если   поле  NUM  содержит  значение   0FFh,  то  прием
производится от  любого узла. Передача  начинается, когда второй
узел вызовет фн 14h или 17h. Если размер буфера недостаточен для
приема данных, происходит частичный прием  и выход из фн с кодом
06h. Остаток  данных можно принять, повторно  обратившись к этой
фн.

     Эту  фн с  NUM=0FFh нужно  использовать осторожно,  т. к. в
этом  случае  Вы   можете  перехватить  сообщение,  адресованное
другому узлу.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 06h, 07h, 08h, 0Ah, 0Bh, 13h, 17h,
                   18h, 19h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.7. Фн 17h - Послать цепочку@e0

     Вход: FUN       = 17h - с ожиданием
                       97h - без ожидания
           LSN       = локальный номер сеанса
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           CALLNAME  = см. ниже
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание: Эта фн передает данныe узлу, заданному полем LSN.
Данные представляют собой два  независимых буфера: адрес и длина
первого  буфера  задается  в  BUFADDR  и  BUFLEN;  адрес и длина
второго - в поле CALLNAME следующим образом:

────────────────────────────────────────────────────────────────
Смещение Длина   Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌────────┐
+00h       2    │        │          Длина буфера
                ├────────┼────────┐
+02h       4    │     BUFADDR     │ Длинный адрес буфера
                ├────────┴────────┤
+06h      10    │     .  .  .     │ Не используются
                └─────────────────┘
 10h      Длина поля CALLNAME
────────────────────────────────────────────────────────────────

     NETBIOS  сливает  два  буфера   (второй  после  первого)  и
передает  их  как  один  сплошной  массив.  Таким  образом можно
передать от 0 до 128К-2 байтов.

      Не делайте  много запросов на передачу,  если нет ответных
запросов на прием, т. к.  это приводит к напрасному расходованию
ресурсов сети.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 07h, 08h, 0Ah, 0Bh, 18h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.3.8. Фн 20h - Послать сообщение@e0

     Вход: FUN       = 20h - с ожиданием
                       A0h - без ожидания
           NUM       = номер имени узла
           CALLNAME  = имя вызываемого узла
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание: Эта фн передает  сообщение узлу, заданному именем
CALLNAME. Это имя может быть уникальным или групповым. Сообщение
будет принято  только теми узлами,  которые имеют отложенную  фн
21h.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 01h, 03h, 13h, 19h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.9. Фн 21h - Принять сообщение@e0

     Вход: FUN       = 21h - с ожиданием
                       A1h - без ожидания
           NUM       = номер имени узла или 0FFh
           BUFADDR   = адрес буфера для приема данных
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            BUFLEN   = длина принятых данных
            CALLNAME = имя передавшего данные узла

     Описание:  Эта фн  принимает сообщения,  направленные узлу,
заданного полем  NUM. Если поле  NUM содержит значение  0FFh, то
прием  производится от  любого узла.  Передача начинается, когда
второй  узел  вызовет  фн  20h.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 06h, 0Bh, 13h, 17h, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.10. Фн 22h - Послать сообщение всем узлам@e0

     Вход: FUN       = 22h - с ожиданием
                       A2h - без ожидания
           NUM       = номер имени узла
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта  фн  передает  сообщение  всем  узлам  сети.
Сообщение  будет  принято  только  теми  узлами,  которые  имеют
отложенную фн 23h.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 01h, 03h, 13h, 19h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.11. Фн 23h - Принять сообщение для всех узлов@e0

     Вход: FUN       = 23h - с ожиданием
                       A3h - без ожидания
           NUM       = номер имени узла или 0FFh
           BUFADDR   = адрес буфера для приема данных
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            BUFLEN   = длина принятых данных
            CALLNAME = имя передавшего данные узла

     Описание:  Эта фн  принимает сообщения,  переданные фн 22h.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 06h, 0Bh, 13h, 17h, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.12. Фн 30h - Добавить имя@e0

     Вход: FUN       = 30h - с ожиданием
                       B0h - без ожидания
           LOCALNAME = имя вызывающего узла
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            NUM      = номер имени узла

     Описание: Эта фн добавляет  уникальное имя, заданное в поле
LOCALNAME,  в  таблицу  имен  адаптера.  Номер  имени  в таблице
возвращается  в поле  NUM. Он  используется в  командах передачи
сообщений и приема данных от всех узлов (фн 16h).

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 0Dh, 0Eh, 15h, 16h, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.13. Фн 31h - Удалить имя@e0

     Вход: FUN       = 31h - с ожиданием
                       B1h - без ожидания
           LOCALNAME = имя вызывающего узла
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта фн  удаляет  имя  LOCALNAME из  таблицы имен
адаптера.  Если  имя  участвует  в  активном  сеансе, то команда
откладывается до завершения сеанса.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 0Fh, 15h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.14. Фн 32h - Сброс адаптера@e0

     Вход: FUN       = 32h
           LSN       = локальный номер сеанса
           NUM       = номер имени узла
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта  фн  производит  сброс  заданного  адаптера,
очищая  имя  и  таблицы  сеансов;  активные  сеансы  завершаются
аварийно.

     Коды завершения: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.15. Фн 33h - Получить состояние адаптера@e0

     Вход: FUN       = 33h - с ожиданием
                       B3h - без ожидания
           CALLNAME  = имя вызываемого узла
           BUFADDR   = адрес буфера
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            BUFLEN   = размер информации в буфере

     Описание:  Эта фн  возвращает состояние  заданного адаптера
заданного  узла  сети  в  буфере  BUFADDR.  Если  первый  символ
CALLNAME равен '*', возвращается состояние адаптера данной ПЭВМ;
в противном случае - удаленной ПЭВМ с данным именем. Минимальный
размер  буфера -  60 байтов  плюс максимальное  количество имен,
умноженное на 18. Формат возвращаемой информации зависит от типа
локальной сети.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 01h, 03h, 05h, 06h, 0Bh, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.16. Фн 34h - Получить состояние сеанса@e0

     Вход: FUN       = 34h - с ожиданием
                       B4h - без ожидания
           LOCALNAME = имя вызываемого узла
           BUFADDR   = адрес буфера
           BUFLEN    = длина буфера
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            NUM      = номер имени узла

     Описание:  Эта фн  возвращает состояние  заданного или всех
сеансов, связанных  с именем LOCALNAME,  в буфере BUFADDR.  Если
первый символ  LOCALNAME равен '*',  возвращается состояние всех
сеансов  для всех  имен  из  таблицы имен  адаптера. Минимальный
размер буфера - 4 байта. Для получения полного состояния нужно 4
байта   плюс  количество   сеансов  умноженное   на  36.
Возвращаемая  информация  состоит  из  4-байтового  заголовка  и
36-байтовой таблицы для каждого сеанса. Формат заголовка:

────────────────────────────────────────────────────────────────
Смещение Длина   Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌───┐
+00h       1    │   │         Номер имени узла
                ├───┤
+01h       1    │   │         Количество сеансов
                ├───┤
+02h       1    │   │         Количество отложенных фн 21h и 23h
                ├───┤
+03h       1    │   │         Количество отложенных фн 16h
                └───┘
 04h       Длина заголовка
────────────────────────────────────────────────────────────────
@pb
     Формат информации о сеансе:

────────────────────────────────────────────────────────────────
Смещение Длина   Содержимое      Комментарий
────────────────────────────────────────────────────────────────
                ┌───┐
+00h       1    │   │         Локальный номер сеанса
                ├───┤
+01h       1    │   │         Байт состояния сеанса
                ├───┴─────────────┐
+02h      16    │     .  .  .     │ Имя локального узла
                ├─────────────────┤
+12h      16    │     .  .  .     │ Имя удаленного узла
                ├───┬─────────────┘
+22h       1    │   │         Количество отложенных фн 15h
                ├───┤
+23h       1    │   │         Количество отложенных фн 14h и 17h
                └───┘
 24h       Длина описания
────────────────────────────────────────────────────────────────

     Байт состояния сеанса может принимать следующие значения:

     01h  -    Отложенная фн "Подготовиться к началу сеанса"
     02h  -    Отложенная фн "Начать сеанс"
     03h  -    Сеанс установлен
     04h  -    Отложенная фн "Закончить сеанс"
     05h  -    Сеанс завершен
     06h  -    Сеанс окончен аварийно

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 01h, 03h, 06h, 15h, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.17. Фн 35h - Отменить команду@e0

     Вход: FUN       = 35h
           BUFADDR   = адрес NCB отменяемой команды
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание: Эта фн отменяет ранее поданную команду, адрес NCB
которой задается в поле BUFADDR.

     Коды завершения: 00h, 03h, 23h, 24h, 26h, 4Xh, 50h-FEh
@pb
     @e16.3.3.18. Фн 36h - Добавить имя группы@e0

     Вход: FUN       = 36h - с ожиданием
                       B6h - без ожидания
           LOCALNAME = имя вызывающего узла
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса
            NUM      = номер имени узла

     Описание:  Эта фн  добавляет неуникальное  имя, заданное  в
поле LOCALNAME,  в таблицу имен  адаптера в качестве  группового
имени.  Номер  имени  в  таблице  возвращается  в  поле  NUM. Он
используется в  командах передачи сообщений  и приема данных  от
всех узлов (фн 16h).

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 0Dh, 0Eh, 15h, 16h, 19h, 21h-23h,
                   4Xh, 50h-FEh

     @e16.3.3.19. Фн 70h - Разорвать связь@e0

     Вход: FUN       = 70h
           LAN       = 0

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта  фн  добавлена  для  совместимости с NETBIOS
адаптера  IBM  PC  Network,  где  она  выполняет  разрыв связи с
сервером RPL (удаленной загрузки  программ). В остальных ЛВС она
не выполняет никакого действия.

     Коды завершения: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     @e16.3.3.20. Фн 71h - Послать данные без квитирования@e0

     Вход: FUN       = 71h - с ожиданием
                       F1h - без ожидания
           LSN       = локальный номер сеанса
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта  фн  эквивалентна  фн  14h,  но  не  требует
ответного  квитирования  после  приема  данных.  Кроме  того, ее
отмена  не влечет  аварийного завершения  сеанса. Многие  версии
NETBIOS  не  поддерживают  эту  фн,  возвращая  код  ошибки 07h.
Учитывая множество не вполне  ясных побочных эффектов, связанных
с этой фн, рекомендуется ограничивать ее использование.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 07h, 08h, 0Ah, 0Bh, 18h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.3.21. Фн 72h - Послать цепочку без квитирования@e0

     Вход: FUN       = 72h - с ожиданием
                       F2h - без ожидания
           LSN       = локальный номер сеанса
           BUFADDR   = адрес передаваемых данных
           BUFLEN    = длина передаваемых данных
           CALLNAME  = см. ниже
           POSTADDR  = адрес программы завершения или 0:0
           LAN       = номер адаптера (0 или 1)

     Выход: RET      = код завершения запроса
            CCF      = флаг завершения запроса

     Описание:  Эта фн  эквивалентна фн  17h. Отличия  описаны в
предыдущем пункте.

     Коды завершения:

     без ожидания: 00h, 03h, 21h-23h, 4Xh, 50h-FEh

     с ожиданием:  00h, 03h, 05h, 07h, 08h, 0Ah, 0Bh, 18h,
                   21h-23h, 4Xh, 50h-FEh

     @e16.3.4. Коды завершения функций NETBIOS@e0

Номер ошибки       Значение
──────────────────────────────────────────
00h      0  Успешное завершение
01h      1  Неверная длина буфера
02h      2  Зарезервировано
03h      3  Неверный код функции
04h      4  Зарезервировано
05h      5  Таймаут
06h      6  Сообщение получено не полностью
07h      7  Неудача передачи без квитирования
08h      8  Неверный локальный номер сеанса
09h      9  Нет доступных ресурсов (обычно памяти)
0Ah      10 Сеанс уже завершен
0Bh      11 Команда отменена
0Ch      12 Зарезервировано
0Dh      13 Имя повторяется в локальной таблице имен
0Eh      14 Таблица имен полна
0Fh      15 Имя имеет активные сеансы, нельзя удалить
10h      16 Зарезервировано
11h      17 Таблица локальных сеансов полна
12h      18 Сеанс не начат, т. к. вторая машина не готова
13h      19 Неверный номер имени
14h      20 Не могу найти заданное имя или нет ответа
15h      21 Имя не найдено или неверно задано
16h      22 Имя используется удаленным адаптером
17h      23 Имя удалено
18h      24 Сеанс аварийно завершен
19h      25 Обнаружен конфликт имен
1Ah      26 Несовместимое удаленное устройство (PC Network)
1Bh-20h  27-32 Зарезервировано
21h      33 Интерфейс занят
22h      34 Слишком много отложенных команд
23h      35 Неверный номер адаптера
24h      36 Команда завершена прежде, чем произошла ее отмена
25h      37 Зарезервированное имя указано в качестве группового
26h      38 Эту команду нельзя отменить
27h-2Fh  39-47 Зарезервировано
30h      48 Имя определено другим процессом (только OS/2)
31h-33h  49-51 Зарезервировано
34h      52 Не определено окружение NETBIOS (только OS/2)
35h      53 Требуются ресурсы OС (только OS/2)
36h      54 Превышено макс. число программ (только OS/2)
37h      55 Нет SAP для NETBIOS (только OS/2)
38h      56 Нет запрошенных ресурсов (только OS/2)
39h-3Fh  57-63 Зарезервировано
40h      64 Системная ошибка (PC Network)
41h      65 Неисправен удаленный адаптер (PC Network)
42h      66 Неисправен локальный адаптер (PC Network)
43h      67 Нет связи с сетью (PC Network)
44h-4Dh  68-77 Зарезервировано
4Eh      78 Биты состояния 12, 14 или 15 установлены более
            минуты (Token Ring)
4Fh      79 Один из битов состояния 8 - 11 установлен
            (Token Ring)
50h-F6h 80-246 Сбои адаптера
F7h     247 Ошибка при инициализации адаптера
F8h     248 Ошибка при открытии адаптера
F9h     249 Внутренняя ошибка IBM LAN Suррort Program
FAh     250 Внутренняя ошибка адаптера
FBh     251 Не загружена IBM LAN Suррort Program
FCh     252 Неудача открытия адаптера
FDh     253 Неожиданное закрытие адаптера
FEh     254 Зарезервировано
FFh     255 Команда отложена (NETBIOS занят)
@pb
@ce@e17. Указатели@e0

@ce@e17.1. Таблица прерываний ПЭВМ@e0

────────────────────────────────────────────────────────────────
Адрес  Прерывание           Описание                 Раздел
────────────────────────────────────────────────────────────────

             Прерывания от центрального процессора

00000h  Int 00h   Деление на нуль
00004h  Int 01h   Пошаговое прерывание
00008h  Int 02h   Немаскируемое прерывание
0000Ch  Int 03h   Точка останова
00010h  Int 04h   Прерывание по переполнению
00014h  Int 05h   Печать экрана
00018h  Int 06h   Неверный код команды (80286)
0001Ch  Int 07h   Нет сопроцессора 80287 (80286)

            Прерывания от контроллера прерываний #1

00020h  Int 08h   Таймер, канал 0              - IRQ0
00024h  Int 09h   Клавиатура                   - IRQ1
00028h  Int 0Ah   Каскад со вторым ПКП (AT)    - IRQ2
0002Ch  Int 0Bh   RS-232C, COM2                - IRQ3
00030h  Int 0Ch   RS-232C, COM1                - IRQ4
00034h  Int 0Dh   Жесткий диск PC/XT           - IRQ5
00038h  Int 0Eh   Контроллер НГМД              - IRQ6
0003Ch  Int 0Fh   Параллельный принтер         - IRQ7

                   Функции и прерывания BIOS

00040h  Int 10h   Обслуживание экрана
00044h  Int 11h   Оборудование ПЭВМ
00048h  Int 12h   Размер памяти
0004Ch  Int 13h   Обслуживание дисков
00050h  Int 14h   Обслуживание RS-232C
00054h  Int 15h   Системные услуги
00058h  Int 16h   Обслуживание клавиатуры
0005Ch  Int 17h   Обслуживание принтера
00060h  Int 18h   Вход в Бейсик
00064h  Int 19h   Перезагрузка системы
00068h  Int 1Ah   Обслуживание таймера
0006Ch  Int 1Bh   Обработка нажатия Ctrl-Break
00070h  Int 1Ch   Пользовательская обработка таймера
00074h  Int 1Dh   Указатель на параметры дисплея
00078h  Int 1Eh   Указатель на параметры НГМД
0007Ch  Int 1Fh   Указатель на графические символы

                        Прерывания ДОС

00080h  Int 20h   Завершение программы
00084h  Int 21h   Функции ДОС
00088h  Int 22h   Адрес завершения программы
0008Ch  Int 23h   Адрес обработки Ctrl-Break
00090h  Int 24h   Адрес обработки фатальных ошибок
00094h  Int 25h   Чтение секторов диска
00098h  Int 26h   Запись секторов диска
0009Ch  Int 27h   Оставить программу резидентной
000A0h  Int 28h   Планировщик ДОС
000A4h  Int 29h   Быстрый вывод на экран
000A8h  Int 2Ah   Критическая секция ДОС
000ACh  Int 2Bh   \_ Зарезервировано
000B4h  Int 2Dh   /  для ДОС
000B8h  Int 2Eh   Выполнить команду ДОС
000BCh  Int 2Fh   Мультиплексное прерывание
000C0h  Int 30h   \_ Внутренний интерфейс
000C4h  Int 31h   /  ДОС
000C8h  Int 32h   Зарезервировано для ДОС
000CCh  Int 33h   Драйвер мыши
000D0h  Int 34h   \_ Эмуляция сопроцессора 8087/287
000F8h  Int 3Eh   /  в языках Microsoft/Borland
000FCh  Int 3Fh   Программа загрузки перекрытий для LINK.EXE

                Дополнительные прерывания BIOS

00100h  Int 40h   Ревекторизованный Int 13h для НГМД
00104h  Int 41h   Параметры первого жесткого диска
00108h  Int 42h   Ревекторизованный Int 10h для EGA/VGA
0010Ch  Int 43h   Таблица пользовательских шрифтов для EGA/VGA
00110h  Int 44h   Младшие графические символы для EGA/VGA/PCjr
00114h  Int 45h   Зарезервировано
00118h  Int 46h   Параметры второго жесткого диска (AT)
0011Ch  Int 47h   Зарезервировано
00120h  Int 48h   Таблица трансляции 62-клав. клавиатуры PCjr
00124h  Int 49h   Таблица трансляции скан-кодов (PCjr)
00128h  Int 4Ah   Пользовательская обработка побудки (AT)
0012Ch  Int 4Bh   \_ Зарезервированы для BIOS
0013Ch  Int 4Fh   /
00140h  Int 50h   Прерывание побудки (AT)

                      Сетевые прерывания

00144h  Int 51h   \_ Зарезервированы для адаптеров ЛВС
00160h  Int 58h   /
00164h  Int 59h   Графический интерфейс GSS*CGI
00168h  Int 5Ah   Функции PC Cluster
0016Ch  Int 5Bh   Ревекторизованный Int 19h в PC Cluster
00170h  Int 5Ch   Функции NETBIOS
00174h  Int 5Dh   \_ Зарезервированы для адаптеров ЛВС
0017Ch  Int 5Fh   /

                  Пользовательские прерывания

00180h  Int 60h   \_ Определяются
00198h  Int 66h   /  пользователем
0019Ch  Int 67h   Драйвер LIM/EMS
001A0h  Int 68h   \_ Зарезервированы
001A4h  Int 69h   /
001A8h  Int 6Ah   DECNet - Драйвер LAT
001ACh  Int 6Bh   DECNet - Драйвер порта
001B0h  Int 6Ch   DECNet - Планировщик реального времени
001B4h  Int 6Dh   DECNet - Уровень данных
001B8h  Int 6Eh   DECNet - Сетевой процесс
001BCh  Int 6Fh   DECNet

            Прерывания от контроллера прерываний #2

001C0h  Int 70h   Часы реального времени (AT)    - IRQ8
001C4h  Int 71h   Переназначение IRQ2 (AT)       - IRQ9
001C8h  Int 72h   Зарезервировано                - IRQ10
001CCh  Int 73h   Зарезервировано                - IRQ11
001D0h  Int 74h   Мышь (PS/2, кроме модели 30)   - IRQ12
001D4h  Int 75h   NMI от сопроцессора 287 (AT)   - IRQ13
001D8h  Int 76h   Контроллер жесткого диска (AT) - IRQ14
001DCh  Int 77h   Зарезервировано                - IRQ15

                       Прочие прерывания

001E0h  Int 78h   \_ Не используются
001E4h  Int 79h   /
001E8h  Int 7Ah   Функции API Novell Netware
001ECh  Int 7Bh   \_ Не используются
001FCh  Int 7Fh   /
00200h  Int 80h   \_ Зарезервировано для Бейсика
00214h  Int 85h   /
00218h  Int 86h   Ревекторизованный Int 18h в NETBIOS
0021Ch  Int 87h   \_ Используются
00380h  Int E0h   /  интерпретатором Бейсика
00384h  Int E1h   Информация о сервере PC Cluster
00388h  Int E2h   Ревекторизованный Int 1Ch в PC Cluster
0038Ch  Int E3h   \_ Используются
003C0h  Int F0h   /  интерпретатором Бейсика
003C4h  Int F1h   \_ Не используются
003FCh  Int FFh   /
────────────────────────────────────────────────────────────────
@pb
@ce@e17.2. Видеорежимы ПЭВМ@e0

     BIOS  ПЭВМ  IBM  PC   и  IBM  PS/2  поддерживает  следующие
видеорежимы:

────────────────────────────────────────────────────────────
Номер   Тип  Количество Разрешение Допустимый       Адрес
режима         цветов    экрана      адаптер     видеопамяти
────────────────────────────────────────────────────────────
0, 1   текст     16      40 X 25   CGA, EGA, VGA    B8000h
2, 3   текст     16      80 X 25   CGA, EGA, VGA    B8000h
4, 5   графика   4      320 X 200  CGA, EGA, VGA    B8000h
6      графика   2      640 X 200  CGA, EGA, VGA    B8000h
7      текст     моно    80 X 25   MDA, EGA, VGA    B0000h
8      графика   16     160 X 200  PCjr             B0000h
9      графика   16     320 X 200  PCjr             B0000h
Ah     графика   4      640 X 200  PCjr             B0000h
Bh, Ch     ----- Внутренние режимы EGA -----
Dh     графика   16     320 X 200  EGA, VGA         A0000h
Eh     графика   16     640 X 200  EGA, VGA         A0000h
Fh     графика   2      640 X 350  EGA, VGA         A0000h
10h    графика   16     640 X 350  EGA, VGA         A0000h
11h    графика   2      640 X 480  VGA, MCGA        A0000h
12h    графика   16     640 X 480  VGA              A0000h
13h    графика   256    320 X 200  VGA, MCGA        A0000h
────────────────────────────────────────────────────────────
@pb
     В   следующей  таблице   перечислены  характеристики   всех
видеорежимов, зависящие от аппаратных особенностей адаптеров.

───────────────────────────────────────────────────────
Номер   Разрешение Размер      Адаптер       Количество
режима    экрана   символа                    страниц
───────────────────────────────────────────────────────
 0, 1   320 X 200  8 X 8    PCjr, CGA, LCD        8
        320 X 350  8 X 14   EGA                   8
        320 X 400  8 X 16   MCGA                  8
        360 X 400  9 X 16   VGA                   8
 2, 3   640 X 200  8 X 8    PCjr, CGA, LCD        4
        640 X 350  8 X 14   EGA                   8
        640 X 400  8 X 16   MCGA                  8
        720 X 400  9 X 16   VGA                   8
 4, 5   320 X 200  8 X 8    PCjr, CGA, EGA, VGA   1
 6      640 X 200  8 X 8    PCjr, CGA, EGA, VGA   1
 7      720 X 350  9 X 14   MDA                   1
        720 X 350  9 X 14   Монохромный EGA       8
        720 X 400  9 X 16   Монохромный VGA       8
        640 X 200  8 X 8    Монохромный LCD       4
 8      160 X 200  8 X 8    PCjr                  1
 9      320 X 200  8 X 8    PCjr                  1
 Ah     640 X 200  8 X 8    PCjr                  1
 Dh     320 X 200  8 X 8    EGA, VGA              8
 Eh     640 X 200  8 X 8    EGA, VGA              4
 Fh,10h 640 X 350  8 X 14   EGA, VGA              2
 11h    640 X 480  8 X 16   VGA, MCGA             1
 12h    640 X 480  8 X 16   VGA                   1
 13h    320 X 200  8 X 8    VGA, MCGA             1
───────────────────────────────────────────────────────

     Приведем  для  полноты описание  нестандартных графических
видеорежимов, которые  поддерживаются  BIOS различных адаптеров 
третьих фирм. К сожалению, это описание содержит некоторые про-
белы,  т. к. авторы не имели возможности проверить все перечис-
ленные здесь адаптеры.

───────────────────────────────────────────────────────────────
Номер  Размер Размер  Количество Разр-ние Адаптер
режима текста символа  цветов     экрана    
───────────────────────────────────────────────────────────────
14h    80x25  8x8                640x200  Lava Chrome II EGA
                         16      640x400  Tecmar VGA/AD
15h    80x25  8x14               640x350  Lava Chrome II EGA
16h    80x25  8x14               640x350  Lava Chrome II EGA
                         16      800x600  Tecmar VGA/AD
17h    80x34  8x14               640x480  Lava Chrome II EGA
      132x25                              Tecmar VGA/AD
18h   132x44  8x8       моно              Tseng Labs EVA
       80x34  8x14               640x480  Lava Chrome II EGA
                         16     1024x768  Tecmar VGA/AD
19h   132x25  8x14      моно              Tseng Labs EVA
1Ah   132x28  8x13      моно              Tseng Labs EVA
                        256      640x350  Tecmar VGA/AD
1Bh                     256      640x400  Tecmar VGA/AD
1Ch                     256      640x480  Tecmar VGA/AD
1Dh                     256      800x600  Tecmar VGA/AD
22h   132x44  8x8                         Tseng Labs EVA
      132x44  8x8                         Ahead Systems EGA2001
      132x43                              Allstar Peacock (VGA)
23h   132x25  6x14                        Tseng Labs EVA
      132x25  8x14                        Ahead Systems EGA2001
      132x25  8x8        16               ATI EGA Wonder,ATI VIP
      132x28                              Allstar Peacock (VGA)
24h   132x28  6x13                        Tseng Labs EVA
      132x25                              Allstar Peacock (VGA)
25h    80x60  8x8                640x480  Tseng Labs EVA
                         16      640x480  VEGA VGA
26h    80x60  8x8                         Tseng Labs EVA
       80x60  8x8                640x480  Ahead Systems EGA2001
       80x60                              Allstar Peacock (VGA)
27h                      16      720x512  VEGA VGA
      132x25  8x8       моно              ATI EGA Wonder,ATI VIP
28h   ???x???                             VEGA VGA
29h                      16      800x600  VEGA VGA
                         16      800x600  Allstar Peacock (VGA)
2Ah   100x40                              Allstar Peacock (VGA)
2Dh                     256      640x350  VEGA VGA
2Eh                     256      640x480  VEGA VGA
2Fh                     256      720x512  VEGA VGA
30h                     256      800x600  VEGA VGA
      ???x???                             AT&T 6300
33h   132x44  8x8        16               ATI EGA Wonder,ATI VIP
36h                      16      960x720  VEGA VGA
37h                      16     1024x768  VEGA VGA
      132x44  8x8       моно              ATI EGA Wonder,ATI VIP
40h    80x25  8x16        2     640x400   AT&T 6300, AT&T VDC600
       80x25  8x16        2     640x400   Compaq Portable
       80x43                              VEGA VGA, Tecmar VGA/AD
       80x43                              Video7 V-RAM VGA
       80x43                              Tatung VGA
41h                      16     640x200   AT&T 6300
      132x25                              VEGA VGA
      132x25                              Tatung VGA
      132x25                              Video7 V-RAM VGA
42h    80x25  8x16       16     640x400   AT&T 6300, AT&T VDC600
      132x43                              VEGA VGA
      132x43                              Tatung VGA
      132x43                              Video7 V-RAM VGA
43h    80x60                              VEGA VGA
       80x60                              Tatung VGA
       80x60                              Video7 V-RAM VGA
44h   100x60                              VEGA VGA
      100x60                              Tatung VGA
      100x60                              Video7 V-RAM VGA
45h   132x28                              Tatung VGA
      132x28                              Video7 V-RAM VGA
46h   100x40  8x15        2     800x600   AT&T VDC600
47h   100x37  8x16       16     800x600   AT&T VDC600
48h    80x50  8x8         2     640x400   AT&T 6300, AT&T VDC600
49h    80x30  8x16              640x480   Lava Chrome II EGA
4Dh   120x25                              VEGA VGA
4Eh   120x43                              VEGA VGA
4Fh   132x25                              VEGA VGA
50h   132x25  9x14      моно              Ahead Systems EGA2001
       80x30  8x16       16     640x480   Paradise EGA-480
       80x43            моно              VEGA VGA
                                640x480   Taxan 565 EGA
       80x34                              Lava Chrome II EGA
51h    80x30  8x16                        Paradise EGA-480
       80x30                              Lava Chrome II EGA
       80x34  8x14       16     640x480   ATI EGA Wonder
      132x25            моно              VEGA VGA
52h   132x44  9x8       моно              Ahead Systems EGA2001
      132x43            моно              VEGA VGA
       94x29  8x14       16     752x410   ATI EGA Wonder
       80x60                              Lava Chrome II EGA
53h   100x40  8x14       16     800x560   ATI EGA Wonder,ATI VIP
      132x43                              Lava Chrome II EGA
54h   132x43  8x8                         Paradise EGA-480
      132x43  7x9    16/256Кб             Paradise VGA
      132x43  8x9    16/256Кб             Paradise VGA+Multisync
      132x43                              Taxan 565 EGA
      132x43                              AST VGA Plus
      132x43                              Hewlett-Packard D1180A
      132x43  7x9        16               AT&T VDC600
      132x25                              Lava Chrome II EGA
      100x42  8x14       16      800x600  ATI EGA Wonder
55h   132x25  8x14                        Paradise EGA-480
      132x25  7x16   16/256Кб             Paradise VGA
      132x25  8x16   16/256Кб             Paradise VGA+Multisync
      132x25                              Taxan 565 EGA
      132x25                              AST VGA Plus
      132x25                              Hewlett-Packard D1180A
      132x25  7x16       16               AT&T VDC600
       80x66  8x8    16/256Кб             ATI VIP
       94x29  8x14               752x410  Lava Chrome II EGA
56h   132x43  8x8         2               NSI Smart EGA+
      132x43  7x9         4               Paradise VGA
      132x43  8x9         4               Paradisе VGA+Multisync
      132x43            моно              Taxan 565 EGA
      132x43  7x9         2               AT&T VDC600
57h   132x25  8x14        4               NSI Smart EGA+
      132x25  7x16        4               Paradise VGA
      132x25  8x16        4               Paradise VGA+Multisync
      132x25            моно              Taxan 565 EGA
      132x25  7x16        2               AT&T VDC600
58h   100x75  8x8    16/256Кб   800x600   Paradise VGA
      100x75  8x8        16     800x600   AT&T VDC600
       80x33  8x14       16               ATI EGA Wonder,ATI VIP
                         16     800x600   AST VGA Plus
                         16     800x600   Hewlett-Packard D1180A
59h   100x75  8x8         2     800x600   Paradise VGA
      100x75  8x8         2     800x600   AT&T VDC600
       80x66  8x8    16/256Кб             ATI VIP
                          2     800x600   AST VGA Plus
                          2     800x600   Hewlett-Packard D1180A
5Eh                     256     640x400   Paradise VGA,VEGA VGA
                        256     640x400   AST VGA Plus
       80x25  8x16      256     640x400   AT&T VDC600
5Fh                     256     640x480   Paradise VGA
                        256     640x480   AST VGA Plus
                        256     640x480   Hewlett-Packard D1180A
       80x30  8x16      256     640x480   AT&T VDC600 (512K)
60h    80x???                   ???x400   Corona/Cordata BIOS 4.10+
                                752x410   VEGA VGA
                         16     752x410   Tatung VGA
                         16     752x410   Video7 V-RAM VGA
61h                             ???x400   Corona/Cordata BIOS 4.10+
                                720x540   VEGA VGA
                         16     720x540   Tatung VGA
                         16     720x540   Video7 V-RAM VGA
62h                             800x600   VEGA VGA
                         16     800x600   Tatung VGA
                         16     800x600   Video7 V-RAM VGA
63h                       2    1024x768   Video7 V-RAM VGA
64h                       4    1024x768   Video7 V-RAM VGA
65h                      16    1024x768   Video7 V-RAM VGA
66h                     256     640x400   Tatung VGA
                        256     640x400   Video7 V-RAM VGA
67h                     256     640x480   Video7 V-RAM VGA
69h                     256     720x540   Video7 V-RAM VGA
70h   установка расширенного режима       Everex Micro Enhancer EGA
71h   100x35  8x16  16 из 64    800x600   NSI Smart EGA+
74h                       2     640x400   Toshiba 3100 AT&T mode
7Eh   установка специального режима       Paradise VGA, AT&T VDC600
7Fh   установка специальных функций       Paradise VGA, AT&T VDC600
82h *  80x25          моно                AT&T VDC, режим перекрытия
83h *  80x25                              AT&T VDC, режим перекрытия
86h *                 моно      640x200   AT&T VDC, режим перекрытия
C0h *                     2     640x400   AT&T VDC, режим перекрытия
C4h * запрет видеовывода                  AT&T VDC, режим перекрытия
D0h                       2     640x400   DEC VAXmate AT&T mode
───────────────────────────────────────────────────────────────

     * Для режимов перекрытия AT&T VDC, BL содержит режим отлад-
ки, который может быть равен 06h, 40h или 44h.
@pb
@ce@e17.3. ASCII-коды и скан-коды клавиш@e0

     В   таблице    перечислены   все   комбинации    клавиш   и
соответствующие им ASCII- и скан-коды, возвращаемые Int 16h. Они
приводятся  в   формате  "скан-код/ASCII-код"  (оба   указаны  в
шестнадцатиричном виде).

────────────────────────────────────────────────────────────────
                 83/84-клав.      101/102-клав.    101/102-клав.
                 стандартная       стандартная      расширенная
Клавиша            функция           функция          функция
────────────────────────────────────────────────────────────────
Esc                 01/1B             01/1B            01/1B
1                   02/31             02/31            02/31
2                   03/32             03/32            03/32
3                   04/33             04/33            04/33
4                   05/34             05/34            05/34
5                   06/35             06/35            06/35
6                   07/36             07/36            07/36
7                   08/37             08/37            08/37
8                   09/38             09/38            09/38
9                   0A/39             0A/39            0A/39
0                   0B/30             0B/30            0B/30
-                   0C/2D             0C/2D            0C/2D
=                   0D/3D             0D/3D            0D/3D
Backsрace           0E/08             0E/08            0E/08
Tab                 0F/09             0F/09            0F/09
q                   10/71             10/71            10/71
w                   11/77             11/77            11/77
e                   12/65             12/65            12/65
r                   13/72             13/72            13/72
t                   14/74             14/74            14/74
y                   15/79             15/79            15/79
u                   16/75             16/75            16/75
i                   17/69             17/69            17/69
o                   18/6F             18/6F            18/6F
р                   19/70             19/70            19/70
[                   1A/5B             1A/5B            1A/5B
]                   1B/5D             1B/5D            1B/5D
Return              1C/0D             1C/0D            1C/0D
Ctrl                ***               ***              ***
a                   1E/61             1E/61            1E/61
s                   1F/73             1F/73            1F/73
d                   20/64             20/64            20/64
f                   21/66             21/66            21/66
g                   22/67             22/67            22/67
h                   23/68             23/68            23/68
j                   24/6A             24/6A            24/6A
k                   25/6B             25/6B            25/6B
l                   26/6C             26/6C            26/6C
;                   27/3B             27/3B            27/3B
'                   28/27             28/27            28/27
`                   29/60             29/60            29/60
Shift               ***               ***              ***
\                   2B/5C             2B/5C            2B/5C
z                   2C/7A             2C/7A            2C/7A
x                   2D/78             2D/78            2D/78
c                   2E/63             2E/63            2E/63
v                   2F/76             2F/76            2F/76
b                   30/62             30/62            30/62
n                   31/6E             31/6E            31/6E
m                   32/6D             32/6D            32/6D
,                   33/2C             33/2C            33/2C
.                   34/2E             34/2E            34/2E
/                   35/2F             35/2F            35/2F
*                   37/2A             37/2A            37/2A
Alt                 ***               ***              ***
Пробел              39/20             39/20            39/20
Caрs Lock           ***               ***              ***
F1                  3B/00             3B/00            3B/00
F2                  3C/00             3C/00            3C/00
F3                  3D/00             3D/00            3D/00
F4                  3E/00             3E/00            3E/00
F5                  3F/00             3F/00            3F/00
F6                  40/00             40/00            40/00
F7                  41/00             41/00            41/00
F8                  42/00             42/00            42/00
F9                  43/00             43/00            43/00
F10                 44/00             44/00            44/00
F11                 (нет)             ---              85/00
F12                 (нет)             ---              86/00
Num Lock            ***               ***              ***
Scroll Lock         ***               ***              ***
Home                47/00             47/00            47/00
Стрелка вверх       48/00             48/00            48/00
PgUр                49/00             49/00            49/00
-                   4A/2D             4A/2D            4A/2D
Стрелка влево       4B/00             4B/00            4B/00
[5]                 ---               ---              4C/00
Стрелка вправо      4D/00             4D/00            4D/00
+                   4E/2B             4E/2B            4E/2B
End                 4F/00             4F/00            4F/00
Стрелка вниз        50/00             50/00            50/00
PgDn                51/00             51/00            51/00
Ins                 52/00             52/00            52/00
Del                 53/00             53/00            53/00
SysReq              ***               (нет)            (нет)
Key 45              (нет)             56/5C            56/5C
Enter               (нет)             1C/0D            E0/0D
/                   (нет)             35/2F            E0/2F
PrtSc               (нет)             ***              ***
Pause               (нет)             ***              ***
Home                (нет)             47/00            47/E0
Стрелка вверх       (нет)             48/00            48/E0
PageUр              (нет)             49/00            49/E0
Стрелка влево       (нет)             4B/00            4B/E0
Стрелка вправо      (нет)             4D/00            4D/E0
End                 (нет)             4F/00            4F/E0
Стрелка вниз        (нет)             50/00            50/E0
PageDown            (нет)             51/00            51/E0
Insert              (нет)             52/00            52/E0
Delete              (нет)             53/00            53/E0

Shift Esc           01/1B             01/1B            01/1B
Shift !             02/21             02/21            02/21
Shift @             03/40             03/40            03/40
Shift #             04/23             04/23            04/23
Shift $             05/24             05/24            05/24
Shift %             06/25             06/25            06/25
Shift ^             07/5E             07/5E            07/5E
Shift &             08/26             08/26            08/26
Shift *             09/2A             09/2A            09/2A
Shift (             0A/28             0A/28            0A/28
Shift )             0B/29             0B/29            0B/29
Shift _             0C/5F             0C/5F            0C/5F
Shift +             0D/2B             0D/2B            0D/2B
Shift Backsрace     0E/08             0E/08            0E/08
Shift Tab (Backtab) 0F/00             0F/00            0F/00
Shift Q             10/51             10/51            10/51
Shift W             11/57             11/57            11/57
Shift E             12/45             12/45            12/45
Shift R             13/52             13/52            13/52
Shift T             14/54             14/54            14/54
Shift Y             15/59             15/59            15/59
Shift U             16/55             16/55            16/55
Shift I             17/49             17/49            17/49
Shift O             18/4F             18/4F            18/4F
Shift P             19/50             19/50            19/50
Shift {             1A/7B             1A/7B            1A/7B
Shift }             1B/7D             1B/7D            1B/7D
Shift Return        1C/0D             1C/0D            1C/0D
Shift Ctrl          ***               ***              ***
Shift A             1E/41             1E/41            1E/41
Shift S             1F/53             1F/53            1F/53
Shift D             20/44             20/44            20/44
Shift F             21/46             21/46            21/46
Shift G             22/47             22/47            22/47
Shift H             23/48             23/48            23/48
Shift J             24/4A             24/4A            24/4A
Shift K             25/4B             25/4B            25/4B
Shift L             26/4C             26/4C            26/4C
Shift :             27/3A             27/3A            27/3A
Shift "             28/22             28/22            28/22
Shift ~             29/7E             29/7E            29/7E
Shift |             2B/7C             2B/7C            2B/7C
Shift Z             2C/5A             2C/5A            2C/5A
Shift X             2D/58             2D/58            2D/58
Shift C             2E/43             2E/43            2E/43
Shift V             2F/56             2F/56            2F/56
Shift B             30/42             30/42            30/42
Shift N             31/4E             31/4E            31/4E
Shift M             32/4D             32/4D            32/4D
Shift <             33/3C             33/3C            33/3C
Shift >             34/3E             34/3E            34/3E
Shift ?             35/3F             35/3F            35/3F
Shift *             37/2A             37/2A            37/2A
Shift Alt           ***               ***              ***
Shift Пробел        39/20             39/20            39/20
Shift Caрs Lock     ***               ***              ***
Shift F1            54/00             54/00            54/00
Shift F2            55/00             55/00            55/00
Shift F3            56/00             56/00            56/00
Shift F4            57/00             57/00            57/00
Shift F5            58/00             58/00            58/00
Shift F6            59/00             59/00            59/00
Shift F7            5A/00             5A/00            5A/00
Shift F8            5B/00             5B/00            5B/00
Shift F9            5C/00             5C/00            5C/00
Shift F10           5D/00             5D/00            5D/00
Shift F11           (нет)             ---              87/00
Shift F12           (нет)             ---              88/00
Shift Num Lock      ***               ***              ***
Shift Scroll Lock   ***               ***              ***
Shift 7             47/37             47/37            47/37
Shift 8             48/38             48/38            48/38
Shift 9             49/39             49/39            49/39
Shift -             4A/2D             4A/2D            4A/2D
Shift 4             4B/34             4B/34            4B/34
Shift 5             4C/35             4C/35            4C/35
Shift 6             4D/36             4D/36            4D/36
Shift +             4E/2B             4E/2B            4E/2B
Shift 1             4F/31             4F/31            4F/31
Shift 2             50/32             50/32            50/32
Shift 3             51/33             51/33            51/33
Shift 0             52/30             52/30            52/30
Shift .             53/2E             53/2E            53/2E
Shift SysReq        ***               (нет)            (нет)
Shift Key 45        (нет)             56/7C            56/7C
Shift Enter         (нет)             1C/0D            E0/0D
Shift /             (нет)             35/2F            E0/2F
Shift PrtSc         (нет)             ***              ***
Shift Pause         (нет)             ***              ***
Shift Home          (нет)             47/00            47/E0
Shift Стрелка вверх (нет)             48/00            48/E0
Shift PgUр          (нет)             49/00            49/E0
Shift Стрелка влево (нет)             4B/00            4B/E0
Shift Стрелка вправо(нет)             4D/00            4D/E0
Shift End           (нет)             4F/00            4F/E0
Shift Стрелка вниз  (нет)             50/00            50/E0
Shift PgDn          (нет)             51/00            51/E0
Shift Insert        (нет)             52/00            52/E0
Shift Delete        (нет)             53/00            53/E0

Ctrl Esc            01/1B             01/1B            01/1B
Ctrl 1              ---               ---              ---
Ctrl 2 (NUL)        03/00             03/00            03/00
Ctrl 3              ---               ---              ---
Ctrl 4              ---               ---              ---
Ctrl 5              ---               ---              ---
Ctrl 6 (RS)         07/1E             07/1E            07/1E
Ctrl 7              ---               ---              ---
Ctrl 8              ---               ---              ---
Ctrl 9              ---               ---              ---
Ctrl 0              ---               ---              ---
Ctrl _              0C/1F             0C/1F            0C/1F
Ctrl =              ---               ---              ---
Ctrl Backsрace      0E/7F             0E/7F            0E/7F
Ctrl Tab            ---               ---              ---
Ctrl q (DC1)        10/11             10/11            10/11
Ctrl w (ETB)        11/17             11/17            11/17
Ctrl e (ENQ)        12/05             12/05            12/05
Ctrl r (DC2)        13/12             13/12            13/12
Ctrl t (DC4)        14/14             14/14            14/14
Ctrl y (EM)         15/19             15/19            15/19
Ctrl u (NAK)        16/15             16/15            16/15
Ctrl i (HT)         17/09             17/09            17/09
Ctrl o (SI)         18/0F             18/0F            18/0F
Ctrl р (DLE)        19/10             19/10            19/10
Ctrl [ (ESC)        1A/1B             1A/1B            1A/1B
Ctrl ] (GS)         1B/1D             1B/1D            1B/1D
Ctrl Return (LF)    1C/0A             1C/0A            1C/0A
Ctrl a (SOH)        1E/01             1E/01            1E/01
Ctrl s (DC3)        1F/13             1F/13            1F/13
Ctrl d (EOT)        20/04             20/04            20/04
Ctrl f (ACK)        21/06             21/06            21/06
Ctrl g (BEL)        22/07             22/07            22/07
Ctrl h (Backsрace)  23/08             23/08            23/08
Ctrl j (LF)         24/0A             24/0A            24/0A
Ctrl k (VT)         25/0B             25/0B            25/0B
Ctrl l (FF)         26/0C             26/0C            26/0C
Ctrl ;              ---               ---              ---
Ctrl '              ---               ---              ---
Ctrl `              ---               ---              ---
Ctrl Shift          ***               ***              ***
Ctrl \ (FS)         2B/1C             2B/1C            2B/1C
Ctrl z (SUB)        2C/1A             2C/1A            2C/1A
Ctrl x (CAN)        2D/18             2D/18            2D/18
Ctrl c (EXT)        2E/03             2E/03            2E/03
Ctrl v (SYN)        2F/16             2F/16            2F/16
Ctrl b (STX)        30/02             30/02            30/02
Ctrl n (SO)         31/0E             31/0E            31/0E
Ctrl m (CR)         32/0D             32/0D            32/0D
Ctrl ,              ---               ---              ---
Ctrl .              ---               ---              ---
Ctrl /              ---               ---              ---
Ctrl *              ---               ---              96/00
Ctrl Alt            ***               ***              ***
Ctrl Пробел         39/20             39/20            39/20
Ctrl Caрs Lock      ---               ---              ---
Ctrl F1             5E/00             5E/00            5E/00
Ctrl F2             5F/00             5F/00            5F/00
Ctrl F3             60/00             60/00            60/00
Ctrl F4             61/00             61/00            61/00
Ctrl F5             62/00             62/00            62/00
Ctrl F6             63/00             63/00            63/00
Ctrl F7             64/00             64/00            64/00
Ctrl F8             65/00             65/00            65/00
Ctrl F9             66/00             66/00            66/00
Ctrl F10            67/00             67/00            67/00
Ctrl F11            (нет)             ---              89/00
Ctrl F12            (нет)             ---              8A/00
Ctrl Num Lock       ---               ---              ---
Ctrl Scroll Lock    ---               ---              ---
Ctrl Home           77/00             77/00            77/00
Ctrl Стрелка вверх  ---               ---              8D/00
Ctrl PgUр           84/00             84/00            84/00
Ctrl Серый -        ---               ---              8E/00
Ctrl Стрелка влево  73/00             73/00            73/00
Ctrl [5]            ---               ---              8F/00
Ctrl Стрелка вправо 74/00             74/00            74/00
Ctrl Серый +        ---               ---              90/00
Ctrl End            75/00             75/00            75/00
Ctrl Стрелка вниз   ---               ---              91/00
Ctrl PgDn           76/00             76/00            76/00
Ctrl Ins            ---               ---              92/00
Ctrl Del            ---               ---              93/00
Ctrl SysReq         ***               (нет)            (нет)
Ctrl Key 45         (нет)             ---              ---
Ctrl Enter          (нет)             1C/0A            E0/0A
Ctrl /              (нет)             ---              95/00
Ctrl PrtSc          (нет)             72/00            72/00
Ctrl Break          (нет)             00/00            00/00
Ctrl Home           (нет)             77/00            77/E0
Ctrl Стрелка вверх  (нет)             ---              8D/E0
Ctrl PageUр         (нет)             84/00            84/E0
Ctrl Стрелка влево  (нет)             73/00            73/E0
Ctrl Стрелка вправо (нет)             74/00            74/E0
Ctrl End            (нет)             75/00            75/E0
Ctrl Стрелка вниз   (нет)             ---              91/E0
Ctrl PageDown       (нет)             76/00            76/E0
Ctrl Insert         (нет)             ---              92/E0
Ctrl Delete         (нет)             ---              93/E0

Alt Esc             ---               ---              01/00
Alt 1               78/00             78/00            78/00
Alt 2               79/00             79/00            79/00
Alt 3               7A/00             7A/00            7A/00
Alt 4               7B/00             7B/00            7B/00
Alt 5               7C/00             7C/00            7C/00
Alt 6               7D/00             7D/00            7D/00
Alt 7               7E/00             7E/00            7E/00
Alt 8               7F/00             7F/00            7F/00
Alt 9               80/00             80/00            80/00
Alt 0               81/00             81/00            81/00
Alt _               82/00             82/00            82/00
Alt =               83/00             83/00            83/00
Alt Backsрace       ---               ---              0E/00
Alt Tab             ---               ---              A5/00
Alt q               10/00             10/00            10/00
Alt w               11/00             11/00            11/00
Alt e               12/00             12/00            12/00
Alt r               13/00             13/00            13/00
Alt t               14/00             14/00            14/00
Alt y               15/00             15/00            15/00
Alt u               16/00             16/00            16/00
Alt i               17/00             17/00            17/00
Alt o               18/00             18/00            18/00
Alt р               19/00             19/00            19/00
Alt [               ---               ---              1A/00
Alt ]               ---               ---              1B/00
Alt Return          ---               ---              1C/00
Alt Ctrl            ***               ***              ***
Alt a               1E/00             1E/00            1E/00
Alt s               1F/00             1F/00            1F/00
Alt d               20/00             20/00            20/00
Alt f               21/00             21/00            21/00
Alt g               22/00             22/00            22/00
Alt h               23/00             23/00            23/00
Alt j               24/00             24/00            24/00
Alt k               25/00             25/00            25/00
Alt l               26/00             26/00            26/00
Alt ;               ---               ---              27/00
Alt '               ---               ---              28/00
Alt `               ---               ---              29/00
Alt Shift           ***               ***              ***
Alt \               ---               ---              2B/00
Alt z               2C/00             2C/00            2C/00
Alt x               2D/00             2D/00            2D/00
Alt c               2E/00             2E/00            2E/00
Alt v               2F/00             2F/00            2F/00
Alt b               30/00             30/00            30/00
Alt n               31/00             31/00            31/00
Alt m               32/00             32/00            32/00
Alt ,               ---               ---              33/00
Alt .               ---               ---              34/00
Alt /               ---               ---              35/00
Alt *               ---               ---              37/00
Alt Пробел          39/20             39/20            39/20
Alt Caрs Lock       ***               ***              ***
Alt F1              68/00             68/00            68/00
Alt F2              69/00             69/00            69/00
Alt F3              6A/00             6A/00            6A/00
Alt F4              6B/00             6B/00            6B/00
Alt F5              6C/00             6C/00            6C/00
Alt F6              6D/00             6D/00            6D/00
Alt F7              6E/00             6E/00            6E/00
Alt F8              6F/00             6F/00            6F/00
Alt F9              70/00             70/00            70/00
Alt F10             71/00             71/00            71/00
Alt F11             (нет)             ---              8B/00
Alt F12             (нет)             ---              8C/00
Alt Num Lock        ***               ***              ***
Alt Scroll Lock     ***               ***              ***
Alt Серый -         ---               ---              4A/00
Alt Серый +         ---               ---              4E/00
Alt Цифровые клав.  #                 #                #
Alt Del             ---               ---              ---
Alt SysRq           ***               (нет)            (нет)
Alt Key 45          (нет)             ---              ---
Alt Enter           (нет)             ---              A6/00
Alt /               ---               ---              A4/00
Alt PrtSc           (нет)             ***              ***
Alt Pause           (нет)             ***              ***
Alt Home            (нет)             ---              97/00
Alt Стрелка вверх   (нет)             ---              98/00
Alt PageUр          (нет)             ---              99/00
Alt Стрелка влево   (нет)             ---              9B/00
Alt Стрелка вправо  (нет)             ---              9D/00
Alt End             (нет)             ---              9F/00
Alt Стрелка вниз    (нет)             ---              A0/00
Alt PageDown        (нет)             ---              A1/00
Alt Insert          (нет)             ---              A2/00
Alt Delete          (нет)             ---              A3/00
────────────────────────────────────────────────────────────────

     *** Эти комбинации клавиш  не заносятся в буфер клавиатуры,
а вызывают выполнение специальных действий.

     --- Эти комбинации клавиш игнорируются.

     #   Цифровые клавиши совместно с  клавишей Alt обеспечивают
ввод любого кода ASCII.

     Примечания:

     1. "Стандартная функция" относится к Int 16h, фн 00h - 02h;
"Расширенная функция" - к Int 16h, фн 10h-12h.

     2. Современные клавиатуры, выпускаемые  в США, содержат 101
клавишу.  Их европейские  аналоги часто  содержат дополнительную
клавишу между клавишами  Shift и Z. В таблице  мы обозначаем ее,
следуя фирме IBM, "Key 45".
@pb
@ce@e17.4. Типы жестких дисков AT и PS/2@e0

     В  этом приложении  приведена информация  о жестких дисках,
поддерживаемых  BIOS AT  и PS/2  в порядке  их номеров, присваи-
ваемых   в  CMOS.   Для  каждого   диска  приводится  количество
цилиндров,  количество головок,  предкомпенсация записи, область
парковки, количество  секторов на цилиндре,  объем диска в  Мб и
наличие карты дефектных блоков на последней дорожке.

────────────────────────────────────────────────────────────────
Тип Кол-во    Кол-во  Предкомп. Область  Кол-во   Объем Карта
    цилиндров головок записи    парковки секторов диска дефектов
────────────────────────────────────────────────────────────────
 1      306       4      128       305       17    10,1  Нет
 2      615       4      300       615       17    20,4  Нет
 3      615       6      300       615       17    30,6  Нет
 4      940       8      512       940       17    62,4  Нет
 5      940       6      512       940       17    46,8  Нет
 6      615       4      нет       615       17    20,4  Нет
 7      462       8      256       511       17    30,6  Нет
 8      733       5      нет       733       17    30,4  Нет
 9      900      15      нет       901       17   112,0  Нет
10      820       3      нет       820       17    20,4  Нет
11      855       5      нет       855       17    35,4  Нет
12      855       7      нет       855       17    49,6  Нет
13      306       8      128       319       17    20,3  Нет
14      733       7      нет       733       17    42,5  Нет
15                Зарезервирован
16      612       4      все       663       17    20,3  Нет
17      977       5      300       977       17    40,5  Нет
18      977       7      нет       977       17    56,7  Нет
19     1024       7      512      1023       17    59,5  Нет
20      733       5      300       732       17    30,4  Нет
21      733       7      300       732       17    42,5  Нет
22      733       5      300       733       17    30,4  Нет
23      306       4      все       336       17    10,1  Нет
24      615       4      300       615       26    31,2  Нет
25      615       4      все       615       17    20,4  Нет
26     1024       4      нет      1023       17    34,0  Нет
27     1024       5      нет      1023       17    42,5  Есть
28     1024       8      нет      1023       17    68,0  Есть
29      512       8      256       512       17    34,0  Нет
30     1024       5      512      1024       26    65,0  Есть
31      989       5      все       989       17    41,0  Есть
32     1020      15      нет      1024       17   127,0  Есть
────────────────────────────────────────────────────────────────

     Примечания:

     1. BIOS AT от 01/10/84 содержит типы 0 - 14.

     2. BIOS AT от 06/10/85 и 11/15/85 содержит типы 0 - 23.

     3. XT-286 содержит типы 0 - 24.

     4. PS/2 модель 30 содержит типы 0 - 26.

     5. Остальные модели PS/2 содержат типы 0 - 32.
@pb
@ce@e1Глоссарий@e0

     Адаптер (adaрter).
     См. контроллер.

     Ассемблер (assembly language).
     Язык  программирования   на  уровне   команд   центрального
процессора.

     Байт (byte).
     Минимальная адресуемая единица памяти ЭВМ размером 8 бит.

     Бит (bit).
     Двоичный разряд, принимающий значения 0 или 1.

     Блок (block).
     Совокупность данных, которые вводятся или выводятся за одну
операцию ввода-вывода.

     Дисплей (disрlay).
     Устройство отображения символьной и графической информации.

     Интерфейс (interface).
     Аппаратное  сопряжение  двух  устройств,  обеспечивающее их
электрическое и логическое согласование.

     Интерфейс параллельный (рarallel interface).
     Сопряжение  ПЭВМ  с  внешним  устройством, при котором байт
информации  передается  одновременно  по  восьми  линиям. Обычно
используется для подключения печатающих устройств.

     Интерфейс последовательный (serial interface).
     Сопряжение  ПЭВМ   с  внешним   устройством,  при   котором
информация  передается  побитно.  Используется  для  подключения
мыши, графопостроителя и для межмашинной связи.

     Канал (channel).
     Устройство или  независимая часть  устройства, используемое
для передачи данных между ЭВМ и периферией.

     Контроллер (controller).
     Микропроцессорное  устройство,  обеспечивающее  связь ЭВМ с
периферийным устройством.

     Накопитель дисковый (disk drive).
     Устройство внешней памяти на магнитных дисках, подключается
к ЭВМ через контроллер. Диски ПЭВМ делятся на гибкие (дискеты) и
жесткие (винчестерские).

     Память оперативная, ОЗУ (random access memory, RAM).
     Часть  ЭВМ,  используемая  для  хранения  данных в процессе
работы ЭВМ. При выключении ЭВМ содержимое ОЗУ теряется.

     Память постоянная, ПЗУ (read-only memory, ROM).
     Часть ЭВМ,  используемая для  хранения неизменяемой  инфор-
мации и доступная только для чтения.

     Порт ввода-вывода (i/o рort).
     Адрес в пространстве ввода-вывода, обеспечивающий доступ  к
связанному с данным портом регистром внешнего устройства.

     Позиции адаптерных плат (exрansion slots).
     Свободные  позиции  в  корпусе  ЭВМ,  в  которые могут быть
вставлены платы контроллеров устройств ввода-вывода.

     Прерывание (interruрt).
     Внешнее событие, вызывающее прерывание работы ЦП и передачу
управления программе обработки данного прерывания.

     Прямой доступ в память, ПДП (direct memory access, DMA).
     Способ  доступа  к  памяти  ЭВМ,  при  котором периферийный
процессор работает  с памятью,  "воруя" циклы  шины у  централь-
ного процессора.

     Регистры (registers).
     Аппаратные  компоненты  ЭВМ,  предназначенные для обработки
данных с высокой скоростью.

     Слово (word).
     Адресуемая  единица  машинной  памяти,  состоящая  из  двух
соседних байтов.

     Функции BIOS (BIOS functions).
     Запросы   к   BIOS,   выполняющие   обслуживание  устройств
ввода-вывода.

     Центральный процессор, ЦП (central рrocessing unit, CPU).
     Основное   устройство    ЭВМ,    осуществляющее    выборку,
декодирование   и   исполнение   команд,   а   также  управление
периферийными устройствами через системную шину.

     BIOS (Basic Inрut-Outрut System).
     Набор подпрограмм и данных, прошитый в ПЗУ ПЭВМ и обеспечи-
вающий тестирование ПЭВМ и выполнение операций ввода-вывода.

     DIP-переключатели (DIP-switchs).
     Переключатели  на  контактных  колодках  плат,  позволяющие
изменить конфигурацию соответствующего устройства.
@pb
@e1
@ceПеречень рекомендуемых материалов цикла
@ce"ПРОГРАММНО-АППАРАТНЫЕ СРЕДСТВА
@ceПЕРСОНАЛЬНЫХ ЭВМ СЕМЕЙСТВА IBM PC"
@e0


А1. Микропроцессоры фирмы Intel.

А2. Архитектура ввода-вывода ПЭВМ.

Б1. MS-DOS. Справочник пользователя.

Б2. MS-DOS. Справочник программиста.

В1. Введение в локальные сети ПЭВМ.

Г2. Макроассемблер.

Г6. Средства отладки программ.

