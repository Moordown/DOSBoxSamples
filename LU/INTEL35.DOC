.pb
     3.2. Система команд

     Команды МП 80386 подразделяются на следующие группы:

     - команды передачи данных;
     - ариметические операции;
     - логические операции;
     - команды работы со строками;
     - команды передачи управления;
     - системные команды.

     В приведенном  ниже описании команд  используются следующие
обозначения исключений,  которые могут возникать  при выполнении
команды:

     #UD       Int 06h   Неверный код команды
     #NM       Int 07h   Нет сопроцессора
     #DF       Int 08h   Двойное исключение
     #TS       Int 0Ah   Неверный TSS
     #NP       Int 0Bh   Сегмент или шлюз отсутствует
     #SS       Int 0Ch   Ошибка стека
     #GP       Int 0Dh   Общее нарушение защиты
     #PF       Int 0Eh   Ошибка страницы
     #MF       Int 10h   Ошибка сопроцессора

     В  скобках после  имени исключения  указывается код ошибки.
Например, #GP(0) означает общее нарушение защиты с кодом 0.

     3.2.1. Команды передачи данных

     3.2.1.1. Пересылка данных

     MOV  dst,src                       Флаги: не изменяются

     Действие: dst <- src

     Копирует  src  (байт,  слово  или  двойное  слово)  в  dst.
Возможны следующие режимы пересылки:

     - из регистра в регистр;
     - из непосредственного операнда в регистр;
     - из непосредственного операнда в память;
     - из памяти в регистр;
     - из регистра в память;
     - из регистра или памяти в сегментный регистр (кроме CS);
     - из сегментного регистра в регистр или память.

     Если  dst  является  сегментным  регистром, то производится
загрузка  данных  из  дескриптора.  При  этом  загрузка нулевого
селектора (0000h - 0003h) в DS или ES не вызывает исключения, но
первое же обращение к этому сегменту вызовет #GP(0).

     Если dst -  это SS, то до завершения  следующей команды все
прерывания  запрещаются (предполагается,  что это  будет команда
MOV eSP,x).

     Загрузка   сегментного   регистра   в   защищенном   режиме
сопровождается следующими проверками:

if dst = SS
     if селектор нулевой
          #GP(0);
     if индекс селектора вне границ таблицы дескрипторов
          #GP(селектор);
     if RPL селектора не равен CPL
          #GP(селектор);
     if это не сегмент данных, доступный для чтения
          #GP(селектор);
     if DPL дескриптора сегмента не равен CPL
          #GP(селектор);
     if сегмент отсутствует
          #NP(селектор);
     загрузить SS из дескриптора;
if dst = DS, ES, FS или GS
     if нулевой селектор
          загрузить селектор в регистр;
          сбросить бит правильности сегмента;
     else
          if индекс селектора вне границ таблицы дескрипторов
               #GP(селектор);
          if это не сегмент  данных или сегмент кодов, доступный
          для чтения
               #GP(селектор);
          if сегмент данных или неразделяемый сегмент кодов
               if max(RPL,CPL) > DPL сегмента
                  #GP(селектор);
          if сегмент отсутствует
               #NP(селектор);
          загрузить регистр из дескриптора;

     Исключения в защищенном режиме:

     #GP, #SS и #NP при загрузке сегментного регистра;
     #GP(0), если dst в сегменте только для чтения;
     #GP(0), если недопустимый  исполнительный адрес в сегментах
CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     Примеры:  MOV  BX,AX
               MOV  EBX,EAX
               MOV  AL,20h
               MOV  ES:[2],0FE00h
               MOV  DL,CS:[BX]
               MOV  DS:[SI],ЕAX
               MOV  DS,CX
               MOV  CX,CS

     3.2.1.2. Загрузка исполнительного адреса

     LEA  reg,src                      Флаги: не изменяются

     Действие: reg <- addr(src)

     Заносит в reg исполнительный адрес операнда src. Src должен
быть  ссылкой  к  памяти,  reg  -  16-или 32-разрядным регистром
общего   назначения.   При   загрузке   16-разрядного  адреса  в
32-разрядный  регистр старшие  биты адреса  заполняются знаковым
битом,  при загрузке  32-разрядного адреса  в 16-битовый регистр
берутся его младшие 16 бит.

     Примеры: LEA  DX,print_me
              LEA  EAX,table[BX]

     Исключения в защищенном режиме:

     #UD, если src - регистр.

     Исключения в реальном режиме:

     Int 06h, если src - регистр.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме.

     3.2.1.3. Обмен значениями

     XCHG  opr,reg                       Флаги: не изменяются

     Действие: opr <-> reg

     Производит  обмен значениями  между  opr  и reg.  Opr может
регистром  или   двойным  словом/словом/байтом  памяти,   reg  -
регистром. Примеры:

     XCHG  AX,SI
     LOCK  XCHG  mem,EDX

     Если  opr  является  обращением   к  памяти,  то  на  время
выполнения  команды шина  блокируется, даже  если перед командой
нет префикса LOCK.

     Исключения в защищенном режиме:

     #GP(0), если opr в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  opr  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.1.4. Загрузка указателей

     LDS  reg,src                       Флаги: не изменяются

     LES  reg,src                       Флаги: не изменяются

     LFS  reg,src                       Флаги: не изменяются

     LGS  reg,src                       Флаги: не изменяются

     LSS  reg,src                       Флаги: не изменяются

     Действие: if длина операнда = 16
                    reg <- [src], sreg <- [src+2]
               else
                    reg <- [src], sreg <- [src+4]

     Команда  LDS загружает  в регистры  DS и  reg указатель  из
адреса  памяти src  (формат  указателя  см. в  3.1.8). Остальные
команды  аналогичны   ей.  Reg  должен   быть  16-разрядным  или
32-разрядным регистром.

     Если  reg  является  сегментным  регистром, то производится
загрузка  данных  из  дескриптора.  При  этом  загрузка нулевого
селектора  (0000h -  0003h) в  DS,  ES,  GS или  FS не  вызывает
исключения,  но первое  же  обращение  к этому  сегменту вызовет
#GP(0).

     Загрузка   сегмeнтного   регистра   в   защищенном  режиме
сопровождается следующими проверками:

if reg = SS
     if селектор нулевой
          #GP(0);
     if индекс селектора вне границ таблицы дескрипторов
          #GP(селектор);
     if RPL селектора не равен CPL
          #GP(селектор);
     if это не сегмент данных, доступный для чтения
          #GP(селектор);
     if DPL дескриптора сегмента не равен CPL
          #GP(селектор);
     if сегмент отсутствует
          #NP(селектор);
     загрузить SS из дескриптора;
if reg = DS, ES, FS или GS
     if нулевой селектор
          загрузить селектор в регистр;
          сбросить бит правильности сегмента;
     else
          if индекс селектора вне границ таблицы дескрипторов
               #GP(селектор);
          if это не сегмент  данных или сегмент кодов, доступный
          для чтения
               #GP(селектор);
          if сегмент данных или неразделяемый сегмент кодов
               if max(RPL,CPL) > DPL сегмента
                  #GP(селектор);
          if сегмент отсутствует
               #NP(селектор);
          загрузить регистр из дескриптора;

     Исключения в защищенном режиме:

     #GP(0) при загрузке нулевого селектора в SS;
     #GP(0),  если  недопустимый   исполнительный  адрес  reg  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     src должен быть адресом памяти;
     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     Примеры:

     LDS  EBX,DS:[0]
     LES  DI,table[BX]

     3.2.1.5. Засылка в стек

     PUSH  src                           Флаги: не изменяются

     Действие: if длина операнда = 16
                  eSP <- eSP-2, [SS:eSP] <- src
               else
                  eSP <- eSP-4, [SS:eSP] <- src

     Вталкивает src  в стек, т.  е. уменьшает eSP  на 2 или  4 и
засылает  src   по  адресу  SS:eSP.  Src   может  быть  16-  или
32-разрядным регистром,  сегментным регистром, ссылкой  к памяти
или непосредственным  данным (байт, слово,  двойное слово). Даже
если src  указывает на байт  памяти, в стек  вталкивается слово.
Примеры:

     PUSH EAX
     PUSH CS
     PUSH ES:[4]
     PUSH 0

     Мы не рекомендуем использовать команду  PUSH eSP, т. к. она
по-разному исполняется  на МП 8086  и 80826/80386. 8086  сначала
уменьшает  eSP, а  затем вталкивает  его в  стек; 80286  и 80386
вталкивают eSP  в стек, а  затем уменьшают его.  Для того, чтобы
программа не зависела от  процессора следует использовать вместо
PUSH eSP следующий фрагмент:

     PUSH BP
     MOV  BP,eSP
     XCHG BP,[BP]

     Исключения в защищенном режиме:

     #SS(0), если новое значение eSP вне границ сегмента стека;
     #GP(0),  если  недопустимый   исполнительный  адрес  reg  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Если eSP равно 1, останов процессора.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.1.6. Выборка из стека

     POP  dst                           Флаги: не изменяются

     Действие: dst <- [SS:eSP],
               if длина dst = 16
                    eSP <- eSP+2
               else
                    eSP <- eSP+4

     Выталкивает вершину стека в dst,  т. е. пересылает слово из
SS:eSP в  src и увеличивает eSP  на 2 или 4.  Dst может быть 16-
или 32-разрядным регистром, сегментным  регистром (кроме CS) или
ссылкой к памяти. Примеры:

     POP  EAX
     POP  DS
     POP  FS:[2]

     Если  dst  является  сегментным  регистром, то производится
загрузка  данных  из  дескриптора.  При  этом  загрузка нулевого
селектора  (0000h -  0003h) в  DS,  ES,  GS или  FS не  вызывает
исключения,  но первое  же  обращение  к этому  сегменту вызовет
#GP(0).

     Команда  POP SS  запрещает все  прерывания, включая  NMI до
завершения следующей  команды. Это позволяет  следующей командой
выполнить POP eSP. Однако, предпочтительней использовать команду
LSS eSP,src.

     Загрузка   сегмeнтного   регистра   в   защищенном  режиме
сопровождается следующими проверками:

if dst = SS
     if селектор нулевой
          #GP(0);
     if индекс селектора вне границ таблицы дескрипторов
          #GP(селектор);
     if RPL селектора не равен CPL
          #GP(селектор);
     if это не сегмент данных, доступный для чтения
          #GP(селектор);
     if DPL дескриптора сегмента не равен CPL
          #GP(селектор);
     if сегмент отсутствует
          #NP(селектор);
     загрузить SS из дескриптора;
if dst = DS, ES, FS или GS
     if нулевой селектор
          загрузить селектор в регистр;
          сбросить бит правильности сегмента;
     else
          if индекс селектора вне границ таблицы дескрипторов
               #GP(селектор);
          if это не сегмент  данных или сегмент кодов, доступный
          для чтения
               #GP(селектор);
          if сегмент данных или неразделяемый сегмент кодов
               if max(RPL,CPL) > DPL сегмента
                  #GP(селектор);
          if сегмент отсутствует
               #NP(селектор);
          загрузить регистр из дескриптора;

     Исключения в защищенном режиме:

     #GP, #SS и #NP при загрузке сегментного регистра;
     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.1.7. Сохранение регистров в стеке

     PUSHA                               Флаги: не изменяются

     Действие: Temp <- SP
               PUSH AX
               PUSH CX
               PUSH DX
               PUSH BX
               PUSH Temp
               PUSH BP
               PUSH SI
               PUSH DI

     PUSHAD                              Флаги: не изменяются

     Действие: Temp <- ESP
               PUSH EAX
               PUSH ECX
               PUSH EDX
               PUSH EBX
               PUSH Temp
               PUSH EBP
               PUSH ESI
               PUSH EDI

     Вталкивает  в   стек  все  регистры   общего  назначения  в
указанном  порядке. Следует  отметить, что  в стек  вталкивается
значение SP, которое было до начала выполнения команды.

     Исключения в защищенном режиме:

     #SS(0), если начальный адрес стека вне границ сегмента;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Если  SP перем  выполнением команды  равен 1,  3 или  5, то
останов процессора;
     если SP был равен 7, 9, 11, 13 или 15, то Int 0Dh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.1.8. Восстановление регистров из стека

     POPA                                Флаги: не изменяются

     Действие: POP  DI
               POP  SI
               POP  BP
               POP  ...       ; SP не выталкивается!
               POP  BX
               POP  DX
               POP  CX
               POP  AX

     POPAD                               Флаги: не изменяются

     Действие: POP  EDI
               POP  ESI
               POP  EBP
               POP  ...       ; ESP не выталкивается!
               POP  EBX
               POP  EDX
               POP  ECX
               POP  EAX

     Выталкивает из стека регистры общего назначения в указанном
порядке.  Следует  отметить,  что  значение  eSP,  сохраненное в
стеке, игнорируется. Эта команда является обратной к PUSHA.

     Исключения в защищенном режиме:

     #SS(0), если начальный адрес стека вне границ сегмента;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh, если  любая  часть  операнда лежит  вне адресного
пространства от 0 до 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.


     3.2.1.9. Трансляция

     XLAT                                Флаги: не изменяются

     Действие: AL <- [eBX+AL]

     Регистр eBX должен содержать адрес таблицы трансляции, AL -
перекодируемый   байт.   Команда   XLAT   извлекает  из  таблицы
трансляции  байт с  номером AL   и заносит  его в  AL. Следующий
пример  перекодирует  десятичное  число  от  0  до  15  в  соот-
ветствующую шестнадцатиричную цифру:

     LEA  BX,hex_table
     MOV  AL,dec_digit
     XLAT
     . . .
hex_table DB   '0123456789ABCDEF'

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0), если недопустимый  исполнительный адрес в сегментах
CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.1.10. Загрузка флагов в аккумулятор

     LAHF                               Флаги: не изменяются

     Действие: AH <- FLAGS

     Загружает в регистр AH  младший байт регистра флагов. После
этой команды биты 1, 3 и 5 в AH не определены:

┌─7┬─6┬5┬─4┬3┬─2┬1┬─0┐
│SF│ZF│*│AF│*│PF│*│CF│
└──┴──┴─┴──┴─┴──┴─┴──┘

     Исключения: нет.

     3.2.1.11. Загрузка флагов из аккумулятора

     SAHF                               Флаги: O D I T S Z A P C
                                               - - - - * * * * *
     Действие: FLAGS <- AH

     Загружает регистр AH в младший байт регистра флагов. Формат
AH см. в предыдущем пункте. Исключений нет.

     3.2.1.12. Засылка флагов в стек

     PUSHF                              Флаги: не изменяются

     Действие: eSP <- eSP-2, [SS:eSP] <- FLAGS

     PUSHFD                             Флаги: не изменяются

     Действие: eSP <- eSP-4, [SS:eSP] <-EFLAGS

     Вталкивает регистр флагов  в стек, т. е. уменьшает  eSP на 2
или на 4 и засылает слово флагов по адресу SS:eSP.

     Исключения в защищенном режиме:

     #SS(0), если новое значение eSP вне границ сегмента стека;

     Исключения в реальном режиме:

     Если eSP равно 1, останов процессора.

     Исключения в виртуальном режиме:

     #GP(0), если IOPL < 3 (для поддержки эмуляции).

     3.2.1.13. Выборка флагов из стека

     POPF                               Флаги: O D I T S Z A P C
                                               * * * * * * * * *
     Действие: FLAGS <- [SS:eSP], eSP <- eSP+2

     POPFD                              Флаги: O D I T S Z A P C
                                               * * * * * * * * *
     Действие: EFLAGS <- [SS:eSP], eSP <- eSP+4

     Выталкивает флаги  из стека, т. е.  пересылает слово (POPF)
или  двойное  слово  (POPFD)  из   SS:eSP  в  регистр  флагов  и
увеличивает eSP  на 2 или  4. POPFD не  изменяет флаги VM  и RF.
IOPL изменяется только  при CPL = 0. IF  изменяется только, если
CPL <= IOPL.

     Исключения в защищенном режиме:

     #SS(0), если новое значение eSP вне границ сегмента стека;

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     #GP(0), если IOPL < 3 (для поддержки эмуляции).
.pb
     3.2.2. Арифметические операции

     3.2.2.1. Сложение

     ADD  dst,src                       Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: dst <- src+dst

     Засылает  сумму  операндов  src  и  dst  (байтов,  слов или
двойных слов) в dst. Операнды  могут двоичными целыми числами со
знаком или  без знака. Src может  быть регистром, ячейкой памяти
или  непосредственной константой,  dst -  регистром или  ячейкой
памяти.  При  сложении  непосредственного  байта  со  словом или
двойным словом его старшие разряды заполняются знаковым битом.

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     Примеры:

     ADD  AX,BX
     ADD  CL,10
     ADD  EDX,ES:[BX]
     ADD  total,AX
     ADD  sum,200h

     3.2.2.2. Сложение с переносом

     ADC  dst,src                       Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: dst <- src+dst+CF

     Засылает  сумму  операндов  src  и  dst  (байтов,  слов или
двойных слов) и флага CF  в dst. Операнды могут двоичными целыми
числами  со  знаком  или  без  знака.  Src может быть регистром,
ячейкой памяти или непосредственной  константой, dst - регистром
или  ячейкой  памяти.  При  сложении  непосредственного байта со
словом  или  двойным  словом  его  старшие  разряды  заполняются
знаковым битом.  Эта команда позволяет  складывать числа двойной
длины, например:

     MOV  EAX,op_1        ; сложить младшие слова
     ADD  EAX,op_2
     MOV  sum,EAX         ; сохранить результат
     MOV  EAX,op_1+2      ; сложить старшие слова
     ADC  EAX,op_2+2      ; с учетом переноса
     MOV  sum+2,EAX       ; и сохранить

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.3. Вычитание

     SUB  dst,src                       Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: dst <- dst-src

     Засылает разность dst-src (байтов, слов или двойных слов) в
dst. Операнды  могут двоичными целыми числами  со знаком или без
знака.   Src   может   быть   регистром,   ячейкой   памяти  или
непосредственной константой, dst - регистром или ячейкой памяти.
Примеры:

     SUB  AX,BX
     SUB  CL,10
     SUB  ЕDX,ES:[BX]
     SUB  total,AX
     SUB  sum,200h

     При   вычитании  байтовой   непосредственной  константы  из
слова-приемника перед вычитанием константа преобразуется в слово
расширением знакового бита (то же для двойного слова).

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.4. Вычитание с заемом

     SBB  dst,src                       Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: dst <- dst-src-CF

     Засылает  разность  dst-src-CF  (байтов,  слов  или двойных
слов) в  dst. Операнды могут двоичными  целыми числами со знаком
или  без знака.  Src может  быть регистром,  ячейкой памяти  или
непосредственной константой, dst - регистром или ячейкой памяти.
Эта команда позволяет вычитать числа двойной длины, например:

     MOV  EAX,op_1        ; извлечь первый операнд в DX:AX
     MOV  EDX,op_1+2
     SUB  EAX,op_2        ; вычесть второй операнд
     SBB  EDX,op_2+2      ; с учетом заема
     MOV  sum,EAX         ; и сохранить
     MOV  sum+2,EDX

     При   вычитании  байтовой   непосредственной  константы  из
слова-приемника перед вычитанием константа преобразуется в слово
расширением знакового бита (то же для двойного слова).

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.5. Увеличение на 1

     INC  dst                           Флаги: O D I T S Z A P C
                                               * - - - * * * * -
     Действие: dst <- dst+1

     Увеличивает dst (байт, слово или двойное слово) на единицу.
Dst считается беззнаковым целым и может быть 8- или 16-разрядным
регистром либо ячейкой памяти. Эта  команда не изменяет флаг CF,
поэтому   для  сложения   длинного  целого   с  единицей   нужно
использовать команды ADD и ADC. Примеры:

     INC  AX
     INC  CL
     INC  table[ЕBX]

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.6. Уменьшение на 1

     DEC  dst                           Флаги: O D I T S Z A P C
                                               * - - - * * * * -
     Действие: dst <- dst+1

     Уменьшает dst  (байт, слово или двойное  слово) на единицу.
Dst  считается  беззнаковым  целым  и  может  быть  8-,  16- или
32-разрядным  регистром  либо  ячейкой  памяти.  Эта  команда не
изменяет  флаг CF,  поэтому  для  вычитания единицы  из длинного
целого нужно использовать команды SUB и SBB. Примеры:

     DEC  AX
     DEC  CL
     DEC  table[EBX]

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.7. Сравнение

     CMP  dst,src                       Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: FLAGS <- (dst-src)

     Устанавливает флаги в соответствии с операцией dst-src. Dst
и src  не  изменяются.  Операнды   могут  байтами,  словами  или
двойными словами, двоичными целыми со  знаком или без знака. Src
может  быть  регистром,   ячейкой  памяти  или  непосредственной
константой, dst - регистром или ячейкой памяти. Примеры:

     CMP  AX,BX
     CMP  CL,10
     CMP  EDX,ES:[BX]
     CMP  total,EAX
     CMP  sum,200h

     При сравнении байтовой непосредственной константы со словом
перед  вычитанием  константа  преобразуется  в слово расширением
знакового бита (то же для двойного слова).

     Исключения в защищенном режиме:

     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.8. Обращение знака

     NEG  dst                           Флаги: O D I T S Z A P C
                                               * - - - * * * * *
     Действие: dst <- -dst

     Вычитает  dst (байт,  слово или  двойное слово)  из нуля  и
заносит в dst.  Dst считается целым со знаком и  может быть 8- ,
16-   или  32-разрядным   регистром  либо   ячейкой  памяти.  CF
сбрасывается, если dst=0, и устанавливается в остальных случаях.
Если NEG  применяется к байту -128  или слову -32768, то  dst не
изменяется и устанавливается флаг OF. Примеры:

     NEG  AX
     NEG  CL
     NEG  table[EBX]

     Исключения в защищенном режиме:

     #GP(0), если dst в сегменте только для чтения;
     #GP(0),  если  недопустимый   исполнительный  адрес  dst  в
сегментах CS, DS, ES, FS или GS;
     #SS(0), если недопустимый адрес в сегменте SS;
     #PF(код), если ошибка страницы.

     Исключения в реальном режиме:

     Int  0Dh,  если  любая  часть  операнда  лежит за пределами
адресного пространства 0 - 0FFFFh.

     Исключения в виртуальном режиме:

     Те же, что в реальном режиме;
     #PF(код) при ошибке страницы.

     3.2.2.9. Преобразование байта в слово

     CBW                                Флаги: не изменяются

     Действие: if (AL<80h) then AH <- 0 else AH <- 0FFh

     CWDE                               Флаги: не изменяются

     Действие: if (AX<80h)
                    then старшее слово EAX <- 0
                    else старшее слово EAX <- 0FFFFh

     CBW преобразует  байт AL в  слово AX расширением  знакового
бита.  AL считается  целым со  знаком. Эта  команда полезна  для
преобразования байта в слово перед делением на байт.

     CWDE преобразует  слово AX в двойное  слово EAX расширением
знакового  бита.  AX  считается  целым  со  знаком. Ср. с CWD.

     Исключения: нет.

     3.2.2.10. Преобразование слова в двойное слово

     CWD                                Флаги: не изменяются

     Действие: if (AX<8000h) then DX <- 0 else DX <- 0FFFFh

     CDQ                                Флаги: не изменяются

     Действие: if (EAX<8000h) then EDX <- 0 else EDX <- 0FFFFh

     CWD преобразует слово AX  в двойное слово DX:AX расширением
знакового  бита.  AX  считается  целым  со  знаком.  Эта команда
полезна для преобразования слова  в двойное слово перед делением
на слово. Ср. с командой CWDE.

     CDQ  преобразует  двойное  слово  EAX  в  "четверное" слово
EDX:EAX  расширением  знакового  бита.  Эта  команда полезна для
преобразования  двойного  слова  в  четверное  перед делением на
двойное слово.

     Исключения: нет.
